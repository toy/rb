var search_data = {"index":{"info":[["Addressable","lib/addressable/idna/native.rb","classes/Addressable.html"," < ","Addressable is a library for processing links and URIs. --- encoding:utf-8  ",1],["IDNA","Addressable","classes/Addressable/IDNA.html"," < ","",1],["PunycodeBadInput","Addressable::IDNA","classes/Addressable/IDNA/PunycodeBadInput.html"," < StandardError","Input is invalid. ",1],["PunycodeBigOutput","Addressable::IDNA","classes/Addressable/IDNA/PunycodeBigOutput.html"," < StandardError","Output would exceed the space provided. ",1],["PunycodeOverflow","Addressable::IDNA","classes/Addressable/IDNA/PunycodeOverflow.html"," < StandardError","Input needs wider integers to process. ",1],["Template","Addressable","classes/Addressable/Template.html"," < Object","This is an implementation of a URI template based on <a href=\"http://tinyurl.com/uritemplatedraft03\">URI",1],["InvalidTemplateOperatorError","Addressable::Template","classes/Addressable/Template/InvalidTemplateOperatorError.html"," < StandardError","Raised if an invalid template operator is used in a pattern. ",1],["InvalidTemplateValueError","Addressable::Template","classes/Addressable/Template/InvalidTemplateValueError.html"," < StandardError","Raised if an invalid template value is supplied. ",1],["MatchData","Addressable::Template","classes/Addressable/Template/MatchData.html"," < Object","This class represents the data that is extracted when a Template is matched against a URI. ",1],["TemplateOperatorAbortedError","Addressable::Template","classes/Addressable/Template/TemplateOperatorAbortedError.html"," < StandardError","Raised if an invalid template operator is used in a pattern. ",1],["URI","Addressable","classes/Addressable/URI.html"," < Object","This is an implementation of a URI parser based on <a href=\"http://www.ietf.org/rfc/rfc3986.txt\">RFC",1],["CharacterClasses","Addressable::URI","classes/Addressable/URI/CharacterClasses.html"," < ","Container for the character classes specified in <a href=\"http://www.ietf.org/rfc/rfc3986.txt\">RFC 3986</a>.",1],["InvalidURIError","Addressable::URI","classes/Addressable/URI/InvalidURIError.html"," < StandardError","Raised if something other than a uri is supplied. ",1],["VERSION","Addressable","classes/Addressable/VERSION.html"," < ","",1],["+","Addressable::URI","classes/Addressable/URI.html#M000109","(uri)","Alias for #join",2],["==","Addressable::URI","classes/Addressable/URI.html#M000119","(uri)","Returns <code>true</code> if the URI objects are equal. This method normalizes both URIs before doing",2],["===","Addressable::URI","classes/Addressable/URI.html#M000118","(uri)","Returns <code>true</code> if the URI objects are equal. This method normalizes both URIs before doing",2],["absolute?","Addressable::URI","classes/Addressable/URI.html#M000107","()","Determines if the URI is absolute. @return [TrueClass, FalseClass] <code>true</code> if the URI is absolute.",2],["authority","Addressable::URI","classes/Addressable/URI.html#M000077","()","The authority component for this URI. Combines the user, password, host, and port components. @return",2],["authority=","Addressable::URI","classes/Addressable/URI.html#M000079","(new_authority)","Sets the authority component for this URI. @param [String, #to_str] new_authority The new authority component.",2],["basename","Addressable::URI","classes/Addressable/URI.html#M000093","()","The basename, if any, of the file in the path component. @return [String] The path's basename. ",2],["captures","Addressable::Template::MatchData","classes/Addressable/Template/MatchData.html#M000009","()","Alias for #values",2],["convert_path","Addressable::URI","classes/Addressable/URI.html#M000051","(path)","Converts a path to a file scheme URI. If the path supplied is relative, it will be returned as a relative",2],["defer_validation","Addressable::URI","classes/Addressable/URI.html#M000129","(&block)","This method allows you to make several changes to a URI simultaneously, which separately would cause",2],["display_uri","Addressable::URI","classes/Addressable/URI.html#M000117","()","Creates a URI suitable for display to users. If semantic attacks are likely, the application should try",2],["dup","Addressable::URI","classes/Addressable/URI.html#M000122","()","Clones the URI object. @return [Addressable::URI] The cloned URI. ",2],["encode","Addressable::URI","classes/Addressable/URI.html#M000056","(uri, returning=String)","Percent encodes any special characters in the URI. @param [String, Addressable::URI, #to_str] uri The",2],["encode_component","Addressable::URI","classes/Addressable/URI.html#M000053","(component, character_class= CharacterClasses::RESERVED + CharacterClasses::UNRESERVED)","Percent encodes a URI component. @param [String, #to_str] component The URI component to encode. @param",2],["eql?","Addressable::URI","classes/Addressable/URI.html#M000120","(uri)","Returns <code>true</code> if the URI objects are equal. This method does NOT normalize either URI before",2],["expand","Addressable::Template","classes/Addressable/Template.html#M000016","(mapping, processor=nil)","Expands a URI template into a full URI. @param [Hash] mapping The mapping that corresponds to the pattern.",2],["expand_join_operator","Addressable::Template","classes/Addressable/Template.html#M000026","(argument, variables, mapping, partial=false)","Expands a URI Template join operator. @param [String] argument The argument to the operator. @param [Array]",2],["expand_list_operator","Addressable::Template","classes/Addressable/Template.html#M000027","(argument, variables, mapping, partial=false)","Expands a URI Template list operator. @param [String] argument The argument to the operator. @param [Array]",2],["expand_neg_operator","Addressable::Template","classes/Addressable/Template.html#M000023","(argument, variables, mapping, partial=false)","Expands a URI Template neg operator. @param [String] argument The argument to the operator. @param [Array]",2],["expand_opt_operator","Addressable::Template","classes/Addressable/Template.html#M000022","(argument, variables, mapping, partial=false)","Expands a URI Template opt operator. @param [String] argument The argument to the operator. @param [Array]",2],["expand_prefix_operator","Addressable::Template","classes/Addressable/Template.html#M000024","(argument, variables, mapping, partial=false)","Expands a URI Template prefix operator. @param [String] argument The argument to the operator. @param",2],["expand_suffix_operator","Addressable::Template","classes/Addressable/Template.html#M000025","(argument, variables, mapping, partial=false)","Expands a URI Template suffix operator. @param [String] argument The argument to the operator. @param",2],["extname","Addressable::URI","classes/Addressable/URI.html#M000094","()","The extname, if any, of the file in the path component. Empty string if there is no extension. @return",2],["extract","Addressable::Template","classes/Addressable/Template.html#M000013","(uri, processor=nil)","Extracts a mapping from the URI using a URI Template pattern. @param [Addressable::URI, #to_str] uri",2],["extract_join_operator","Addressable::Template","classes/Addressable/Template.html#M000034","(value, processor, argument, variables, mapping)","Extracts a URI Template join operator. @param [String] value The unparsed value to extract from. @param",2],["extract_list_operator","Addressable::Template","classes/Addressable/Template.html#M000035","(value, processor, argument, variables, mapping)","Extracts a URI Template list operator. @param [String] value The unparsed value to extract from. @param",2],["extract_neg_operator","Addressable::Template","classes/Addressable/Template.html#M000031","( value, processor, argument, variables, mapping)","Extracts a URI Template neg operator. @param [String] value The unparsed value to extract from. @param",2],["extract_opt_operator","Addressable::Template","classes/Addressable/Template.html#M000030","( value, processor, argument, variables, mapping)","Extracts a URI Template opt operator. @param [String] value The unparsed value to extract from. @param",2],["extract_prefix_operator","Addressable::Template","classes/Addressable/Template.html#M000032","( value, processor, argument, variables, mapping)","Extracts a URI Template prefix operator. @param [String] value The unparsed value to extract from. @param",2],["extract_suffix_operator","Addressable::Template","classes/Addressable/Template.html#M000033","( value, processor, argument, variables, mapping)","Extracts a URI Template suffix operator. @param [String] value The unparsed value to extract from. @param",2],["form_encode","Addressable::URI","classes/Addressable/URI.html#M000058","(form_values, sort=false)","Encodes a set of key/value pairs according to the rules for the <code>application/x-www-form-urlencoded</code>",2],["form_unencode","Addressable::URI","classes/Addressable/URI.html#M000059","(encoded_value)","Decodes a <code>String</code> according to the rules for the <code>application/x-www-form-urlencoded</code>",2],["fragment","Addressable::URI","classes/Addressable/URI.html#M000102","()","The fragment component for this URI. @return [String] The fragment component. ",2],["fragment=","Addressable::URI","classes/Addressable/URI.html#M000104","(new_fragment)","Sets the fragment component for this URI. @param [String, #to_str] new_fragment The new fragment component.",2],["freeze","Addressable::URI","classes/Addressable/URI.html#M000061","()","Freeze URI, initializing instance variables. @return [Addressable::URI] The frozen URI object. ",2],["hash","Addressable::URI","classes/Addressable/URI.html#M000121","()","A hash value that will make a URI equivalent to its normalized form. @return [Integer] A hash of the",2],["heuristic_parse","Addressable::URI","classes/Addressable/URI.html#M000046","(uri, hints={})","Converts an input to a URI. The input does not have to be a valid URI â€” the method will use heuristics",2],["host","Addressable::URI","classes/Addressable/URI.html#M000074","()","The host component for this URI. @return [String] The host component. ",2],["host=","Addressable::URI","classes/Addressable/URI.html#M000076","(new_host)","Sets the host component for this URI. @param [String, #to_str] new_host The new host component. ",2],["inferred_port","Addressable::URI","classes/Addressable/URI.html#M000086","()","The inferred port component for this URI. This method will normalize to the default port for the URI's",2],["inspect","Addressable::Template","classes/Addressable/Template.html#M000012","()","Returns a <tt>String</tt> representation of the Template object's state. @return [String] The Template",2],["inspect","Addressable::Template::MatchData","classes/Addressable/Template/MatchData.html#M000010","()","Returns a <tt>String</tt> representation of the MatchData's state. @return [String] The MatchData's state,",2],["inspect","Addressable::URI","classes/Addressable/URI.html#M000128","()","Returns a <code>String</code> representation of the URI object's state. @return [String] The URI object's",2],["ip_based?","Addressable::URI","classes/Addressable/URI.html#M000105","()","Determines if the scheme indicates an IP-based protocol. @return [TrueClass, FalseClass] <code>true</code>",2],["ip_based_schemes","Addressable::URI","classes/Addressable/URI.html#M000081","()","Returns an array of known ip-based schemes. These schemes typically use a similar URI form: <code>//<user>:<password>@<host>:<port>/<url-path></code>",2],["join","Addressable::URI","classes/Addressable/URI.html#M000108","(uri)","Joins two URIs together. @param [String, Addressable::URI, #to_str] The URI to join with. @return [Addressable::URI]",2],["join","Addressable::URI","classes/Addressable/URI.html#M000052","(*uris)","Joins several URIs together. @param [String, Addressable::URI, #to_str] *uris The URIs to join. @return",2],["join!","Addressable::URI","classes/Addressable/URI.html#M000110","(uri)","Destructive form of <code>join</code>. @param [String, Addressable::URI, #to_str] The URI to join with.",2],["keys","Addressable::Template","classes/Addressable/Template.html#M000018","()","Alias for #variables",2],["keys","Addressable::Template::MatchData","classes/Addressable/Template/MatchData.html#M000007","()","Alias for #variables",2],["lookup_unicode_combining_class","Addressable::IDNA","classes/Addressable/IDNA.html#M000047","(codepoint)","",2],["lookup_unicode_compatibility","Addressable::IDNA","classes/Addressable/IDNA.html#M000048","(codepoint)","",2],["lookup_unicode_composition","Addressable::IDNA","classes/Addressable/IDNA.html#M000050","(unpacked)","",2],["lookup_unicode_lowercase","Addressable::IDNA","classes/Addressable/IDNA.html#M000049","(codepoint)","",2],["match","Addressable::Template","classes/Addressable/Template.html#M000014","(uri, processor=nil)","Extracts match data from the URI using a URI Template pattern. @param [Addressable::URI, #to_str] uri",2],["merge","Addressable::URI","classes/Addressable/URI.html#M000111","(hash)","Merges a URI with a <code>Hash</code> of components. This method has different behavior from <code>join</code>.",2],["merge!","Addressable::URI","classes/Addressable/URI.html#M000112","(uri)","Destructive form of <code>merge</code>. @param [Hash, Addressable::URI, #to_hash] The components to merge",2],["new","Addressable::Template","classes/Addressable/Template.html#M000011","(pattern)","Creates a new <tt>Addressable::Template</tt> object. @param [#to_str] pattern The URI Template pattern.",2],["new","Addressable::Template::MatchData","classes/Addressable/Template/MatchData.html#M000005","(uri, template, mapping)","Creates a new MatchData object. MatchData objects should never be instantiated directly. @param [Addressable::URI]",2],["new","Addressable::URI","classes/Addressable/URI.html#M000060","(options={})","Creates a new uri object from component parts. @option [String, #to_str] scheme The scheme component.",2],["normalize","Addressable::URI","classes/Addressable/URI.html#M000115","()","Returns a normalized URI object. NOTE: This method does not attempt to fully conform to specifications.",2],["normalize!","Addressable::URI","classes/Addressable/URI.html#M000116","()","Destructively normalizes this URI object. @return [Addressable::URI] The normalized URI. @see Addressable::URI#normalize",2],["normalize_component","Addressable::URI","classes/Addressable/URI.html#M000055","(component, character_class= CharacterClasses::RESERVED + CharacterClasses::UNRESERVED)","Normalizes the encoding of a URI component. @param [String, #to_str] component The URI component to encode.",2],["normalize_path","Addressable::URI","classes/Addressable/URI.html#M000130","(path)","",2],["normalized_authority","Addressable::URI","classes/Addressable/URI.html#M000078","()","The authority component for this URI, normalized. @return [String] The authority component, normalized.",2],["normalized_encode","Addressable::URI","classes/Addressable/URI.html#M000057","(uri, returning=String)","Normalizes the encoding of a URI. Characters within a hostname are not percent encoded to allow for internationalized",2],["normalized_fragment","Addressable::URI","classes/Addressable/URI.html#M000103","()","The fragment component for this URI, normalized. @return [String] The fragment component, normalized.",2],["normalized_host","Addressable::URI","classes/Addressable/URI.html#M000075","()","The host component for this URI, normalized. @return [String] The host component, normalized. ",2],["normalized_password","Addressable::URI","classes/Addressable/URI.html#M000069","()","The password component for this URI, normalized. @return [String] The password component, normalized.",2],["normalized_path","Addressable::URI","classes/Addressable/URI.html#M000091","()","The path component for this URI, normalized. @return [String] The path component, normalized. ",2],["normalized_port","Addressable::URI","classes/Addressable/URI.html#M000084","()","The port component for this URI, normalized. @return [Integer] The port component, normalized. ",2],["normalized_query","Addressable::URI","classes/Addressable/URI.html#M000096","()","The query component for this URI, normalized. @return [String] The query component, normalized. ",2],["normalized_scheme","Addressable::URI","classes/Addressable/URI.html#M000063","()","The scheme component for this URI, normalized. @return [String] The scheme component, normalized. ",2],["normalized_site","Addressable::URI","classes/Addressable/URI.html#M000088","()","The normalized combination of components that represent a site. Combines the scheme, user, password,",2],["normalized_user","Addressable::URI","classes/Addressable/URI.html#M000066","()","The user component for this URI, normalized. @return [String] The user component, normalized. ",2],["normalized_userinfo","Addressable::URI","classes/Addressable/URI.html#M000072","()","The userinfo component for this URI, normalized. @return [String] The userinfo component, normalized.",2],["omit","Addressable::URI","classes/Addressable/URI.html#M000123","(*components)","Omits components from a URI. @param [Symbol] *components The components to be omitted. @return [Addressable::URI]",2],["omit!","Addressable::URI","classes/Addressable/URI.html#M000124","(*components)","Destructive form of omit. @param [Symbol] *components The components to be omitted. @return [Addressable::URI]",2],["ordered_variable_defaults","Addressable::Template","classes/Addressable/Template.html#M000020","()","",2],["origin","Addressable::URI","classes/Addressable/URI.html#M000080","()","The origin for this URI, serialized to ASCII, as per draft-ietf-websec-origin-00, section 5.2. @return",2],["parse","Addressable::URI","classes/Addressable/URI.html#M000042","(uri)","Returns a URI object based on the parsed string. @param [String, Addressable::URI, #to_str] uri The URI",2],["parse_template_expansion","Addressable::Template","classes/Addressable/Template.html#M000028","(capture, mapping={})","Parses a URI template expansion <tt>String</tt>. @param [String] expansion The operator <tt>String</tt>.",2],["parse_template_pattern","Addressable::Template","classes/Addressable/Template.html#M000029","(pattern, processor=nil)","Generates the <tt>Regexp</tt> that parses a template pattern. @param [String] pattern The URI template",2],["partial_expand","Addressable::Template","classes/Addressable/Template.html#M000015","(mapping, processor=nil)","Expands a URI template into another URI template. @param [Hash] mapping The mapping that corresponds",2],["password","Addressable::URI","classes/Addressable/URI.html#M000068","()","The password component for this URI. @return [String] The password component. ",2],["password=","Addressable::URI","classes/Addressable/URI.html#M000070","(new_password)","Sets the password component for this URI. @param [String, #to_str] new_password The new password component.",2],["path","Addressable::URI","classes/Addressable/URI.html#M000090","()","The path component for this URI. @return [String] The path component. ",2],["path=","Addressable::URI","classes/Addressable/URI.html#M000092","(new_path)","Sets the path component for this URI. @param [String, #to_str] new_path The new path component. ",2],["port","Addressable::URI","classes/Addressable/URI.html#M000083","()","The port component for this URI. This is the port number actually given in the URI. This does not infer",2],["port=","Addressable::URI","classes/Addressable/URI.html#M000085","(new_port)","Sets the port component for this URI. @param [String, Integer, #to_s] new_port The new port component.",2],["port_mapping","Addressable::URI","classes/Addressable/URI.html#M000082","()","Returns a hash of common IP-based schemes and their default port numbers. Adding new schemes to this",2],["punycode_adapt","Addressable::IDNA","classes/Addressable/IDNA.html#M000139","(delta, numpoints, firsttime)","Bias adaptation method ",2],["punycode_basic?","Addressable::IDNA","classes/Addressable/IDNA.html#M000135","(codepoint)","",2],["punycode_decode","Addressable::IDNA","classes/Addressable/IDNA.html#M000001","(value)","",2],["punycode_decode","Addressable::IDNA","classes/Addressable/IDNA.html#M000134","(punycode)","",2],["punycode_decode_digit","Addressable::IDNA","classes/Addressable/IDNA.html#M000138","(codepoint)","Returns the numeric value of a basic codepoint (for use in representing integers) in the range 0 to base",2],["punycode_delimiter?","Addressable::IDNA","classes/Addressable/IDNA.html#M000136","(codepoint)","",2],["punycode_encode","Addressable::IDNA","classes/Addressable/IDNA.html#M000133","(unicode)","",2],["punycode_encode","Addressable::IDNA","classes/Addressable/IDNA.html#M000000","(value)","",2],["punycode_encode_digit","Addressable::IDNA","classes/Addressable/IDNA.html#M000137","(d)","",2],["query","Addressable::URI","classes/Addressable/URI.html#M000095","()","The query component for this URI. @return [String] The query component. ",2],["query=","Addressable::URI","classes/Addressable/URI.html#M000097","(new_query)","Sets the query component for this URI. @param [String, #to_str] new_query The new query component. ",2],["query_values","Addressable::URI","classes/Addressable/URI.html#M000098","(options={})","Converts the query component to a Hash value. @option [Symbol] notation May be one of <code>:flat</code>,",2],["query_values=","Addressable::URI","classes/Addressable/URI.html#M000099","(new_query_values)","Sets the query component for this URI from a Hash object. This method produces a query string using the",2],["relative?","Addressable::URI","classes/Addressable/URI.html#M000106","()","Determines if the URI is relative. @return [TrueClass, FalseClass] <code>true</code> if the URI is relative.",2],["replace_self","Addressable::URI","classes/Addressable/URI.html#M000132","(uri)","Replaces the internal state of self with the specified URI's state. Used in destructive operations to",2],["request_uri","Addressable::URI","classes/Addressable/URI.html#M000100","()","The HTTP request URI for this URI.  This is the path and the query string. @return [String] The request",2],["request_uri=","Addressable::URI","classes/Addressable/URI.html#M000101","(new_request_uri)","Sets the HTTP request URI for this URI. @param [String, #to_str] new_request_uri The new HTTP request",2],["route_from","Addressable::URI","classes/Addressable/URI.html#M000113","(uri)","Returns the shortest normalized relative form of this URI that uses the supplied URI as a base for resolution.",2],["route_to","Addressable::URI","classes/Addressable/URI.html#M000114","(uri)","Returns the shortest normalized relative form of the supplied URI that uses this URI as a base for resolution.",2],["scheme","Addressable::URI","classes/Addressable/URI.html#M000062","()","The scheme component for this URI. @return [String] The scheme component. ",2],["scheme=","Addressable::URI","classes/Addressable/URI.html#M000064","(new_scheme)","Sets the scheme component for this URI. @param [String, #to_str] new_scheme The new scheme component.",2],["site","Addressable::URI","classes/Addressable/URI.html#M000087","()","The combination of components that represent a site. Combines the scheme, user, password, host, and port",2],["site=","Addressable::URI","classes/Addressable/URI.html#M000089","(new_site)","Sets the site value for this URI. @param [String, #to_str] new_site The new site value. ",2],["to_ascii","Addressable::IDNA","classes/Addressable/IDNA.html#M000036","(input)","Converts from a Unicode internationalized domain name to an ASCII domain name as described in RFC 3490.",2],["to_ascii","Addressable::IDNA","classes/Addressable/IDNA.html#M000003","(value)","",2],["to_hash","Addressable::URI","classes/Addressable/URI.html#M000127","()","Returns a Hash of the URI components. @return [Hash] The URI as a <code>Hash</code> of components. ",2],["to_s","Addressable::URI","classes/Addressable/URI.html#M000125","()","Converts the URI to a <code>String</code>. @return [String] The URI's <code>String</code> representation.",2],["to_str","Addressable::URI","classes/Addressable/URI.html#M000126","()","Alias for #to_s",2],["to_unicode","Addressable::IDNA","classes/Addressable/IDNA.html#M000037","(input)","Converts from an ASCII domain name to a Unicode internationalized domain name as described in RFC 3490.",2],["to_unicode","Addressable::IDNA","classes/Addressable/IDNA.html#M000004","(value)","",2],["transform_mapping","Addressable::Template","classes/Addressable/Template.html#M000021","(mapping, processor=nil)","Transforms a mapping so that values can be substituted into the template. @param [Hash] mapping The mapping",2],["unencode","Addressable::URI","classes/Addressable/URI.html#M000054","(uri, returning=String)","Unencodes any percent encoded characters within a URI component. This method may be used for unencoding",2],["unicode_compose","Addressable::IDNA","classes/Addressable/IDNA.html#M000040","(unpacked)","",2],["unicode_compose_pair","Addressable::IDNA","classes/Addressable/IDNA.html#M000041","(ch_one, ch_two)","",2],["unicode_decompose","Addressable::IDNA","classes/Addressable/IDNA.html#M000044","(unpacked)","",2],["unicode_decompose_hangul","Addressable::IDNA","classes/Addressable/IDNA.html#M000045","(codepoint)","",2],["unicode_downcase","Addressable::IDNA","classes/Addressable/IDNA.html#M000039","(input)","Unicode aware downcase method. @api private @param [String] input The input string. @return [String]",2],["unicode_normalize_kc","Addressable::IDNA","classes/Addressable/IDNA.html#M000002","(value)","",2],["unicode_normalize_kc","Addressable::IDNA","classes/Addressable/IDNA.html#M000038","(input)","Unicode normalization form KC. ",2],["unicode_sort_canonical","Addressable::IDNA","classes/Addressable/IDNA.html#M000043","(unpacked)","",2],["user","Addressable::URI","classes/Addressable/URI.html#M000065","()","The user component for this URI. @return [String] The user component. ",2],["user=","Addressable::URI","classes/Addressable/URI.html#M000067","(new_user)","Sets the user component for this URI. @param [String, #to_str] new_user The new user component. ",2],["userinfo","Addressable::URI","classes/Addressable/URI.html#M000071","()","The userinfo component for this URI. Combines the user and password components. @return [String] The",2],["userinfo=","Addressable::URI","classes/Addressable/URI.html#M000073","(new_userinfo)","Sets the userinfo component for this URI. @param [String, #to_str] new_userinfo The new userinfo component.",2],["validate","Addressable::URI","classes/Addressable/URI.html#M000131","()","Ensures that the URI is valid. ",2],["values","Addressable::Template::MatchData","classes/Addressable/Template/MatchData.html#M000008","()","@return [Array] The list of values that were captured by the Template. Note that this list will include",2],["variable_defaults","Addressable::Template","classes/Addressable/Template.html#M000019","()","Returns a mapping of variables to their default values specified in the template. Variables without defaults",2],["variables","Addressable::Template","classes/Addressable/Template.html#M000017","()","Returns an Array of variables used within the template pattern. The variables are listed in the Array",2],["variables","Addressable::Template::MatchData","classes/Addressable/Template/MatchData.html#M000006","()","@return [Array] The list of variables that were present in the Template. Note that this list will include",2],["CHANGELOG","files/CHANGELOG.html","files/CHANGELOG.html","","## Addressable 2.2.6 - changed the way ambiguous paths are handled - fixed bug with frozen URIs - https",3],["LICENSE","files/LICENSE.html","files/LICENSE.html","","                               Apache License                         Version 2.0, January 2004     ",3],["README.md","files/README_md.html","files/README_md.html","","# Addressable  <dl>   <dt>Homepage</dt><dd><a href=\"http://addressable.rubyforge.org/\">addressable.rubyforge.org</a></dd>",3],["idna.rb","files/lib/addressable/idna_rb.html","files/lib/addressable/idna_rb.html","","encoding:utf-8  ",3],["native.rb","files/lib/addressable/idna/native_rb.html","files/lib/addressable/idna/native_rb.html","","encoding:utf-8  ",3],["pure.rb","files/lib/addressable/idna/pure_rb.html","files/lib/addressable/idna/pure_rb.html","","encoding:utf-8  ",3],["template.rb","files/lib/addressable/template_rb.html","files/lib/addressable/template_rb.html","","encoding:utf-8  ",3],["uri.rb","files/lib/addressable/uri_rb.html","files/lib/addressable/uri_rb.html","","encoding:utf-8  ",3],["version.rb","files/lib/addressable/version_rb.html","files/lib/addressable/version_rb.html","","encoding:utf-8  ",3]],"searchIndex":["addressable","idna","punycodebadinput","punycodebigoutput","punycodeoverflow","template","invalidtemplateoperatorerror","invalidtemplatevalueerror","matchdata","templateoperatorabortederror","uri","characterclasses","invalidurierror","version","+()","==()","===()","absolute?()","authority()","authority=()","basename()","captures()","convert_path()","defer_validation()","display_uri()","dup()","encode()","encode_component()","eql?()","expand()","expand_join_operator()","expand_list_operator()","expand_neg_operator()","expand_opt_operator()","expand_prefix_operator()","expand_suffix_operator()","extname()","extract()","extract_join_operator()","extract_list_operator()","extract_neg_operator()","extract_opt_operator()","extract_prefix_operator()","extract_suffix_operator()","form_encode()","form_unencode()","fragment()","fragment=()","freeze()","hash()","heuristic_parse()","host()","host=()","inferred_port()","inspect()","inspect()","inspect()","ip_based?()","ip_based_schemes()","join()","join()","join!()","keys()","keys()","lookup_unicode_combining_class()","lookup_unicode_compatibility()","lookup_unicode_composition()","lookup_unicode_lowercase()","match()","merge()","merge!()","new()","new()","new()","normalize()","normalize!()","normalize_component()","normalize_path()","normalized_authority()","normalized_encode()","normalized_fragment()","normalized_host()","normalized_password()","normalized_path()","normalized_port()","normalized_query()","normalized_scheme()","normalized_site()","normalized_user()","normalized_userinfo()","omit()","omit!()","ordered_variable_defaults()","origin()","parse()","parse_template_expansion()","parse_template_pattern()","partial_expand()","password()","password=()","path()","path=()","port()","port=()","port_mapping()","punycode_adapt()","punycode_basic?()","punycode_decode()","punycode_decode()","punycode_decode_digit()","punycode_delimiter?()","punycode_encode()","punycode_encode()","punycode_encode_digit()","query()","query=()","query_values()","query_values=()","relative?()","replace_self()","request_uri()","request_uri=()","route_from()","route_to()","scheme()","scheme=()","site()","site=()","to_ascii()","to_ascii()","to_hash()","to_s()","to_str()","to_unicode()","to_unicode()","transform_mapping()","unencode()","unicode_compose()","unicode_compose_pair()","unicode_decompose()","unicode_decompose_hangul()","unicode_downcase()","unicode_normalize_kc()","unicode_normalize_kc()","unicode_sort_canonical()","user()","user=()","userinfo()","userinfo=()","validate()","values()","variable_defaults()","variables()","variables()","changelog","license","readme.md","idna.rb","native.rb","pure.rb","template.rb","uri.rb","version.rb"],"longSearchIndex":["lib/addressable/version.rb","addressable","addressable::idna","addressable::idna","addressable::idna","addressable","addressable::template","addressable::template","addressable::template","addressable::template","addressable","addressable::uri","addressable::uri","addressable","addressable::uri","addressable::uri","addressable::uri","addressable::uri","addressable::uri","addressable::uri","addressable::uri","addressable::template::matchdata","addressable::uri","addressable::uri","addressable::uri","addressable::uri","addressable::uri","addressable::uri","addressable::uri","addressable::template","addressable::template","addressable::template","addressable::template","addressable::template","addressable::template","addressable::template","addressable::uri","addressable::template","addressable::template","addressable::template","addressable::template","addressable::template","addressable::template","addressable::template","addressable::uri","addressable::uri","addressable::uri","addressable::uri","addressable::uri","addressable::uri","addressable::uri","addressable::uri","addressable::uri","addressable::uri","addressable::template","addressable::template::matchdata","addressable::uri","addressable::uri","addressable::uri","addressable::uri","addressable::uri","addressable::uri","addressable::template","addressable::template::matchdata","addressable::idna","addressable::idna","addressable::idna","addressable::idna","addressable::template","addressable::uri","addressable::uri","addressable::template","addressable::template::matchdata","addressable::uri","addressable::uri","addressable::uri","addressable::uri","addressable::uri","addressable::uri","addressable::uri","addressable::uri","addressable::uri","addressable::uri","addressable::uri","addressable::uri","addressable::uri","addressable::uri","addressable::uri","addressable::uri","addressable::uri","addressable::uri","addressable::uri","addressable::template","addressable::uri","addressable::uri","addressable::template","addressable::template","addressable::template","addressable::uri","addressable::uri","addressable::uri","addressable::uri","addressable::uri","addressable::uri","addressable::uri","addressable::idna","addressable::idna","addressable::idna","addressable::idna","addressable::idna","addressable::idna","addressable::idna","addressable::idna","addressable::idna","addressable::uri","addressable::uri","addressable::uri","addressable::uri","addressable::uri","addressable::uri","addressable::uri","addressable::uri","addressable::uri","addressable::uri","addressable::uri","addressable::uri","addressable::uri","addressable::uri","addressable::idna","addressable::idna","addressable::uri","addressable::uri","addressable::uri","addressable::idna","addressable::idna","addressable::template","addressable::uri","addressable::idna","addressable::idna","addressable::idna","addressable::idna","addressable::idna","addressable::idna","addressable::idna","addressable::idna","addressable::uri","addressable::uri","addressable::uri","addressable::uri","addressable::uri","addressable::template::matchdata","addressable::template","addressable::template","addressable::template::matchdata","files/changelog.html","files/license.html","files/readme_md.html","files/lib/addressable/idna_rb.html","files/lib/addressable/idna/native_rb.html","files/lib/addressable/idna/pure_rb.html","files/lib/addressable/template_rb.html","files/lib/addressable/uri_rb.html","files/lib/addressable/version_rb.html"]}}