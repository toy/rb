var search_data = {"index":{"info":[["OpenID","Rack","classes/Rack/OpenID.html"," < Object","A Rack middleware that provides a more HTTPish API around the ruby-openid library. You trigger an OpenID",1],["SimpleAuth","Rack::OpenID","classes/Rack/OpenID/SimpleAuth.html"," < Object","A simple OpenID middleware that restricts access to a single identifier. use Rack::OpenID::SimpleAuth,",1],["add_attribute_exchange_fields","Rack::OpenID","classes/Rack/OpenID.html#M000026","(oidreq, fields)","",2],["add_oauth_fields","Rack::OpenID","classes/Rack/OpenID.html#M000027","(oidreq, fields)","",2],["add_simple_registration_fields","Rack::OpenID","classes/Rack/OpenID.html#M000025","(oidreq, fields)","",2],["authenticate_session","Rack::OpenID::SimpleAuth","classes/Rack/OpenID/SimpleAuth.html#M000006","(env)","",2],["authentication_request","Rack::OpenID::SimpleAuth","classes/Rack/OpenID/SimpleAuth.html#M000010","()","",2],["begin_authentication","Rack::OpenID","classes/Rack/OpenID.html#M000016","(env, qs)","",2],["build_header","Rack::OpenID","classes/Rack/OpenID.html#M000012","(params = {})","Helper method for building the \"WWW-Authenticate\" header value. Rack::OpenID.build_header(:identifier",2],["call","Rack::OpenID","classes/Rack/OpenID.html#M000015","(env)","Standard Rack +call+ dispatch that accepts an +env+ and returns a <tt>[status, header, body]</tt> response.",2],["call","Rack::OpenID::SimpleAuth","classes/Rack/OpenID/SimpleAuth.html#M000002","(env)","",2],["complete_authentication","Rack::OpenID","classes/Rack/OpenID.html#M000017","(env)","",2],["default_store","Rack::OpenID","classes/Rack/OpenID.html#M000028","()","",2],["flatten_params","Rack::OpenID","classes/Rack/OpenID.html#M000018","(params)","",2],["new","Rack::OpenID","classes/Rack/OpenID.html#M000014","(app, store = nil)","Initialize middleware with application and optional OpenID::Store. If no store is given, OpenID::Store::Memory",2],["new","Rack::OpenID::SimpleAuth","classes/Rack/OpenID/SimpleAuth.html#M000001","(app, identifier)","",2],["new","Rack::OpenID::SimpleAuth","classes/Rack/OpenID/SimpleAuth.html#M000000","(*args)","",2],["open_id_redirect_url","Rack::OpenID","classes/Rack/OpenID.html#M000024","(req, oidreq, trust_root, return_to, method, immediate)","",2],["override_request_method","Rack::OpenID","classes/Rack/OpenID.html#M000019","(env, method)","",2],["parse_header","Rack::OpenID","classes/Rack/OpenID.html#M000013","(str)","Helper method for parsing \"WWW-Authenticate\" header values into a hash. Rack::OpenID.parse_header(\"OpenID",2],["raise_session_error","Rack::OpenID::SimpleAuth","classes/Rack/OpenID/SimpleAuth.html#M000004","()","",2],["realm_url","Rack::OpenID","classes/Rack/OpenID.html#M000021","(req)","",2],["redirect_to","Rack::OpenID","classes/Rack/OpenID.html#M000023","(url)","",2],["redirect_to","Rack::OpenID::SimpleAuth","classes/Rack/OpenID/SimpleAuth.html#M000009","(url)","",2],["request_url","Rack::OpenID","classes/Rack/OpenID.html#M000022","(req)","",2],["requested_url","Rack::OpenID::SimpleAuth","classes/Rack/OpenID/SimpleAuth.html#M000008","(env)","",2],["sanitize_query_string","Rack::OpenID","classes/Rack/OpenID.html#M000020","(env)","",2],["session","Rack::OpenID::SimpleAuth","classes/Rack/OpenID/SimpleAuth.html#M000003","(env)","",2],["session_authenticated?","Rack::OpenID::SimpleAuth","classes/Rack/OpenID/SimpleAuth.html#M000005","(env)","",2],["successful_response?","Rack::OpenID::SimpleAuth","classes/Rack/OpenID/SimpleAuth.html#M000007","(env)","",2],["timeout_protection_from_identity_server","Rack::OpenID","classes/Rack/OpenID.html#M000029","()","",2],["www_authenticate_header","Rack::OpenID::SimpleAuth","classes/Rack/OpenID/SimpleAuth.html#M000011","()","",2],["LICENSE","files/LICENSE.html","files/LICENSE.html","","Copyright (c) 2010 Joshua Peek  Permission is hereby granted, free of charge, to any person obtaining",3],["README.rdoc","files/README_rdoc.html","files/README_rdoc.html","","= Rack::OpenID  Provides a more HTTPish API around the ruby-openid library.  === Usage  You trigger an",3],["openid.rb","files/lib/rack/openid_rb.html","files/lib/rack/openid_rb.html","","",3],["simple_auth.rb","files/lib/rack/openid/simple_auth_rb.html","files/lib/rack/openid/simple_auth_rb.html","","",3]],"searchIndex":["openid","simpleauth","add_attribute_exchange_fields()","add_oauth_fields()","add_simple_registration_fields()","authenticate_session()","authentication_request()","begin_authentication()","build_header()","call()","call()","complete_authentication()","default_store()","flatten_params()","new()","new()","new()","open_id_redirect_url()","override_request_method()","parse_header()","raise_session_error()","realm_url()","redirect_to()","redirect_to()","request_url()","requested_url()","sanitize_query_string()","session()","session_authenticated?()","successful_response?()","timeout_protection_from_identity_server()","www_authenticate_header()","license","readme.rdoc","openid.rb","simple_auth.rb"],"longSearchIndex":["rack","rack::openid","rack::openid","rack::openid","rack::openid","rack::openid::simpleauth","rack::openid::simpleauth","rack::openid","rack::openid","rack::openid","rack::openid::simpleauth","rack::openid","rack::openid","rack::openid","rack::openid","rack::openid::simpleauth","rack::openid::simpleauth","rack::openid","rack::openid","rack::openid","rack::openid::simpleauth","rack::openid","rack::openid","rack::openid::simpleauth","rack::openid","rack::openid::simpleauth","rack::openid","rack::openid::simpleauth","rack::openid::simpleauth","rack::openid::simpleauth","rack::openid","rack::openid::simpleauth","files/license.html","files/readme_rdoc.html","files/lib/rack/openid_rb.html","files/lib/rack/openid/simple_auth_rb.html"]}}