var search_data = {"index":{"info":[["Net","lib/net/scp/errors.rb","classes/Net.html"," < ","",1],["SCP","Net","classes/Net/SCP.html"," < Object","Net::SCP implements the SCP (Secure CoPy) client protocol, allowing Ruby programs to securely and programmatically",1],["Download","Net::SCP","classes/Net/SCP/Download.html"," < ","This module implements the state machine for downloading information from a remote server. It exposes",1],["Error","Net::SCP","classes/Net/SCP/Error.html"," < RuntimeError","",1],["Upload","Net::SCP","classes/Net/SCP/Upload.html"," < ","This module implements the state machine for uploading information to a remote server. It exposes no",1],["Version","Net::SCP","classes/Net/SCP/Version.html"," < Net::SSH::Version","Describes the current version of the Net::SCP library. ",1],["SSH","Net","classes/Net/SSH.html"," < ","",1],["Connection","Net::SSH","classes/Net/SSH/Connection.html"," < ","",1],["Session","Net::SSH::Connection","classes/Net/SSH/Connection/Session.html"," < Object","",1],["URI","lib/uri/open-scp.rb","classes/URI.html"," < ","",1],["SCP","URI","classes/URI/SCP.html"," < Generic","",1],["await_response","Net::SCP","classes/Net/SCP.html#M000033","(channel, next_state)","Causes the state machine to enter the \"await response\" state, where things just pause until the server",2],["await_response","Net::SCP","classes/Net/SCP.html#M000062","(channel, next_state)","Causes the state machine to enter the \"await response\" state, where things just pause until the server",2],["await_response_state","Net::SCP","classes/Net/SCP.html#M000063","(channel)","The action invoked while the state machine remains in the \"await response\" state. As long as there is",2],["await_response_state","Net::SCP","classes/Net/SCP.html#M000034","(channel)","The action invoked while the state machine remains in the \"await response\" state. As long as there is",2],["buffer_open","URI::SCP","classes/URI/SCP.html#M000052","(buf, proxy, open_options)","",2],["buffer_open","URI::SCP","classes/URI/SCP.html#M000015","(buf, proxy, open_options)","",2],["download","Net::SCP","classes/Net/SCP.html#M000026","(remote, local, options={}, &progress)","Inititiate a synchronous (non-blocking) download from +remote+ to +local+. The following options are",2],["download","Net::SCP","classes/Net/SCP.html#M000056","(remote, local, options={}, &progress)","Inititiate a synchronous (non-blocking) download from +remote+ to +local+. The following options are",2],["download!","Net::SCP","classes/Net/SCP.html#M000020","(host, username, remote, local=nil, options={}, &progress)","Starts up a new SSH connection using the +host+ and +username+ parameters, instantiates a new SCP session",2],["download!","Net::SCP","classes/Net/SCP.html#M000051","(host, username, remote, local=nil, options={}, &progress)","Starts up a new SSH connection using the +host+ and +username+ parameters, instantiates a new SCP session",2],["download!","Net::SCP","classes/Net/SCP.html#M000058","(remote, local=nil, options={}, &progress)","Same as #download, but blocks until the download finishes. Identical to calling #download and then calling",2],["download!","Net::SCP","classes/Net/SCP.html#M000027","(remote, local=nil, options={}, &progress)","Same as #download, but blocks until the download finishes. Identical to calling #download and then calling",2],["download_start_state","Net::SCP::Download","classes/Net/SCP/Download.html#M000000","(channel)","This is the starting state for the download state machine. The #start_command method puts the state machine",2],["download_start_state","Net::SCP::Download","classes/Net/SCP/Download.html#M000022","(channel)","This is the starting state for the download state machine. The #start_command method puts the state machine",2],["finish_read_state","Net::SCP::Download","classes/Net/SCP/Download.html#M000005","(channel)","Finishes off the read, sets the times for the file (if any), and then jumps to either #finish_state (for",2],["finish_read_state","Net::SCP::Download","classes/Net/SCP/Download.html#M000031","(channel)","Finishes off the read, sets the times for the file (if any), and then jumps to either #finish_state (for",2],["finish_state","Net::SCP","classes/Net/SCP.html#M000064","(channel)","The action invoked when the state machine is in the \"finish\" state. It just tells the server not to expect",2],["finish_state","Net::SCP","classes/Net/SCP.html#M000036","(channel)","The action invoked when the state machine is in the \"finish\" state. It just tells the server not to expect",2],["new","Net::SCP","classes/Net/SCP.html#M000053","(session)","Creates a new Net::SCP session on top of the given Net::SSH +session+ object. ",2],["new","Net::SCP","classes/Net/SCP.html#M000021","(session)","Creates a new Net::SCP session on top of the given Net::SSH +session+ object. ",2],["new","URI::SCP","classes/URI/SCP.html#M000017","(*args)","",2],["new","URI::SCP","classes/URI/SCP.html#M000059","(*args)","",2],["new2","URI::SCP","classes/URI/SCP.html#M000016","(user, password, host, port, path, query)","",2],["new2","URI::SCP","classes/URI/SCP.html#M000057","(user, password, host, port, path, query)","",2],["next_item_state","Net::SCP::Upload","classes/Net/SCP/Upload.html#M000012","(channel)","Checks the work queue to see what needs to be done next. If there is nothing to do, calls Net::SCP#finish_state.",2],["next_item_state","Net::SCP::Upload","classes/Net/SCP/Upload.html#M000046","(channel)","Checks the work queue to see what needs to be done next. If there is nothing to do, calls Net::SCP#finish_state.",2],["parse_directive","Net::SCP::Download","classes/Net/SCP/Download.html#M000032","(text)","Parses the given +text+ to extract which SCP directive it contains. It then returns a hash with at least",2],["parse_directive","Net::SCP::Download","classes/Net/SCP/Download.html#M000007","(text)","Parses the given +text+ to extract which SCP directive it contains. It then returns a hash with at least",2],["preserve_attributes_if_requested","Net::SCP::Upload","classes/Net/SCP/Upload.html#M000014","(channel)","If the :preserve option is set, send a 'T' directive and wait for the server to respond before proceeding",2],["preserve_attributes_if_requested","Net::SCP::Upload","classes/Net/SCP/Upload.html#M000048","(channel)","If the :preserve option is set, send a 'T' directive and wait for the server to respond before proceeding",2],["progress_callback","Net::SCP","classes/Net/SCP.html#M000037","(channel, name, sent, total)","Invoked to report progress back to the client. If a callback was not set, this does nothing. ",2],["progress_callback","Net::SCP","classes/Net/SCP.html#M000065","(channel, name, sent, total)","Invoked to report progress back to the client. If a callback was not set, this does nothing. ",2],["read_data_state","Net::SCP::Download","classes/Net/SCP/Download.html#M000003","(channel)","Reads data from the channel for as long as there is data remaining to be read. As soon as there is no",2],["read_data_state","Net::SCP::Download","classes/Net/SCP/Download.html#M000029","(channel)","Reads data from the channel for as long as there is data remaining to be read. As soon as there is no",2],["read_directive_state","Net::SCP::Download","classes/Net/SCP/Download.html#M000001","(channel)","This state parses the next full line (up to a new-line) for the next directive. (See the SCP protocol",2],["read_directive_state","Net::SCP::Download","classes/Net/SCP/Download.html#M000025","(channel)","This state parses the next full line (up to a new-line) for the next directive. (See the SCP protocol",2],["read_directory","Net::SCP::Download","classes/Net/SCP/Download.html#M000009","(channel, directive)","Sets the new directory as the current directory, creates the directory if it does not exist, and then",2],["read_directory","Net::SCP::Download","classes/Net/SCP/Download.html#M000035","(channel, directive)","Sets the new directory as the current directory, creates the directory if it does not exist, and then",2],["read_file","Net::SCP::Download","classes/Net/SCP/Download.html#M000040","(channel, directive)","Opens the given file locally, and switches to #read_data_state to do the actual read. ",2],["read_file","Net::SCP::Download","classes/Net/SCP/Download.html#M000011","(channel, directive)","Opens the given file locally, and switches to #read_data_state to do the actual read. ",2],["scp","Net::SSH::Connection::Session","classes/Net/SSH/Connection/Session.html#M000039","()","Provides a convenient way to initialize a SCP session given a Net::SSH session. Returns the Net::SCP",2],["scp","Net::SSH::Connection::Session","classes/Net/SSH/Connection/Session.html#M000067","()","Provides a convenient way to initialize a SCP session given a Net::SSH session. Returns the Net::SCP",2],["scp_command","Net::SCP","classes/Net/SCP.html#M000060","(mode, options)","Constructs the scp command line needed to initiate and SCP session for the given +mode+ (:upload or :download)",2],["scp_command","Net::SCP","classes/Net/SCP.html#M000028","(mode, options)","Constructs the scp command line needed to initiate and SCP session for the given +mode+ (:upload or :download)",2],["send_data_state","Net::SCP::Upload","classes/Net/SCP/Upload.html#M000045","(channel)","If any data remains to be transferred from the current file, sends it. Otherwise, sends a 0-byte and",2],["send_data_state","Net::SCP::Upload","classes/Net/SCP/Upload.html#M000010","(channel)","If any data remains to be transferred from the current file, sends it. Otherwise, sends a 0-byte and",2],["set_current","Net::SCP::Upload","classes/Net/SCP/Upload.html#M000047","(channel, path)","Sets the given +path+ as the new current item to upload. ",2],["set_current","Net::SCP::Upload","classes/Net/SCP/Upload.html#M000013","(channel, path)","Sets the given +path+ as the new current item to upload. ",2],["shellescape","Net::SCP","classes/Net/SCP.html#M000038","(str)","Imported from ruby 1.9.2 shellwords.rb ",2],["shellescape","Net::SCP","classes/Net/SCP.html#M000066","(str)","Imported from ruby 1.9.2 shellwords.rb ",2],["start","Net::SCP","classes/Net/SCP.html#M000018","(host, username, options={})","Starts up a new SSH connection and instantiates a new SCP session on  top of it. If a block is given,",2],["start","Net::SCP","classes/Net/SCP.html#M000049","(host, username, options={})","Starts up a new SSH connection and instantiates a new SCP session on  top of it. If a block is given,",2],["start_command","Net::SCP","classes/Net/SCP.html#M000030","(mode, local, remote, options={}, &callback)","Opens a new SSH channel and executes the necessary SCP command over it (see #scp_command). It then sets",2],["start_command","Net::SCP","classes/Net/SCP.html#M000061","(mode, local, remote, options={}, &callback)","Opens a new SSH channel and executes the necessary SCP command over it (see #scp_command). It then sets",2],["upload","Net::SCP","classes/Net/SCP.html#M000023","(local, remote, options={}, &progress)","Inititiate a synchronous (non-blocking) upload from +local+ to +remote+. The following options are recognized:",2],["upload","Net::SCP","classes/Net/SCP.html#M000054","(local, remote, options={}, &progress)","Inititiate a synchronous (non-blocking) upload from +local+ to +remote+. The following options are recognized:",2],["upload!","Net::SCP","classes/Net/SCP.html#M000024","(local, remote, options={}, &progress)","Same as #upload, but blocks until the upload finishes. Identical to calling #upload and then calling",2],["upload!","Net::SCP","classes/Net/SCP.html#M000055","(local, remote, options={}, &progress)","Same as #upload, but blocks until the upload finishes. Identical to calling #upload and then calling",2],["upload!","Net::SCP","classes/Net/SCP.html#M000019","(host, username, local, remote, options={}, &progress)","Starts up a new SSH connection using the +host+ and +username+ parameters, instantiates a new SCP session",2],["upload!","Net::SCP","classes/Net/SCP.html#M000050","(host, username, local, remote, options={}, &progress)","Starts up a new SSH connection using the +host+ and +username+ parameters, instantiates a new SCP session",2],["upload_current_state","Net::SCP::Upload","classes/Net/SCP/Upload.html#M000004","(channel)","Determines what the next thing to upload is, and branches. If the next item is a file, goes to #upload_file_state.",2],["upload_current_state","Net::SCP::Upload","classes/Net/SCP/Upload.html#M000042","(channel)","Determines what the next thing to upload is, and branches. If the next item is a file, goes to #upload_file_state.",2],["upload_directory_state","Net::SCP::Upload","classes/Net/SCP/Upload.html#M000043","(channel)","After transferring attributes (if requested), sends a 'D' directive and awaites the server's 0-byte response.",2],["upload_directory_state","Net::SCP::Upload","classes/Net/SCP/Upload.html#M000006","(channel)","After transferring attributes (if requested), sends a 'D' directive and awaites the server's 0-byte response.",2],["upload_file_state","Net::SCP::Upload","classes/Net/SCP/Upload.html#M000008","(channel)","After transferring attributes (if requested), sends a 'C' directive and awaits the server's 0-byte response.",2],["upload_file_state","Net::SCP::Upload","classes/Net/SCP/Upload.html#M000044","(channel)","After transferring attributes (if requested), sends a 'C' directive and awaits the server's 0-byte response.",2],["upload_start_state","Net::SCP::Upload","classes/Net/SCP/Upload.html#M000041","(channel)","The start state for uploads. Simply sets up the upload scaffolding, sets the current item to upload,",2],["upload_start_state","Net::SCP::Upload","classes/Net/SCP/Upload.html#M000002","(channel)","The start state for uploads. Simply sets up the upload scaffolding, sets the current item to upload,",2],["CHANGELOG.rdoc","files/CHANGELOG_rdoc.html","files/CHANGELOG_rdoc.html","","=== 1.0.4 / 16 Sep 2010  * maintain filename sanitization compatibility with ruby 1.8.6 [Sung Pae, Tim",3],["README.rdoc","files/README_rdoc.html","files/README_rdoc.html","","= Net::SCP  * http://github.com/net-ssh/net-scp  == DESCRIPTION:  Net::SCP is a pure-Ruby implementation",3],["scp.rb","files/lib/net/scp_rb.html","files/lib/net/scp_rb.html","","",3],["scp.rb","files/lib/net/scp_rb.html","files/lib/net/scp_rb.html","","",3],["download.rb","files/lib/net/scp/download_rb.html","files/lib/net/scp/download_rb.html","","",3],["download.rb","files/lib/net/scp/download_rb.html","files/lib/net/scp/download_rb.html","","",3],["errors.rb","files/lib/net/scp/errors_rb.html","files/lib/net/scp/errors_rb.html","","",3],["errors.rb","files/lib/net/scp/errors_rb.html","files/lib/net/scp/errors_rb.html","","",3],["upload.rb","files/lib/net/scp/upload_rb.html","files/lib/net/scp/upload_rb.html","","",3],["upload.rb","files/lib/net/scp/upload_rb.html","files/lib/net/scp/upload_rb.html","","",3],["version.rb","files/lib/net/scp/version_rb.html","files/lib/net/scp/version_rb.html","","",3],["version.rb","files/lib/net/scp/version_rb.html","files/lib/net/scp/version_rb.html","","",3],["open-scp.rb","files/lib/uri/open-scp_rb.html","files/lib/uri/open-scp_rb.html","","",3],["open-scp.rb","files/lib/uri/open-scp_rb.html","files/lib/uri/open-scp_rb.html","","",3],["scp.rb","files/lib/uri/scp_rb.html","files/lib/uri/scp_rb.html","","",3],["scp.rb","files/lib/uri/scp_rb.html","files/lib/uri/scp_rb.html","","",3]],"searchIndex":["net","scp","download","error","upload","version","ssh","connection","session","uri","scp","await_response()","await_response()","await_response_state()","await_response_state()","buffer_open()","buffer_open()","download()","download()","download!()","download!()","download!()","download!()","download_start_state()","download_start_state()","finish_read_state()","finish_read_state()","finish_state()","finish_state()","new()","new()","new()","new()","new2()","new2()","next_item_state()","next_item_state()","parse_directive()","parse_directive()","preserve_attributes_if_requested()","preserve_attributes_if_requested()","progress_callback()","progress_callback()","read_data_state()","read_data_state()","read_directive_state()","read_directive_state()","read_directory()","read_directory()","read_file()","read_file()","scp()","scp()","scp_command()","scp_command()","send_data_state()","send_data_state()","set_current()","set_current()","shellescape()","shellescape()","start()","start()","start_command()","start_command()","upload()","upload()","upload!()","upload!()","upload!()","upload!()","upload_current_state()","upload_current_state()","upload_directory_state()","upload_directory_state()","upload_file_state()","upload_file_state()","upload_start_state()","upload_start_state()","changelog.rdoc","readme.rdoc","scp.rb","scp.rb","download.rb","download.rb","errors.rb","errors.rb","upload.rb","upload.rb","version.rb","version.rb","open-scp.rb","open-scp.rb","scp.rb","scp.rb"],"longSearchIndex":["lib/net/scp.rb","net","net::scp","net::scp","net::scp","net::scp","net","net::ssh","net::ssh::connection","lib/uri/scp.rb","uri","net::scp","net::scp","net::scp","net::scp","uri::scp","uri::scp","net::scp","net::scp","net::scp","net::scp","net::scp","net::scp","net::scp::download","net::scp::download","net::scp::download","net::scp::download","net::scp","net::scp","net::scp","net::scp","uri::scp","uri::scp","uri::scp","uri::scp","net::scp::upload","net::scp::upload","net::scp::download","net::scp::download","net::scp::upload","net::scp::upload","net::scp","net::scp","net::scp::download","net::scp::download","net::scp::download","net::scp::download","net::scp::download","net::scp::download","net::scp::download","net::scp::download","net::ssh::connection::session","net::ssh::connection::session","net::scp","net::scp","net::scp::upload","net::scp::upload","net::scp::upload","net::scp::upload","net::scp","net::scp","net::scp","net::scp","net::scp","net::scp","net::scp","net::scp","net::scp","net::scp","net::scp","net::scp","net::scp::upload","net::scp::upload","net::scp::upload","net::scp::upload","net::scp::upload","net::scp::upload","net::scp::upload","net::scp::upload","files/changelog_rdoc.html","files/readme_rdoc.html","files/lib/net/scp_rb.html","files/lib/net/scp_rb.html","files/lib/net/scp/download_rb.html","files/lib/net/scp/download_rb.html","files/lib/net/scp/errors_rb.html","files/lib/net/scp/errors_rb.html","files/lib/net/scp/upload_rb.html","files/lib/net/scp/upload_rb.html","files/lib/net/scp/version_rb.html","files/lib/net/scp/version_rb.html","files/lib/uri/open-scp_rb.html","files/lib/uri/open-scp_rb.html","files/lib/uri/scp_rb.html","files/lib/uri/scp_rb.html"]}}