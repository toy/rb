var search_data = {"index":{"info":[["Git","lib/git/author.rb","classes/Git.html"," < ","Git/Ruby Library This provides bindings for working with git in complex interactions, including branching",1],["Author","Git","classes/Git/Author.html"," < Object","",1],["Base","Git","classes/Git/Base.html"," < Object","",1],["Branch","Git","classes/Git/Branch.html"," < Path","",1],["Branches","Git","classes/Git/Branches.html"," < Object","object that holds all the available branches ",1],["Diff","Git","classes/Git/Diff.html"," < Object","object that holds the last X commits on given branch ",1],["DiffFile","Git::Diff","classes/Git/Diff/DiffFile.html"," < Object","",1],["GitExecuteError","Git","classes/Git/GitExecuteError.html"," < StandardError","",1],["GitTagNameDoesNotExist","Git","classes/Git/GitTagNameDoesNotExist.html"," < StandardError","",1],["Index","Git","classes/Git/Index.html"," < Git::Path","",1],["Lib","Git","classes/Git/Lib.html"," < Object","",1],["Log","Git","classes/Git/Log.html"," < Object","object that holds the last X commits on given branch ",1],["Object","Git","classes/Git/Object.html"," < Object","represents a git object ",1],["AbstractObject","Git::Object","classes/Git/Object/AbstractObject.html"," < Object","",1],["Blob","Git::Object","classes/Git/Object/Blob.html"," < AbstractObject","",1],["Commit","Git::Object","classes/Git/Object/Commit.html"," < AbstractObject","",1],["Tag","Git::Object","classes/Git/Object/Tag.html"," < AbstractObject","",1],["Tree","Git::Object","classes/Git/Object/Tree.html"," < AbstractObject","",1],["Path","Git","classes/Git/Path.html"," < Object","",1],["Remote","Git","classes/Git/Remote.html"," < Path","",1],["Repository","Git","classes/Git/Repository.html"," < Path","",1],["Stash","Git","classes/Git/Stash.html"," < Object","",1],["Stashes","Git","classes/Git/Stashes.html"," < Object","object that holds all the available stashes ",1],["Status","Git","classes/Git/Status.html"," < Object","",1],["StatusFile","Git::Status","classes/Git/Status/StatusFile.html"," < Object","",1],["WorkingDirectory","Git","classes/Git/WorkingDirectory.html"," < Git::Path","",1],["[]","Git::Branches","classes/Git/Branches.html#M000044","(symbol)","",2],["[]","Git::Diff","classes/Git/Diff.html#M000077","(key)","enumerable methods ",2],["[]","Git::Stashes","classes/Git/Stashes.html#M000263","(index)","",2],["[]","Git::Status","classes/Git/Status.html#M000274","(file)","enumerable method ",2],["add","Git::Base","classes/Git/Base.html#M000051","(path = '.')","adds files from the working directory to the git repository ",2],["add","Git::Lib","classes/Git/Lib.html#M000208","(path = '.')","",2],["add_remote","Git::Base","classes/Git/Base.html#M000066","(name, url, opts = {})","adds a new remote to this repository url can be a git url or a Git::Base object if it's a local reference",2],["add_tag","Git::Base","classes/Git/Base.html#M000079","(tag_name)","creates a new git tag (Git::Tag) ",2],["added","Git::Status","classes/Git/Status.html#M000270","()","",2],["apply","Git::Base","classes/Git/Base.html#M000083","(file)","",2],["apply","Git::Lib","classes/Git/Lib.html#M000219","(patch_file)","",2],["apply","Git::Stashes","classes/Git/Stashes.html#M000259","(index=nil)","",2],["apply_mail","Git::Base","classes/Git/Base.html#M000085","(file)","",2],["apply_mail","Git::Lib","classes/Git/Lib.html#M000220","(patch_file)","",2],["archive","Git::Base","classes/Git/Base.html#M000080","(treeish, file = nil, opts = {})","creates an archive file of the given tree-ish ",2],["archive","Git::Branch","classes/Git/Branch.html#M000007","(file, opts = {})","",2],["archive","Git::Lib","classes/Git/Lib.html#M000253","(sha, file = nil, opts = {})","creates an archive file options :format  (zip, tar) :prefix :remote :path ",2],["archive","Git::Object::AbstractObject","classes/Git/Object/AbstractObject.html#M000143","(file = nil, opts = {})","creates an archive of this object (tree) ",2],["author","Git::Log","classes/Git/Log.html#M000109","(regex)","",2],["author","Git::Object::Commit","classes/Git/Object/Commit.html#M000175","()","git author ",2],["author_date","Git::Object::Commit","classes/Git/Object/Commit.html#M000176","()","",2],["bare","Git","classes/Git.html#M000279","(git_dir, options = {})","open a bare repository this takes the path to a bare git repo it expects not to be able to use a working",2],["bare","Git::Base","classes/Git/Base.html#M000002","(git_dir, opts = {})","opens a bare Git Repository - no working directory options ",2],["between","Git::Log","classes/Git/Log.html#M000116","(sha1, sha2 = nil)","",2],["binary?","Git::Diff::DiffFile","classes/Git/Diff/DiffFile.html#M000086","()","",2],["blob","Git::Diff::DiffFile","classes/Git/Diff/DiffFile.html#M000087","(type = :dst)","",2],["blob","Git::Status::StatusFile","classes/Git/Status/StatusFile.html#M000277","(type = :index)","",2],["blob?","Git::Object::AbstractObject","classes/Git/Object/AbstractObject.html#M000145","()","",2],["blob?","Git::Object::Blob","classes/Git/Object/Blob.html#M000149","()","",2],["blobs","Git::Object::Tree","classes/Git/Object/Tree.html#M000152","()","",2],["branch","Git::Base","classes/Git/Base.html#M000038","(branch_name = 'master')","returns a Git::Branch object for branch_name ",2],["branch","Git::Remote","classes/Git/Remote.html#M000215","(branch = 'master')","",2],["branch_current","Git::Lib","classes/Git/Lib.html#M000180","()","",2],["branch_delete","Git::Lib","classes/Git/Lib.html#M000227","(branch)","",2],["branch_new","Git::Lib","classes/Git/Lib.html#M000226","(branch)","",2],["branches","Git::Base","classes/Git/Base.html#M000035","()","returns a Git::Branches object of all the Git::Branch objects for this repo ",2],["branches_all","Git::Lib","classes/Git/Lib.html#M000172","()","",2],["cache_full","Git::Diff","classes/Git/Diff.html#M000089","()","",2],["cache_stats","Git::Diff","classes/Git/Diff.html#M000091","()","",2],["cat_file","Git::Base","classes/Git/Base.html#M000105","(objectish)","",2],["change_head_branch","Git::Lib","classes/Git/Lib.html#M000167","(branch_name)","",2],["changed","Git::Status","classes/Git/Status.html#M000269","()","",2],["chdir","Git::Base","classes/Git/Base.html#M000026","()","changes current working directory for a block to the git working directory example @git.chdir do  # write",2],["check_commit","Git::Object::Commit","classes/Git/Object/Commit.html#M000185","()","see if this object has been initialized and do so if not ",2],["check_if_create","Git::Branch","classes/Git/Branch.html#M000019","()","",2],["check_log","Git::Log","classes/Git/Log.html#M000124","()","",2],["check_tree","Git::Object::Tree","classes/Git/Object/Tree.html#M000161","()","actually run the git command ",2],["checkout","Git::Base","classes/Git/Base.html#M000057","(branch = 'master', opts = {})","checks out a branch as the new git working directory ",2],["checkout","Git::Branch","classes/Git/Branch.html#M000006","()","",2],["checkout","Git::Lib","classes/Git/Lib.html#M000228","(branch, opts = {})","",2],["checkout_file","Git::Base","classes/Git/Base.html#M000058","(version, file)","checks out an old version of a file ",2],["checkout_file","Git::Lib","classes/Git/Lib.html#M000229","(version, file)","",2],["checkout_index","Git::Base","classes/Git/Base.html#M000093","(opts = {})","",2],["checkout_index","Git::Lib","classes/Git/Lib.html#M000252","(opts = {})","",2],["children","Git::Object::Tree","classes/Git/Object/Tree.html#M000151","()","",2],["clear","Git::Stashes","classes/Git/Stashes.html#M000260","()","",2],["clone","Git","classes/Git.html#M000282","(repository, name, options = {})","clones a remote repository options :bare => true (does a bare clone) :repository => '/path/to/alt_git_dir'",2],["clone","Git::Base","classes/Git/Base.html#M000013","(repository, name, opts = {})","clones a git repository locally repository - http://repo.or.cz/w/sinatra.git name - sinatra options:",2],["clone","Git::Lib","classes/Git/Lib.html#M000118","(repository, name, opts = {})","tries to clone the given repo returns {:repository} (if bare) {:working_directory} otherwise accepts",2],["command","Git::Lib","classes/Git/Lib.html#M000265","(cmd, opts = [], chdir = true, redirect = '', &block)","",2],["command_lines","Git::Lib","classes/Git/Lib.html#M000264","(cmd, opts = [], chdir = true, redirect = '')","",2],["commit","Git::Base","classes/Git/Base.html#M000055","(message, opts = {})","commits all pending changes in the index file to the git repository options: :add_all :allow_empty :author",2],["commit","Git::Lib","classes/Git/Lib.html#M000212","(message, opts = {})","",2],["commit?","Git::Object::AbstractObject","classes/Git/Object/AbstractObject.html#M000146","()","",2],["commit?","Git::Object::Commit","classes/Git/Object/Commit.html#M000184","()","",2],["commit_all","Git::Base","classes/Git/Base.html#M000056","(message, opts = {})","commits all pending changes in the index file to the git repository, but automatically adds all modified",2],["commit_data","Git::Lib","classes/Git/Lib.html#M000136","(sha)","returns useful array of raw commit object data ",2],["commit_tree","Git::Base","classes/Git/Base.html#M000097","(tree = nil, opts = {})","",2],["commit_tree","Git::Lib","classes/Git/Lib.html#M000249","(tree, opts = {})","",2],["committer","Git::Object::Commit","classes/Git/Object/Commit.html#M000177","()","git author ",2],["committer_date","Git::Object::Commit","classes/Git/Object/Commit.html#M000178","()","",2],["config","Git","classes/Git.html#M000284","(name = nil, value = nil)","g.config('user.name', 'Scott Chacon') # sets value g.config('user.email', 'email@email.com')  # sets",2],["config","Git::Base","classes/Git/Base.html#M000028","(name = nil, value = nil)","g.config('user.name', 'Scott Chacon') # sets value g.config('user.email', 'email@email.com')  # sets",2],["config_get","Git::Lib","classes/Git/Lib.html#M000200","(name)","",2],["config_list","Git::Lib","classes/Git/Lib.html#M000202","()","",2],["config_remote","Git::Lib","classes/Git/Lib.html#M000199","(name)","",2],["config_set","Git::Lib","classes/Git/Lib.html#M000206","(name, value)","WRITE COMMANDS ## ",2],["conflicts","Git::Lib","classes/Git/Lib.html#M000232","()","",2],["construct_status","Git::Status","classes/Git/Status.html#M000278","()","",2],["contents","Git::Object::AbstractObject","classes/Git/Object/AbstractObject.html#M000132","(&block)","Get the object's contents. If no block is given, the contents are cached in memory and returned as a",2],["contents_array","Git::Object::AbstractObject","classes/Git/Object/AbstractObject.html#M000137","()","",2],["create","Git::Branch","classes/Git/Branch.html#M000010","()","",2],["current","Git::Branch","classes/Git/Branch.html#M000012","()","",2],["current_branch","Git::Base","classes/Git/Base.html#M000106","()","returns the name of the branch the working directory is currently on ",2],["current_command_version","Git::Lib","classes/Git/Lib.html#M000254","()","returns the current version of git, as an Array of Fixnums. ",2],["date","Git::Object::Commit","classes/Git/Object/Commit.html#M000179","()","Alias for #committer_date",2],["delete","Git::Branch","classes/Git/Branch.html#M000011","()","",2],["deleted","Git::Status","classes/Git/Status.html#M000271","()","",2],["deletions","Git::Diff","classes/Git/Diff.html#M000070","()","",2],["depth","Git::Object::Tree","classes/Git/Object/Tree.html#M000159","()","",2],["determine_current","Git::Branch","classes/Git/Branch.html#M000020","()","",2],["diff","Git::Base","classes/Git/Base.html#M000050","(objectish = 'HEAD', obj2 = nil)","returns a Git::Diff object ",2],["diff","Git::Object::AbstractObject","classes/Git/Object/AbstractObject.html#M000140","(objectish)","",2],["diff_files","Git::Lib","classes/Git/Lib.html#M000191","()","compares the index and the working directory ",2],["diff_full","Git::Lib","classes/Git/Lib.html#M000187","(obj1 = 'HEAD', obj2 = nil, opts = {})","",2],["diff_index","Git::Lib","classes/Git/Lib.html#M000192","(treeish)","compares the index and the repository ",2],["diff_parent","Git::Object::Commit","classes/Git/Object/Commit.html#M000181","()","",2],["diff_stats","Git::Lib","classes/Git/Lib.html#M000190","(obj1 = 'HEAD', obj2 = nil, opts = {})","",2],["dir","Git::Base","classes/Git/Base.html#M000021","()","returns a reference to the working directory @git.dir.path @git.dir.writeable? ",2],["dirty_log","Git::Log","classes/Git/Log.html#M000123","()","",2],["each","Git::Branches","classes/Git/Branches.html#M000043","(&block)","",2],["each","Git::Diff","classes/Git/Diff.html#M000078","()","",2],["each","Git::Log","classes/Git/Log.html#M000121","(&block)","",2],["each","Git::Stashes","classes/Git/Stashes.html#M000262","(&block)","",2],["each","Git::Status","classes/Git/Status.html#M000275","(&block)","",2],["each_conflict","Git::Base","classes/Git/Base.html#M000062","()","iterates over the files which are unmerged ",2],["escape","Git::Lib","classes/Git/Lib.html#M000267","(s)","",2],["export","Git","classes/Git.html#M000283","(repository, name, options = {})","Export the current HEAD (or a branch, if <tt>options[:branch]</tt> is specified) into the +name+ directory,",2],["fetch","Git::Base","classes/Git/Base.html#M000059","(remote = 'origin')","fetches changes from a remote branch - this does not modify the working directory, it just gets the changes",2],["fetch","Git::Lib","classes/Git/Lib.html#M000238","(remote)","",2],["fetch","Git::Remote","classes/Git/Remote.html#M000213","()","",2],["files","Git::Object::Tree","classes/Git/Object/Tree.html#M000153","()","Alias for #blobs",2],["first","Git::Log","classes/Git/Log.html#M000122","()","",2],["full_log_commits","Git::Lib","classes/Git/Lib.html#M000127","(opts = {})","",2],["full_tree","Git::Lib","classes/Git/Lib.html#M000165","(sha)","",2],["full_tree","Git::Object::Tree","classes/Git/Object/Tree.html#M000158","()","",2],["gblob","Git::Base","classes/Git/Base.html#M000032","(objectish)","",2],["gc","Git::Base","classes/Git/Base.html#M000082","()","",2],["gc","Git::Lib","classes/Git/Lib.html#M000242","()","",2],["gcommit","Git::Base","classes/Git/Base.html#M000031","(objectish)","",2],["gcommit","Git::Branch","classes/Git/Branch.html#M000004","()","",2],["global_config","Git","classes/Git.html#M000286","(name = nil, value = nil)","",2],["global_config","Git","classes/Git.html#M000285","(name = nil, value = nil)","Same as g.config, but forces it to be at the global level g.config('user.name', 'Scott Chacon') # sets",2],["global_config_get","Git::Lib","classes/Git/Lib.html#M000201","(name)","",2],["global_config_list","Git::Lib","classes/Git/Lib.html#M000203","()","",2],["global_config_set","Git::Lib","classes/Git/Lib.html#M000207","(name, value)","",2],["grep","Git::Base","classes/Git/Base.html#M000049","(string, path_limiter = nil, opts = {})","will run a grep for 'string' on the HEAD of the git repository to be more surgical in your grep, you",2],["grep","Git::Lib","classes/Git/Lib.html#M000183","(string, opts = {})","returns hash [tree-ish] = [[line_no, match], [line_no, match2]] [tree-ish] = [[line_no, match], [line_no,",2],["grep","Git::Log","classes/Git/Log.html#M000110","(regex)","",2],["grep","Git::Object::AbstractObject","classes/Git/Object/AbstractObject.html#M000139","(string, path_limiter = nil, opts = {})","",2],["gtree","Git::Base","classes/Git/Base.html#M000030","(objectish)","",2],["gtree","Git::Object::Commit","classes/Git/Object/Commit.html#M000170","()","",2],["ignored_files","Git::Lib","classes/Git/Lib.html#M000198","()","",2],["in_branch","Git::Branch","classes/Git/Branch.html#M000009","(message = 'in branch work')","g.branch('new_branch').in_branch do # create new file # do other stuff return true # auto commits and",2],["index","Git::Base","classes/Git/Base.html#M000023","()","returns reference to the git index file ",2],["init","Git","classes/Git.html#M000281","(working_dir = '.', options = {})","initialize a new git repository, defaults to the current working directory options :repository => '/path/to/alt_git_dir'",2],["init","Git::Base","classes/Git/Base.html#M000008","(working_dir, opts = {})","initializes a git repository options: :repository :index_file ",2],["init","Git::Lib","classes/Git/Lib.html#M000117","()","",2],["insertions","Git::Diff","classes/Git/Diff.html#M000071","()","",2],["is_branch?","Git::Base","classes/Git/Base.html#M000046","(branch)","returns +true+ if the branch exists ",2],["is_local_branch?","Git::Base","classes/Git/Base.html#M000039","(branch)","returns +true+ if the branch exists locally ",2],["is_remote_branch?","Git::Base","classes/Git/Base.html#M000040","(branch)","returns +true+ if the branch exists remotely ",2],["lib","Git::Base","classes/Git/Base.html#M000048","()","this is a convenience method for accessing the class that wraps all the  actual 'git' forked system calls.",2],["lines","Git::Diff","classes/Git/Diff.html#M000069","()","",2],["list_files","Git::Lib","classes/Git/Lib.html#M000173","(ref_dir)","",2],["local","Git::Branches","classes/Git/Branches.html#M000037","()","",2],["log","Git::Base","classes/Git/Base.html#M000033","(count = 30)","returns a Git::Log object with count commits ",2],["log","Git::Object::AbstractObject","classes/Git/Object/AbstractObject.html#M000142","(count = 30)","",2],["log_commits","Git::Lib","classes/Git/Lib.html#M000126","(opts = {})","READ COMMANDS ## ",2],["ls_files","Git::Base","classes/Git/Base.html#M000100","(location=nil)","",2],["ls_files","Git::Lib","classes/Git/Lib.html#M000195","(location=nil)","",2],["ls_tree","Git::Base","classes/Git/Base.html#M000104","(objectish)","",2],["ls_tree","Git::Lib","classes/Git/Lib.html#M000162","(sha)","",2],["meets_required_version?","Git::Lib","classes/Git/Lib.html#M000258","()","",2],["merge","Git::Base","classes/Git/Base.html#M000061","(branch, message = 'merge')","merges one or more branches into the current working branch you can specify more than one branch to merge",2],["merge","Git::Branch","classes/Git/Branch.html#M000015","(branch = nil, message = nil)","",2],["merge","Git::Lib","classes/Git/Lib.html#M000230","(branch, message = nil)","",2],["merge","Git::Remote","classes/Git/Remote.html#M000214","(branch = 'master')","merge this remote locally ",2],["message","Git::Object::Commit","classes/Git/Object/Commit.html#M000168","()","",2],["message","Git::Stash","classes/Git/Stash.html#M000247","()","",2],["mv","Git::Lib","classes/Git/Lib.html#M000164","(file1, file2)","",2],["name","Git::Object::Commit","classes/Git/Object/Commit.html#M000169","()","",2],["namerev","Git::Lib","classes/Git/Lib.html#M000133","(string)","",2],["new","Git::Author","classes/Git/Author.html#M000000","(author_string)","",2],["new","Git::Base","classes/Git/Base.html#M000014","(options = {})","",2],["new","Git::Branch","classes/Git/Branch.html#M000001","(base, name)","",2],["new","Git::Branches","classes/Git/Branches.html#M000036","(base)","",2],["new","Git::Diff","classes/Git/Diff.html#M000063","(base, from = nil, to = nil)","",2],["new","Git::Diff::DiffFile","classes/Git/Diff/DiffFile.html#M000084","(base, hash)","",2],["new","Git::Lib","classes/Git/Lib.html#M000111","(base = nil, logger = nil)","",2],["new","Git::Log","classes/Git/Log.html#M000107","(base, count = 30)","",2],["new","Git::Object","classes/Git/Object.html#M000189","(base, objectish, type = nil, is_tag = false)","if we're calling this, we don't know what type it is yet so this is our little factory method ",2],["new","Git::Object::AbstractObject","classes/Git/Object/AbstractObject.html#M000128","(base, objectish)","",2],["new","Git::Object::Blob","classes/Git/Object/Blob.html#M000148","(base, sha, mode = nil)","",2],["new","Git::Object::Commit","classes/Git/Object/Commit.html#M000163","(base, sha, init = nil)","",2],["new","Git::Object::Tag","classes/Git/Object/Tag.html#M000186","(base, sha, name)","",2],["new","Git::Object::Tree","classes/Git/Object/Tree.html#M000150","(base, sha, mode = nil)","",2],["new","Git::Path","classes/Git/Path.html#M000193","(path, check_path = true)","",2],["new","Git::Remote","classes/Git/Remote.html#M000210","(base, name)","",2],["new","Git::Stash","classes/Git/Stash.html#M000244","(base, message, existing=false)","",2],["new","Git::Stashes","classes/Git/Stashes.html#M000255","(base)","",2],["new","Git::Status","classes/Git/Status.html#M000268","(base)","",2],["new","Git::Status::StatusFile","classes/Git/Status/StatusFile.html#M000276","(base, hash)","",2],["object","Git::Base","classes/Git/Base.html#M000029","(objectish)","returns a Git::Object of the appropriate type you can also call @git.gtree('tree'), but that's  just",2],["object","Git::Log","classes/Git/Log.html#M000108","(objectish)","",2],["object_contents","Git::Lib","classes/Git/Lib.html#M000157","(sha, &block)","",2],["object_size","Git::Lib","classes/Git/Lib.html#M000135","(sha)","",2],["object_type","Git::Lib","classes/Git/Lib.html#M000134","(sha)","",2],["open","Git","classes/Git.html#M000280","(working_dir, options = {})","open an existing git working directory this will most likely be the most common way to create a git reference,",2],["open","Git::Base","classes/Git/Base.html#M000003","(working_dir, opts={})","opens a new Git Project from a working directory you can specify non-standard git_dir and index file",2],["parent","Git::Object::Commit","classes/Git/Object/Commit.html#M000171","()","",2],["parents","Git::Object::Commit","classes/Git/Object/Commit.html#M000174","()","array of all parent commits ",2],["parse_config","Git::Lib","classes/Git/Lib.html#M000205","(file)","",2],["parse_config_list","Git::Lib","classes/Git/Lib.html#M000204","(lines)","",2],["patch","Git::Diff","classes/Git/Diff.html#M000075","(file = nil)","if file is provided and is writable, it will write the patch into the file ",2],["path","Git::Diff","classes/Git/Diff.html#M000067","(path)","",2],["path","Git::Log","classes/Git/Log.html#M000112","(path)","",2],["pretty","Git::Status","classes/Git/Status.html#M000273","()","",2],["process_commit_data","Git::Lib","classes/Git/Lib.html#M000141","(data, sha = nil, indent = 4)","",2],["process_full","Git::Diff","classes/Git/Diff.html#M000090","()","",2],["process_full_diff","Git::Diff","classes/Git/Diff.html#M000096","()","break up @diff_full ",2],["pull","Git::Base","classes/Git/Base.html#M000064","(remote = 'origin', branch = 'master', message = 'origin pull')","fetches a branch from a remote and merges it into the current working branch ",2],["push","Git::Base","classes/Git/Base.html#M000060","(remote = 'origin', branch = 'master', tags = false)","pushes changes to a remote repository - easiest if this is a cloned repository, otherwise you may have",2],["push","Git::Lib","classes/Git/Lib.html#M000239","(remote, branch = 'master', tags = false)","",2],["read_tree","Git::Base","classes/Git/Base.html#M000094","(treeish, opts = {})","",2],["read_tree","Git::Lib","classes/Git/Lib.html#M000243","(treeish, opts = {})","reads a tree into the current index file ",2],["readable?","Git::Path","classes/Git/Path.html#M000194","()","",2],["remote","Git::Base","classes/Git/Base.html#M000047","(remote_name = 'origin')","returns a Git::Remote object ",2],["remote","Git::Branches","classes/Git/Branches.html#M000041","()","",2],["remote_add","Git::Lib","classes/Git/Lib.html#M000233","(name, url, opts = {})","",2],["remote_remove","Git::Lib","classes/Git/Lib.html#M000234","(name)","this is documented as such, but seems broken for some reason i'll try to get around it some other way",2],["remotes","Git::Base","classes/Git/Base.html#M000065","()","returns an array of Git:Remote objects ",2],["remotes","Git::Lib","classes/Git/Lib.html#M000235","()","",2],["remove","Git::Base","classes/Git/Base.html#M000052","(path = '.', opts = {})","removes file(s) from the git repository ",2],["remove","Git::Lib","classes/Git/Lib.html#M000209","(path = '.', opts = {})","",2],["remove","Git::Remote","classes/Git/Remote.html#M000216","()","",2],["remove","Git::Remote","classes/Git/Remote.html#M000211","()","",2],["repack","Git::Base","classes/Git/Base.html#M000081","()","repacks the repository ",2],["repack","Git::Lib","classes/Git/Lib.html#M000241","()","",2],["repo","Git::Base","classes/Git/Base.html#M000022","()","returns reference to the git repository directory @git.dir.path ",2],["repo_size","Git::Base","classes/Git/Base.html#M000027","()","returns the repository size in bytes ",2],["required_command_version","Git::Lib","classes/Git/Lib.html#M000257","()","",2],["reset","Git::Base","classes/Git/Base.html#M000053","(commitish = nil, opts = {})","resets the working directory to the provided commitish ",2],["reset","Git::Lib","classes/Git/Lib.html#M000218","(commit, opts = {})","",2],["reset_hard","Git::Base","classes/Git/Base.html#M000054","(commitish = nil, opts = {})","resets the working directory to the commitish with '--hard' ",2],["revparse","Git::Base","classes/Git/Base.html#M000103","(objectish)","runs git rev-parse to convert the objectish to a full sha @git.revparse(\"HEAD^^\") @git.revparse('v2.4^{tree}')",2],["revparse","Git::Lib","classes/Git/Lib.html#M000129","(string)","",2],["run_command","Git::Lib","classes/Git/Lib.html#M000266","(git_cmd, &block)","",2],["run_log","Git::Log","classes/Git/Log.html#M000125","()","actually run the 'git log' command ",2],["save","Git::Stash","classes/Git/Stash.html#M000245","()","",2],["save","Git::Stashes","classes/Git/Stashes.html#M000256","(message)","",2],["saved?","Git::Stash","classes/Git/Stash.html#M000246","()","",2],["set_commit","Git::Object::Commit","classes/Git/Object/Commit.html#M000182","(data)","",2],["set_index","Git::Base","classes/Git/Base.html#M000025","(index_file, check = true)","",2],["set_working","Git::Base","classes/Git/Base.html#M000024","(work_dir, check = true)","",2],["sha","Git::Object::AbstractObject","classes/Git/Object/AbstractObject.html#M000130","()","",2],["since","Git::Log","classes/Git/Log.html#M000114","(date)","",2],["size","Git::Branches","classes/Git/Branches.html#M000042","()","array like methods ",2],["size","Git::Diff","classes/Git/Diff.html#M000068","()","",2],["size","Git::Log","classes/Git/Log.html#M000120","()","forces git log to run ",2],["size","Git::Object::AbstractObject","classes/Git/Object/AbstractObject.html#M000131","()","",2],["size","Git::Stashes","classes/Git/Stashes.html#M000261","()","",2],["skip","Git::Log","classes/Git/Log.html#M000113","(num)","",2],["stash_apply","Git::Lib","classes/Git/Lib.html#M000223","(id = nil)","",2],["stash_clear","Git::Lib","classes/Git/Lib.html#M000224","()","",2],["stash_list","Git::Lib","classes/Git/Lib.html#M000225","()","",2],["stash_save","Git::Lib","classes/Git/Lib.html#M000222","(message)","",2],["stashes","Git::Branch","classes/Git/Branch.html#M000005","()","",2],["stashes_all","Git::Lib","classes/Git/Lib.html#M000221","()","",2],["stats","Git::Diff","classes/Git/Diff.html#M000072","()","",2],["status","Git::Base","classes/Git/Base.html#M000034","()","returns a Git::Status object ",2],["subdirectories","Git::Object::Tree","classes/Git/Object/Tree.html#M000156","()","Alias for #trees",2],["subtrees","Git::Object::Tree","classes/Git/Object/Tree.html#M000155","()","Alias for #trees",2],["tag","Git::Base","classes/Git/Base.html#M000074","(tag_name)","returns a Git::Tag object ",2],["tag","Git::Lib","classes/Git/Lib.html#M000237","(tag)","",2],["tag?","Git::Object::AbstractObject","classes/Git/Object/AbstractObject.html#M000147","()","",2],["tag?","Git::Object::Tag","classes/Git/Object/Tag.html#M000188","()","",2],["tag_sha","Git::Lib","classes/Git/Lib.html#M000240","(tag_name)","",2],["tags","Git::Base","classes/Git/Base.html#M000073","()","returns an array of all Git::Tag objects for this repository ",2],["tags","Git::Lib","classes/Git/Lib.html#M000236","()","",2],["to_a","Git::Branch","classes/Git/Branch.html#M000017","()","",2],["to_s","Git::Branch","classes/Git/Branch.html#M000018","()","",2],["to_s","Git::Branches","classes/Git/Branches.html#M000045","()","",2],["to_s","Git::Diff","classes/Git/Diff.html#M000076","(file = nil)","Alias for #patch",2],["to_s","Git::Log","classes/Git/Log.html#M000119","()","",2],["to_s","Git::Object::AbstractObject","classes/Git/Object/AbstractObject.html#M000138","()","",2],["to_s","Git::Path","classes/Git/Path.html#M000197","()","",2],["to_s","Git::Remote","classes/Git/Remote.html#M000217","()","",2],["to_s","Git::Stash","classes/Git/Stash.html#M000250","()","",2],["tree?","Git::Object::AbstractObject","classes/Git/Object/AbstractObject.html#M000144","()","",2],["tree?","Git::Object::Tree","classes/Git/Object/Tree.html#M000160","()","",2],["tree_depth","Git::Lib","classes/Git/Lib.html#M000166","(sha)","",2],["trees","Git::Object::Tree","classes/Git/Object/Tree.html#M000154","()","",2],["unmerged","Git::Lib","classes/Git/Lib.html#M000231","()","",2],["until","Git::Log","classes/Git/Log.html#M000115","(date)","",2],["untracked","Git::Status","classes/Git/Status.html#M000272","()","",2],["update_ref","Git::Base","classes/Git/Base.html#M000099","(branch, commit)","",2],["update_ref","Git::Branch","classes/Git/Branch.html#M000016","(commit)","",2],["update_ref","Git::Lib","classes/Git/Lib.html#M000251","(branch, commit)","",2],["with_index","Git::Base","classes/Git/Base.html#M000088","(new_index)","LOWER LEVEL INDEX OPERATIONS ## ",2],["with_temp_index","Git::Base","classes/Git/Base.html#M000092","(&blk)","",2],["with_temp_working","Git::Base","classes/Git/Base.html#M000102","(&blk)","",2],["with_working","Git::Base","classes/Git/Base.html#M000101","(work_dir)","",2],["writable?","Git::Path","classes/Git/Path.html#M000196","()","",2],["write_and_commit_tree","Git::Base","classes/Git/Base.html#M000098","(opts = {})","",2],["write_tree","Git::Base","classes/Git/Base.html#M000095","()","",2],["write_tree","Git::Lib","classes/Git/Lib.html#M000248","()","",2],["README","files/README.html","files/README.html","","== Git Library for Ruby  Library for using Git in Ruby. Test.  = Homepage  Git public hosting of the",3],["git.rb","files/lib/git_rb.html","files/lib/git_rb.html","","Add the directory containing this file to the start of the load path if it isn't there already. ",3],["author.rb","files/lib/git/author_rb.html","files/lib/git/author_rb.html","","",3],["base.rb","files/lib/git/base_rb.html","files/lib/git/base_rb.html","","",3],["branch.rb","files/lib/git/branch_rb.html","files/lib/git/branch_rb.html","","",3],["branches.rb","files/lib/git/branches_rb.html","files/lib/git/branches_rb.html","","",3],["diff.rb","files/lib/git/diff_rb.html","files/lib/git/diff_rb.html","","",3],["index.rb","files/lib/git/index_rb.html","files/lib/git/index_rb.html","","",3],["lib.rb","files/lib/git/lib_rb.html","files/lib/git/lib_rb.html","","",3],["log.rb","files/lib/git/log_rb.html","files/lib/git/log_rb.html","","",3],["object.rb","files/lib/git/object_rb.html","files/lib/git/object_rb.html","","",3],["path.rb","files/lib/git/path_rb.html","files/lib/git/path_rb.html","","",3],["remote.rb","files/lib/git/remote_rb.html","files/lib/git/remote_rb.html","","",3],["repository.rb","files/lib/git/repository_rb.html","files/lib/git/repository_rb.html","","",3],["stash.rb","files/lib/git/stash_rb.html","files/lib/git/stash_rb.html","","",3],["stashes.rb","files/lib/git/stashes_rb.html","files/lib/git/stashes_rb.html","","",3],["status.rb","files/lib/git/status_rb.html","files/lib/git/status_rb.html","","",3],["working_directory.rb","files/lib/git/working_directory_rb.html","files/lib/git/working_directory_rb.html","","",3]],"searchIndex":["git","author","base","branch","branches","diff","difffile","gitexecuteerror","gittagnamedoesnotexist","index","lib","log","object","abstractobject","blob","commit","tag","tree","path","remote","repository","stash","stashes","status","statusfile","workingdirectory","[]()","[]()","[]()","[]()","add()","add()","add_remote()","add_tag()","added()","apply()","apply()","apply()","apply_mail()","apply_mail()","archive()","archive()","archive()","archive()","author()","author()","author_date()","bare()","bare()","between()","binary?()","blob()","blob()","blob?()","blob?()","blobs()","branch()","branch()","branch_current()","branch_delete()","branch_new()","branches()","branches_all()","cache_full()","cache_stats()","cat_file()","change_head_branch()","changed()","chdir()","check_commit()","check_if_create()","check_log()","check_tree()","checkout()","checkout()","checkout()","checkout_file()","checkout_file()","checkout_index()","checkout_index()","children()","clear()","clone()","clone()","clone()","command()","command_lines()","commit()","commit()","commit?()","commit?()","commit_all()","commit_data()","commit_tree()","commit_tree()","committer()","committer_date()","config()","config()","config_get()","config_list()","config_remote()","config_set()","conflicts()","construct_status()","contents()","contents_array()","create()","current()","current_branch()","current_command_version()","date()","delete()","deleted()","deletions()","depth()","determine_current()","diff()","diff()","diff_files()","diff_full()","diff_index()","diff_parent()","diff_stats()","dir()","dirty_log()","each()","each()","each()","each()","each()","each_conflict()","escape()","export()","fetch()","fetch()","fetch()","files()","first()","full_log_commits()","full_tree()","full_tree()","gblob()","gc()","gc()","gcommit()","gcommit()","global_config()","global_config()","global_config_get()","global_config_list()","global_config_set()","grep()","grep()","grep()","grep()","gtree()","gtree()","ignored_files()","in_branch()","index()","init()","init()","init()","insertions()","is_branch?()","is_local_branch?()","is_remote_branch?()","lib()","lines()","list_files()","local()","log()","log()","log_commits()","ls_files()","ls_files()","ls_tree()","ls_tree()","meets_required_version?()","merge()","merge()","merge()","merge()","message()","message()","mv()","name()","namerev()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","object()","object()","object_contents()","object_size()","object_type()","open()","open()","parent()","parents()","parse_config()","parse_config_list()","patch()","path()","path()","pretty()","process_commit_data()","process_full()","process_full_diff()","pull()","push()","push()","read_tree()","read_tree()","readable?()","remote()","remote()","remote_add()","remote_remove()","remotes()","remotes()","remove()","remove()","remove()","remove()","repack()","repack()","repo()","repo_size()","required_command_version()","reset()","reset()","reset_hard()","revparse()","revparse()","run_command()","run_log()","save()","save()","saved?()","set_commit()","set_index()","set_working()","sha()","since()","size()","size()","size()","size()","size()","skip()","stash_apply()","stash_clear()","stash_list()","stash_save()","stashes()","stashes_all()","stats()","status()","subdirectories()","subtrees()","tag()","tag()","tag?()","tag?()","tag_sha()","tags()","tags()","to_a()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","tree?()","tree?()","tree_depth()","trees()","unmerged()","until()","untracked()","update_ref()","update_ref()","update_ref()","with_index()","with_temp_index()","with_temp_working()","with_working()","writable?()","write_and_commit_tree()","write_tree()","write_tree()","readme","git.rb","author.rb","base.rb","branch.rb","branches.rb","diff.rb","index.rb","lib.rb","log.rb","object.rb","path.rb","remote.rb","repository.rb","stash.rb","stashes.rb","status.rb","working_directory.rb"],"longSearchIndex":["lib/git.rb","git","git","git","git","git","git::diff","git","git","git","git","git","git","git::object","git::object","git::object","git::object","git::object","git","git","git","git","git","git","git::status","git","git::branches","git::diff","git::stashes","git::status","git::base","git::lib","git::base","git::base","git::status","git::base","git::lib","git::stashes","git::base","git::lib","git::base","git::branch","git::lib","git::object::abstractobject","git::log","git::object::commit","git::object::commit","git","git::base","git::log","git::diff::difffile","git::diff::difffile","git::status::statusfile","git::object::abstractobject","git::object::blob","git::object::tree","git::base","git::remote","git::lib","git::lib","git::lib","git::base","git::lib","git::diff","git::diff","git::base","git::lib","git::status","git::base","git::object::commit","git::branch","git::log","git::object::tree","git::base","git::branch","git::lib","git::base","git::lib","git::base","git::lib","git::object::tree","git::stashes","git","git::base","git::lib","git::lib","git::lib","git::base","git::lib","git::object::abstractobject","git::object::commit","git::base","git::lib","git::base","git::lib","git::object::commit","git::object::commit","git","git::base","git::lib","git::lib","git::lib","git::lib","git::lib","git::status","git::object::abstractobject","git::object::abstractobject","git::branch","git::branch","git::base","git::lib","git::object::commit","git::branch","git::status","git::diff","git::object::tree","git::branch","git::base","git::object::abstractobject","git::lib","git::lib","git::lib","git::object::commit","git::lib","git::base","git::log","git::branches","git::diff","git::log","git::stashes","git::status","git::base","git::lib","git","git::base","git::lib","git::remote","git::object::tree","git::log","git::lib","git::lib","git::object::tree","git::base","git::base","git::lib","git::base","git::branch","git","git","git::lib","git::lib","git::lib","git::base","git::lib","git::log","git::object::abstractobject","git::base","git::object::commit","git::lib","git::branch","git::base","git","git::base","git::lib","git::diff","git::base","git::base","git::base","git::base","git::diff","git::lib","git::branches","git::base","git::object::abstractobject","git::lib","git::base","git::lib","git::base","git::lib","git::lib","git::base","git::branch","git::lib","git::remote","git::object::commit","git::stash","git::lib","git::object::commit","git::lib","git::author","git::base","git::branch","git::branches","git::diff","git::diff::difffile","git::lib","git::log","git::object","git::object::abstractobject","git::object::blob","git::object::commit","git::object::tag","git::object::tree","git::path","git::remote","git::stash","git::stashes","git::status","git::status::statusfile","git::base","git::log","git::lib","git::lib","git::lib","git","git::base","git::object::commit","git::object::commit","git::lib","git::lib","git::diff","git::diff","git::log","git::status","git::lib","git::diff","git::diff","git::base","git::base","git::lib","git::base","git::lib","git::path","git::base","git::branches","git::lib","git::lib","git::base","git::lib","git::base","git::lib","git::remote","git::remote","git::base","git::lib","git::base","git::base","git::lib","git::base","git::lib","git::base","git::base","git::lib","git::lib","git::log","git::stash","git::stashes","git::stash","git::object::commit","git::base","git::base","git::object::abstractobject","git::log","git::branches","git::diff","git::log","git::object::abstractobject","git::stashes","git::log","git::lib","git::lib","git::lib","git::lib","git::branch","git::lib","git::diff","git::base","git::object::tree","git::object::tree","git::base","git::lib","git::object::abstractobject","git::object::tag","git::lib","git::base","git::lib","git::branch","git::branch","git::branches","git::diff","git::log","git::object::abstractobject","git::path","git::remote","git::stash","git::object::abstractobject","git::object::tree","git::lib","git::object::tree","git::lib","git::log","git::status","git::base","git::branch","git::lib","git::base","git::base","git::base","git::base","git::path","git::base","git::base","git::lib","files/readme.html","files/lib/git_rb.html","files/lib/git/author_rb.html","files/lib/git/base_rb.html","files/lib/git/branch_rb.html","files/lib/git/branches_rb.html","files/lib/git/diff_rb.html","files/lib/git/index_rb.html","files/lib/git/lib_rb.html","files/lib/git/log_rb.html","files/lib/git/object_rb.html","files/lib/git/path_rb.html","files/lib/git/remote_rb.html","files/lib/git/repository_rb.html","files/lib/git/stash_rb.html","files/lib/git/stashes_rb.html","files/lib/git/status_rb.html","files/lib/git/working_directory_rb.html"]}}