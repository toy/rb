var search_data = {"index":{"longSearchIndex":["lib/rspec/mocks/extensions/marshal.rb","lib/rspec/mocks/extensions/psych.rb","lib/rspec/mocks/version.rb","rspec","rspec::mocks","rspec::mocks","rspec::mocks::anyinstance","rspec::mocks::anyinstance","rspec::mocks::anyinstance","rspec::mocks::anyinstance","rspec::mocks::anyinstance","rspec::mocks::anyinstance","rspec::mocks","rspec::mocks","rspec::mocks::argumentmatchers","rspec::mocks::argumentmatchers","rspec::mocks::argumentmatchers","rspec::mocks::argumentmatchers","rspec::mocks::argumentmatchers","rspec::mocks::argumentmatchers","rspec::mocks::argumentmatchers","rspec::mocks::argumentmatchers","rspec::mocks::argumentmatchers","rspec::mocks::argumentmatchers","rspec::mocks::argumentmatchers","rspec::mocks::argumentmatchers","rspec::mocks","rspec::mocks","rspec::mocks","rspec::mocks","rspec::mocks","rspec::mocks","rspec::mocks","rspec::mocks","rspec::mocks","rspec::mocks","rspec::mocks","rspec::mocks","rspec::mocks::serialization","rspec::mocks","rspec::mocks","rspec::mocks::argumentmatchers::anyargmatcher","rspec::mocks::argumentmatchers::booleanmatcher","rspec::mocks::argumentmatchers::ducktypematcher","rspec::mocks::argumentmatchers::equalityproxy","rspec::mocks::argumentmatchers::hashexcludingmatcher","rspec::mocks::argumentmatchers::hashincludingmatcher","rspec::mocks::argumentmatchers::instanceof","rspec::mocks::argumentmatchers::kindof","rspec::mocks::argumentmatchers::matchermatcher","rspec::mocks::argumentmatchers::regexpmatcher","rspec::mocks::mock","rspec::mocks::methods","rspec::mocks::errorgenerator","rspec::mocks::anyinstance","rspec::mocks::argumentmatchers","rspec::mocks::messageexpectation","rspec::mocks::anyinstance::messagechains","rspec::mocks::space","rspec::mocks::methoddouble","rspec::mocks","rspec::mocks::proxy","rspec::mocks::methoddouble","rspec::mocks::proxy","rspec::mocks::methoddouble","rspec::mocks::proxy","rspec::mocks::messageexpectation","rspec::mocks::anyinstance::messagechains","rspec::mocks::examplemethods","rspec::mocks::proxy","rspec::mocks::proxy","rspec::mocks::anyinstance::recorder","rspec::mocks::proxy","rspec::mocks::proxy","rspec::mocks::argumentmatchers","rspec::mocks::messageexpectation","rspec::mocks::messageexpectation","rspec::mocks::messageexpectation","rspec::mocks::messageexpectation","rspec::mocks::argumentmatchers","rspec::mocks::anyinstance","rspec::mocks::messageexpectation","rspec::mocks::argumentmatchers","rspec::mocks::argumentmatchers","rspec::mocks::errorgenerator","rspec::mocks::errorgenerator","rspec::mocks::argumentexpectation","rspec::mocks::methods","rspec::mocks::proxy","rspec::mocks::mock","rspec::mocks::messageexpectation","rspec::mocks::messageexpectation","rspec::mocks::anyinstance::recorder","rspec::mocks::argumentexpectation","rspec::mocks::argumentmatchers","rspec::mocks::anyinstance::recorder","rspec::mocks::messageexpectation","rspec::mocks::messageexpectation","rspec::mocks::methoddouble","rspec::mocks::messageexpectation","rspec::mocks::messageexpectation","rspec::mocks::methoddouble","rspec::mocks::anyinstance::chain","rspec::mocks::ordergroup","rspec::mocks::errorgenerator","rspec::mocks::examplemethods","rspec::mocks::methoddouble","rspec::mocks::argumentmatchers::anyargsmatcher","rspec::mocks::argumentmatchers::hashexcludingmatcher","rspec::mocks::argumentmatchers::hashincludingmatcher","rspec::mocks::argumentmatchers::noargsmatcher","rspec::mocks::examplemethods","rspec::mocks::argumentmatchers","marshal","psych","rspec::mocks::messageexpectation","rspec::mocks::messageexpectation","rspec::mocks::anyinstance::chain","rspec::mocks::anyinstance::expectationchain","rspec::mocks::anyinstance::stubchain","rspec::mocks::methoddouble","rspec::mocks::messageexpectation","rspec::mocks::messageexpectation","rspec::mocks","rspec::mocks::mock","rspec::mocks::mock","rspec::mocks::messageexpectation","rspec::mocks::proxy","rspec::mocks::proxy","rspec::mocks::proxy","rspec::mocks::proxy","rspec::mocks::serialization","rspec::mocks::errorgenerator","rspec::mocks::methods","rspec::mocks::messageexpectation","rspec::mocks::ordergroup","rspec::mocks::anyinstance::messagechains","rspec::mocks::proxy","rspec::mocks::argumentmatchers","rspec::mocks::argumentmatchers","rspec::mocks::argumentmatchers","rspec::mocks::messageexpectation","rspec::mocks::messageexpectation","rspec::mocks::mock","rspec::mocks::instanceexec","rspec::mocks::argumentmatchers","rspec::mocks::anyinstance::recorder","rspec::mocks::errorgenerator","rspec::mocks::anyinstance::expectationchain","rspec::mocks::anyinstance::stubchain","rspec::mocks::anyinstance::stubchainchain","rspec::mocks::messageexpectation","rspec::mocks::messageexpectation","rspec::mocks::messageexpectation","rspec::mocks::messageexpectation","rspec::mocks::messageexpectation","rspec::mocks::argumentexpectation","rspec::mocks::argumentmatchers","rspec::mocks::anyinstance::chain","rspec::mocks::anyinstance::recorder","rspec::mocks::argumentexpectation","rspec::mocks::argumentexpectation","rspec::mocks::argumentexpectation","rspec::mocks::messageexpectation","rspec::mocks::messageexpectation","rspec::mocks::messageexpectation","rspec::mocks::messageexpectation","rspec::mocks::messageexpectation","rspec::mocks::proxy","rspec::mocks::anyinstance::chain","rspec::mocks::proxy","rspec::mocks::proxy","rspec::mocks::mock","rspec::mocks::examplemethods","rspec::mocks::space","rspec::mocks::messageexpectation","rspec::mocks::negativemessageexpectation","rspec::mocks::messageexpectation","rspec::mocks::anyinstance::expectationchain","rspec::mocks::anyinstance::messagechains","rspec::mocks::anyinstance::recorder","rspec::mocks::anyinstance::stubchain","rspec::mocks::anyinstance::stubchainchain","rspec::mocks::argumentexpectation","rspec::mocks::argumentmatchers::anyargmatcher","rspec::mocks::argumentmatchers::booleanmatcher","rspec::mocks::argumentmatchers::ducktypematcher","rspec::mocks::argumentmatchers::equalityproxy","rspec::mocks::argumentmatchers::hashexcludingmatcher","rspec::mocks::argumentmatchers::hashincludingmatcher","rspec::mocks::argumentmatchers::instanceof","rspec::mocks::argumentmatchers::kindof","rspec::mocks::argumentmatchers::matchermatcher","rspec::mocks::argumentmatchers::regexpmatcher","rspec::mocks::errorgenerator","rspec::mocks::messageexpectation","rspec::mocks::methoddouble","rspec::mocks::mock","rspec::mocks::negativemessageexpectation","rspec::mocks::ordergroup","rspec::mocks::proxy","rspec::mocks::argumentmatchers","rspec::mocks::anyinstance::recorder","rspec::mocks::argumentexpectation","rspec::mocks::methods","rspec::mocks::proxy","rspec::mocks::methoddouble","rspec::mocks::methoddouble","rspec::mocks::methoddouble","rspec::mocks::anyinstance::recorder","rspec::mocks::messageexpectation","rspec::mocks::errorgenerator","rspec::mocks::messageexpectation","rspec::mocks::anyinstance::chain","rspec::mocks::anyinstance::messagechains","rspec::mocks::anyinstance::recorder","rspec::mocks::errorgenerator","rspec::mocks::methoddouble","rspec::mocks::anyinstance::recorder","rspec::mocks::errorgenerator","rspec::mocks::errorgenerator","rspec::mocks::anyinstance::messagechains","rspec::mocks::methoddouble","rspec::mocks::errorgenerator","rspec::mocks::errorgenerator","rspec::mocks::errorgenerator","rspec::mocks::errorgenerator","rspec::mocks::proxy","rspec::mocks::errorgenerator","rspec::mocks::proxy","rspec::mocks::errorgenerator","rspec::mocks::ordergroup","rspec::mocks::anyinstance::messagechains","rspec::mocks::anyinstance::recorder","rspec::mocks::methods","rspec::mocks::proxy","rspec::mocks::anyinstance::chain","rspec::mocks::anyinstance::chain","rspec::mocks::proxy","rspec::mocks::ordergroup","rspec::mocks::anyinstance::recorder","rspec::mocks::methoddouble","rspec::mocks::proxy","rspec::mocks::anyinstance::messagechains","rspec::mocks::methoddouble","rspec::mocks::proxy","rspec::mocks::space","rspec::mocks::methoddouble","rspec::mocks::mock","rspec::mocks::anyinstance::recorder","rspec::mocks::methoddouble","rspec::mocks::anyinstance::recorder","rspec::mocks::methods","rspec::mocks::anyinstance","rspec::mocks::methods","rspec::mocks::messageexpectation","rspec::mocks","rspec::mocks::methods","rspec::mocks::anyinstance::recorder","rspec::mocks::methods","rspec::mocks::messageexpectation","rspec::mocks::methoddouble","rspec::mocks::methoddouble","rspec::mocks::anyinstance::recorder","rspec::mocks::anyinstance::recorder","rspec::mocks::anyinstance::recorder","rspec::mocks::examplemethods","rspec::mocks::methods","rspec::mocks::anyinstance::recorder","rspec::mocks::methods","rspec::mocks::anyinstance::recorder","rspec::mocks::methods","rspec::mocks::methoddouble","rspec::mocks","rspec::mocks::messageexpectation","rspec::mocks::mock","rspec::mocks::mock","rspec::mocks::serialization::yaml","rspec::mocks::messageexpectation","rspec::mocks::anyinstance::messagechains","rspec::mocks::anyinstance::recorder","rspec::mocks::methods","rspec::mocks::methods","rspec::mocks","rspec::mocks::anyinstance::recorder","rspec::mocks::methoddouble","rspec::mocks::proxy","rspec::mocks::space","rspec::mocks::anyinstance::expectationchain","rspec::mocks::anyinstance::stubchain","rspec::mocks::messageexpectation","rspec::mocks::methoddouble","rspec::mocks::proxy","rspec::mocks::proxy","rspec::mocks::methoddouble","rspec::mocks::messageexpectation","files/license_txt.html","files/readme_md.html","files/lib/rspec/mocks_rb.html","files/lib/rspec/mocks/any_instance_rb.html","files/lib/rspec/mocks/any_instance/chain_rb.html","files/lib/rspec/mocks/any_instance/message_chains_rb.html","files/lib/rspec/mocks/any_instance/recorder_rb.html","files/lib/rspec/mocks/argument_expectation_rb.html","files/lib/rspec/mocks/argument_matchers_rb.html","files/lib/rspec/mocks/error_generator_rb.html","files/lib/rspec/mocks/errors_rb.html","files/lib/rspec/mocks/example_methods_rb.html","files/lib/rspec/mocks/extensions/instance_exec_rb.html","files/lib/rspec/mocks/extensions/marshal_rb.html","files/lib/rspec/mocks/extensions/psych_rb.html","files/lib/rspec/mocks/framework_rb.html","files/lib/rspec/mocks/message_expectation_rb.html","files/lib/rspec/mocks/method_double_rb.html","files/lib/rspec/mocks/methods_rb.html","files/lib/rspec/mocks/mock_rb.html","files/lib/rspec/mocks/order_group_rb.html","files/lib/rspec/mocks/proxy_rb.html","files/lib/rspec/mocks/serialization_rb.html","files/lib/rspec/mocks/space_rb.html","files/lib/rspec/mocks/standalone_rb.html","files/lib/rspec/mocks/version_rb.html","files/lib/spec/mocks_rb.html"],"info":[["Marshal","lib/rspec/mocks/extensions/marshal.rb","classes/Marshal.html"," < ","",1],["Psych","lib/rspec/mocks/extensions/psych.rb","classes/Psych.html"," < ","",1],["RSpec","lib/rspec/mocks/any_instance/chain.rb","classes/RSpec.html"," < ","",1],["Mocks","RSpec","classes/RSpec/Mocks.html"," < ","",1],["AmbiguousReturnError","RSpec::Mocks","classes/RSpec/Mocks/AmbiguousReturnError.html"," < StandardError","@private ",1],["AnyInstance","RSpec::Mocks","classes/RSpec/Mocks/AnyInstance.html"," < ","",1],["Chain","RSpec::Mocks::AnyInstance","classes/RSpec/Mocks/AnyInstance/Chain.html"," < Object","",1],["ExpectationChain","RSpec::Mocks::AnyInstance","classes/RSpec/Mocks/AnyInstance/ExpectationChain.html"," < Chain","@private ",1],["MessageChains","RSpec::Mocks::AnyInstance","classes/RSpec/Mocks/AnyInstance/MessageChains.html"," < Hash","@private ",1],["Recorder","RSpec::Mocks::AnyInstance","classes/RSpec/Mocks/AnyInstance/Recorder.html"," < Object","Given a class `TheClass`, `TheClass.any_instance` returns a `Recorder`, which records stubs and message",1],["StubChain","RSpec::Mocks::AnyInstance","classes/RSpec/Mocks/AnyInstance/StubChain.html"," < Chain","@private ",1],["StubChainChain","RSpec::Mocks::AnyInstance","classes/RSpec/Mocks/AnyInstance/StubChainChain.html"," < StubChain","@private ",1],["ArgumentExpectation","RSpec::Mocks","classes/RSpec/Mocks/ArgumentExpectation.html"," < Object","@api private ",1],["ArgumentMatchers","RSpec::Mocks","classes/RSpec/Mocks/ArgumentMatchers.html"," < ","ArgumentMatchers are placeholders that you can include in message expectations to match arguments against",1],["AnyArgMatcher","RSpec::Mocks::ArgumentMatchers","classes/RSpec/Mocks/ArgumentMatchers/AnyArgMatcher.html"," < Object","",1],["AnyArgsMatcher","RSpec::Mocks::ArgumentMatchers","classes/RSpec/Mocks/ArgumentMatchers/AnyArgsMatcher.html"," < Object","",1],["BooleanMatcher","RSpec::Mocks::ArgumentMatchers","classes/RSpec/Mocks/ArgumentMatchers/BooleanMatcher.html"," < Object","",1],["DuckTypeMatcher","RSpec::Mocks::ArgumentMatchers","classes/RSpec/Mocks/ArgumentMatchers/DuckTypeMatcher.html"," < Object","",1],["EqualityProxy","RSpec::Mocks::ArgumentMatchers","classes/RSpec/Mocks/ArgumentMatchers/EqualityProxy.html"," < Object","",1],["HashExcludingMatcher","RSpec::Mocks::ArgumentMatchers","classes/RSpec/Mocks/ArgumentMatchers/HashExcludingMatcher.html"," < Object","",1],["HashIncludingMatcher","RSpec::Mocks::ArgumentMatchers","classes/RSpec/Mocks/ArgumentMatchers/HashIncludingMatcher.html"," < Object","",1],["InstanceOf","RSpec::Mocks::ArgumentMatchers","classes/RSpec/Mocks/ArgumentMatchers/InstanceOf.html"," < Object","",1],["KindOf","RSpec::Mocks::ArgumentMatchers","classes/RSpec/Mocks/ArgumentMatchers/KindOf.html"," < Object","",1],["MatcherMatcher","RSpec::Mocks::ArgumentMatchers","classes/RSpec/Mocks/ArgumentMatchers/MatcherMatcher.html"," < Object","",1],["NoArgsMatcher","RSpec::Mocks::ArgumentMatchers","classes/RSpec/Mocks/ArgumentMatchers/NoArgsMatcher.html"," < Object","",1],["RegexpMatcher","RSpec::Mocks::ArgumentMatchers","classes/RSpec/Mocks/ArgumentMatchers/RegexpMatcher.html"," < Object","",1],["ErrorGenerator","RSpec::Mocks","classes/RSpec/Mocks/ErrorGenerator.html"," < Object","@private ",1],["ExampleMethods","RSpec::Mocks","classes/RSpec/Mocks/ExampleMethods.html"," < ","",1],["InstanceExec","RSpec::Mocks","classes/RSpec/Mocks/InstanceExec.html"," < ","@private ",1],["MessageExpectation","RSpec::Mocks","classes/RSpec/Mocks/MessageExpectation.html"," < Object","",1],["MethodDouble","RSpec::Mocks","classes/RSpec/Mocks/MethodDouble.html"," < Hash","@private ",1],["Methods","RSpec::Mocks","classes/RSpec/Mocks/Methods.html"," < ","Methods that are added to every object. ",1],["Mock","RSpec::Mocks","classes/RSpec/Mocks/Mock.html"," < Object","",1],["MockExpectationError","RSpec::Mocks","classes/RSpec/Mocks/MockExpectationError.html"," < Exception","@private ",1],["NegativeMessageExpectation","RSpec::Mocks","classes/RSpec/Mocks/NegativeMessageExpectation.html"," < MessageExpectation","@private ",1],["OrderGroup","RSpec::Mocks","classes/RSpec/Mocks/OrderGroup.html"," < Object","@private ",1],["Proxy","RSpec::Mocks","classes/RSpec/Mocks/Proxy.html"," < Object","@private ",1],["Serialization","RSpec::Mocks","classes/RSpec/Mocks/Serialization.html"," < ","@private ",1],["YAML","RSpec::Mocks::Serialization","classes/RSpec/Mocks/Serialization/YAML.html"," < ","@private ",1],["Space","RSpec::Mocks","classes/RSpec/Mocks/Space.html"," < Object","@api private ",1],["Version","RSpec::Mocks","classes/RSpec/Mocks/Version.html"," < ","",1],["==","RSpec::Mocks::ArgumentMatchers::AnyArgMatcher","classes/RSpec/Mocks/ArgumentMatchers/AnyArgMatcher.html#M000063","(other)","",2],["==","RSpec::Mocks::ArgumentMatchers::BooleanMatcher","classes/RSpec/Mocks/ArgumentMatchers/BooleanMatcher.html#M000070","(value)","",2],["==","RSpec::Mocks::ArgumentMatchers::DuckTypeMatcher","classes/RSpec/Mocks/ArgumentMatchers/DuckTypeMatcher.html#M000086","(value)","",2],["==","RSpec::Mocks::ArgumentMatchers::EqualityProxy","classes/RSpec/Mocks/ArgumentMatchers/EqualityProxy.html#M000093","(expected)","",2],["==","RSpec::Mocks::ArgumentMatchers::HashExcludingMatcher","classes/RSpec/Mocks/ArgumentMatchers/HashExcludingMatcher.html#M000079","(actual)","",2],["==","RSpec::Mocks::ArgumentMatchers::HashIncludingMatcher","classes/RSpec/Mocks/ArgumentMatchers/HashIncludingMatcher.html#M000076","(actual)","",2],["==","RSpec::Mocks::ArgumentMatchers::InstanceOf","classes/RSpec/Mocks/ArgumentMatchers/InstanceOf.html#M000095","(actual)","",2],["==","RSpec::Mocks::ArgumentMatchers::KindOf","classes/RSpec/Mocks/ArgumentMatchers/KindOf.html#M000099","(actual)","",2],["==","RSpec::Mocks::ArgumentMatchers::MatcherMatcher","classes/RSpec/Mocks/ArgumentMatchers/MatcherMatcher.html#M000088","(value)","",2],["==","RSpec::Mocks::ArgumentMatchers::RegexpMatcher","classes/RSpec/Mocks/ArgumentMatchers/RegexpMatcher.html#M000068","(value)","",2],["==","RSpec::Mocks::Mock","classes/RSpec/Mocks/Mock.html#M000203","(other)","This allows for comparing the mock to other objects that proxy such as ActiveRecords belongs_to proxy",2],["__mock_proxy","RSpec::Mocks::Methods","classes/RSpec/Mocks/Methods.html#M000200","()","",2],["__raise","RSpec::Mocks::ErrorGenerator","classes/RSpec/Mocks/ErrorGenerator.html#M000083","(message)","",2],["__recorder","RSpec::Mocks::AnyInstance","classes/RSpec/Mocks/AnyInstance.html#M000031","()","@private ",2],["a_kind_of","RSpec::Mocks::ArgumentMatchers","classes/RSpec/Mocks/ArgumentMatchers.html#M000111","(klass)","Alias for #kind_of",2],["actual_received_count_matters?","RSpec::Mocks::MessageExpectation","classes/RSpec/Mocks/MessageExpectation.html#M000175","()","@private ",2],["add","RSpec::Mocks::AnyInstance::MessageChains","classes/RSpec/Mocks/AnyInstance/MessageChains.html#M000016","(method_name, chain)","@private ",2],["add","RSpec::Mocks::Space","classes/RSpec/Mocks/Space.html#M000238","(obj)","",2],["add_expectation","RSpec::Mocks::MethodDouble","classes/RSpec/Mocks/MethodDouble.html#M000149","(error_generator, expectation_ordering, expected_from, opts, &block)","@private ",2],["add_extensions","RSpec::Mocks","classes/RSpec/Mocks.html#M000253","()","",2],["add_message_expectation","RSpec::Mocks::Proxy","classes/RSpec/Mocks/Proxy.html#M000228","(location, method_name, opts={}, &block)","@private ",2],["add_negative_expectation","RSpec::Mocks::MethodDouble","classes/RSpec/Mocks/MethodDouble.html#M000150","(error_generator, expectation_ordering, expected_from, &implementation)","@private ",2],["add_negative_message_expectation","RSpec::Mocks::Proxy","classes/RSpec/Mocks/Proxy.html#M000229","(location, method_name, &implementation)","@private ",2],["add_stub","RSpec::Mocks::MethodDouble","classes/RSpec/Mocks/MethodDouble.html#M000157","(error_generator, expectation_ordering, expected_from, opts={}, &implementation)","@private ",2],["add_stub","RSpec::Mocks::Proxy","classes/RSpec/Mocks/Proxy.html#M000230","(location, method_name, opts={}, &implementation)","@private ",2],["advise","RSpec::Mocks::MessageExpectation","classes/RSpec/Mocks/MessageExpectation.html#M000156","(*args)","@private ",2],["all_expectations_fulfilled?","RSpec::Mocks::AnyInstance::MessageChains","classes/RSpec/Mocks/AnyInstance/MessageChains.html#M000020","()","@private ",2],["allow_message_expectations_on_nil","RSpec::Mocks::ExampleMethods","classes/RSpec/Mocks/ExampleMethods.html#M000117","()","Disables warning messages about expectations being set on nil. By default warning messages are issued",2],["allow_message_expectations_on_nil","RSpec::Mocks::Proxy","classes/RSpec/Mocks/Proxy.html#M000221","()","@private ",2],["allow_message_expectations_on_nil?","RSpec::Mocks::Proxy","classes/RSpec/Mocks/Proxy.html#M000222","()","@private ",2],["already_observing?","RSpec::Mocks::AnyInstance::Recorder","classes/RSpec/Mocks/AnyInstance/Recorder.html#M000053","(method_name)","",2],["already_proxied_respond_to","RSpec::Mocks::Proxy","classes/RSpec/Mocks/Proxy.html#M000226","()","@private ",2],["already_proxied_respond_to?","RSpec::Mocks::Proxy","classes/RSpec/Mocks/Proxy.html#M000227","()","@private ",2],["an_instance_of","RSpec::Mocks::ArgumentMatchers","classes/RSpec/Mocks/ArgumentMatchers.html#M000109","(klass)","Alias for #instance_of",2],["and_raise","RSpec::Mocks::MessageExpectation","classes/RSpec/Mocks/MessageExpectation.html#M000129","(exception=Exception)","@overload and_raise @overload and_raise(ExceptionClass) @overload and_raise(exception_instance) Tells",2],["and_return","RSpec::Mocks::MessageExpectation","classes/RSpec/Mocks/MessageExpectation.html#M000124","(*values, &return_block)","@overload and_return(value) @overload and_return(first_value, second_value) @overload and_return(&block)",2],["and_throw","RSpec::Mocks::MessageExpectation","classes/RSpec/Mocks/MessageExpectation.html#M000130","(symbol, object = nil)","@overload and_throw(symbol) @overload and_throw(symbol, object) Tells the object to throw a symbol (with",2],["and_yield","RSpec::Mocks::MessageExpectation","classes/RSpec/Mocks/MessageExpectation.html#M000131","(*args, &block)","Tells the object to yield one or more args to a block when the message is received. @example stream.stub(:open).and_yield(StringIO.new)",2],["any_args","RSpec::Mocks::ArgumentMatchers","classes/RSpec/Mocks/ArgumentMatchers.html#M000100","()","Passes if object receives `:message` with any args at all. This is really a more explicit variation of",2],["any_instance","RSpec::Mocks::AnyInstance","classes/RSpec/Mocks/AnyInstance.html#M000028","()","Used to set stubs and message expectations on any instance of a given class. Returns a [Recorder](Recorder),",2],["any_number_of_times","RSpec::Mocks::MessageExpectation","classes/RSpec/Mocks/MessageExpectation.html#M000169","(&block)","Allows an expected message to be received any number of times. ",2],["anything","RSpec::Mocks::ArgumentMatchers","classes/RSpec/Mocks/ArgumentMatchers.html#M000101","()","Passes as long as there is an argument. @example object.should_receive(:message).with(anything()) ",2],["anythingize_lonely_keys","RSpec::Mocks::ArgumentMatchers","classes/RSpec/Mocks/ArgumentMatchers.html#M000112","(*args)","",2],["arg_list","RSpec::Mocks::ErrorGenerator","classes/RSpec/Mocks/ErrorGenerator.html#M000091","(*args)","",2],["arg_message","RSpec::Mocks::ErrorGenerator","classes/RSpec/Mocks/ErrorGenerator.html#M000089","(*args)","",2],["args_match?","RSpec::Mocks::ArgumentExpectation","classes/RSpec/Mocks/ArgumentExpectation.html#M000050","(*args)","",2],["as_null_object","RSpec::Mocks::Methods","classes/RSpec/Mocks/Methods.html#M000195","()","Tells the object to respond to all messages. If specific stub values are declared, they'll work as expected.",2],["as_null_object","RSpec::Mocks::Proxy","classes/RSpec/Mocks/Proxy.html#M000225","()","@private Tells the object to ignore any messages that aren't explicitly set as stubs or message expectations.",2],["assign_stubs","RSpec::Mocks::Mock","classes/RSpec/Mocks/Mock.html#M000216","(stubs)","",2],["at_least","RSpec::Mocks::MessageExpectation","classes/RSpec/Mocks/MessageExpectation.html#M000166","(n, &block)","Constrain a message expectation to be received at least a specific number of times. @example dealer.should_recieve(:deal_card).at_least(9).times",2],["at_most","RSpec::Mocks::MessageExpectation","classes/RSpec/Mocks/MessageExpectation.html#M000167","(n, &block)","Constrain a message expectation to be received at most a specific number of times. @example dealer.should_recieve(:deal_card).at_most(10).times",2],["backup_method!","RSpec::Mocks::AnyInstance::Recorder","classes/RSpec/Mocks/AnyInstance/Recorder.html#M000046","(method_name)","",2],["block_passes?","RSpec::Mocks::ArgumentExpectation","classes/RSpec/Mocks/ArgumentExpectation.html#M000056","(*args)","",2],["boolean","RSpec::Mocks::ArgumentMatchers","classes/RSpec/Mocks/ArgumentMatchers.html#M000104","()","Passes if the argument is boolean. @example object.should_receive(:message).with(boolean()) ",2],["build_alias_method_name","RSpec::Mocks::AnyInstance::Recorder","classes/RSpec/Mocks/AnyInstance/Recorder.html#M000042","(method_name)","",2],["build_child","RSpec::Mocks::MessageExpectation","classes/RSpec/Mocks/MessageExpectation.html#M000122","(expected_from, method_block, expected_received_count, opts={})","@private ",2],["called_max_times?","RSpec::Mocks::MessageExpectation","classes/RSpec/Mocks/MessageExpectation.html#M000142","()","@private ",2],["clear","RSpec::Mocks::MethodDouble","classes/RSpec/Mocks/MethodDouble.html#M000146","()","@private ",2],["clear_actual_received_count!","RSpec::Mocks::MessageExpectation","classes/RSpec/Mocks/MessageExpectation.html#M000191","()","",2],["clone_args_to_yield","RSpec::Mocks::MessageExpectation","classes/RSpec/Mocks/MessageExpectation.html#M000185","(*args)","",2],["configure_method","RSpec::Mocks::MethodDouble","classes/RSpec/Mocks/MethodDouble.html#M000138","()","@private ",2],["constrained_to_any_of?","RSpec::Mocks::AnyInstance::Chain","classes/RSpec/Mocks/AnyInstance/Chain.html#M000002","(*constraints)","@private ",2],["consume","RSpec::Mocks::OrderGroup","classes/RSpec/Mocks/OrderGroup.html#M000212","()","@private ",2],["count_message","RSpec::Mocks::ErrorGenerator","classes/RSpec/Mocks/ErrorGenerator.html#M000096","(count)","",2],["declare_double","RSpec::Mocks::ExampleMethods","classes/RSpec/Mocks/ExampleMethods.html#M000118","(declared_as, *args)","",2],["define_proxy_method","RSpec::Mocks::MethodDouble","classes/RSpec/Mocks/MethodDouble.html#M000140","()","@private ",2],["description","RSpec::Mocks::ArgumentMatchers::AnyArgsMatcher","classes/RSpec/Mocks/ArgumentMatchers/AnyArgsMatcher.html#M000061","()","",2],["description","RSpec::Mocks::ArgumentMatchers::HashExcludingMatcher","classes/RSpec/Mocks/ArgumentMatchers/HashExcludingMatcher.html#M000084","()","",2],["description","RSpec::Mocks::ArgumentMatchers::HashIncludingMatcher","classes/RSpec/Mocks/ArgumentMatchers/HashIncludingMatcher.html#M000077","()","",2],["description","RSpec::Mocks::ArgumentMatchers::NoArgsMatcher","classes/RSpec/Mocks/ArgumentMatchers/NoArgsMatcher.html#M000066","()","",2],["double","RSpec::Mocks::ExampleMethods","classes/RSpec/Mocks/ExampleMethods.html#M000114","(*args)","Creates an instance of RSpec::Mocks::Mock. `name` is used for failure reporting, so you should use the",2],["duck_type","RSpec::Mocks::ArgumentMatchers","classes/RSpec/Mocks/ArgumentMatchers.html#M000103","(*args)","Passes if the argument responds to the specified messages. @example object.should_receive(:message).with(duck_type(:hello))",2],["dump_with_mocks","Marshal","classes/Marshal.html#M000119","(*args)","",2],["dump_with_mocks","Psych","classes/Psych.html#M000120","(object, *args)","",2],["eval_block","RSpec::Mocks::MessageExpectation","classes/RSpec/Mocks/MessageExpectation.html#M000180","(*args, &block)","",2],["exactly","RSpec::Mocks::MessageExpectation","classes/RSpec/Mocks/MessageExpectation.html#M000164","(n, &block)","Constrain a message expectation to be received a specific number of times. @example dealer.should_recieve(:deal_card).exactly(10).times",2],["expectation_fulfilled!","RSpec::Mocks::AnyInstance::Chain","classes/RSpec/Mocks/AnyInstance/Chain.html#M000003","()","@private ",2],["expectation_fulfilled?","RSpec::Mocks::AnyInstance::ExpectationChain","classes/RSpec/Mocks/AnyInstance/ExpectationChain.html#M000008","()","@private ",2],["expectation_fulfilled?","RSpec::Mocks::AnyInstance::StubChain","classes/RSpec/Mocks/AnyInstance/StubChain.html#M000012","()","@private ",2],["expectations","RSpec::Mocks::MethodDouble","classes/RSpec/Mocks/MethodDouble.html#M000126","()","@private ",2],["expected_args","RSpec::Mocks::MessageExpectation","classes/RSpec/Mocks/MessageExpectation.html#M000123","()","@private ",2],["expected_messages_received?","RSpec::Mocks::MessageExpectation","classes/RSpec/Mocks/MessageExpectation.html#M000148","()","@private ",2],["extensions_added?","RSpec::Mocks","classes/RSpec/Mocks.html#M000254","()","",2],["extract_option","RSpec::Mocks::Mock","classes/RSpec/Mocks/Mock.html#M000215","(source, target, key, default=nil)","",2],["extract_options","RSpec::Mocks::Mock","classes/RSpec/Mocks/Mock.html#M000214","(stubs_and_options)","",2],["failed_fast?","RSpec::Mocks::MessageExpectation","classes/RSpec/Mocks/MessageExpectation.html#M000186","()","",2],["find_almost_matching_expectation","RSpec::Mocks::Proxy","classes/RSpec/Mocks/Proxy.html#M000247","(method_name, *args)","",2],["find_almost_matching_stub","RSpec::Mocks::Proxy","classes/RSpec/Mocks/Proxy.html#M000249","(method_name, *args)","",2],["find_matching_expectation","RSpec::Mocks::Proxy","classes/RSpec/Mocks/Proxy.html#M000246","(method_name, *args)","",2],["find_matching_method_stub","RSpec::Mocks::Proxy","classes/RSpec/Mocks/Proxy.html#M000248","(method_name, *args)","",2],["fix_for","RSpec::Mocks::Serialization","classes/RSpec/Mocks/Serialization.html#M000217","(object)","@private ",2],["format_args","RSpec::Mocks::ErrorGenerator","classes/RSpec/Mocks/ErrorGenerator.html#M000090","(*args)","",2],["format_chain","RSpec::Mocks::Methods","classes/RSpec/Mocks/Methods.html#M000201","(*chain, &blk)","",2],["generate_error","RSpec::Mocks::MessageExpectation","classes/RSpec/Mocks/MessageExpectation.html#M000159","()","@private ",2],["handle_order_constraint","RSpec::Mocks::OrderGroup","classes/RSpec/Mocks/OrderGroup.html#M000213","(expectation)","@private ",2],["has_expectation?","RSpec::Mocks::AnyInstance::MessageChains","classes/RSpec/Mocks/AnyInstance/MessageChains.html#M000019","(method_name)","@private ",2],["has_negative_expectation?","RSpec::Mocks::Proxy","classes/RSpec/Mocks/Proxy.html#M000235","(method_name)","@private ",2],["hash_excluding","RSpec::Mocks::ArgumentMatchers","classes/RSpec/Mocks/ArgumentMatchers.html#M000106","(*args)","Passes if the argument is a hash that doesn't include the specified key(s) or key/value @example object.should_receive(:message).with(hash_excluding(:key",2],["hash_including","RSpec::Mocks::ArgumentMatchers","classes/RSpec/Mocks/ArgumentMatchers.html#M000105","(*args)","Passes if the argument is a hash that includes the specified key(s) or key/value pairs. If the hash includes",2],["hash_not_including","RSpec::Mocks::ArgumentMatchers","classes/RSpec/Mocks/ArgumentMatchers.html#M000107","(*args)","Alias for #hash_excluding",2],["ignoring_args?","RSpec::Mocks::MessageExpectation","classes/RSpec/Mocks/MessageExpectation.html#M000151","()","@private ",2],["increase_actual_received_count!","RSpec::Mocks::MessageExpectation","classes/RSpec/Mocks/MessageExpectation.html#M000176","()","@private ",2],["inspect","RSpec::Mocks::Mock","classes/RSpec/Mocks/Mock.html#M000204","()","@private ",2],["instance_exec","RSpec::Mocks::InstanceExec","classes/RSpec/Mocks/InstanceExec.html#M000113","(*args, &block)","@private based on Bounded Spec InstanceExec (Mauricio Fernandez) http://eigenclass.org/hiki/bounded+space+instance_exec",2],["instance_of","RSpec::Mocks::ArgumentMatchers","classes/RSpec/Mocks/ArgumentMatchers.html#M000108","(klass)","Passes if `arg.instance_of?(klass)` ",2],["instance_that_received","RSpec::Mocks::AnyInstance::Recorder","classes/RSpec/Mocks/AnyInstance/Recorder.html#M000038","(method_name)","@private ",2],["intro","RSpec::Mocks::ErrorGenerator","classes/RSpec/Mocks/ErrorGenerator.html#M000082","()","",2],["invocation_order","RSpec::Mocks::AnyInstance::ExpectationChain","classes/RSpec/Mocks/AnyInstance/ExpectationChain.html#M000010","()","",2],["invocation_order","RSpec::Mocks::AnyInstance::StubChain","classes/RSpec/Mocks/AnyInstance/StubChain.html#M000013","()","",2],["invocation_order","RSpec::Mocks::AnyInstance::StubChainChain","classes/RSpec/Mocks/AnyInstance/StubChainChain.html#M000022","()","",2],["invoke","RSpec::Mocks::MessageExpectation","classes/RSpec/Mocks/MessageExpectation.html#M000137","(*args, &block)","@private ",2],["invoke_consecutive_return_block","RSpec::Mocks::MessageExpectation","classes/RSpec/Mocks/MessageExpectation.html#M000181","(*args, &block)","",2],["invoke_method_block","RSpec::Mocks::MessageExpectation","classes/RSpec/Mocks/MessageExpectation.html#M000177","(*args, &block)","",2],["invoke_return_block","RSpec::Mocks::MessageExpectation","classes/RSpec/Mocks/MessageExpectation.html#M000184","(*args, &block)","",2],["invoke_with_yield","RSpec::Mocks::MessageExpectation","classes/RSpec/Mocks/MessageExpectation.html#M000178","(&block)","",2],["is_matcher?","RSpec::Mocks::ArgumentExpectation","classes/RSpec/Mocks/ArgumentExpectation.html#M000049","(obj)","",2],["kind_of","RSpec::Mocks::ArgumentMatchers","classes/RSpec/Mocks/ArgumentMatchers.html#M000110","(klass)","Passes if `arg.kind_of?(klass)` ",2],["last_message","RSpec::Mocks::AnyInstance::Chain","classes/RSpec/Mocks/AnyInstance/Chain.html#M000005","()","",2],["mark_invoked!","RSpec::Mocks::AnyInstance::Recorder","classes/RSpec/Mocks/AnyInstance/Recorder.html#M000055","(method_name)","",2],["match_any_args?","RSpec::Mocks::ArgumentExpectation","classes/RSpec/Mocks/ArgumentExpectation.html#M000058","()","",2],["matcher_for","RSpec::Mocks::ArgumentExpectation","classes/RSpec/Mocks/ArgumentExpectation.html#M000048","(arg)","",2],["matchers_match?","RSpec::Mocks::ArgumentExpectation","classes/RSpec/Mocks/ArgumentExpectation.html#M000057","(*args)","",2],["matches?","RSpec::Mocks::MessageExpectation","classes/RSpec/Mocks/MessageExpectation.html#M000136","(sym, *args)","@private ",2],["matches_at_least_count?","RSpec::Mocks::MessageExpectation","classes/RSpec/Mocks/MessageExpectation.html#M000152","()","@private ",2],["matches_at_most_count?","RSpec::Mocks::MessageExpectation","classes/RSpec/Mocks/MessageExpectation.html#M000153","()","@private ",2],["matches_exact_count?","RSpec::Mocks::MessageExpectation","classes/RSpec/Mocks/MessageExpectation.html#M000154","()","@private ",2],["matches_name_but_not_args","RSpec::Mocks::MessageExpectation","classes/RSpec/Mocks/MessageExpectation.html#M000143","(sym, *args)","@private ",2],["message_received","RSpec::Mocks::Proxy","classes/RSpec/Mocks/Proxy.html#M000237","(method_name, *args, &block)","@private ",2],["messages","RSpec::Mocks::AnyInstance::Chain","classes/RSpec/Mocks/AnyInstance/Chain.html#M000004","()","",2],["method_double","RSpec::Mocks::Proxy","classes/RSpec/Mocks/Proxy.html#M000244","()","",2],["method_doubles","RSpec::Mocks::Proxy","classes/RSpec/Mocks/Proxy.html#M000245","()","",2],["method_missing","RSpec::Mocks::Mock","classes/RSpec/Mocks/Mock.html#M000208","(sym, *args, &block)","",2],["mock","RSpec::Mocks::ExampleMethods","classes/RSpec/Mocks/ExampleMethods.html#M000115","(*args)","Just like double ",2],["mocks","RSpec::Mocks::Space","classes/RSpec/Mocks/Space.html#M000241","()","",2],["negative_expectation_for?","RSpec::Mocks::MessageExpectation","classes/RSpec/Mocks/MessageExpectation.html#M000174","(sym)","@private ",2],["negative_expectation_for?","RSpec::Mocks::NegativeMessageExpectation","classes/RSpec/Mocks/NegativeMessageExpectation.html#M000194","(sym)","@private ",2],["never","RSpec::Mocks::MessageExpectation","classes/RSpec/Mocks/MessageExpectation.html#M000170","()","Expect a message not to be received at all. @example car.should_receive(:stop).never ",2],["new","RSpec::Mocks::AnyInstance::ExpectationChain","classes/RSpec/Mocks/AnyInstance/ExpectationChain.html#M000007","(*args, &block)","@private ",2],["new","RSpec::Mocks::AnyInstance::MessageChains","classes/RSpec/Mocks/AnyInstance/MessageChains.html#M000015","()","",2],["new","RSpec::Mocks::AnyInstance::Recorder","classes/RSpec/Mocks/AnyInstance/Recorder.html#M000026","(klass)","",2],["new","RSpec::Mocks::AnyInstance::StubChain","classes/RSpec/Mocks/AnyInstance/StubChain.html#M000011","(*args, &block)","@private ",2],["new","RSpec::Mocks::AnyInstance::StubChainChain","classes/RSpec/Mocks/AnyInstance/StubChainChain.html#M000018","(*args, &block)","@private ",2],["new","RSpec::Mocks::ArgumentExpectation","classes/RSpec/Mocks/ArgumentExpectation.html#M000044","(*args, &block)","",2],["new","RSpec::Mocks::ArgumentMatchers::AnyArgMatcher","classes/RSpec/Mocks/ArgumentMatchers/AnyArgMatcher.html#M000062","(ignore)","",2],["new","RSpec::Mocks::ArgumentMatchers::BooleanMatcher","classes/RSpec/Mocks/ArgumentMatchers/BooleanMatcher.html#M000069","(ignore)","",2],["new","RSpec::Mocks::ArgumentMatchers::DuckTypeMatcher","classes/RSpec/Mocks/ArgumentMatchers/DuckTypeMatcher.html#M000085","(*methods_to_respond_to)","",2],["new","RSpec::Mocks::ArgumentMatchers::EqualityProxy","classes/RSpec/Mocks/ArgumentMatchers/EqualityProxy.html#M000092","(given)","",2],["new","RSpec::Mocks::ArgumentMatchers::HashExcludingMatcher","classes/RSpec/Mocks/ArgumentMatchers/HashExcludingMatcher.html#M000078","(expected)","",2],["new","RSpec::Mocks::ArgumentMatchers::HashIncludingMatcher","classes/RSpec/Mocks/ArgumentMatchers/HashIncludingMatcher.html#M000075","(expected)","",2],["new","RSpec::Mocks::ArgumentMatchers::InstanceOf","classes/RSpec/Mocks/ArgumentMatchers/InstanceOf.html#M000094","(klass)","",2],["new","RSpec::Mocks::ArgumentMatchers::KindOf","classes/RSpec/Mocks/ArgumentMatchers/KindOf.html#M000098","(klass)","",2],["new","RSpec::Mocks::ArgumentMatchers::MatcherMatcher","classes/RSpec/Mocks/ArgumentMatchers/MatcherMatcher.html#M000087","(matcher)","",2],["new","RSpec::Mocks::ArgumentMatchers::RegexpMatcher","classes/RSpec/Mocks/ArgumentMatchers/RegexpMatcher.html#M000067","(regexp)","",2],["new","RSpec::Mocks::ErrorGenerator","classes/RSpec/Mocks/ErrorGenerator.html#M000059","(target, name, options={})","",2],["new","RSpec::Mocks::MessageExpectation","classes/RSpec/Mocks/MessageExpectation.html#M000121","(error_generator, expectation_ordering, expected_from, sym, method_block, expected_received_count=1, opts={}, &implementation)","@private ",2],["new","RSpec::Mocks::MethodDouble","classes/RSpec/Mocks/MethodDouble.html#M000125","(object, method_name, proxy)","@private ",2],["new","RSpec::Mocks::Mock","classes/RSpec/Mocks/Mock.html#M000202","(name=nil, stubs_and_options={})","Creates a new test double with a `name` (that will be used in error messages only) ",2],["new","RSpec::Mocks::NegativeMessageExpectation","classes/RSpec/Mocks/NegativeMessageExpectation.html#M000193","(message, expectation_ordering, expected_from, sym, method_block)","@private ",2],["new","RSpec::Mocks::OrderGroup","classes/RSpec/Mocks/OrderGroup.html#M000209","(error_generator)","",2],["new","RSpec::Mocks::Proxy","classes/RSpec/Mocks/Proxy.html#M000223","(object, name=nil, options={})","@private ",2],["no_args","RSpec::Mocks::ArgumentMatchers","classes/RSpec/Mocks/ArgumentMatchers.html#M000102","()","Passes if no arguments are passed along with the message @example object.should_receive(:message).with(no_args)",2],["normalize_chain","RSpec::Mocks::AnyInstance::Recorder","classes/RSpec/Mocks/AnyInstance/Recorder.html#M000039","(*args)","",2],["null_object?","RSpec::Mocks::ArgumentExpectation","classes/RSpec/Mocks/ArgumentExpectation.html#M000051","(obj)","",2],["null_object?","RSpec::Mocks::Methods","classes/RSpec/Mocks/Methods.html#M000196","()","Returns true if this object has received `as_null_object` ",2],["null_object?","RSpec::Mocks::Proxy","classes/RSpec/Mocks/Proxy.html#M000224","()","@private ",2],["obfuscate","RSpec::Mocks::MethodDouble","classes/RSpec/Mocks/MethodDouble.html#M000133","(method_name)","@private ",2],["object_responds_to?","RSpec::Mocks::MethodDouble","classes/RSpec/Mocks/MethodDouble.html#M000135","(method_name)","@private ",2],["object_singleton_class","RSpec::Mocks::MethodDouble","classes/RSpec/Mocks/MethodDouble.html#M000132","()","@private ",2],["observe!","RSpec::Mocks::AnyInstance::Recorder","classes/RSpec/Mocks/AnyInstance/Recorder.html#M000054","(method_name)","",2],["once","RSpec::Mocks::MessageExpectation","classes/RSpec/Mocks/MessageExpectation.html#M000171","(&block)","Expect a message to be received exactly one time. @example car.should_receive(:go).once ",2],["opts","RSpec::Mocks::ErrorGenerator","classes/RSpec/Mocks/ErrorGenerator.html#M000060","()","@private ",2],["ordered","RSpec::Mocks::MessageExpectation","classes/RSpec/Mocks/MessageExpectation.html#M000173","(&block)","Expect messages to be received in a specific order. @example api.should_receive(:prepare).ordered api.should_receive(:run).ordered",2],["playback!","RSpec::Mocks::AnyInstance::Chain","classes/RSpec/Mocks/AnyInstance/Chain.html#M000001","(instance)","@private ",2],["playback!","RSpec::Mocks::AnyInstance::MessageChains","classes/RSpec/Mocks/AnyInstance/MessageChains.html#M000024","(instance, method_name)","@private ",2],["playback!","RSpec::Mocks::AnyInstance::Recorder","classes/RSpec/Mocks/AnyInstance/Recorder.html#M000037","(instance, method_name)","@private ",2],["pretty_print","RSpec::Mocks::ErrorGenerator","classes/RSpec/Mocks/ErrorGenerator.html#M000097","(count)","",2],["proxy_for_nil_class?","RSpec::Mocks::MethodDouble","classes/RSpec/Mocks/MethodDouble.html#M000160","()","@private ",2],["public_protected_or_private_method_defined?","RSpec::Mocks::AnyInstance::Recorder","classes/RSpec/Mocks/AnyInstance/Recorder.html#M000047","(method_name)","",2],["raise_block_failed_error","RSpec::Mocks::ErrorGenerator","classes/RSpec/Mocks/ErrorGenerator.html#M000074","(sym, detail)","@private ",2],["raise_expectation_error","RSpec::Mocks::ErrorGenerator","classes/RSpec/Mocks/ErrorGenerator.html#M000072","(sym, expected_received_count, actual_received_count, *args)","@private ",2],["raise_if_second_instance_to_receive_message","RSpec::Mocks::AnyInstance::MessageChains","classes/RSpec/Mocks/AnyInstance/MessageChains.html#M000025","(instance)","",2],["raise_method_not_stubbed_error","RSpec::Mocks::MethodDouble","classes/RSpec/Mocks/MethodDouble.html#M000162","()","@private ",2],["raise_missing_block_error","RSpec::Mocks::ErrorGenerator","classes/RSpec/Mocks/ErrorGenerator.html#M000080","(args_to_yield)","@private ",2],["raise_out_of_order_error","RSpec::Mocks::ErrorGenerator","classes/RSpec/Mocks/ErrorGenerator.html#M000073","(sym)","@private ",2],["raise_similar_message_args_error","RSpec::Mocks::ErrorGenerator","classes/RSpec/Mocks/ErrorGenerator.html#M000071","(expectation, *args)","@private ",2],["raise_unexpected_message_args_error","RSpec::Mocks::ErrorGenerator","classes/RSpec/Mocks/ErrorGenerator.html#M000065","(expectation, *args)","@private ",2],["raise_unexpected_message_args_error","RSpec::Mocks::Proxy","classes/RSpec/Mocks/Proxy.html#M000242","(expectation, *args)","@private ",2],["raise_unexpected_message_error","RSpec::Mocks::ErrorGenerator","classes/RSpec/Mocks/ErrorGenerator.html#M000064","(sym, *args)","@private ",2],["raise_unexpected_message_error","RSpec::Mocks::Proxy","classes/RSpec/Mocks/Proxy.html#M000243","(method_name, *args)","@private ",2],["raise_wrong_arity_error","RSpec::Mocks::ErrorGenerator","classes/RSpec/Mocks/ErrorGenerator.html#M000081","(args_to_yield, arity)","@private ",2],["ready_for?","RSpec::Mocks::OrderGroup","classes/RSpec/Mocks/OrderGroup.html#M000211","(expectation)","@private ",2],["received_expected_message!","RSpec::Mocks::AnyInstance::MessageChains","classes/RSpec/Mocks/AnyInstance/MessageChains.html#M000023","(method_name)","@private ",2],["received_expected_message!","RSpec::Mocks::AnyInstance::Recorder","classes/RSpec/Mocks/AnyInstance/Recorder.html#M000040","(method_name)","",2],["received_message?","RSpec::Mocks::Methods","classes/RSpec/Mocks/Methods.html#M000197","(sym, *args, &block)","@private ",2],["received_message?","RSpec::Mocks::Proxy","classes/RSpec/Mocks/Proxy.html#M000234","(method_name, *args, &block)","@private ",2],["record","RSpec::Mocks::AnyInstance::Chain","classes/RSpec/Mocks/AnyInstance/Chain.html#M000006","(rspec_method_name, *args, &block)","",2],["record","RSpec::Mocks::AnyInstance::Chain","classes/RSpec/Mocks/AnyInstance/Chain.html#M000000","(method_name)","@macro [attach] record @method $1(*args, &block) Records the `$1` message for playback against an instance",2],["record_message_received","RSpec::Mocks::Proxy","classes/RSpec/Mocks/Proxy.html#M000236","(method_name, *args, &block)","@private ",2],["register","RSpec::Mocks::OrderGroup","classes/RSpec/Mocks/OrderGroup.html#M000210","(expectation)","@private ",2],["remove_dummy_method!","RSpec::Mocks::AnyInstance::Recorder","classes/RSpec/Mocks/AnyInstance/Recorder.html#M000045","(method_name)","",2],["remove_stub","RSpec::Mocks::MethodDouble","classes/RSpec/Mocks/MethodDouble.html#M000158","()","@private ",2],["remove_stub","RSpec::Mocks::Proxy","classes/RSpec/Mocks/Proxy.html#M000231","(method_name)","@private ",2],["remove_stub_chains_for!","RSpec::Mocks::AnyInstance::MessageChains","classes/RSpec/Mocks/AnyInstance/MessageChains.html#M000017","(method_name)","@private ",2],["reset","RSpec::Mocks::MethodDouble","classes/RSpec/Mocks/MethodDouble.html#M000145","()","@private ",2],["reset","RSpec::Mocks::Proxy","classes/RSpec/Mocks/Proxy.html#M000233","()","@private ",2],["reset_all","RSpec::Mocks::Space","classes/RSpec/Mocks/Space.html#M000240","()","",2],["reset_nil_expectations_warning","RSpec::Mocks::MethodDouble","classes/RSpec/Mocks/MethodDouble.html#M000165","()","@private ",2],["respond_to?","RSpec::Mocks::Mock","classes/RSpec/Mocks/Mock.html#M000207","(sym, incl_private=false)","@private ",2],["restore_method!","RSpec::Mocks::AnyInstance::Recorder","classes/RSpec/Mocks/AnyInstance/Recorder.html#M000041","(method_name)","",2],["restore_original_method","RSpec::Mocks::MethodDouble","classes/RSpec/Mocks/MethodDouble.html#M000141","()","@private ",2],["restore_original_method!","RSpec::Mocks::AnyInstance::Recorder","classes/RSpec/Mocks/AnyInstance/Recorder.html#M000043","(method_name)","",2],["rspec_reset","RSpec::Mocks::Methods","classes/RSpec/Mocks/Methods.html#M000199","()","@private ",2],["rspec_verify","RSpec::Mocks::AnyInstance","classes/RSpec/Mocks/AnyInstance.html#M000030","()","@private ",2],["rspec_verify","RSpec::Mocks::Methods","classes/RSpec/Mocks/Methods.html#M000198","()","@private ",2],["set_expected_received_count","RSpec::Mocks::MessageExpectation","classes/RSpec/Mocks/MessageExpectation.html#M000187","(relativity, n)","",2],["setup","RSpec::Mocks","classes/RSpec/Mocks.html#M000250","(host)","",2],["should_not_receive","RSpec::Mocks::Methods","classes/RSpec/Mocks/Methods.html#M000182","(message, &block)","Sets and expectation that this object should _not_ receive a message during this example. ",2],["should_receive","RSpec::Mocks::AnyInstance::Recorder","classes/RSpec/Mocks/AnyInstance/Recorder.html#M000032","(method_name, &block)","Initializes the recording a message expectation to be played back against any instance of this object",2],["should_receive","RSpec::Mocks::Methods","classes/RSpec/Mocks/Methods.html#M000179","(message, opts={}, &block)","Sets and expectation that this object should receive a message before the end of the example. @example",2],["similar_messages","RSpec::Mocks::MessageExpectation","classes/RSpec/Mocks/MessageExpectation.html#M000155","()","@private ",2],["stash_original_method","RSpec::Mocks::MethodDouble","classes/RSpec/Mocks/MethodDouble.html#M000139","()","@private ",2],["stashed_method_name","RSpec::Mocks::MethodDouble","classes/RSpec/Mocks/MethodDouble.html#M000134","()","@private ",2],["stop_all_observation!","RSpec::Mocks::AnyInstance::Recorder","classes/RSpec/Mocks/AnyInstance/Recorder.html#M000036","()","@private ",2],["stop_observing!","RSpec::Mocks::AnyInstance::Recorder","classes/RSpec/Mocks/AnyInstance/Recorder.html#M000052","(method_name)","",2],["stub","RSpec::Mocks::AnyInstance::Recorder","classes/RSpec/Mocks/AnyInstance/Recorder.html#M000027","(method_name_or_method_map, &block)","Initializes the recording a stub to be played back against any instance of this object that invokes the",2],["stub","RSpec::Mocks::ExampleMethods","classes/RSpec/Mocks/ExampleMethods.html#M000116","(*args)","Just like double ",2],["stub","RSpec::Mocks::Methods","classes/RSpec/Mocks/Methods.html#M000183","(message_or_hash, opts={}, &block)","Tells the object to respond to the message with the specified value. @example counter.stub(:count).and_return(37)",2],["stub!","RSpec::Mocks::AnyInstance::Recorder","classes/RSpec/Mocks/AnyInstance/Recorder.html#M000035","(*)","@private ",2],["stub!","RSpec::Mocks::Methods","classes/RSpec/Mocks/Methods.html#M000189","(message_or_hash, opts={}, &block)","Alias for #stub",2],["stub_chain","RSpec::Mocks::AnyInstance::Recorder","classes/RSpec/Mocks/AnyInstance/Recorder.html#M000029","(*method_names_and_optional_return_values, &block)","Initializes the recording a stub chain to be played back against any instance of this object that invokes",2],["stub_chain","RSpec::Mocks::Methods","classes/RSpec/Mocks/Methods.html#M000192","(*chain, &blk)","@overload stub_chain(method1, method2) @overload stub_chain(\"method1.method2\") @overload stub_chain(method1,",2],["stubs","RSpec::Mocks::MethodDouble","classes/RSpec/Mocks/MethodDouble.html#M000127","()","@private ",2],["teardown","RSpec::Mocks","classes/RSpec/Mocks.html#M000252","()","",2],["times","RSpec::Mocks::MessageExpectation","classes/RSpec/Mocks/MessageExpectation.html#M000168","(&block)","Syntactic sugar for `exactly`, `at_least` and `at_most` @example dealer.should_recieve(:deal_card).exactly(10).times",2],["to_s","RSpec::Mocks::Mock","classes/RSpec/Mocks/Mock.html#M000205","()","@private ",2],["to_str","RSpec::Mocks::Mock","classes/RSpec/Mocks/Mock.html#M000206","()","Alias for #to_s",2],["to_yaml","RSpec::Mocks::Serialization::YAML","classes/RSpec/Mocks/Serialization/YAML.html#M000218","(options = {})","@private ",2],["twice","RSpec::Mocks::MessageExpectation","classes/RSpec/Mocks/MessageExpectation.html#M000172","(&block)","Expect a message to be received exactly two times. @example car.should_receive(:go).twice ",2],["unfulfilled_expectations","RSpec::Mocks::AnyInstance::MessageChains","classes/RSpec/Mocks/AnyInstance/MessageChains.html#M000021","()","@private ",2],["unstub","RSpec::Mocks::AnyInstance::Recorder","classes/RSpec/Mocks/AnyInstance/Recorder.html#M000033","(method_name)","Removes any previously recorded stubs, stub_chains or message expectations that use `method_name`. @see",2],["unstub","RSpec::Mocks::Methods","classes/RSpec/Mocks/Methods.html#M000188","(message)","Removes a stub. On a double, the object will no longer respond to `message`. On a real object, the original",2],["unstub!","RSpec::Mocks::Methods","classes/RSpec/Mocks/Methods.html#M000190","(message)","Alias for #unstub",2],["verify","RSpec::Mocks","classes/RSpec/Mocks.html#M000251","()","",2],["verify","RSpec::Mocks::AnyInstance::Recorder","classes/RSpec/Mocks/AnyInstance/Recorder.html#M000034","()","@api private Used internally to verify that message expectations have been fulfilled. ",2],["verify","RSpec::Mocks::MethodDouble","classes/RSpec/Mocks/MethodDouble.html#M000144","()","@private ",2],["verify","RSpec::Mocks::Proxy","classes/RSpec/Mocks/Proxy.html#M000232","()","@private ",2],["verify_all","RSpec::Mocks::Space","classes/RSpec/Mocks/Space.html#M000239","()","",2],["verify_invocation_order","RSpec::Mocks::AnyInstance::ExpectationChain","classes/RSpec/Mocks/AnyInstance/ExpectationChain.html#M000009","(rspec_method_name, *args, &block)","",2],["verify_invocation_order","RSpec::Mocks::AnyInstance::StubChain","classes/RSpec/Mocks/AnyInstance/StubChain.html#M000014","(rspec_method_name, *args, &block)","",2],["verify_messages_received","RSpec::Mocks::MessageExpectation","classes/RSpec/Mocks/MessageExpectation.html#M000147","()","@private ",2],["visibility","RSpec::Mocks::MethodDouble","classes/RSpec/Mocks/MethodDouble.html#M000128","()","@private ",2],["warn_about_expectations_on_nil","RSpec::Mocks::Proxy","classes/RSpec/Mocks/Proxy.html#M000219","()","@private ",2],["warn_about_expectations_on_nil=","RSpec::Mocks::Proxy","classes/RSpec/Mocks/Proxy.html#M000220","(new_value)","@private ",2],["warn_if_nil_class","RSpec::Mocks::MethodDouble","classes/RSpec/Mocks/MethodDouble.html#M000161","()","@private ",2],["with","RSpec::Mocks::MessageExpectation","classes/RSpec/Mocks/MessageExpectation.html#M000163","(*args, &block)","Constrains a stub or message expectation to invocations with specific arguments. With a stub, if the",2],["License.txt","files/License_txt.html","files/License_txt.html","","(The MIT License)  Copyright (c) 2006 David Chelimsky, The RSpec Development Team Copyright (c) 2005",3],["README.md","files/README_md.html","files/README_md.html","","# RSpec Mocks  rspec-mocks is a test-double framework for rspec with support for method stubs, fakes,",3],["mocks.rb","files/lib/rspec/mocks_rb.html","files/lib/rspec/mocks_rb.html","","",3],["any_instance.rb","files/lib/rspec/mocks/any_instance_rb.html","files/lib/rspec/mocks/any_instance_rb.html","","",3],["chain.rb","files/lib/rspec/mocks/any_instance/chain_rb.html","files/lib/rspec/mocks/any_instance/chain_rb.html","","",3],["message_chains.rb","files/lib/rspec/mocks/any_instance/message_chains_rb.html","files/lib/rspec/mocks/any_instance/message_chains_rb.html","","",3],["recorder.rb","files/lib/rspec/mocks/any_instance/recorder_rb.html","files/lib/rspec/mocks/any_instance/recorder_rb.html","","",3],["argument_expectation.rb","files/lib/rspec/mocks/argument_expectation_rb.html","files/lib/rspec/mocks/argument_expectation_rb.html","","",3],["argument_matchers.rb","files/lib/rspec/mocks/argument_matchers_rb.html","files/lib/rspec/mocks/argument_matchers_rb.html","","",3],["error_generator.rb","files/lib/rspec/mocks/error_generator_rb.html","files/lib/rspec/mocks/error_generator_rb.html","","",3],["errors.rb","files/lib/rspec/mocks/errors_rb.html","files/lib/rspec/mocks/errors_rb.html","","",3],["example_methods.rb","files/lib/rspec/mocks/example_methods_rb.html","files/lib/rspec/mocks/example_methods_rb.html","","",3],["instance_exec.rb","files/lib/rspec/mocks/extensions/instance_exec_rb.html","files/lib/rspec/mocks/extensions/instance_exec_rb.html","","",3],["marshal.rb","files/lib/rspec/mocks/extensions/marshal_rb.html","files/lib/rspec/mocks/extensions/marshal_rb.html","","",3],["psych.rb","files/lib/rspec/mocks/extensions/psych_rb.html","files/lib/rspec/mocks/extensions/psych_rb.html","","",3],["framework.rb","files/lib/rspec/mocks/framework_rb.html","files/lib/rspec/mocks/framework_rb.html","","Require everything except the global extensions of class and object. This supports wrapping rspec's mocking",3],["message_expectation.rb","files/lib/rspec/mocks/message_expectation_rb.html","files/lib/rspec/mocks/message_expectation_rb.html","","",3],["method_double.rb","files/lib/rspec/mocks/method_double_rb.html","files/lib/rspec/mocks/method_double_rb.html","","",3],["methods.rb","files/lib/rspec/mocks/methods_rb.html","files/lib/rspec/mocks/methods_rb.html","","",3],["mock.rb","files/lib/rspec/mocks/mock_rb.html","files/lib/rspec/mocks/mock_rb.html","","",3],["order_group.rb","files/lib/rspec/mocks/order_group_rb.html","files/lib/rspec/mocks/order_group_rb.html","","",3],["proxy.rb","files/lib/rspec/mocks/proxy_rb.html","files/lib/rspec/mocks/proxy_rb.html","","",3],["serialization.rb","files/lib/rspec/mocks/serialization_rb.html","files/lib/rspec/mocks/serialization_rb.html","","",3],["space.rb","files/lib/rspec/mocks/space_rb.html","files/lib/rspec/mocks/space_rb.html","","",3],["standalone.rb","files/lib/rspec/mocks/standalone_rb.html","files/lib/rspec/mocks/standalone_rb.html","","",3],["version.rb","files/lib/rspec/mocks/version_rb.html","files/lib/rspec/mocks/version_rb.html","","",3],["mocks.rb","files/lib/spec/mocks_rb.html","files/lib/spec/mocks_rb.html","","For backward compatibility with rspec-1 ",3]],"searchIndex":["marshal","psych","rspec","mocks","ambiguousreturnerror","anyinstance","chain","expectationchain","messagechains","recorder","stubchain","stubchainchain","argumentexpectation","argumentmatchers","anyargmatcher","anyargsmatcher","booleanmatcher","ducktypematcher","equalityproxy","hashexcludingmatcher","hashincludingmatcher","instanceof","kindof","matchermatcher","noargsmatcher","regexpmatcher","errorgenerator","examplemethods","instanceexec","messageexpectation","methoddouble","methods","mock","mockexpectationerror","negativemessageexpectation","ordergroup","proxy","serialization","yaml","space","version","==()","==()","==()","==()","==()","==()","==()","==()","==()","==()","==()","__mock_proxy()","__raise()","__recorder()","a_kind_of()","actual_received_count_matters?()","add()","add()","add_expectation()","add_extensions()","add_message_expectation()","add_negative_expectation()","add_negative_message_expectation()","add_stub()","add_stub()","advise()","all_expectations_fulfilled?()","allow_message_expectations_on_nil()","allow_message_expectations_on_nil()","allow_message_expectations_on_nil?()","already_observing?()","already_proxied_respond_to()","already_proxied_respond_to?()","an_instance_of()","and_raise()","and_return()","and_throw()","and_yield()","any_args()","any_instance()","any_number_of_times()","anything()","anythingize_lonely_keys()","arg_list()","arg_message()","args_match?()","as_null_object()","as_null_object()","assign_stubs()","at_least()","at_most()","backup_method!()","block_passes?()","boolean()","build_alias_method_name()","build_child()","called_max_times?()","clear()","clear_actual_received_count!()","clone_args_to_yield()","configure_method()","constrained_to_any_of?()","consume()","count_message()","declare_double()","define_proxy_method()","description()","description()","description()","description()","double()","duck_type()","dump_with_mocks()","dump_with_mocks()","eval_block()","exactly()","expectation_fulfilled!()","expectation_fulfilled?()","expectation_fulfilled?()","expectations()","expected_args()","expected_messages_received?()","extensions_added?()","extract_option()","extract_options()","failed_fast?()","find_almost_matching_expectation()","find_almost_matching_stub()","find_matching_expectation()","find_matching_method_stub()","fix_for()","format_args()","format_chain()","generate_error()","handle_order_constraint()","has_expectation?()","has_negative_expectation?()","hash_excluding()","hash_including()","hash_not_including()","ignoring_args?()","increase_actual_received_count!()","inspect()","instance_exec()","instance_of()","instance_that_received()","intro()","invocation_order()","invocation_order()","invocation_order()","invoke()","invoke_consecutive_return_block()","invoke_method_block()","invoke_return_block()","invoke_with_yield()","is_matcher?()","kind_of()","last_message()","mark_invoked!()","match_any_args?()","matcher_for()","matchers_match?()","matches?()","matches_at_least_count?()","matches_at_most_count?()","matches_exact_count?()","matches_name_but_not_args()","message_received()","messages()","method_double()","method_doubles()","method_missing()","mock()","mocks()","negative_expectation_for?()","negative_expectation_for?()","never()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","no_args()","normalize_chain()","null_object?()","null_object?()","null_object?()","obfuscate()","object_responds_to?()","object_singleton_class()","observe!()","once()","opts()","ordered()","playback!()","playback!()","playback!()","pretty_print()","proxy_for_nil_class?()","public_protected_or_private_method_defined?()","raise_block_failed_error()","raise_expectation_error()","raise_if_second_instance_to_receive_message()","raise_method_not_stubbed_error()","raise_missing_block_error()","raise_out_of_order_error()","raise_similar_message_args_error()","raise_unexpected_message_args_error()","raise_unexpected_message_args_error()","raise_unexpected_message_error()","raise_unexpected_message_error()","raise_wrong_arity_error()","ready_for?()","received_expected_message!()","received_expected_message!()","received_message?()","received_message?()","record()","record()","record_message_received()","register()","remove_dummy_method!()","remove_stub()","remove_stub()","remove_stub_chains_for!()","reset()","reset()","reset_all()","reset_nil_expectations_warning()","respond_to?()","restore_method!()","restore_original_method()","restore_original_method!()","rspec_reset()","rspec_verify()","rspec_verify()","set_expected_received_count()","setup()","should_not_receive()","should_receive()","should_receive()","similar_messages()","stash_original_method()","stashed_method_name()","stop_all_observation!()","stop_observing!()","stub()","stub()","stub()","stub!()","stub!()","stub_chain()","stub_chain()","stubs()","teardown()","times()","to_s()","to_str()","to_yaml()","twice()","unfulfilled_expectations()","unstub()","unstub()","unstub!()","verify()","verify()","verify()","verify()","verify_all()","verify_invocation_order()","verify_invocation_order()","verify_messages_received()","visibility()","warn_about_expectations_on_nil()","warn_about_expectations_on_nil=()","warn_if_nil_class()","with()","license.txt","readme.md","mocks.rb","any_instance.rb","chain.rb","message_chains.rb","recorder.rb","argument_expectation.rb","argument_matchers.rb","error_generator.rb","errors.rb","example_methods.rb","instance_exec.rb","marshal.rb","psych.rb","framework.rb","message_expectation.rb","method_double.rb","methods.rb","mock.rb","order_group.rb","proxy.rb","serialization.rb","space.rb","standalone.rb","version.rb","mocks.rb"]}}