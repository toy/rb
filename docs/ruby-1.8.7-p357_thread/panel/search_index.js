var search_data = {"index":{"info":[["ConditionVariable","ext/thread/thread.c","classes/ConditionVariable.html"," < Object","      ConditionVariable objects augment class Mutex. Using condition variables,    it is possible to",1],["Mutex","ext/thread/thread.c","classes/Mutex.html"," < Object","      Mutex implements a simple semaphore that can be used to coordinate access to    shared data from",1],["Queue","ext/thread/thread.c","classes/Queue.html"," < Object","      This class provides a way to synchronize communication between threads.       Example:        ",1],["SizedQueue","ext/thread/thread.c","classes/SizedQueue.html"," < Queue","      This class represents queues of specified size capacity.  The push operation    may be blocked",1],["Thread","ext/thread/thread.c","classes/Thread.html"," < Object","",1],["broadcast","ConditionVariable","classes/ConditionVariable.html#M000012","()","       Wakes up all threads waiting for this condition.       ",2],["clear","Queue","classes/Queue.html#M000016","()","       Removes all objects from the queue.       ",2],["empty?","Queue","classes/Queue.html#M000017","()","       Returns +true+ if the queue is empty.       ",2],["exclusive","Thread","classes/Thread.html#M000000","()","            Wraps a block in Thread.critical, restoring the original value     upon exit from the critical",2],["exclusive_unlock","Mutex","classes/Mutex.html#M000007","()","       If the mutex is locked, unlocks the mutex, wakes one waiting thread, and    yields in a critical",2],["length","Queue","classes/Queue.html#M000018","()","       Returns the length of the queue.       ",2],["lock","Mutex","classes/Mutex.html#M000005","()","       Attempts to grab the lock and waits if it isn't available.       ",2],["locked?","Mutex","classes/Mutex.html#M000003","()","       Returns +true+ if this lock is currently held by some thread.       ",2],["marshal_load","ConditionVariable","classes/ConditionVariable.html#M000009","(p1)","   for marshalling mutexes and condvars     ",2],["marshal_load","Mutex","classes/Mutex.html#M000001","(p1)","   for marshalling mutexes and condvars     ",2],["max","SizedQueue","classes/SizedQueue.html#M000026","()","       Returns the maximum size of the queue.       ",2],["max=","SizedQueue","classes/SizedQueue.html#M000027","(p1)","       Sets the maximum size of the queue.       ",2],["new","SizedQueue","classes/SizedQueue.html#M000022","(p1)","       Creates a new Mutex       ",2],["num_waiting","Queue","classes/Queue.html#M000019","()","       Returns the number of threads waiting on the queue.       ",2],["num_waiting","SizedQueue","classes/SizedQueue.html#M000023","()","       Returns the number of threads waiting on the queue.       ",2],["pop","Queue","classes/Queue.html#M000020","(...)","   call_seq: pop(non_block=false)       Retrieves data from the queue.  If the queue is empty, the calling",2],["pop","SizedQueue","classes/SizedQueue.html#M000024","(...)","   call_seq: pop(non_block=false)       Retrieves data from the queue.  If the queue is empty, the calling",2],["push","Queue","classes/Queue.html#M000021","(p1)","       Pushes +obj+ to the queue.       ",2],["push","SizedQueue","classes/SizedQueue.html#M000025","(p1)","       Pushes +obj+ to the queue.       ",2],["signal","ConditionVariable","classes/ConditionVariable.html#M000013","()","       Wakes up the first thread in line waiting for this condition.       ",2],["synchronize","Mutex","classes/Mutex.html#M000008","()","       Obtains a lock, runs the block, and releases the lock when the block    completes.  See the example",2],["try_lock","Mutex","classes/Mutex.html#M000004","()","       Attempts to obtain the lock and returns immediately. Returns +true+ if the    lock was granted.",2],["unlock","Mutex","classes/Mutex.html#M000006","()","      Releases the lock. Returns +nil+ if ref wasn't locked.       ",2],["wait","ConditionVariable","classes/ConditionVariable.html#M000011","(p1)","       Releases the lock held in +mutex+ and waits; reacquires the lock on wakeup.       ",2],["thread.rb","files/ext/thread/lib/thread_rb.html","files/ext/thread/lib/thread_rb.html","","",3],["thread.c","files/ext/thread/thread_c.html","files/ext/thread/thread_c.html","","",3]],"searchIndex":["conditionvariable","mutex","queue","sizedqueue","thread","broadcast()","clear()","empty?()","exclusive()","exclusive_unlock()","length()","lock()","locked?()","marshal_load()","marshal_load()","max()","max=()","new()","num_waiting()","num_waiting()","pop()","pop()","push()","push()","signal()","synchronize()","try_lock()","unlock()","wait()","thread.rb","thread.c"],"longSearchIndex":["ext/thread/thread.c","ext/thread/thread.c","ext/thread/thread.c","ext/thread/thread.c","ext/thread/thread.c","conditionvariable","queue","queue","thread","mutex","queue","mutex","mutex","conditionvariable","mutex","sizedqueue","sizedqueue","sizedqueue","queue","sizedqueue","queue","sizedqueue","queue","sizedqueue","conditionvariable","mutex","mutex","mutex","conditionvariable","files/ext/thread/lib/thread_rb.html","files/ext/thread/thread_c.html"]}}