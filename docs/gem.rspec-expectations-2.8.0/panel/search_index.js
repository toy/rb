var search_data = {"index":{"longSearchIndex":["lib/rspec/expectations/extensions/array.rb","lib/rspec/expectations/extensions/kernel.rb","lib/rspec/matchers.rb","rspec","rspec::expectations","rspec::expectations","rspec::expectations","rspec::expectations","rspec::expectations","rspec::expectations","rspec::expectations","rspec","rspec::matchers","rspec::matchers","rspec::matchers","rspec::matchers","rspec::matchers","rspec::matchers","rspec::matchers","rspec::matchers","rspec::matchers","rspec::matchers","rspec::matchers","rspec::matchers","rspec::matchers","rspec::matchers","rspec::matchers","rspec::matchers","rspec::matchers","rspec::matchers","rspec::matchers","rspec::matchers::extensions","rspec::matchers","rspec::matchers","rspec::matchers","rspec::matchers","rspec::matchers","rspec::matchers","rspec::matchers","rspec::matchers","rspec::matchers","rspec::matchers","rspec::matchers","rspec::matchers","rspec::matchers","rspec::matchers","rspec::matchers","rspec::matchers::basematcher","rspec::matchers::negativeoperatormatcher","rspec::matchers::positiveoperatormatcher","rspec::matchers::pretty","rspec::matchers::change","rspec::expectations","rspec::expectations","rspec::matchers::has","rspec::matchers::be","rspec::matchers::be","rspec::matchers::respondto","rspec::matchers::respondto","rspec::matchers","rspec::matchers","rspec::matchers","rspec::matchers","rspec::matchers","rspec::matchers","rspec::matchers","rspec::matchers","rspec::matchers","rspec::matchers","rspec::matchers","rspec::matchers","rspec::matchers::change","rspec::matchers::change","rspec::matchers::change","rspec::matchers::matcher","rspec::matchers::matcher","rspec::matchers::matcher","rspec::matchers::throwsymbol","rspec::matchers::matcher","rspec::matchers","rspec::matchers::change","rspec::matchers::change","rspec::matchers","rspec::matchers::include","rspec::matchers::include","rspec::expectations::deprecatedconstants","rspec::expectations::differ","rspec::matchers","rspec::matchers::dsl","rspec::matchers::matcher","rspec","rspec::matchers::basematcher","rspec::matchers::be","rspec::matchers::becomparedto","rspec::matchers::bepredicate","rspec::matchers::bewithin","rspec::matchers::change","rspec::matchers::has","rspec::matchers::have","rspec::matchers::include","rspec::matchers::matcharray","rspec::matchers::matcher","rspec::matchers::operatormatcher","rspec::matchers::raiseerror","rspec::matchers::respondto","rspec::matchers::satisfy","rspec::matchers::throwsymbol","rspec::matchers::have","rspec::matchers::have","rspec::expectations::differ","rspec::expectations::differ","rspec::matchers::matcher","rspec::matchers::basematcher","rspec::matchers::eq","rspec::matchers::eql","rspec::matchers::equal","rspec::matchers::include","rspec::matchers::matcher","rspec::expectations","rspec::expectations","rspec::matchers::matcharray","rspec::matchers::cover","rspec::matchers::include","rspec::matchers::matcher","rspec::matchers::respondto","rspec::matchers","rspec::matchers","rspec::matchers","rspec::matchers::raiseerror","rspec::matchers::operatormatcher","rspec::matchers::change","rspec::matchers","rspec::matchers","rspec::matchers::throwsymbol","rspec::matchers::raiseerror","rspec::matchers::change","rspec::matchers::be","rspec::matchers::pretty","rspec::expectations","rspec::matchers::operatormatcher","rspec::matchers::has","rspec::matchers::basematcher","rspec::matchers::be","rspec::matchers::becomparedto","rspec::matchers::benil","rspec::matchers::bepredicate","rspec::matchers::bewithin","rspec::matchers::change","rspec::matchers::eq","rspec::matchers::eql","rspec::matchers::equal","rspec::matchers::has","rspec::matchers::have","rspec::matchers::matcharray","rspec::matchers::matcher","rspec::matchers::raiseerror","rspec::matchers::respondto","rspec::matchers::satisfy","rspec::matchers::throwsymbol","rspec::matchers::basematcher","rspec::matchers::be","rspec::matchers::becomparedto","rspec::matchers::benil","rspec::matchers::bepredicate","rspec::matchers::bewithin","rspec::matchers::change","rspec::matchers::eq","rspec::matchers::eql","rspec::matchers::equal","rspec::matchers::has","rspec::matchers::have","rspec::matchers::matcharray","rspec::matchers::matcher","rspec::matchers::raiseerror","rspec::matchers::respondto","rspec::matchers::satisfy","rspec::matchers::throwsymbol","rspec::matchers::respondto","rspec::matchers::matcher","rspec::expectations::differ","rspec::matchers::change","rspec::matchers","rspec::matchers::operatormatcher","rspec::matchers::raiseerror","rspec::expectations::negativeexpectationhandler","rspec::expectations::positiveexpectationhandler","rspec::matchers","rspec::matchers","rspec::matchers","rspec::matchers","rspec::matchers","rspec::matchers::matcher","rspec::matchers::equal","rspec::matchers::be","rspec::matchers::extensions::instanceevalwithargs","rspec::matchers","rspec::matchers::matcher","rspec::matchers","rspec::matchers::matcher","rspec::matchers::matcher","rspec::matchers::matcher","rspec::matchers::basematcher","rspec::matchers::matcher","rspec::matchers::dsl","rspec::matchers::basematcher","rspec::matchers::be","rspec::matchers::beakindof","rspec::matchers::beaninstanceof","rspec::matchers::becomparedto","rspec::matchers::befalse","rspec::matchers::benil","rspec::matchers::bepredicate","rspec::matchers::betrue","rspec::matchers::bewithin","rspec::matchers::change","rspec::matchers::cover","rspec::matchers::eq","rspec::matchers::eql","rspec::matchers::equal","rspec::matchers::exist","rspec::matchers::has","rspec::matchers::have","rspec::matchers::include","rspec::matchers::match","rspec::matchers::matcharray","rspec::matchers::matcher","rspec::matchers::raiseerror","rspec::matchers::respondto","rspec::matchers::satisfy","rspec::matchers::throwsymbol","rspec::matchers::change","rspec::matchers::respondto","rspec::matchers::change","rspec::matchers::change","rspec::matchers::change","rspec::matchers::change","rspec::matchers::change","rspec::matchers::has","rspec::matchers","rspec::matchers::have","rspec::matchers::matcher","rspec::matchers::pretty","rspec::matchers::pretty","rspec::matchers::raiseerror","rspec::expectations::differ","rspec::matchers::basematcher","rspec::matchers::be","rspec::matchers::becomparedto","rspec::matchers::bepredicate","rspec::matchers::bewithin","rspec::matchers::change","rspec::matchers::cover","rspec::matchers::exist","rspec::matchers::has","rspec::matchers::have","rspec::matchers::include","rspec::matchers::matcharray","rspec::matchers::matcher","rspec::matchers::operatormatcher","rspec::matchers::raiseerror","rspec::matchers::respondto","rspec::matchers::satisfy","rspec::matchers::throwsymbol","rspec::expectations","rspec::expectations","array","rspec::matchers::have","rspec::expectations::differ","rspec::matchers::bewithin","rspec::matchers::be","rspec::matchers::bepredicate","rspec::matchers::include","rspec::matchers::respondto","rspec::matchers::bepredicate","rspec::matchers::has","rspec::matchers::bepredicate","rspec::matchers::bepredicate","rspec::matchers::bepredicate","rspec::matchers::change","rspec::matchers","rspec::matchers","rspec::matchers::operatormatcher","rspec::matchers::operatormatcher","rspec::matchers::have","rspec::matchers::have","rspec::matchers","rspec::matchers::have","rspec::matchers::matcharray","rspec::matchers","kernel","kernel","rspec::matchers::matcher","rspec::matchers::pretty","rspec::matchers::throwsymbol","rspec::matchers","rspec::matchers::change","rspec::matchers::pretty","rspec::matchers::pretty","rspec::matchers::operatormatcher","rspec::matchers::raiseerror","rspec","rspec::matchers::respondto","rspec::matchers::respondto","files/license_txt.html","files/readme_md.html","files/lib/rspec-expectations_rb.html","files/lib/rspec/expectations_rb.html","files/lib/rspec/expectations/deprecation_rb.html","files/lib/rspec/expectations/differ_rb.html","files/lib/rspec/expectations/errors_rb.html","files/lib/rspec/expectations/extensions_rb.html","files/lib/rspec/expectations/extensions/array_rb.html","files/lib/rspec/expectations/extensions/kernel_rb.html","files/lib/rspec/expectations/extensions/object_rb.html","files/lib/rspec/expectations/fail_with_rb.html","files/lib/rspec/expectations/handler_rb.html","files/lib/rspec/expectations/version_rb.html","files/lib/rspec/matchers_rb.html","files/lib/rspec/matchers/base_matcher_rb.html","files/lib/rspec/matchers/be_rb.html","files/lib/rspec/matchers/be_close_rb.html","files/lib/rspec/matchers/be_instance_of_rb.html","files/lib/rspec/matchers/be_kind_of_rb.html","files/lib/rspec/matchers/be_within_rb.html","files/lib/rspec/matchers/block_aliases_rb.html","files/lib/rspec/matchers/change_rb.html","files/lib/rspec/matchers/compatibility_rb.html","files/lib/rspec/matchers/cover_rb.html","files/lib/rspec/matchers/dsl_rb.html","files/lib/rspec/matchers/eq_rb.html","files/lib/rspec/matchers/eql_rb.html","files/lib/rspec/matchers/equal_rb.html","files/lib/rspec/matchers/errors_rb.html","files/lib/rspec/matchers/exist_rb.html","files/lib/rspec/matchers/extensions/instance_eval_with_args_rb.html","files/lib/rspec/matchers/generated_descriptions_rb.html","files/lib/rspec/matchers/has_rb.html","files/lib/rspec/matchers/have_rb.html","files/lib/rspec/matchers/include_rb.html","files/lib/rspec/matchers/match_rb.html","files/lib/rspec/matchers/match_array_rb.html","files/lib/rspec/matchers/matcher_rb.html","files/lib/rspec/matchers/method_missing_rb.html","files/lib/rspec/matchers/operator_matcher_rb.html","files/lib/rspec/matchers/pretty_rb.html","files/lib/rspec/matchers/raise_error_rb.html","files/lib/rspec/matchers/respond_to_rb.html","files/lib/rspec/matchers/satisfy_rb.html","files/lib/rspec/matchers/throw_symbol_rb.html"],"info":[["Array","lib/rspec/expectations/extensions/array.rb","classes/Array.html"," < Object","@private ",1],["Kernel","lib/rspec/expectations/extensions/kernel.rb","classes/Kernel.html"," < ","",1],["RSpec","lib/rspec/expectations/deprecation.rb","classes/RSpec.html"," < ","",1],["Expectations","RSpec","classes/RSpec/Expectations.html"," < ","RSpec::Expectations adds two instance methods to every object: should(matcher=nil) should_not(matcher=nil)",1],["DeprecatedConstants","RSpec::Expectations","classes/RSpec/Expectations/DeprecatedConstants.html"," < ","",1],["Differ","RSpec::Expectations","classes/RSpec/Expectations/Differ.html"," < Object","",1],["ExpectationNotMetError","RSpec::Expectations","classes/RSpec/Expectations/ExpectationNotMetError.html"," < Test::Unit::AssertionFailedError","",1],["InvalidMatcherError","RSpec::Expectations","classes/RSpec/Expectations/InvalidMatcherError.html"," < ArgumentError","",1],["NegativeExpectationHandler","RSpec::Expectations","classes/RSpec/Expectations/NegativeExpectationHandler.html"," < Object","",1],["PositiveExpectationHandler","RSpec::Expectations","classes/RSpec/Expectations/PositiveExpectationHandler.html"," < Object","",1],["Version","RSpec::Expectations","classes/RSpec/Expectations/Version.html"," < ","@private ",1],["Matchers","RSpec","classes/RSpec/Matchers.html"," < ","RSpec::Matchers provides a number of useful matchers we use to compose expectations. A matcher is any",1],["BaseMatcher","RSpec::Matchers","classes/RSpec/Matchers/BaseMatcher.html"," < ","@api private Used _internally_ as a base class for matchers that ship with rspec-expectations. ### Warning:",1],["Be","RSpec::Matchers","classes/RSpec/Matchers/Be.html"," < Object","",1],["BeAKindOf","RSpec::Matchers","classes/RSpec/Matchers/BeAKindOf.html"," < Object","",1],["BeAnInstanceOf","RSpec::Matchers","classes/RSpec/Matchers/BeAnInstanceOf.html"," < Object","",1],["BeComparedTo","RSpec::Matchers","classes/RSpec/Matchers/BeComparedTo.html"," < Be","",1],["BeFalse","RSpec::Matchers","classes/RSpec/Matchers/BeFalse.html"," < Object","",1],["BeNil","RSpec::Matchers","classes/RSpec/Matchers/BeNil.html"," < Object","",1],["BePredicate","RSpec::Matchers","classes/RSpec/Matchers/BePredicate.html"," < Be","",1],["BeTrue","RSpec::Matchers","classes/RSpec/Matchers/BeTrue.html"," < Object","",1],["BeWithin","RSpec::Matchers","classes/RSpec/Matchers/BeWithin.html"," < Object","",1],["BlockAliases","RSpec::Matchers","classes/RSpec/Matchers/BlockAliases.html"," < ","",1],["Change","RSpec::Matchers","classes/RSpec/Matchers/Change.html"," < Object","",1],["Cover","RSpec::Matchers","classes/RSpec/Matchers/Cover.html"," < Object","",1],["DSL","RSpec::Matchers","classes/RSpec/Matchers/DSL.html"," < ","",1],["Eq","RSpec::Matchers","classes/RSpec/Matchers/Eq.html"," < Object","",1],["Eql","RSpec::Matchers","classes/RSpec/Matchers/Eql.html"," < Object","",1],["Equal","RSpec::Matchers","classes/RSpec/Matchers/Equal.html"," < Object","",1],["Exist","RSpec::Matchers","classes/RSpec/Matchers/Exist.html"," < Object","",1],["Extensions","RSpec::Matchers","classes/RSpec/Matchers/Extensions.html"," < ","",1],["InstanceEvalWithArgs","RSpec::Matchers::Extensions","classes/RSpec/Matchers/Extensions/InstanceEvalWithArgs.html"," < ","",1],["Has","RSpec::Matchers","classes/RSpec/Matchers/Has.html"," < Object","",1],["Have","RSpec::Matchers","classes/RSpec/Matchers/Have.html"," < Object","",1],["Include","RSpec::Matchers","classes/RSpec/Matchers/Include.html"," < Object","",1],["Match","RSpec::Matchers","classes/RSpec/Matchers/Match.html"," < Object","",1],["MatchArray","RSpec::Matchers","classes/RSpec/Matchers/MatchArray.html"," < Object","",1],["Matcher","RSpec::Matchers","classes/RSpec/Matchers/Matcher.html"," < Object","Provides the context in which the block passed to RSpec::Matchers.define will be evaluated. ",1],["MatcherError","RSpec::Matchers","classes/RSpec/Matchers/MatcherError.html"," < StandardError","",1],["NegativeOperatorMatcher","RSpec::Matchers","classes/RSpec/Matchers/NegativeOperatorMatcher.html"," < OperatorMatcher","",1],["OperatorMatcher","RSpec::Matchers","classes/RSpec/Matchers/OperatorMatcher.html"," < Object","",1],["PositiveOperatorMatcher","RSpec::Matchers","classes/RSpec/Matchers/PositiveOperatorMatcher.html"," < OperatorMatcher","",1],["Pretty","RSpec::Matchers","classes/RSpec/Matchers/Pretty.html"," < ","",1],["RaiseError","RSpec::Matchers","classes/RSpec/Matchers/RaiseError.html"," < Object","",1],["RespondTo","RSpec::Matchers","classes/RSpec/Matchers/RespondTo.html"," < Object","",1],["Satisfy","RSpec::Matchers","classes/RSpec/Matchers/Satisfy.html"," < Object","",1],["ThrowSymbol","RSpec::Matchers","classes/RSpec/Matchers/ThrowSymbol.html"," < Object","",1],["==","RSpec::Matchers::BaseMatcher","classes/RSpec/Matchers/BaseMatcher.html#M000028","(other)","",2],["__delegate_operator","RSpec::Matchers::NegativeOperatorMatcher","classes/RSpec/Matchers/NegativeOperatorMatcher.html#M000202","(actual, operator, expected)","",2],["__delegate_operator","RSpec::Matchers::PositiveOperatorMatcher","classes/RSpec/Matchers/PositiveOperatorMatcher.html#M000201","(actual, operator, expected)","",2],["_pretty_print","RSpec::Matchers::Pretty","classes/RSpec/Matchers/Pretty.html#M000210","(array)","",2],["actual_delta","RSpec::Matchers::Change","classes/RSpec/Matchers/Change.html#M000085","()","",2],["all_strings?","RSpec::Expectations","classes/RSpec/Expectations.html#M000018","(*args)","",2],["any_multiline_strings?","RSpec::Expectations","classes/RSpec/Expectations.html#M000019","(*args)","",2],["args_description","RSpec::Matchers::Has","classes/RSpec/Matchers/Has.html#M000139","()","",2],["args_to_s","RSpec::Matchers::Be","classes/RSpec/Matchers/Be.html#M000042","()","",2],["args_to_sentence","RSpec::Matchers::Be","classes/RSpec/Matchers/Be.html#M000046","()","",2],["argument","RSpec::Matchers::RespondTo","classes/RSpec/Matchers/RespondTo.html#M000234","()","",2],["arguments","RSpec::Matchers::RespondTo","classes/RSpec/Matchers/RespondTo.html#M000235","()","Alias for #argument",2],["be","RSpec::Matchers","classes/RSpec/Matchers.html#M000063","(*args)","@example actual.should be_true actual.should be_false actual.should be_nil actual.should be_[arbitrary_predicate](*args)",2],["be_a","RSpec::Matchers","classes/RSpec/Matchers.html#M000067","(klass)","passes if target.kind_of?(klass) ",2],["be_a_kind_of","RSpec::Matchers","classes/RSpec/Matchers.html#M000070","(expected)","Passes if actual.kind_of?(expected) @example 5.should be_kind_of(Fixnum) 5.should be_kind_of(Numeric)",2],["be_an","RSpec::Matchers","classes/RSpec/Matchers.html#M000068","(klass)","Alias for #be_a",2],["be_an_instance_of","RSpec::Matchers","classes/RSpec/Matchers.html#M000065","(expected)","Passes if actual.instance_of?(expected) @example 5.should be_instance_of(Fixnum) 5.should_not be_instance_of(Numeric)",2],["be_close","RSpec::Matchers","classes/RSpec/Matchers.html#M000047","(expected, delta)","@deprecated use +be_within+ instead. ",2],["be_false","RSpec::Matchers","classes/RSpec/Matchers.html#M000032","()","Passes if actual is falsy (false or nil) ",2],["be_instance_of","RSpec::Matchers","classes/RSpec/Matchers.html#M000066","(expected)","Alias for #be_an_instance_of",2],["be_kind_of","RSpec::Matchers","classes/RSpec/Matchers.html#M000071","(expected)","Alias for #be_a_kind_of",2],["be_nil","RSpec::Matchers","classes/RSpec/Matchers.html#M000036","()","Passes if actual is nil ",2],["be_true","RSpec::Matchers","classes/RSpec/Matchers.html#M000030","()","Passes if actual is truthy (anything but false or nil) ",2],["be_within","RSpec::Matchers","classes/RSpec/Matchers.html#M000078","(delta)","Passes if actual == expected +/- delta @example result.should be_within(0.5).of(3.0) result.should_not",2],["by","RSpec::Matchers::Change","classes/RSpec/Matchers/Change.html#M000087","(expected_delta)","",2],["by_at_least","RSpec::Matchers::Change","classes/RSpec/Matchers/Change.html#M000088","(minimum)","",2],["by_at_most","RSpec::Matchers::Change","classes/RSpec/Matchers/Change.html#M000089","(maximum)","",2],["cache","RSpec::Matchers::Matcher","classes/RSpec/Matchers/Matcher.html#M000205","(key, &block)","",2],["cache_or_call_cached","RSpec::Matchers::Matcher","classes/RSpec/Matchers/Matcher.html#M000204","(key, &block)","",2],["call_cached","RSpec::Matchers::Matcher","classes/RSpec/Matchers/Matcher.html#M000206","(key)","",2],["caught","RSpec::Matchers::ThrowSymbol","classes/RSpec/Matchers/ThrowSymbol.html#M000253","()","",2],["chain","RSpec::Matchers::Matcher","classes/RSpec/Matchers/Matcher.html#M000192","(method, &block)","Convenience for defining methods on this matcher to create a fluent interface. The trick about fluent",2],["change","RSpec::Matchers","classes/RSpec/Matchers.html#M000105","(receiver=nil, message=nil, &block)","Applied to a proc, specifies that its execution will cause some value to change. @param [Object] receiver",2],["change_expected?","RSpec::Matchers::Change","classes/RSpec/Matchers/Change.html#M000094","()","",2],["changed?","RSpec::Matchers::Change","classes/RSpec/Matchers/Change.html#M000095","()","",2],["clear_generated_description","RSpec::Matchers","classes/RSpec/Matchers.html#M000129","()","",2],["comparing_hash_keys?","RSpec::Matchers::Include","classes/RSpec/Matchers/Include.html#M000159","(actual, expected)","",2],["comparing_hash_values?","RSpec::Matchers::Include","classes/RSpec/Matchers/Include.html#M000162","(actual, expected)","",2],["const_missing","RSpec::Expectations::DeprecatedConstants","classes/RSpec/Expectations/DeprecatedConstants.html#M000011","(name)","Displays deprecation warning when it captures Rspec and Spec. Otherwise delegates to super. ",2],["context_lines","RSpec::Expectations::Differ","classes/RSpec/Expectations/Differ.html#M000006","()","",2],["cover","RSpec::Matchers","classes/RSpec/Matchers.html#M000106","(*values)","Passes if actual covers expected. This works for Ranges. You can also pass in multiple args and it will",2],["define","RSpec::Matchers::DSL","classes/RSpec/Matchers/DSL.html#M000111","(name, &declarations)","Defines a custom matcher. @see RSpec::Matchers ",2],["define_method","RSpec::Matchers::Matcher","classes/RSpec/Matchers/Matcher.html#M000199","(name, &block)","",2],["deprecate","RSpec","classes/RSpec.html#M000000","(method, alternate_method=nil, version=nil)","Used internally by RSpec to display standard deprecation warnings. This is also defined in rspec-core,",2],["description","RSpec::Matchers::BaseMatcher","classes/RSpec/Matchers/BaseMatcher.html#M000026","()","",2],["description","RSpec::Matchers::Be","classes/RSpec/Matchers/Be.html#M000041","()","",2],["description","RSpec::Matchers::BeComparedTo","classes/RSpec/Matchers/BeComparedTo.html#M000052","()","",2],["description","RSpec::Matchers::BePredicate","classes/RSpec/Matchers/BePredicate.html#M000057","()","",2],["description","RSpec::Matchers::BeWithin","classes/RSpec/Matchers/BeWithin.html#M000077","()","",2],["description","RSpec::Matchers::Change","classes/RSpec/Matchers/Change.html#M000092","()","",2],["description","RSpec::Matchers::Has","classes/RSpec/Matchers/Has.html#M000136","()","",2],["description","RSpec::Matchers::Have","classes/RSpec/Matchers/Have.html#M000149","()","",2],["description","RSpec::Matchers::Include","classes/RSpec/Matchers/Include.html#M000154","()","",2],["description","RSpec::Matchers::MatchArray","classes/RSpec/Matchers/MatchArray.html#M000172","()","",2],["description","RSpec::Matchers::Matcher","classes/RSpec/Matchers/Matcher.html#M000190","(&block)","Customize the description to use for one-liners.  Only use this when the description generated by default",2],["description","RSpec::Matchers::OperatorMatcher","classes/RSpec/Matchers/OperatorMatcher.html#M000195","()","",2],["description","RSpec::Matchers::RaiseError","classes/RSpec/Matchers/RaiseError.html#M000221","()","",2],["description","RSpec::Matchers::RespondTo","classes/RSpec/Matchers/RespondTo.html#M000232","()","",2],["description","RSpec::Matchers::Satisfy","classes/RSpec/Matchers/Satisfy.html#M000245","()","",2],["description","RSpec::Matchers::ThrowSymbol","classes/RSpec/Matchers/ThrowSymbol.html#M000251","()","",2],["determine_collection","RSpec::Matchers::Have","classes/RSpec/Matchers/Have.html#M000144","(collection_or_owner)","",2],["determine_query_method","RSpec::Matchers::Have","classes/RSpec/Matchers/Have.html#M000145","(collection)","",2],["diff_as_object","RSpec::Expectations::Differ","classes/RSpec/Expectations/Differ.html#M000004","(actual,expected)","",2],["diff_as_string","RSpec::Expectations::Differ","classes/RSpec/Expectations/Differ.html#M000003","(data_new, data_old)","This is snagged from diff/lcs/ldiff.rb (which is a commandline tool) ",2],["diffable","RSpec::Matchers::Matcher","classes/RSpec/Matchers/Matcher.html#M000191","()","Tells the matcher to diff the actual and expected values in the failure message. ",2],["diffable?","RSpec::Matchers::BaseMatcher","classes/RSpec/Matchers/BaseMatcher.html#M000027","()","",2],["diffable?","RSpec::Matchers::Eq","classes/RSpec/Matchers/Eq.html#M000110","()","",2],["diffable?","RSpec::Matchers::Eql","classes/RSpec/Matchers/Eql.html#M000119","()","",2],["diffable?","RSpec::Matchers::Equal","classes/RSpec/Matchers/Equal.html#M000122","()","",2],["diffable?","RSpec::Matchers::Include","classes/RSpec/Matchers/Include.html#M000157","()","",2],["diffable?","RSpec::Matchers::Matcher","classes/RSpec/Matchers/Matcher.html#M000193","()","@api private Used internally by objects returns by +should+ and +should_not+. ",2],["differ","RSpec::Expectations","classes/RSpec/Expectations.html#M000014","()","@private ",2],["differ=","RSpec::Expectations","classes/RSpec/Expectations.html#M000012","(ignore)","@deprecated (no replacement) ",2],["difference_between_arrays","RSpec::Matchers::MatchArray","classes/RSpec/Matchers/MatchArray.html#M000174","(array_1, array_2)","",2],["does_not_match?","RSpec::Matchers::Cover","classes/RSpec/Matchers/Cover.html#M000104","(range)","",2],["does_not_match?","RSpec::Matchers::Include","classes/RSpec/Matchers/Include.html#M000153","(actual)","",2],["does_not_match?","RSpec::Matchers::Matcher","classes/RSpec/Matchers/Matcher.html#M000197","(actual)","@api private Used internally by +should_not+ ",2],["does_not_match?","RSpec::Matchers::RespondTo","classes/RSpec/Matchers/RespondTo.html#M000229","(actual)","",2],["eq","RSpec::Matchers","classes/RSpec/Matchers.html#M000113","(expected)","Passes if <tt>actual == expected</tt>. See http://www.ruby-doc.org/core/classes/Object.html#M001057 for",2],["eql","RSpec::Matchers","classes/RSpec/Matchers.html#M000120","(expected)","Passes if +actual.eql?(expected)+ See http://www.ruby-doc.org/core/classes/Object.html#M001057 for more",2],["equal","RSpec::Matchers","classes/RSpec/Matchers.html#M000124","(expected)","Passes if <tt>actual.equal?(expected)</tt> (object identity). See http://www.ruby-doc.org/core/classes/Object.html#M001057",2],["eval_block","RSpec::Matchers::RaiseError","classes/RSpec/Matchers/RaiseError.html#M000217","()","",2],["eval_match","RSpec::Matchers::OperatorMatcher","classes/RSpec/Matchers/OperatorMatcher.html#M000196","(actual, operator, expected)","",2],["evaluate_value_proc","RSpec::Matchers::Change","classes/RSpec/Matchers/Change.html#M000083","()","",2],["exist","RSpec::Matchers","classes/RSpec/Matchers.html#M000127","(*args)","Passes if `actual.exist?` or `actual.exists?` @example File.should exist(\"path/to/file\") ",2],["expect","RSpec::Matchers","classes/RSpec/Matchers.html#M000079","(&block)","Extends the submitted block with aliases to and to_not for should and should_not. @example expect { this_block",2],["expected","RSpec::Matchers::ThrowSymbol","classes/RSpec/Matchers/ThrowSymbol.html#M000252","(symbol_desc = 'a Symbol')","",2],["expected_error","RSpec::Matchers::RaiseError","classes/RSpec/Matchers/RaiseError.html#M000222","()","",2],["expected_matches_actual?","RSpec::Matchers::Change","classes/RSpec/Matchers/Change.html#M000101","(expected, actual)","",2],["expected_to_sentence","RSpec::Matchers::Be","classes/RSpec/Matchers/Be.html#M000045","()","",2],["expected_to_sentence","RSpec::Matchers::Pretty","classes/RSpec/Matchers/Pretty.html#M000212","()","",2],["fail_with","RSpec::Expectations","classes/RSpec/Expectations.html#M000015","(message, expected=nil, actual=nil)","Raises an RSpec::Expectations::ExpectationNotMetError with message. @param [String] message @param [Object]",2],["fail_with_message","RSpec::Matchers::OperatorMatcher","classes/RSpec/Matchers/OperatorMatcher.html#M000194","(message)","",2],["failure_message_args_description","RSpec::Matchers::Has","classes/RSpec/Matchers/Has.html#M000140","()","",2],["failure_message_for_should","RSpec::Matchers::BaseMatcher","classes/RSpec/Matchers/BaseMatcher.html#M000024","()","",2],["failure_message_for_should","RSpec::Matchers::Be","classes/RSpec/Matchers/Be.html#M000039","()","",2],["failure_message_for_should","RSpec::Matchers::BeComparedTo","classes/RSpec/Matchers/BeComparedTo.html#M000050","()","",2],["failure_message_for_should","RSpec::Matchers::BeNil","classes/RSpec/Matchers/BeNil.html#M000034","()","",2],["failure_message_for_should","RSpec::Matchers::BePredicate","classes/RSpec/Matchers/BePredicate.html#M000055","()","",2],["failure_message_for_should","RSpec::Matchers::BeWithin","classes/RSpec/Matchers/BeWithin.html#M000075","()","",2],["failure_message_for_should","RSpec::Matchers::Change","classes/RSpec/Matchers/Change.html#M000084","()","",2],["failure_message_for_should","RSpec::Matchers::Eq","classes/RSpec/Matchers/Eq.html#M000108","()","",2],["failure_message_for_should","RSpec::Matchers::Eql","classes/RSpec/Matchers/Eql.html#M000117","()","",2],["failure_message_for_should","RSpec::Matchers::Equal","classes/RSpec/Matchers/Equal.html#M000115","()","",2],["failure_message_for_should","RSpec::Matchers::Has","classes/RSpec/Matchers/Has.html#M000134","()","",2],["failure_message_for_should","RSpec::Matchers::Have","classes/RSpec/Matchers/Have.html#M000147","()","",2],["failure_message_for_should","RSpec::Matchers::MatchArray","classes/RSpec/Matchers/MatchArray.html#M000170","()","",2],["failure_message_for_should","RSpec::Matchers::Matcher","classes/RSpec/Matchers/Matcher.html#M000183","(&block)","Customize the failure messsage to use when this matcher is invoked with `should`. Only use this when",2],["failure_message_for_should","RSpec::Matchers::RaiseError","classes/RSpec/Matchers/RaiseError.html#M000219","()","",2],["failure_message_for_should","RSpec::Matchers::RespondTo","classes/RSpec/Matchers/RespondTo.html#M000230","()","",2],["failure_message_for_should","RSpec::Matchers::Satisfy","classes/RSpec/Matchers/Satisfy.html#M000241","()","",2],["failure_message_for_should","RSpec::Matchers::ThrowSymbol","classes/RSpec/Matchers/ThrowSymbol.html#M000249","()","",2],["failure_message_for_should_not","RSpec::Matchers::BaseMatcher","classes/RSpec/Matchers/BaseMatcher.html#M000025","()","",2],["failure_message_for_should_not","RSpec::Matchers::Be","classes/RSpec/Matchers/Be.html#M000040","()","",2],["failure_message_for_should_not","RSpec::Matchers::BeComparedTo","classes/RSpec/Matchers/BeComparedTo.html#M000051","()","",2],["failure_message_for_should_not","RSpec::Matchers::BeNil","classes/RSpec/Matchers/BeNil.html#M000035","()","",2],["failure_message_for_should_not","RSpec::Matchers::BePredicate","classes/RSpec/Matchers/BePredicate.html#M000056","()","",2],["failure_message_for_should_not","RSpec::Matchers::BeWithin","classes/RSpec/Matchers/BeWithin.html#M000076","()","",2],["failure_message_for_should_not","RSpec::Matchers::Change","classes/RSpec/Matchers/Change.html#M000086","()","",2],["failure_message_for_should_not","RSpec::Matchers::Eq","classes/RSpec/Matchers/Eq.html#M000109","()","",2],["failure_message_for_should_not","RSpec::Matchers::Eql","classes/RSpec/Matchers/Eql.html#M000118","()","",2],["failure_message_for_should_not","RSpec::Matchers::Equal","classes/RSpec/Matchers/Equal.html#M000121","()","",2],["failure_message_for_should_not","RSpec::Matchers::Has","classes/RSpec/Matchers/Has.html#M000135","()","",2],["failure_message_for_should_not","RSpec::Matchers::Have","classes/RSpec/Matchers/Have.html#M000148","()","",2],["failure_message_for_should_not","RSpec::Matchers::MatchArray","classes/RSpec/Matchers/MatchArray.html#M000171","()","",2],["failure_message_for_should_not","RSpec::Matchers::Matcher","classes/RSpec/Matchers/Matcher.html#M000189","(&block)","Customize the failure messsage to use when this matcher is invoked with `should_not`. Only use this when",2],["failure_message_for_should_not","RSpec::Matchers::RaiseError","classes/RSpec/Matchers/RaiseError.html#M000220","()","",2],["failure_message_for_should_not","RSpec::Matchers::RespondTo","classes/RSpec/Matchers/RespondTo.html#M000231","()","",2],["failure_message_for_should_not","RSpec::Matchers::Satisfy","classes/RSpec/Matchers/Satisfy.html#M000242","()","",2],["failure_message_for_should_not","RSpec::Matchers::ThrowSymbol","classes/RSpec/Matchers/ThrowSymbol.html#M000250","()","",2],["find_failing_method_names","RSpec::Matchers::RespondTo","classes/RSpec/Matchers/RespondTo.html#M000236","(actual, filter_method)","",2],["for_expected","RSpec::Matchers::Matcher","classes/RSpec/Matchers/Matcher.html#M000177","(*expected)","@api private ",2],["format","RSpec::Expectations::Differ","classes/RSpec/Expectations/Differ.html#M000005","()","",2],["from","RSpec::Matchers::Change","classes/RSpec/Matchers/Change.html#M000091","(before)","",2],["generated_description","RSpec::Matchers","classes/RSpec/Matchers.html#M000130","()","",2],["get","RSpec::Matchers::OperatorMatcher","classes/RSpec/Matchers/OperatorMatcher.html#M000186","(klass, operator)","",2],["given_error","RSpec::Matchers::RaiseError","classes/RSpec/Matchers/RaiseError.html#M000223","()","",2],["handle_matcher","RSpec::Expectations::NegativeExpectationHandler","classes/RSpec/Expectations/NegativeExpectationHandler.html#M000016","(actual, matcher, message=nil, &block)","",2],["handle_matcher","RSpec::Expectations::PositiveExpectationHandler","classes/RSpec/Expectations/PositiveExpectationHandler.html#M000013","(actual, matcher, message=nil, &block)","",2],["have","RSpec::Matchers","classes/RSpec/Matchers.html#M000160","(n)","Passes if receiver is a collection with the submitted number of items OR if the receiver OWNS a collection",2],["have_at_least","RSpec::Matchers","classes/RSpec/Matchers.html#M000164","(n)","Exactly like have() with >=. @example \"this\".should have_at_least(3).letters ### Warning: `should_not",2],["have_at_most","RSpec::Matchers","classes/RSpec/Matchers.html#M000165","(n)","Exactly like have() with <=. @example should have_at_most(number).items ### Warning: `should_not have_at_most`",2],["have_exactly","RSpec::Matchers","classes/RSpec/Matchers.html#M000161","(n)","Alias for #have",2],["include","RSpec::Matchers","classes/RSpec/Matchers.html#M000163","(*expected)","Passes if actual includes expected. This works for collections and Strings. You can also pass in multiple",2],["include","RSpec::Matchers::Matcher","classes/RSpec/Matchers/Matcher.html#M000198","(*args)","",2],["inspect_object","RSpec::Matchers::Equal","classes/RSpec/Matchers/Equal.html#M000123","(o)","",2],["inspected_args","RSpec::Matchers::Be","classes/RSpec/Matchers/Be.html#M000044","()","",2],["instance_eval_with_args","RSpec::Matchers::Extensions::InstanceEvalWithArgs","classes/RSpec/Matchers/Extensions/InstanceEvalWithArgs.html#M000128","(*args, &block)","based on Bounded Spec InstanceExec (Mauricio Fernandez) http://eigenclass.org/hiki/bounded+space+instance_exec",2],["last_description","RSpec::Matchers","classes/RSpec/Matchers.html#M000131","()","",2],["making_declared_methods_public","RSpec::Matchers::Matcher","classes/RSpec/Matchers/Matcher.html#M000203","()","",2],["match","RSpec::Matchers","classes/RSpec/Matchers.html#M000167","(expected)","Given a Regexp or String, passes if actual.match(pattern) @example email.should match(/^([^\\s]+)((?:[-a-z0-9]+\\.)+[a-z]{2,})$/i)",2],["match","RSpec::Matchers::Matcher","classes/RSpec/Matchers/Matcher.html#M000179","(&block)","Stores the block that is used to determine whether this matcher passes or fails. The block should return",2],["match_for_should","RSpec::Matchers::Matcher","classes/RSpec/Matchers/Matcher.html#M000180","(&block)","Alias for #match",2],["match_for_should_not","RSpec::Matchers::Matcher","classes/RSpec/Matchers/Matcher.html#M000181","(&block)","Use this to define the block for a negative expectation (`should_not`) when the positive and negative",2],["match_unless_raises","RSpec::Matchers::BaseMatcher","classes/RSpec/Matchers/BaseMatcher.html#M000023","(exception=Exception)","",2],["match_unless_raises","RSpec::Matchers::Matcher","classes/RSpec/Matchers/Matcher.html#M000182","(exception=Exception, &block)","Use this instead of `match` when the block will raise an exception rather than returning false to indicate",2],["matcher","RSpec::Matchers::DSL","classes/RSpec/Matchers/DSL.html#M000112","(name, &declarations)","Alias for #define",2],["matches?","RSpec::Matchers::BaseMatcher","classes/RSpec/Matchers/BaseMatcher.html#M000022","(actual)","",2],["matches?","RSpec::Matchers::Be","classes/RSpec/Matchers/Be.html#M000038","(actual)","",2],["matches?","RSpec::Matchers::BeAKindOf","classes/RSpec/Matchers/BeAKindOf.html#M000069","(actual)","",2],["matches?","RSpec::Matchers::BeAnInstanceOf","classes/RSpec/Matchers/BeAnInstanceOf.html#M000064","(actual)","",2],["matches?","RSpec::Matchers::BeComparedTo","classes/RSpec/Matchers/BeComparedTo.html#M000049","(actual)","",2],["matches?","RSpec::Matchers::BeFalse","classes/RSpec/Matchers/BeFalse.html#M000031","(actual)","",2],["matches?","RSpec::Matchers::BeNil","classes/RSpec/Matchers/BeNil.html#M000033","(actual)","",2],["matches?","RSpec::Matchers::BePredicate","classes/RSpec/Matchers/BePredicate.html#M000054","(actual)","",2],["matches?","RSpec::Matchers::BeTrue","classes/RSpec/Matchers/BeTrue.html#M000029","(actual)","",2],["matches?","RSpec::Matchers::BeWithin","classes/RSpec/Matchers/BeWithin.html#M000073","(actual)","",2],["matches?","RSpec::Matchers::Change","classes/RSpec/Matchers/Change.html#M000081","(event_proc)","",2],["matches?","RSpec::Matchers::Cover","classes/RSpec/Matchers/Cover.html#M000103","(range)","",2],["matches?","RSpec::Matchers::Eq","classes/RSpec/Matchers/Eq.html#M000107","(actual)","",2],["matches?","RSpec::Matchers::Eql","classes/RSpec/Matchers/Eql.html#M000116","(actual)","",2],["matches?","RSpec::Matchers::Equal","classes/RSpec/Matchers/Equal.html#M000114","(actual)","",2],["matches?","RSpec::Matchers::Exist","classes/RSpec/Matchers/Exist.html#M000126","(actual)","",2],["matches?","RSpec::Matchers::Has","classes/RSpec/Matchers/Has.html#M000133","(actual)","",2],["matches?","RSpec::Matchers::Have","classes/RSpec/Matchers/Have.html#M000143","(collection_or_owner)","",2],["matches?","RSpec::Matchers::Include","classes/RSpec/Matchers/Include.html#M000152","(actual)","",2],["matches?","RSpec::Matchers::Match","classes/RSpec/Matchers/Match.html#M000166","(actual)","",2],["matches?","RSpec::Matchers::MatchArray","classes/RSpec/Matchers/MatchArray.html#M000169","(actual)","",2],["matches?","RSpec::Matchers::Matcher","classes/RSpec/Matchers/Matcher.html#M000178","(actual)","@api private Used internally by +should+ and +should_not+. ",2],["matches?","RSpec::Matchers::RaiseError","classes/RSpec/Matchers/RaiseError.html#M000216","(given_proc)","",2],["matches?","RSpec::Matchers::RespondTo","classes/RSpec/Matchers/RespondTo.html#M000228","(actual)","",2],["matches?","RSpec::Matchers::Satisfy","classes/RSpec/Matchers/Satisfy.html#M000240","(actual, &block)","",2],["matches?","RSpec::Matchers::ThrowSymbol","classes/RSpec/Matchers/ThrowSymbol.html#M000248","(given_proc)","",2],["matches_after?","RSpec::Matchers::Change","classes/RSpec/Matchers/Change.html#M000097","()","",2],["matches_arity?","RSpec::Matchers::RespondTo","classes/RSpec/Matchers/RespondTo.html#M000237","(actual, name)","",2],["matches_before?","RSpec::Matchers::Change","classes/RSpec/Matchers/Change.html#M000096","()","",2],["matches_expected_delta?","RSpec::Matchers::Change","classes/RSpec/Matchers/Change.html#M000098","()","",2],["matches_max?","RSpec::Matchers::Change","classes/RSpec/Matchers/Change.html#M000100","()","",2],["matches_min?","RSpec::Matchers::Change","classes/RSpec/Matchers/Change.html#M000099","()","",2],["message","RSpec::Matchers::Change","classes/RSpec/Matchers/Change.html#M000093","()","",2],["method_description","RSpec::Matchers::Has","classes/RSpec/Matchers/Has.html#M000138","(method)","",2],["method_missing","RSpec::Matchers","classes/RSpec/Matchers.html#M000176","(method, *args, &block)","",2],["method_missing","RSpec::Matchers::Have","classes/RSpec/Matchers/Have.html#M000155","(method, *args, &block)","",2],["method_missing","RSpec::Matchers::Matcher","classes/RSpec/Matchers/Matcher.html#M000200","(method, *args, &block)","",2],["name","RSpec::Matchers::Pretty","classes/RSpec/Matchers/Pretty.html#M000213","()","",2],["name_to_sentence","RSpec::Matchers::Pretty","classes/RSpec/Matchers/Pretty.html#M000211","()","",2],["negative_expectation?","RSpec::Matchers::RaiseError","classes/RSpec/Matchers/RaiseError.html#M000224","()","",2],["new","RSpec::Expectations::Differ","classes/RSpec/Expectations/Differ.html#M000002","(ignore=nil)","",2],["new","RSpec::Matchers::BaseMatcher","classes/RSpec/Matchers/BaseMatcher.html#M000021","(expected=nil)","",2],["new","RSpec::Matchers::Be","classes/RSpec/Matchers/Be.html#M000037","(*args, &block)","",2],["new","RSpec::Matchers::BeComparedTo","classes/RSpec/Matchers/BeComparedTo.html#M000048","(operand, operator)","",2],["new","RSpec::Matchers::BePredicate","classes/RSpec/Matchers/BePredicate.html#M000053","(*args, &block)","",2],["new","RSpec::Matchers::BeWithin","classes/RSpec/Matchers/BeWithin.html#M000072","(delta)","",2],["new","RSpec::Matchers::Change","classes/RSpec/Matchers/Change.html#M000080","(receiver=nil, message=nil, &block)","",2],["new","RSpec::Matchers::Cover","classes/RSpec/Matchers/Cover.html#M000102","(*expected)","",2],["new","RSpec::Matchers::Exist","classes/RSpec/Matchers/Exist.html#M000125","(*args)","",2],["new","RSpec::Matchers::Has","classes/RSpec/Matchers/Has.html#M000132","(expected, *args)","",2],["new","RSpec::Matchers::Have","classes/RSpec/Matchers/Have.html#M000141","(expected, relativity=:exactly)","",2],["new","RSpec::Matchers::Include","classes/RSpec/Matchers/Include.html#M000151","(*expected)","",2],["new","RSpec::Matchers::MatchArray","classes/RSpec/Matchers/MatchArray.html#M000168","(expected)","",2],["new","RSpec::Matchers::Matcher","classes/RSpec/Matchers/Matcher.html#M000175","(name, &declarations)","@api private ",2],["new","RSpec::Matchers::OperatorMatcher","classes/RSpec/Matchers/OperatorMatcher.html#M000187","(actual)","",2],["new","RSpec::Matchers::RaiseError","classes/RSpec/Matchers/RaiseError.html#M000215","(expected_error_or_message=Exception, expected_message=nil, &block)","",2],["new","RSpec::Matchers::RespondTo","classes/RSpec/Matchers/RespondTo.html#M000225","(*names)","",2],["new","RSpec::Matchers::Satisfy","classes/RSpec/Matchers/Satisfy.html#M000239","(&block)","",2],["new","RSpec::Matchers::ThrowSymbol","classes/RSpec/Matchers/ThrowSymbol.html#M000247","(expected_symbol = nil, expected_arg=nil)","",2],["no_numbers?","RSpec::Expectations","classes/RSpec/Expectations.html#M000020","(*args)","",2],["no_procs?","RSpec::Expectations","classes/RSpec/Expectations.html#M000017","(*args)","",2],["none?","Array","classes/Array.html#M000008","(&block)","Supports +none?+ on early patch levels of Ruby 1.8.6 ",2],["not_a_collection","RSpec::Matchers::Have","classes/RSpec/Matchers/Have.html#M000146","()","",2],["object_to_string","RSpec::Expectations::Differ","classes/RSpec/Expectations/Differ.html#M000007","(object)","",2],["of","RSpec::Matchers::BeWithin","classes/RSpec/Matchers/BeWithin.html#M000074","(expected)","",2],["parenthesize","RSpec::Matchers::Be","classes/RSpec/Matchers/Be.html#M000043","(string)","",2],["parse_expected","RSpec::Matchers::BePredicate","classes/RSpec/Matchers/BePredicate.html#M000060","(expected)","",2],["perform_match","RSpec::Matchers::Include","classes/RSpec/Matchers/Include.html#M000158","(predicate, hash_predicate, actuals, expecteds)","",2],["pp_names","RSpec::Matchers::RespondTo","classes/RSpec/Matchers/RespondTo.html#M000243","()","",2],["predicate","RSpec::Matchers::BePredicate","classes/RSpec/Matchers/BePredicate.html#M000058","()","",2],["predicate","RSpec::Matchers::Has","classes/RSpec/Matchers/Has.html#M000137","(sym)","",2],["prefix_and_expected","RSpec::Matchers::BePredicate","classes/RSpec/Matchers/BePredicate.html#M000061","(symbol)","",2],["prefix_to_sentence","RSpec::Matchers::BePredicate","classes/RSpec/Matchers/BePredicate.html#M000062","()","",2],["present_tense_predicate","RSpec::Matchers::BePredicate","classes/RSpec/Matchers/BePredicate.html#M000059","()","",2],["raise_block_syntax_error","RSpec::Matchers::Change","classes/RSpec/Matchers/Change.html#M000082","()","",2],["raise_error","RSpec::Matchers","classes/RSpec/Matchers.html#M000226","(error=Exception, message=nil, &block)","With no args, matches if any error is raised. With a named error, matches only if that specific error",2],["raise_exception","RSpec::Matchers","classes/RSpec/Matchers.html#M000227","(error=Exception, message=nil, &block)","Alias for #raise_error",2],["register","RSpec::Matchers::OperatorMatcher","classes/RSpec/Matchers/OperatorMatcher.html#M000185","(klass, operator, matcher)","",2],["registry","RSpec::Matchers::OperatorMatcher","classes/RSpec/Matchers/OperatorMatcher.html#M000184","()","",2],["relative_expectation","RSpec::Matchers::Have","classes/RSpec/Matchers/Have.html#M000156","()","",2],["relativities","RSpec::Matchers::Have","classes/RSpec/Matchers/Have.html#M000142","()","",2],["respond_to","RSpec::Matchers","classes/RSpec/Matchers.html#M000244","(*names)","Matches if the target object responds to all of the names provided. Names can be Strings or Symbols.",2],["respond_to?","RSpec::Matchers::Have","classes/RSpec/Matchers/Have.html#M000150","(m)","",2],["safe_sort","RSpec::Matchers::MatchArray","classes/RSpec/Matchers/MatchArray.html#M000173","(array)","",2],["satisfy","RSpec::Matchers","classes/RSpec/Matchers.html#M000246","(&block)","Passes if the submitted block returns true. Yields target to the block. Generally speaking, this should",2],["should","Kernel","classes/Kernel.html#M000009","(matcher=nil, message=nil, &block)","Passes if +matcher+ returns true.  Available on every +Object+. @example actual.should eq(expected) actual.should",2],["should_not","Kernel","classes/Kernel.html#M000010","(matcher=nil, message=nil, &block)","Passes if +matcher+ returns false.  Available on every +Object+. @example actual.should_not eq(expected)",2],["singleton_class","RSpec::Matchers::Matcher","classes/RSpec/Matchers/Matcher.html#M000207","()","",2],["split_words","RSpec::Matchers::Pretty","classes/RSpec/Matchers/Pretty.html#M000208","(sym)","",2],["throw_description","RSpec::Matchers::ThrowSymbol","classes/RSpec/Matchers/ThrowSymbol.html#M000254","(symbol, arg)","",2],["throw_symbol","RSpec::Matchers","classes/RSpec/Matchers.html#M000255","(expected_symbol=nil, expected_arg=nil)","Given no argument, matches if a proc throws any Symbol. Given a Symbol, matches if the given proc throws",2],["to","RSpec::Matchers::Change","classes/RSpec/Matchers/Change.html#M000090","(to)","",2],["to_sentence","RSpec::Matchers::Pretty","classes/RSpec/Matchers/Pretty.html#M000209","(words)","",2],["underscore","RSpec::Matchers::Pretty","classes/RSpec/Matchers/Pretty.html#M000214","(camel_cased_word)","Borrowed from ActiveSupport ",2],["use_custom_matcher_or_delegate","RSpec::Matchers::OperatorMatcher","classes/RSpec/Matchers/OperatorMatcher.html#M000188","(operator)","",2],["verify_message","RSpec::Matchers::RaiseError","classes/RSpec/Matchers/RaiseError.html#M000218","()","",2],["warn_deprecation","RSpec","classes/RSpec.html#M000001","(message)","Used internally by RSpec to display custom deprecation warnings.  This is also defined in rspec-core,",2],["with","RSpec::Matchers::RespondTo","classes/RSpec/Matchers/RespondTo.html#M000233","(n)","",2],["with_arity","RSpec::Matchers::RespondTo","classes/RSpec/Matchers/RespondTo.html#M000238","()","",2],["License.txt","files/License_txt.html","files/License_txt.html","","(The MIT License)  Copyright (c) 2006 David Chelimsky, The RSpec Development Team Copyright (c) 2005",3],["README.md","files/README_md.html","files/README_md.html","","# RSpec Expectations  [RSpec::Expectations](../RSpec/Expectations) lets you express expected outcomes",3],["rspec-expectations.rb","files/lib/rspec-expectations_rb.html","files/lib/rspec-expectations_rb.html","","",3],["expectations.rb","files/lib/rspec/expectations_rb.html","files/lib/rspec/expectations_rb.html","","",3],["deprecation.rb","files/lib/rspec/expectations/deprecation_rb.html","files/lib/rspec/expectations/deprecation_rb.html","","",3],["differ.rb","files/lib/rspec/expectations/differ_rb.html","files/lib/rspec/expectations/differ_rb.html","","",3],["errors.rb","files/lib/rspec/expectations/errors_rb.html","files/lib/rspec/expectations/errors_rb.html","","",3],["extensions.rb","files/lib/rspec/expectations/extensions_rb.html","files/lib/rspec/expectations/extensions_rb.html","","",3],["array.rb","files/lib/rspec/expectations/extensions/array_rb.html","files/lib/rspec/expectations/extensions/array_rb.html","","@private ",3],["kernel.rb","files/lib/rspec/expectations/extensions/kernel_rb.html","files/lib/rspec/expectations/extensions/kernel_rb.html","","",3],["object.rb","files/lib/rspec/expectations/extensions/object_rb.html","files/lib/rspec/expectations/extensions/object_rb.html","","",3],["fail_with.rb","files/lib/rspec/expectations/fail_with_rb.html","files/lib/rspec/expectations/fail_with_rb.html","","",3],["handler.rb","files/lib/rspec/expectations/handler_rb.html","files/lib/rspec/expectations/handler_rb.html","","",3],["version.rb","files/lib/rspec/expectations/version_rb.html","files/lib/rspec/expectations/version_rb.html","","",3],["matchers.rb","files/lib/rspec/matchers_rb.html","files/lib/rspec/matchers_rb.html","","",3],["base_matcher.rb","files/lib/rspec/matchers/base_matcher_rb.html","files/lib/rspec/matchers/base_matcher_rb.html","","",3],["be.rb","files/lib/rspec/matchers/be_rb.html","files/lib/rspec/matchers/be_rb.html","","",3],["be_close.rb","files/lib/rspec/matchers/be_close_rb.html","files/lib/rspec/matchers/be_close_rb.html","","",3],["be_instance_of.rb","files/lib/rspec/matchers/be_instance_of_rb.html","files/lib/rspec/matchers/be_instance_of_rb.html","","",3],["be_kind_of.rb","files/lib/rspec/matchers/be_kind_of_rb.html","files/lib/rspec/matchers/be_kind_of_rb.html","","",3],["be_within.rb","files/lib/rspec/matchers/be_within_rb.html","files/lib/rspec/matchers/be_within_rb.html","","",3],["block_aliases.rb","files/lib/rspec/matchers/block_aliases_rb.html","files/lib/rspec/matchers/block_aliases_rb.html","","",3],["change.rb","files/lib/rspec/matchers/change_rb.html","files/lib/rspec/matchers/change_rb.html","","",3],["compatibility.rb","files/lib/rspec/matchers/compatibility_rb.html","files/lib/rspec/matchers/compatibility_rb.html","","",3],["cover.rb","files/lib/rspec/matchers/cover_rb.html","files/lib/rspec/matchers/cover_rb.html","","",3],["dsl.rb","files/lib/rspec/matchers/dsl_rb.html","files/lib/rspec/matchers/dsl_rb.html","","",3],["eq.rb","files/lib/rspec/matchers/eq_rb.html","files/lib/rspec/matchers/eq_rb.html","","",3],["eql.rb","files/lib/rspec/matchers/eql_rb.html","files/lib/rspec/matchers/eql_rb.html","","",3],["equal.rb","files/lib/rspec/matchers/equal_rb.html","files/lib/rspec/matchers/equal_rb.html","","",3],["errors.rb","files/lib/rspec/matchers/errors_rb.html","files/lib/rspec/matchers/errors_rb.html","","",3],["exist.rb","files/lib/rspec/matchers/exist_rb.html","files/lib/rspec/matchers/exist_rb.html","","",3],["instance_eval_with_args.rb","files/lib/rspec/matchers/extensions/instance_eval_with_args_rb.html","files/lib/rspec/matchers/extensions/instance_eval_with_args_rb.html","","",3],["generated_descriptions.rb","files/lib/rspec/matchers/generated_descriptions_rb.html","files/lib/rspec/matchers/generated_descriptions_rb.html","","",3],["has.rb","files/lib/rspec/matchers/has_rb.html","files/lib/rspec/matchers/has_rb.html","","",3],["have.rb","files/lib/rspec/matchers/have_rb.html","files/lib/rspec/matchers/have_rb.html","","",3],["include.rb","files/lib/rspec/matchers/include_rb.html","files/lib/rspec/matchers/include_rb.html","","",3],["match.rb","files/lib/rspec/matchers/match_rb.html","files/lib/rspec/matchers/match_rb.html","","",3],["match_array.rb","files/lib/rspec/matchers/match_array_rb.html","files/lib/rspec/matchers/match_array_rb.html","","",3],["matcher.rb","files/lib/rspec/matchers/matcher_rb.html","files/lib/rspec/matchers/matcher_rb.html","","",3],["method_missing.rb","files/lib/rspec/matchers/method_missing_rb.html","files/lib/rspec/matchers/method_missing_rb.html","","",3],["operator_matcher.rb","files/lib/rspec/matchers/operator_matcher_rb.html","files/lib/rspec/matchers/operator_matcher_rb.html","","",3],["pretty.rb","files/lib/rspec/matchers/pretty_rb.html","files/lib/rspec/matchers/pretty_rb.html","","",3],["raise_error.rb","files/lib/rspec/matchers/raise_error_rb.html","files/lib/rspec/matchers/raise_error_rb.html","","",3],["respond_to.rb","files/lib/rspec/matchers/respond_to_rb.html","files/lib/rspec/matchers/respond_to_rb.html","","",3],["satisfy.rb","files/lib/rspec/matchers/satisfy_rb.html","files/lib/rspec/matchers/satisfy_rb.html","","",3],["throw_symbol.rb","files/lib/rspec/matchers/throw_symbol_rb.html","files/lib/rspec/matchers/throw_symbol_rb.html","","",3]],"searchIndex":["array","kernel","rspec","expectations","deprecatedconstants","differ","expectationnotmeterror","invalidmatchererror","negativeexpectationhandler","positiveexpectationhandler","version","matchers","basematcher","be","beakindof","beaninstanceof","becomparedto","befalse","benil","bepredicate","betrue","bewithin","blockaliases","change","cover","dsl","eq","eql","equal","exist","extensions","instanceevalwithargs","has","have","include","match","matcharray","matcher","matchererror","negativeoperatormatcher","operatormatcher","positiveoperatormatcher","pretty","raiseerror","respondto","satisfy","throwsymbol","==()","__delegate_operator()","__delegate_operator()","_pretty_print()","actual_delta()","all_strings?()","any_multiline_strings?()","args_description()","args_to_s()","args_to_sentence()","argument()","arguments()","be()","be_a()","be_a_kind_of()","be_an()","be_an_instance_of()","be_close()","be_false()","be_instance_of()","be_kind_of()","be_nil()","be_true()","be_within()","by()","by_at_least()","by_at_most()","cache()","cache_or_call_cached()","call_cached()","caught()","chain()","change()","change_expected?()","changed?()","clear_generated_description()","comparing_hash_keys?()","comparing_hash_values?()","const_missing()","context_lines()","cover()","define()","define_method()","deprecate()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","determine_collection()","determine_query_method()","diff_as_object()","diff_as_string()","diffable()","diffable?()","diffable?()","diffable?()","diffable?()","diffable?()","diffable?()","differ()","differ=()","difference_between_arrays()","does_not_match?()","does_not_match?()","does_not_match?()","does_not_match?()","eq()","eql()","equal()","eval_block()","eval_match()","evaluate_value_proc()","exist()","expect()","expected()","expected_error()","expected_matches_actual?()","expected_to_sentence()","expected_to_sentence()","fail_with()","fail_with_message()","failure_message_args_description()","failure_message_for_should()","failure_message_for_should()","failure_message_for_should()","failure_message_for_should()","failure_message_for_should()","failure_message_for_should()","failure_message_for_should()","failure_message_for_should()","failure_message_for_should()","failure_message_for_should()","failure_message_for_should()","failure_message_for_should()","failure_message_for_should()","failure_message_for_should()","failure_message_for_should()","failure_message_for_should()","failure_message_for_should()","failure_message_for_should()","failure_message_for_should_not()","failure_message_for_should_not()","failure_message_for_should_not()","failure_message_for_should_not()","failure_message_for_should_not()","failure_message_for_should_not()","failure_message_for_should_not()","failure_message_for_should_not()","failure_message_for_should_not()","failure_message_for_should_not()","failure_message_for_should_not()","failure_message_for_should_not()","failure_message_for_should_not()","failure_message_for_should_not()","failure_message_for_should_not()","failure_message_for_should_not()","failure_message_for_should_not()","failure_message_for_should_not()","find_failing_method_names()","for_expected()","format()","from()","generated_description()","get()","given_error()","handle_matcher()","handle_matcher()","have()","have_at_least()","have_at_most()","have_exactly()","include()","include()","inspect_object()","inspected_args()","instance_eval_with_args()","last_description()","making_declared_methods_public()","match()","match()","match_for_should()","match_for_should_not()","match_unless_raises()","match_unless_raises()","matcher()","matches?()","matches?()","matches?()","matches?()","matches?()","matches?()","matches?()","matches?()","matches?()","matches?()","matches?()","matches?()","matches?()","matches?()","matches?()","matches?()","matches?()","matches?()","matches?()","matches?()","matches?()","matches?()","matches?()","matches?()","matches?()","matches?()","matches_after?()","matches_arity?()","matches_before?()","matches_expected_delta?()","matches_max?()","matches_min?()","message()","method_description()","method_missing()","method_missing()","method_missing()","name()","name_to_sentence()","negative_expectation?()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","no_numbers?()","no_procs?()","none?()","not_a_collection()","object_to_string()","of()","parenthesize()","parse_expected()","perform_match()","pp_names()","predicate()","predicate()","prefix_and_expected()","prefix_to_sentence()","present_tense_predicate()","raise_block_syntax_error()","raise_error()","raise_exception()","register()","registry()","relative_expectation()","relativities()","respond_to()","respond_to?()","safe_sort()","satisfy()","should()","should_not()","singleton_class()","split_words()","throw_description()","throw_symbol()","to()","to_sentence()","underscore()","use_custom_matcher_or_delegate()","verify_message()","warn_deprecation()","with()","with_arity()","license.txt","readme.md","rspec-expectations.rb","expectations.rb","deprecation.rb","differ.rb","errors.rb","extensions.rb","array.rb","kernel.rb","object.rb","fail_with.rb","handler.rb","version.rb","matchers.rb","base_matcher.rb","be.rb","be_close.rb","be_instance_of.rb","be_kind_of.rb","be_within.rb","block_aliases.rb","change.rb","compatibility.rb","cover.rb","dsl.rb","eq.rb","eql.rb","equal.rb","errors.rb","exist.rb","instance_eval_with_args.rb","generated_descriptions.rb","has.rb","have.rb","include.rb","match.rb","match_array.rb","matcher.rb","method_missing.rb","operator_matcher.rb","pretty.rb","raise_error.rb","respond_to.rb","satisfy.rb","throw_symbol.rb"]}}