var search_data = {"index":{"info":[["Thor","lib/thor/actions/create_file.rb","classes/Thor.html"," < Object","",1],["Actions","Thor","classes/Thor/Actions.html"," < ","",1],["ClassMethods","Thor::Actions","classes/Thor/Actions/ClassMethods.html"," < ","",1],["Base","Thor","classes/Thor/Base.html"," < ","",1],["ClassMethods","Thor::Base","classes/Thor/Base/ClassMethods.html"," < ","",1],["DynamicTask","Thor","classes/Thor/DynamicTask.html"," < Task","A dynamic task that handles method missing scenarios. ",1],["Error","Thor","classes/Thor/Error.html"," < StandardError","Thor::Error is raised when it's caused by wrong usage of thor classes. Those errors have their backtrace",1],["Group","Thor","classes/Thor/Group.html"," < Object","Thor has a special class called Thor::Group. The main difference to Thor class is that it invokes all",1],["HiddenTask","Thor","classes/Thor/HiddenTask.html"," < Task","A task that is hidden in help messages but still invocable. ",1],["Invocation","Thor","classes/Thor/Invocation.html"," < ","",1],["ClassMethods","Thor::Invocation","classes/Thor/Invocation/ClassMethods.html"," < ","",1],["InvocationError","Thor","classes/Thor/InvocationError.html"," < Error","Raised when a task was found, but not invoked properly. ",1],["MalformattedArgumentError","Thor","classes/Thor/MalformattedArgumentError.html"," < InvocationError","",1],["RakeCompat","Thor","classes/Thor/RakeCompat.html"," < ","Adds a compatibility layer to your Thor classes which allows you to use rake package tasks. For example,",1],["RequiredArgumentMissingError","Thor","classes/Thor/RequiredArgumentMissingError.html"," < InvocationError","",1],["Shell","Thor","classes/Thor/Shell.html"," < ","",1],["Basic","Thor::Shell","classes/Thor/Shell/Basic.html"," < Object","",1],["Color","Thor::Shell","classes/Thor/Shell/Color.html"," < Basic","Inherit from Thor::Shell::Basic and add set_color behavior. Check Thor::Shell::Basic to see all available",1],["HTML","Thor::Shell","classes/Thor/Shell/HTML.html"," < Basic","Inherit from Thor::Shell::Basic and add set_color behavior. Check Thor::Shell::Basic to see all available",1],["Task","Thor","classes/Thor/Task.html"," < Struct.new(:name, :description, :long_description, :usage, :options)","",1],["UndefinedTaskError","Thor","classes/Thor/UndefinedTaskError.html"," < Error","Raised when a task was not found. ",1],["UnknownArgumentError","Thor","classes/Thor/UnknownArgumentError.html"," < Error","",1],["Util","Thor","classes/Thor/Util.html"," < ","This module holds several utilities: 1) Methods to convert thor namespaces to constants and vice-versa.",1],["add_file","Thor::Actions","classes/Thor/Actions.html#M000001","(destination, *args, &block)","Alias for #create_file",2],["add_link","Thor::Actions","classes/Thor/Actions.html#M000003","(destination, *args, &block)","Alias for #create_link",2],["add_runtime_options!","Thor::Actions::ClassMethods","classes/Thor/Actions/ClassMethods.html#M000028","()","Add runtime options that help actions execution. ",2],["all_tasks","Thor::Base::ClassMethods","classes/Thor/Base/ClassMethods.html#M000063","()","Returns the tasks for this Thor class and all subclasses. ==== Returns OrderedHash:: An ordered hash",2],["append_file","Thor::Actions","classes/Thor/Actions.html#M000016","(path, *args, &block)","Alias for #append_to_file",2],["append_to_file","Thor::Actions","classes/Thor/Actions.html#M000015","(path, *args, &block)","Append text to a file. Since it depends on insert_into_file, it's reversible. ==== Parameters path<String>::",2],["apply","Thor::Actions","classes/Thor/Actions.html#M000038","(path, config={})","Loads an external file and execute it in the instance binding. ==== Parameters path<String>:: The path",2],["argument","Thor::Base::ClassMethods","classes/Thor/Base/ClassMethods.html#M000055","(name, options={})","Adds an argument to the class and creates an attr_accessor for it. Arguments are different from options",2],["arguments","Thor::Base::ClassMethods","classes/Thor/Base/ClassMethods.html#M000056","()","Returns this class arguments, looking up in the ancestors chain. ==== Returns Array[Thor::Argument] ",2],["ask","Thor::Shell::Basic","classes/Thor/Shell/Basic.html#M000119","(statement, color=nil)","Ask something to the user and receives a response. ==== Example ask(\"What is your name?\") ",2],["ask","Thor::Shell::HTML","classes/Thor/Shell/HTML.html#M000144","(statement, color=nil)","Ask something to the user and receives a response. ==== Example ask(\"What is your name?\") TODO: Implement",2],["banner","Thor","classes/Thor.html#M000197","(task, namespace = nil, subcommand = false)","The banner for this class. You can customize it if you are invoking the thor class by another ways which",2],["banner","Thor::Group","classes/Thor/Group.html#M000108","()","The banner for this class. You can customize it if you are invoking the thor class by another ways which",2],["basename","Thor::Base::ClassMethods","classes/Thor/Base/ClassMethods.html#M000081","()","The basename of the program invoking the thor class. ",2],["camel_case","Thor::Util","classes/Thor/Util.html#M000174","(str)","Receives a string and convert it to camel case. camel_case returns CamelCase. ==== Parameters String",2],["capture","Thor::Actions","classes/Thor/Actions.html#M000024","(*args, &block)","",2],["check_unknown_options!","Thor","classes/Thor.html#M000194","(options={})","Extend check unknown options to accept a hash of conditions. === Parameters options<Hash>: A hash containing",2],["check_unknown_options!","Thor::Base::ClassMethods","classes/Thor/Base/ClassMethods.html#M000050","()","If you want to raise an error for unknown options, call check_unknown_options! This is disabled by default",2],["chmod","Thor::Actions","classes/Thor/Actions.html#M000012","(path, mode, config={})","Changes the mode of the given file or directory. ==== Parameters mode<Integer>:: the file mode path<String>::",2],["class_option","Thor::Base::ClassMethods","classes/Thor/Base/ClassMethods.html#M000058","(name, options={})","Adds an option to the set of class options ==== Parameters name<Symbol>:: The name of the argument. options<Hash>::",2],["class_options","Thor::Base::ClassMethods","classes/Thor/Base/ClassMethods.html#M000057","(options=nil)","Adds a bunch of options to the set of class options. class_options :foo => false, :bar => :required,",2],["concat","Thor::Actions","classes/Thor/Actions.html#M000023","(string)","",2],["copy_file","Thor::Actions","classes/Thor/Actions.html#M000007","(source, *args, &block)","Copies the file from the relative source to the relative destination. If the destination is not given",2],["create_file","Thor::Actions","classes/Thor/Actions.html#M000000","(destination, *args, &block)","Create a new file relative to the destination root with the given data, which is the return value of",2],["create_link","Thor::Actions","classes/Thor/Actions.html#M000002","(destination, *args, &block)","Create a new file relative to the destination root from the given source. ==== Parameters destination<String>::",2],["default_task","Thor","classes/Thor.html#M000182","(meth=nil)","Sets the default task when thor is executed without an explicit task to be called. ==== Parameters meth<Symbol>::",2],["desc","Thor","classes/Thor.html#M000184","(usage, description, options={})","Defines the usage and the description of the next task. ==== Parameters usage<String> description<String>",2],["desc","Thor::Group","classes/Thor/Group.html#M000086","(description=nil)","The description for this Thor::Group. If none is provided, but a source root exists, tries to find the",2],["destination_root","Thor::Actions","classes/Thor/Actions.html#M000031","()","Returns the root for this thor class (also aliased as destination root). ",2],["destination_root=","Thor::Actions","classes/Thor/Actions.html#M000032","(root)","Sets the root for this thor class. Relatives path are added to the directory where the script was invoked",2],["directory","Thor::Actions","classes/Thor/Actions.html#M000004","(source, *args, &block)","Copies recursively the files from source directory to root directory. If any of the files finishes with",2],["dynamic_width","Thor::Shell::Basic","classes/Thor/Shell/Basic.html#M000134","()","Calculate the dynamic width of the terminal ",2],["dynamic_width_stty","Thor::Shell::Basic","classes/Thor/Shell/Basic.html#M000135","()","",2],["dynamic_width_tput","Thor::Shell::Basic","classes/Thor/Shell/Basic.html#M000136","()","",2],["empty_directory","Thor::Actions","classes/Thor/Actions.html#M000005","(destination, config={})","Creates an empty directory. ==== Parameters destination<String>:: the relative path to the destination",2],["error","Thor::Shell::Basic","classes/Thor/Shell/Basic.html#M000127","(statement)","Called if something goes wrong during the execution. This is used by Thor internally and should not be",2],["exit_on_failure?","Thor::Base::ClassMethods","classes/Thor/Base/ClassMethods.html#M000080","()","A flag that makes the process exit with status 1 if any error happens. ",2],["file_collision","Thor::Shell::Basic","classes/Thor/Shell/Basic.html#M000126","(destination)","Deals with file collision and returns true if the file should be overwriten and false otherwise. If a",2],["find_by_namespace","Thor::Util","classes/Thor/Util.html#M000163","(namespace)","Receives a namespace and search for it in the Thor::Base subclasses. ==== Parameters namespace<String>::",2],["find_class_and_task_by_namespace","Thor::Util","classes/Thor/Util.html#M000175","(namespace, fallback = true)","Receives a namespace and tries to retrieve a Thor or Thor::Group class from it. It first searches for",2],["find_in_source_paths","Thor::Actions","classes/Thor/Actions.html#M000035","(file)","Receives a file or directory and search for it in the source paths. ",2],["formatted_usage","Thor::Task","classes/Thor/Task.html#M000159","(klass, namespace = true, subcommand = false)","Returns the formatted usage by injecting given required arguments and required options into the given",2],["from_superclass","Thor::Base::ClassMethods","classes/Thor/Base/ClassMethods.html#M000079","(method, default=nil)","Retrieves a value from superclass. If it reaches the baseclass, returns default. ",2],["get","Thor::Actions","classes/Thor/Actions.html#M000010","(source, *args, &block)","Gets the content at the given address and places it at the given relative destination. If a block is",2],["globs_for","Thor::Util","classes/Thor/Util.html#M000180","(path)","Where to look for Thor files. ",2],["group","Thor::Base::ClassMethods","classes/Thor/Base/ClassMethods.html#M000061","(name=nil)","Defines the group. This is used when thor list is invoked so you can specify that only tasks from a pre-defined",2],["gsub_file","Thor::Actions","classes/Thor/Actions.html#M000018","(path, flag, *args, &block)","Run a regular expression replacement on a file. ==== Parameters path<String>:: path of the file to be",2],["handle_argument_error?","Thor::Task","classes/Thor/Task.html#M000165","(instance, error, caller)","",2],["handle_no_method_error?","Thor::Task","classes/Thor/Task.html#M000168","(instance, error, caller)","",2],["help","Thor","classes/Thor.html#M000204","(task = nil, subcommand = false)","",2],["help","Thor","classes/Thor.html#M000190","(shell, subcommand = false)","Prints help information for this class. ==== Parameters shell<Thor::Shell> ",2],["help","Thor::Group","classes/Thor/Group.html#M000087","(shell)","Prints help information. ==== Options short:: When true, shows only usage. ",2],["hidden?","Thor::HiddenTask","classes/Thor/HiddenTask.html#M000169","()","",2],["hidden?","Thor::Task","classes/Thor/Task.html#M000157","()","",2],["in_root","Thor::Actions","classes/Thor/Actions.html#M000037","()","Goes to the root and execute the given block. ",2],["included","Thor::RakeCompat","classes/Thor/RakeCompat.html#M000114","(base)","",2],["inherited","Thor::Base::ClassMethods","classes/Thor/Base/ClassMethods.html#M000077","(klass)","Everytime someone inherits from a Thor class, register the klass and file into baseclass. ",2],["inject_into_class","Thor::Actions","classes/Thor/Actions.html#M000017","(path, klass, *args, &block)","Injects text right after the class definition. Since it depends on insert_into_file, it's reversible.",2],["inject_into_file","Thor::Actions","classes/Thor/Actions.html#M000008","(destination, *args, &block)","Alias for #insert_into_file",2],["insert_into_file","Thor::Actions","classes/Thor/Actions.html#M000006","(destination, *args, &block)","Injects the given content into a file. Different from gsub_file, this method is reversible. ==== Parameters",2],["inside","Thor::Actions","classes/Thor/Actions.html#M000036","(dir='', config={}, &block)","Do something in the root or on a provided subfolder. If a relative path is given it's referenced from",2],["invoke","Thor::Group","classes/Thor/Group.html#M000092","(*names, &block)","Invoke the given namespace or class given. It adds an instance method that will invoke the klass and",2],["invoke","Thor::Invocation","classes/Thor/Invocation.html#M000095","(name=nil, *args)","Receives a name and invokes it. The name can be a string (either \"task\" or \"namespace:task\"), a Thor::Task,",2],["invoke_from_option","Thor::Group","classes/Thor/Group.html#M000094","(*names, &block)","Invoke a thor class based on the value supplied by the user to the given option named \"name\". A class",2],["invoke_with_padding","Thor::Invocation","classes/Thor/Invocation.html#M000101","(*args)","Invokes using shell padding. ",2],["link_file","Thor::Actions","classes/Thor/Actions.html#M000009","(source, *args, &block)","Links the file from the relative source to the relative destination. If the destination is not given",2],["load_thorfile","Thor::Util","classes/Thor/Util.html#M000176","(path, content=nil, debug=false)","Receives a path and load the thor file in the path. The file is evaluated inside the sandbox to avoid",2],["long_desc","Thor","classes/Thor.html#M000185","(long_description, options={})","Defines the long description of the next task. ==== Parameters long description<String> ",2],["map","Thor","classes/Thor.html#M000186","(mappings=nil)","Maps an input to a task. If you define: map \"-T\" => \"list\" Running: thor -T Will invoke the list task.",2],["method_added","Thor::Base::ClassMethods","classes/Thor/Base/ClassMethods.html#M000078","(meth)","Fire this callback whenever a method is added. Added methods are tracked as tasks by invoking the create_task",2],["method_option","Thor","classes/Thor.html#M000188","(name, options={})","Adds an option to the set of method options. If :for is given as option, it allows you to change the",2],["method_options","Thor","classes/Thor.html#M000187","(options=nil)","Declares the options for the next task to be declared. ==== Parameters Hash[Symbol => Object]:: The hash",2],["mute","Thor::Shell::Basic","classes/Thor/Shell/Basic.html#M000116","()","Mute everything that's inside given block ",2],["mute?","Thor::Shell::Basic","classes/Thor/Shell/Basic.html#M000117","()","Check if base is muted ",2],["namespace","Thor::Base::ClassMethods","classes/Thor/Base/ClassMethods.html#M000066","(name=nil)","Sets the namespace for the Thor or Thor::Group class. By default the namespace is retrieved from the",2],["namespace_from_thor_class","Thor::Util","classes/Thor/Util.html#M000166","(constant)","Receives a constant and converts it to a Thor namespace. Since Thor tasks can be added to a sandbox,",2],["namespaces_in_content","Thor::Util","classes/Thor/Util.html#M000167","(contents, file=__FILE__)","Given the contents, evaluate it inside the sandbox and returns the namespaces defined in the sandbox.",2],["new","Thor::Actions","classes/Thor/Actions.html#M000029","(args=[], options={}, config={})","Extends initializer to add more configuration options. ==== Configuration behavior<Symbol>:: The actions",2],["new","Thor::Base","classes/Thor/Base.html#M000039","(args=[], options={}, config={})","It receives arguments in an Array and two hashes, one for options and other for configuration. Notice",2],["new","Thor::DynamicTask","classes/Thor/DynamicTask.html#M000170","(name, options=nil)","",2],["new","Thor::Shell","classes/Thor/Shell.html#M000150","(args=[], options={}, config={})","Add shell to initialize config values. ==== Configuration shell<Object>:: An instance of the shell to",2],["new","Thor::Task","classes/Thor/Task.html#M000154","(name, description, long_description, usage, options=nil)","",2],["no?","Thor::Shell::Basic","classes/Thor/Shell/Basic.html#M000123","(statement, color=nil)","Make a question the to user and returns true if the user replies \"n\" or \"no\". ",2],["no_tasks","Thor::Base::ClassMethods","classes/Thor/Base/ClassMethods.html#M000065","()","All methods defined inside the given block are not added as tasks. So you can do: class MyScript < Thor",2],["not_debugging?","Thor::Task","classes/Thor/Task.html#M000160","(instance)","",2],["padding=","Thor::Shell::Basic","classes/Thor/Shell/Basic.html#M000118","(value)","Sets the output padding, not allowing less than zero values. ",2],["prepend_file","Thor::Actions","classes/Thor/Actions.html#M000014","(path, *args, &block)","Alias for #prepend_to_file",2],["prepend_to_file","Thor::Actions","classes/Thor/Actions.html#M000013","(path, *args, &block)","Prepend text to a file. Since it depends on insert_into_file, it's reversible. ==== Parameters path<String>::",2],["print_options","Thor::Base::ClassMethods","classes/Thor/Base/ClassMethods.html#M000072","(shell, options, group_name=nil)","Receives a set of options and print them. ",2],["print_table","Thor::Shell::Basic","classes/Thor/Shell/Basic.html#M000124","(table, options={})","Prints a table. ==== Parameters Array[Array[String, String, ...]] ==== Options ident<Integer>:: Indent",2],["print_wrapped","Thor::Shell::Basic","classes/Thor/Shell/Basic.html#M000125","(message, options={})","Prints a long string, word-wrapping the text to the current width of the terminal display. Ideal for",2],["printable_tasks","Thor","classes/Thor.html#M000191","(all = true, subcommand = false)","Returns tasks ready to be printed. ",2],["printable_tasks","Thor::Group","classes/Thor/Group.html#M000105","(*)","Returns tasks ready to be printed. ",2],["public_task","Thor::Base::ClassMethods","classes/Thor/Base/ClassMethods.html#M000068","(*names)","Allows to use private methods from parent in child classes as tasks. ==== Paremeters names<Array>:: Method",2],["rake_classes","Thor::RakeCompat","classes/Thor/RakeCompat.html#M000113","()","",2],["register","Thor","classes/Thor.html#M000183","(klass, subcommand_name, usage, description, options={})","Registers another Thor subclass as a command. ==== Parameters klass<Class>:: Thor subclass to register",2],["relative_to_original_destination_root","Thor::Actions","classes/Thor/Actions.html#M000033","(path, remove_dot=true)","Returns the given path relative to the absolute root (ie, root where the script started). ",2],["remove_argument","Thor::Base::ClassMethods","classes/Thor/Base/ClassMethods.html#M000059","(*names)","Removes a previous defined argument. If :undefine is given, undefine accessors as well. ==== Paremeters",2],["remove_class_option","Thor::Base::ClassMethods","classes/Thor/Base/ClassMethods.html#M000060","(*names)","Removes a previous defined class option. ==== Paremeters names<Array>:: Class options to be removed ====",2],["remove_dir","Thor::Actions","classes/Thor/Actions.html#M000022","(path, config={})","Alias for #remove_file",2],["remove_file","Thor::Actions","classes/Thor/Actions.html#M000019","(path, config={})","Removes a file at the given location. ==== Parameters path<String>:: path of the file to be changed config<Hash>::",2],["remove_invocation","Thor::Group","classes/Thor/Group.html#M000096","(*names)","Remove a previously added invocation. ==== Examples remove_invocation :test_framework ",2],["remove_task","Thor::Base::ClassMethods","classes/Thor/Base/ClassMethods.html#M000064","(*names)","Removes a given task from this Thor class. This is usually done if you are inheriting from another class",2],["required_options","Thor::Task","classes/Thor/Task.html#M000161","()","",2],["ruby_command","Thor::Util","classes/Thor/Util.html#M000181","()","Return the path to the ruby interpreter taking into account multiple installations and windows extensions.",2],["run","Thor::Actions","classes/Thor/Actions.html#M000041","(command, config={})","Executes a command returning the contents of the command. ==== Parameters command<String>:: the command",2],["run","Thor::DynamicTask","classes/Thor/DynamicTask.html#M000172","(instance, args=[])","",2],["run","Thor::Task","classes/Thor/Task.html#M000158","(instance, args=[])","By default, a task invokes a method in the thor class. You can change this implementation to create custom",2],["run_ruby_script","Thor::Actions","classes/Thor/Actions.html#M000045","(command, config={})","Executes a ruby script (taking into account WIN32 platform quirks). ==== Parameters command<String>::",2],["say","Thor::Shell::Basic","classes/Thor/Shell/Basic.html#M000120","(message=\"\", color=nil, force_new_line=(message.to_s !~ /( |\\t)$/))","Say (print) something to the user. If the sentence ends with a whitespace or tab character, a new line",2],["say_status","Thor::Shell::Basic","classes/Thor/Shell/Basic.html#M000121","(status, message, log_status=true)","Say a status with the given color and appends the message. Since this method is used frequently by actions,",2],["set_color","Thor::Shell::Color","classes/Thor/Shell/Color.html#M000139","(string, color, bold=false)","Set color by using a string or one of the defined constants. If a third option is set to true, it also",2],["set_color","Thor::Shell::HTML","classes/Thor/Shell/HTML.html#M000143","(string, color, bold=false)","Set color by using a string or one of the defined constants. If a third option is set to true, it also",2],["shell","Thor::Base","classes/Thor/Base.html#M000147","()","Returns the shell used in all Thor classes. If you are in a Unix platform it will use a colored log,",2],["shell","Thor::Shell","classes/Thor/Shell.html#M000151","()","Holds the shell for the given Thor instance. If no shell is given, it gets a default shell from Thor::Base.shell.",2],["shell=","Thor::Base","classes/Thor/Base.html#M000149","(klass)","Sets the shell used in all Thor classes. ",2],["shell=","Thor::Shell","classes/Thor/Shell.html#M000152","(shell)","Sets the shell for this thor class. ",2],["snake_case","Thor::Util","classes/Thor/Util.html#M000173","(str)","Receives a string and convert it to snake case. SnakeCase returns snake_case. ==== Parameters String",2],["source_paths","Thor::Actions","classes/Thor/Actions.html#M000034","()","Holds source paths in instance so they can be manipulated. ",2],["source_paths","Thor::Actions::ClassMethods","classes/Thor/Actions/ClassMethods.html#M000021","()","Hold source paths for one Thor instance. source_paths_for_search is the method responsible to gather",2],["source_paths_for_search","Thor::Actions::ClassMethods","classes/Thor/Actions/ClassMethods.html#M000027","()","Returns the source paths in the following order: 1) This class source paths 2) Source root 3) Parents",2],["source_root","Thor::Actions::ClassMethods","classes/Thor/Actions/ClassMethods.html#M000026","(path=nil)","Stores and return the source root for this class ",2],["start","Thor::Base::ClassMethods","classes/Thor/Base/ClassMethods.html#M000067","(given_args=ARGV, config={})","Parses the task and options from the given args, instantiate the class and invoke the task. This method",2],["subclass_files","Thor::Base","classes/Thor/Base.html#M000043","()","Returns the files where the subclasses are kept. ==== Returns Hash[path<String> => Class] ",2],["subclasses","Thor::Base","classes/Thor/Base.html#M000042","()","Returns the classes that inherits from Thor or Thor::Group. ==== Returns Array[Class] ",2],["subcommand","Thor","classes/Thor.html#M000193","(subcommand, subcommand_class)","",2],["subcommand_help","Thor","classes/Thor.html#M000203","(cmd)","",2],["subcommands","Thor","classes/Thor.html#M000192","()","",2],["task_help","Thor","classes/Thor.html#M000189","(shell, task_name)","Prints help information for the given task. ==== Parameters shell<Thor::Shell> task_name<String> ",2],["tasks","Thor::Base::ClassMethods","classes/Thor/Base/ClassMethods.html#M000062","()","Returns the tasks for this Thor class. ==== Returns OrderedHash:: An ordered hash with tasks names as",2],["template","Thor::Actions","classes/Thor/Actions.html#M000011","(source, *args, &block)","Gets an ERB template at the relative source, executes it and makes a copy at the relative destination.",2],["terminal_width","Thor::Shell::Basic","classes/Thor/Shell/Basic.html#M000133","()","This code was copied from Rake, available under MIT-LICENSE Copyright (c) 2003, 2004 Jim Weirich ",2],["thor","Thor::Actions","classes/Thor/Actions.html#M000048","(task, *args)","Run a thor command. A hash of options can be given and it's converted to switches. ==== Parameters task<String>::",2],["thor_classes_in","Thor::Util","classes/Thor/Util.html#M000171","(klass)","Returns the thor classes declared inside the given class. ",2],["thor_root","Thor::Util","classes/Thor/Util.html#M000178","()","Returns the root where thor files are located, dependending on the OS. ",2],["thor_root_glob","Thor::Util","classes/Thor/Util.html#M000179","()","Returns the files in the thor root. On Windows thor_root will be something like this: C:\\Documents and",2],["truncate","Thor::Shell::Basic","classes/Thor/Shell/Basic.html#M000138","(string, width)","",2],["unix?","Thor::Shell::Basic","classes/Thor/Shell/Basic.html#M000137","()","",2],["user_home","Thor::Util","classes/Thor/Util.html#M000177","()","",2],["with_padding","Thor::Shell","classes/Thor/Shell.html#M000153","()","Yields the given block with padding. ",2],["yes?","Thor::Shell::Basic","classes/Thor/Shell/Basic.html#M000122","(statement, color=nil)","Make a question the to user and returns true if the user replies \"y\" or \"yes\". ",2],["CHANGELOG.rdoc","files/CHANGELOG_rdoc.html","files/CHANGELOG_rdoc.html","","== 0.14, released 2010-07-25  * Added CreateLink class and #link_file method  * Made Thor::Actions#run",3],["LICENSE","files/LICENSE.html","files/LICENSE.html","","Copyright (c) 2008 Yehuda Katz  Permission is hereby granted, free of charge, to any person obtaining",3],["README.md","files/README_md.html","files/README_md.html","","# Thor   ## Description  Thor is a simple and efficient tool for building self-documenting command line",3],["Thorfile","files/Thorfile.html","files/Thorfile.html","","# enconding: utf-8 require 'thor/rake_compat'  class Default < Thor   include Thor::RakeCompat    require",3],["thor.rb","files/lib/thor_rb.html","files/lib/thor_rb.html","","",3],["actions.rb","files/lib/thor/actions_rb.html","files/lib/thor/actions_rb.html","","",3],["create_file.rb","files/lib/thor/actions/create_file_rb.html","files/lib/thor/actions/create_file_rb.html","","",3],["create_link.rb","files/lib/thor/actions/create_link_rb.html","files/lib/thor/actions/create_link_rb.html","","",3],["directory.rb","files/lib/thor/actions/directory_rb.html","files/lib/thor/actions/directory_rb.html","","",3],["empty_directory.rb","files/lib/thor/actions/empty_directory_rb.html","files/lib/thor/actions/empty_directory_rb.html","","",3],["file_manipulation.rb","files/lib/thor/actions/file_manipulation_rb.html","files/lib/thor/actions/file_manipulation_rb.html","","",3],["inject_into_file.rb","files/lib/thor/actions/inject_into_file_rb.html","files/lib/thor/actions/inject_into_file_rb.html","","",3],["base.rb","files/lib/thor/base_rb.html","files/lib/thor/base_rb.html","","",3],["file_binary_read.rb","files/lib/thor/core_ext/file_binary_read_rb.html","files/lib/thor/core_ext/file_binary_read_rb.html","","",3],["hash_with_indifferent_access.rb","files/lib/thor/core_ext/hash_with_indifferent_access_rb.html","files/lib/thor/core_ext/hash_with_indifferent_access_rb.html","","",3],["ordered_hash.rb","files/lib/thor/core_ext/ordered_hash_rb.html","files/lib/thor/core_ext/ordered_hash_rb.html","","",3],["error.rb","files/lib/thor/error_rb.html","files/lib/thor/error_rb.html","","",3],["group.rb","files/lib/thor/group_rb.html","files/lib/thor/group_rb.html","","",3],["invocation.rb","files/lib/thor/invocation_rb.html","files/lib/thor/invocation_rb.html","","",3],["parser.rb","files/lib/thor/parser_rb.html","files/lib/thor/parser_rb.html","","",3],["argument.rb","files/lib/thor/parser/argument_rb.html","files/lib/thor/parser/argument_rb.html","","",3],["arguments.rb","files/lib/thor/parser/arguments_rb.html","files/lib/thor/parser/arguments_rb.html","","",3],["option.rb","files/lib/thor/parser/option_rb.html","files/lib/thor/parser/option_rb.html","","",3],["options.rb","files/lib/thor/parser/options_rb.html","files/lib/thor/parser/options_rb.html","","",3],["rake_compat.rb","files/lib/thor/rake_compat_rb.html","files/lib/thor/rake_compat_rb.html","","",3],["runner.rb","files/lib/thor/runner_rb.html","files/lib/thor/runner_rb.html","","",3],["shell.rb","files/lib/thor/shell_rb.html","files/lib/thor/shell_rb.html","","",3],["basic.rb","files/lib/thor/shell/basic_rb.html","files/lib/thor/shell/basic_rb.html","","",3],["color.rb","files/lib/thor/shell/color_rb.html","files/lib/thor/shell/color_rb.html","","",3],["html.rb","files/lib/thor/shell/html_rb.html","files/lib/thor/shell/html_rb.html","","",3],["task.rb","files/lib/thor/task_rb.html","files/lib/thor/task_rb.html","","",3],["util.rb","files/lib/thor/util_rb.html","files/lib/thor/util_rb.html","","",3],["version.rb","files/lib/thor/version_rb.html","files/lib/thor/version_rb.html","","",3]],"searchIndex":["thor","actions","classmethods","base","classmethods","dynamictask","error","group","hiddentask","invocation","classmethods","invocationerror","malformattedargumenterror","rakecompat","requiredargumentmissingerror","shell","basic","color","html","task","undefinedtaskerror","unknownargumenterror","util","add_file()","add_link()","add_runtime_options!()","all_tasks()","append_file()","append_to_file()","apply()","argument()","arguments()","ask()","ask()","banner()","banner()","basename()","camel_case()","capture()","check_unknown_options!()","check_unknown_options!()","chmod()","class_option()","class_options()","concat()","copy_file()","create_file()","create_link()","default_task()","desc()","desc()","destination_root()","destination_root=()","directory()","dynamic_width()","dynamic_width_stty()","dynamic_width_tput()","empty_directory()","error()","exit_on_failure?()","file_collision()","find_by_namespace()","find_class_and_task_by_namespace()","find_in_source_paths()","formatted_usage()","from_superclass()","get()","globs_for()","group()","gsub_file()","handle_argument_error?()","handle_no_method_error?()","help()","help()","help()","hidden?()","hidden?()","in_root()","included()","inherited()","inject_into_class()","inject_into_file()","insert_into_file()","inside()","invoke()","invoke()","invoke_from_option()","invoke_with_padding()","link_file()","load_thorfile()","long_desc()","map()","method_added()","method_option()","method_options()","mute()","mute?()","namespace()","namespace_from_thor_class()","namespaces_in_content()","new()","new()","new()","new()","new()","no?()","no_tasks()","not_debugging?()","padding=()","prepend_file()","prepend_to_file()","print_options()","print_table()","print_wrapped()","printable_tasks()","printable_tasks()","public_task()","rake_classes()","register()","relative_to_original_destination_root()","remove_argument()","remove_class_option()","remove_dir()","remove_file()","remove_invocation()","remove_task()","required_options()","ruby_command()","run()","run()","run()","run_ruby_script()","say()","say_status()","set_color()","set_color()","shell()","shell()","shell=()","shell=()","snake_case()","source_paths()","source_paths()","source_paths_for_search()","source_root()","start()","subclass_files()","subclasses()","subcommand()","subcommand_help()","subcommands()","task_help()","tasks()","template()","terminal_width()","thor()","thor_classes_in()","thor_root()","thor_root_glob()","truncate()","unix?()","user_home()","with_padding()","yes?()","changelog.rdoc","license","readme.md","thorfile","thor.rb","actions.rb","create_file.rb","create_link.rb","directory.rb","empty_directory.rb","file_manipulation.rb","inject_into_file.rb","base.rb","file_binary_read.rb","hash_with_indifferent_access.rb","ordered_hash.rb","error.rb","group.rb","invocation.rb","parser.rb","argument.rb","arguments.rb","option.rb","options.rb","rake_compat.rb","runner.rb","shell.rb","basic.rb","color.rb","html.rb","task.rb","util.rb","version.rb"],"longSearchIndex":["lib/thor.rb","thor","thor::actions","thor","thor::base","thor","thor","thor","thor","thor","thor::invocation","thor","thor","thor","thor","thor","thor::shell","thor::shell","thor::shell","thor","thor","thor","thor","thor::actions","thor::actions","thor::actions::classmethods","thor::base::classmethods","thor::actions","thor::actions","thor::actions","thor::base::classmethods","thor::base::classmethods","thor::shell::basic","thor::shell::html","thor","thor::group","thor::base::classmethods","thor::util","thor::actions","thor","thor::base::classmethods","thor::actions","thor::base::classmethods","thor::base::classmethods","thor::actions","thor::actions","thor::actions","thor::actions","thor","thor","thor::group","thor::actions","thor::actions","thor::actions","thor::shell::basic","thor::shell::basic","thor::shell::basic","thor::actions","thor::shell::basic","thor::base::classmethods","thor::shell::basic","thor::util","thor::util","thor::actions","thor::task","thor::base::classmethods","thor::actions","thor::util","thor::base::classmethods","thor::actions","thor::task","thor::task","thor","thor","thor::group","thor::hiddentask","thor::task","thor::actions","thor::rakecompat","thor::base::classmethods","thor::actions","thor::actions","thor::actions","thor::actions","thor::group","thor::invocation","thor::group","thor::invocation","thor::actions","thor::util","thor","thor","thor::base::classmethods","thor","thor","thor::shell::basic","thor::shell::basic","thor::base::classmethods","thor::util","thor::util","thor::actions","thor::base","thor::dynamictask","thor::shell","thor::task","thor::shell::basic","thor::base::classmethods","thor::task","thor::shell::basic","thor::actions","thor::actions","thor::base::classmethods","thor::shell::basic","thor::shell::basic","thor","thor::group","thor::base::classmethods","thor::rakecompat","thor","thor::actions","thor::base::classmethods","thor::base::classmethods","thor::actions","thor::actions","thor::group","thor::base::classmethods","thor::task","thor::util","thor::actions","thor::dynamictask","thor::task","thor::actions","thor::shell::basic","thor::shell::basic","thor::shell::color","thor::shell::html","thor::base","thor::shell","thor::base","thor::shell","thor::util","thor::actions","thor::actions::classmethods","thor::actions::classmethods","thor::actions::classmethods","thor::base::classmethods","thor::base","thor::base","thor","thor","thor","thor","thor::base::classmethods","thor::actions","thor::shell::basic","thor::actions","thor::util","thor::util","thor::util","thor::shell::basic","thor::shell::basic","thor::util","thor::shell","thor::shell::basic","files/changelog_rdoc.html","files/license.html","files/readme_md.html","files/thorfile.html","files/lib/thor_rb.html","files/lib/thor/actions_rb.html","files/lib/thor/actions/create_file_rb.html","files/lib/thor/actions/create_link_rb.html","files/lib/thor/actions/directory_rb.html","files/lib/thor/actions/empty_directory_rb.html","files/lib/thor/actions/file_manipulation_rb.html","files/lib/thor/actions/inject_into_file_rb.html","files/lib/thor/base_rb.html","files/lib/thor/core_ext/file_binary_read_rb.html","files/lib/thor/core_ext/hash_with_indifferent_access_rb.html","files/lib/thor/core_ext/ordered_hash_rb.html","files/lib/thor/error_rb.html","files/lib/thor/group_rb.html","files/lib/thor/invocation_rb.html","files/lib/thor/parser_rb.html","files/lib/thor/parser/argument_rb.html","files/lib/thor/parser/arguments_rb.html","files/lib/thor/parser/option_rb.html","files/lib/thor/parser/options_rb.html","files/lib/thor/rake_compat_rb.html","files/lib/thor/runner_rb.html","files/lib/thor/shell_rb.html","files/lib/thor/shell/basic_rb.html","files/lib/thor/shell/color_rb.html","files/lib/thor/shell/html_rb.html","files/lib/thor/task_rb.html","files/lib/thor/util_rb.html","files/lib/thor/version_rb.html"]}}