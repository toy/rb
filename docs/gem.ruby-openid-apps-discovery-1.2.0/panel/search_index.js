var search_data = {"index":{"info":[["OpenID","lib/gapps_openid.rb","classes/OpenID.html"," < ","Extends ruby-openid to support the discovery protocol used by Google Apps.  Usage is generally simple.",1],["GoogleDiscovery","OpenID","classes/OpenID/GoogleDiscovery.html"," < Object","Handles the bulk of Google's modified discovery prototcol See http://groups.google.com/group/google-federated-login-api/web/openid-discovery-for-hosted-domains",1],["SimpleSign","OpenID","classes/OpenID/SimpleSign.html"," < Object","Basic implementation of the XML Simple Sign algorithm.  Currently only supports RSA-SHA1 ",1],["default_discover","OpenID","classes/OpenID.html#M000001","(uri)","Alias for #discover",2],["discover","OpenID","classes/OpenID.html#M000000","(uri)","",2],["discover_site","OpenID::GoogleDiscovery","classes/OpenID/GoogleDiscovery.html#M000005","(domain)","Handles discovery for a domain ",2],["discover_user","OpenID::GoogleDiscovery","classes/OpenID/GoogleDiscovery.html#M000004","(domain, claimed_id)","Handles discovery for a user's claimed ID.   ",2],["fetch_host_meta","OpenID::GoogleDiscovery","classes/OpenID/GoogleDiscovery.html#M000006","(domain)","Kickstart the discovery process by checking against Google's well-known location for hosted domains.",2],["fetch_secure_xrds","OpenID::GoogleDiscovery","classes/OpenID/GoogleDiscovery.html#M000008","(authority, url, cache=true)","Fetches the XRDS and verifies the signature and authority for the doc ",2],["fetch_url","OpenID::GoogleDiscovery","classes/OpenID/GoogleDiscovery.html#M000007","(url)","",2],["get_cache","OpenID::GoogleDiscovery","classes/OpenID/GoogleDiscovery.html#M000011","(key)","",2],["get_user_xrds_url","OpenID::GoogleDiscovery","classes/OpenID/GoogleDiscovery.html#M000009","(xrds, claimed_id)","Process the URITemplate in the XRDS to derive the location of the claimed id's XRDS ",2],["parse_certificates","OpenID::SimpleSign","classes/OpenID/SimpleSign.html#M000013","(doc)","Extracts the signer's certificates from the XML ",2],["perform_discovery","OpenID::GoogleDiscovery","classes/OpenID/GoogleDiscovery.html#M000002","(uri)","Main entry point for discovery.  Attempts to detect whether or not the URI is a raw domain name ('mycompany.com')",2],["put_cache","OpenID::GoogleDiscovery","classes/OpenID/GoogleDiscovery.html#M000010","(key, item)","",2],["site_identifier?","OpenID::GoogleDiscovery","classes/OpenID/GoogleDiscovery.html#M000003","(parsed_uri)","",2],["store","OpenID::SimpleSign","classes/OpenID/SimpleSign.html#M000012","()","Initialize the store ",2],["valid_chain?","OpenID::SimpleSign","classes/OpenID/SimpleSign.html#M000014","(chain)","Verifies the chain of trust for the signing certificates ",2],["verify","OpenID::SimpleSign","classes/OpenID/SimpleSign.html#M000015","(xml, signature_value)","Verifies the signature of the doc, returning the CN of the signer if valid ",2],["ca-bundle.crt","files/lib/ca-bundle_crt.html","files/lib/ca-bundle_crt.html","","## ##  ca-bundle.crt -- Bundle of CA Certificates ##  Last Modified: Wed Jun 22 11:33:22 EDT 2005 ##",3],["gapps_openid.rb","files/lib/gapps_openid_rb.html","files/lib/gapps_openid_rb.html","","",3]],"searchIndex":["openid","googlediscovery","simplesign","default_discover()","discover()","discover_site()","discover_user()","fetch_host_meta()","fetch_secure_xrds()","fetch_url()","get_cache()","get_user_xrds_url()","parse_certificates()","perform_discovery()","put_cache()","site_identifier?()","store()","valid_chain?()","verify()","ca-bundle.crt","gapps_openid.rb"],"longSearchIndex":["lib/gapps_openid.rb","openid","openid","openid","openid","openid::googlediscovery","openid::googlediscovery","openid::googlediscovery","openid::googlediscovery","openid::googlediscovery","openid::googlediscovery","openid::googlediscovery","openid::simplesign","openid::googlediscovery","openid::googlediscovery","openid::googlediscovery","openid::simplesign","openid::simplesign","openid::simplesign","files/lib/ca-bundle_crt.html","files/lib/gapps_openid_rb.html"]}}