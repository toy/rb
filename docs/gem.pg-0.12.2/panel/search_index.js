var search_data = {"index":{"info":[["PGError","ext/pg.c","classes/PGError.html"," < StandardError","      This is the exception class raised when an error is returned from    a libpq API call.        The",1],["PGconn","lib/pg.rb","classes/PGconn.html"," < Object","      The class to access PostgreSQL RDBMS, based on the libpq interface,     provides convenient OO",1],["PGresult","ext/pg.c","classes/PGresult.html"," < Object","      The class to represent the query result tuples (rows).     An instance of this class is created",1],["[]","PGresult","classes/PGresult.html#M000110","(p1)","          Returns tuple _n_ as a hash.      ",2],["async_exec","PGconn","classes/PGconn.html#M000073","(...)","          This function has the same behavior as +PGconn#exec+,    except that it's implemented using",2],["async_query","PGconn","classes/PGconn.html#M000121","(...)","Alias for #async_exec",2],["backend_pid","PGconn","classes/PGconn.html#M000034","()","          Returns the process ID of the backend server    process for this connection.    Note that this",2],["block","PGconn","classes/PGconn.html#M000070","(...)","          Blocks until the server is no longer busy, or until the     optional _timeout_ is reached,",2],["cancel","PGconn","classes/PGconn.html#M000057","()","          Requests cancellation of the command currently being    processed. (Only implemented in PostgreSQL",2],["clear","PGresult","classes/PGresult.html#M000091","()","          Clears the PGresult object as the result of the query.     ",2],["close","PGconn","classes/PGconn.html#M000116","()","Alias for #finish",2],["cmd_status","PGresult","classes/PGresult.html#M000107","()","          Returns the status string of the last query command.     ",2],["cmd_tuples","PGresult","classes/PGresult.html#M000108","()","          Returns the number of tuples (rows) affected by the SQL command.       If the SQL command that",2],["cmdtuples","PGresult","classes/PGresult.html#M000140","()","Alias for #cmd_tuples",2],["column_values","PGresult","classes/PGresult.html#M000114","(p1)","            Returns an Array of the values from the nth column of each      tuple in the result.    ",2],["conndefaults","PGconn","classes/PGconn.html#M000012","()","          Returns an array of hashes. Each hash has the keys:    [+:keyword+]      the name of the option",2],["conndefaults","PGconn","classes/PGconn.html#M000019","()","          Returns an array of hashes. Each hash has the keys:    [+:keyword+]      the name of the option",2],["connect_poll","PGconn","classes/PGconn.html#M000014","()","          Returns one of:    [+PGRES_POLLING_READING+]      wait until the socket is ready to read  ",2],["connect_start","PGconn","classes/PGconn.html#M000011","(...)","          This is an asynchronous version of PGconn.connect().       Use PGconn#connect_poll to poll",2],["connection_needs_password","PGconn","classes/PGconn.html#M000035","()","          Returns +true+ if the authentication method required a    password, but none was available.",2],["connection_used_password","PGconn","classes/PGconn.html#M000036","()","          Returns +true+ if the authentication method used    a caller-supplied password, +false+ otherwise.",2],["consume_input","PGconn","classes/PGconn.html#M000052","()","          If input is available from the server, consume it.    After calling +consume_input+, you can",2],["db","PGconn","classes/PGconn.html#M000020","()","          Returns the connected database name.     ",2],["describe_portal","PGconn","classes/PGconn.html#M000041","(p1)","          Retrieve information about the portal _portal_name_.     ",2],["describe_prepared","PGconn","classes/PGconn.html#M000040","(p1)","          Retrieve information about the prepared statement    _statement_name_.     ",2],["each","PGresult","classes/PGresult.html#M000111","()","          Invokes block for each tuple in the result set.     ",2],["encrypt_password","PGconn","classes/PGconn.html#M000009","(p1, p2)","          This function is intended to be used by client applications that    send commands like: +ALTER",2],["error_field","PGresult","classes/PGresult.html#M000090","(p1)","          Returns the individual field of an error.       +fieldcode+ is one of:    * +PG_DIAG_SEVERITY+",2],["error_message","PGconn","classes/PGconn.html#M000032","()","          Returns the error message about connection.     ",2],["error_message","PGresult","classes/PGresult.html#M000089","()","          Returns the error message of the command as a string.      ",2],["escape","PGconn","classes/PGconn.html#M000118","(p1)","Alias for #escape_string",2],["escape_bytea","PGconn","classes/PGconn.html#M000006","(p1)","          Connection instance method for versions of 8.1 and higher of libpq    uses PQescapeByteaConn,",2],["escape_bytea","PGconn","classes/PGconn.html#M000044","(p1)","          Connection instance method for versions of 8.1 and higher of libpq    uses PQescapeByteaConn,",2],["escape_string","PGconn","classes/PGconn.html#M000005","(p1)","          Connection instance method for versions of 8.1 and higher of libpq    uses PQescapeStringConn,",2],["escape_string","PGconn","classes/PGconn.html#M000043","(p1)","          Connection instance method for versions of 8.1 and higher of libpq    uses PQescapeStringConn,",2],["exec","PGconn","classes/PGconn.html#M000037","(...)","          Sends SQL query request specified by _sql_ to PostgreSQL.    Returns a PGresult instance on",2],["exec_prepared","PGconn","classes/PGconn.html#M000039","(...)","          Execute prepared named statement specified by _statement_name_.    Returns a PGresult instance",2],["external_encoding","PGconn","classes/PGconn.html#M000004","()","          defined in Ruby 1.9 or later.    * Returns the server_encoding of the connected database as",2],["fformat","PGresult","classes/PGresult.html#M000098","(p1)","          Returns the format (0 for text, 1 for binary) of column    _column_number_.        Raises ArgumentError",2],["field_values","PGresult","classes/PGresult.html#M000115","(p1)","            Returns an Array of the values from the given _field_ of each tuple in the result.      ",2],["fields","PGresult","classes/PGresult.html#M000112","()","          Returns an array of Strings representing the names of the fields in the result.     ",2],["finish","PGconn","classes/PGconn.html#M000015","()","          Closes the backend connection.     ",2],["flush","PGconn","classes/PGconn.html#M000056","()","          Attempts to flush any queued output data to the server.    Returns +true+ if data is successfully",2],["fmod","PGresult","classes/PGresult.html#M000100","(p1)","          Returns the type modifier associated with column _column_number_. See     the #ftype method",2],["fname","PGresult","classes/PGresult.html#M000094","(p1)","          Returns the name of the column corresponding to _index_.     ",2],["fnumber","PGresult","classes/PGresult.html#M000095","(p1)","          Returns the index of the field specified by the string _name_.       Raises an ArgumentError",2],["fsize","PGresult","classes/PGresult.html#M000101","(p1)","          Returns the size of the field type in bytes.  Returns <tt>-1</tt> if the field is variable",2],["ftable","PGresult","classes/PGresult.html#M000096","(p1)","          Returns the Oid of the table from which the column _column_number_    was fetched.       Raises",2],["ftablecol","PGresult","classes/PGresult.html#M000097","(p1)","          Returns the column number (within its table) of the table from     which the column _column_number_",2],["ftype","PGresult","classes/PGresult.html#M000099","(p1)","          Returns the data type associated with _column_number_.       The integer returned is the internal",2],["get_client_encoding","PGconn","classes/PGconn.html#M000067","()","          Returns the client encoding as a String.     ",2],["get_copy_data","PGconn","classes/PGconn.html#M000061","(...)","          Return a string containing one row of data, +nil+    if the copy is done, or +false+ if the",2],["get_last_result","PGconn","classes/PGconn.html#M000074","()","          This function retrieves all available results    on the current connection (from previously",2],["get_result","PGconn","classes/PGconn.html#M000051","()","          Blocks waiting for the next result from a call to    +PGconn#send_query+ (or another asynchronous",2],["getisnull","PGresult","classes/PGresult.html#M000103","(p1, p2)","          Returns +true+ if the specified value is +nil+; +false+ otherwise.     ",2],["getlength","PGresult","classes/PGresult.html#M000104","(p1, p2)","          Returns the (String) length of the field in bytes.       Equivalent to <tt>res.value(<i>tup_num</i>,<i>field_num</i>).length</tt>.",2],["getvalue","PGresult","classes/PGresult.html#M000102","(p1, p2)","          Returns the value in tuple number _tup_num_, field _field_num_,    or +nil+ if the field is",2],["host","PGconn","classes/PGconn.html#M000023","()","          Returns the connected server name.     ",2],["internal_encoding","PGconn","classes/PGconn.html#M000002","()","          defined in Ruby 1.9 or later.       Returns:    * an Encoding - client_encoding of the connection",2],["internal_encoding=","PGconn","classes/PGconn.html#M000003","(p1)","          A wrapper of +PGconn#set_client_encoding+.    defined in Ruby 1.9 or later.       +value+ can",2],["is_busy","PGconn","classes/PGconn.html#M000053","()","          Returns +true+ if a command is busy, that is, if    PQgetResult would block. Otherwise returns",2],["isnonblocking","PGconn","classes/PGconn.html#M000055","()","          Returns +true+ if a command is busy, that is, if    PQgetResult would block. Otherwise returns",2],["isthreadsafe","PGconn","classes/PGconn.html#M000008","()","          Returns +true+ if libpq is thread safe, +false+ otherwise.     ",2],["lo_close","PGconn","classes/PGconn.html#M000085","(p1)","          Closes the postgres large object of _lo_desc_.     ",2],["lo_creat","PGconn","classes/PGconn.html#M000075","(...)","          Creates a large object with mode _mode_. Returns a large object Oid.    On failure, it raises",2],["lo_create","PGconn","classes/PGconn.html#M000076","(p1)","          Creates a large object with oid _oid_. Returns the large object Oid.    On failure, it raises",2],["lo_export","PGconn","classes/PGconn.html#M000078","(p1, p2)","          Saves a large object of _oid_ to a _file_.     ",2],["lo_import","PGconn","classes/PGconn.html#M000077","(p1)","          Import a file to a large object. Returns a large object Oid.       On failure, it raises a",2],["lo_lseek","PGconn","classes/PGconn.html#M000082","(p1, p2, p3)","          Move the large object pointer _lo_desc_ to offset _offset_.    Valid values for _whence_ are",2],["lo_open","PGconn","classes/PGconn.html#M000079","(...)","          Open a large object of _oid_. Returns a large object descriptor     instance on success. The",2],["lo_read","PGconn","classes/PGconn.html#M000081","(p1, p2)","          Attempts to read _len_ bytes from large object _lo_desc_,    returns resulting data.     ",2],["lo_seek","PGconn","classes/PGconn.html#M000130","(p1, p2, p3)","Alias for #lo_lseek",2],["lo_tell","PGconn","classes/PGconn.html#M000083","(p1)","          Returns the current position of the large object _lo_desc_.     ",2],["lo_truncate","PGconn","classes/PGconn.html#M000084","(p1, p2)","          Truncates the large object _lo_desc_ to size _len_.     ",2],["lo_unlink","PGconn","classes/PGconn.html#M000086","(p1)","          Unlinks (deletes) the postgres large object of _oid_.     ",2],["lo_write","PGconn","classes/PGconn.html#M000080","(p1, p2)","          Writes the string _buffer_ to the large object _lo_desc_.    Returns the number of bytes written.",2],["loclose","PGconn","classes/PGconn.html#M000134","(p1)","Alias for #lo_close",2],["locreat","PGconn","classes/PGconn.html#M000122","(...)","Alias for #lo_creat",2],["locreate","PGconn","classes/PGconn.html#M000123","(p1)","Alias for #lo_create",2],["loexport","PGconn","classes/PGconn.html#M000125","(p1, p2)","Alias for #lo_export",2],["loimport","PGconn","classes/PGconn.html#M000124","(p1)","Alias for #lo_import",2],["lolseek","PGconn","classes/PGconn.html#M000129","(p1, p2, p3)","Alias for #lo_lseek",2],["loopen","PGconn","classes/PGconn.html#M000126","(...)","Alias for #lo_open",2],["loread","PGconn","classes/PGconn.html#M000128","(p1, p2)","Alias for #lo_read",2],["loseek","PGconn","classes/PGconn.html#M000131","(p1, p2, p3)","Alias for #lo_lseek",2],["lotell","PGconn","classes/PGconn.html#M000132","(p1)","Alias for #lo_tell",2],["lotruncate","PGconn","classes/PGconn.html#M000133","(p1, p2)","Alias for #lo_truncate",2],["lounlink","PGconn","classes/PGconn.html#M000135","(p1)","Alias for #lo_unlink",2],["lowrite","PGconn","classes/PGconn.html#M000127","(p1, p2)","Alias for #lo_write",2],["make_empty_pgresult","PGconn","classes/PGconn.html#M000042","(p1)","          Constructs and empty PGresult with status _status_.    _status_ may be one of:    * +PGRES_EMPTY_QUERY+",2],["new","PGconn","classes/PGconn.html#M000013","(...)","          Create a connection to the specified server.        [+host+]      server hostname    [+hostaddr+]",2],["nfields","PGresult","classes/PGresult.html#M000093","()","          Returns the number of columns in the query result.     ",2],["nonblocking?","PGconn","classes/PGconn.html#M000119","()","Alias for #isnonblocking",2],["notifies","PGconn","classes/PGconn.html#M000058","()","          Returns a hash of the unprocessed notifications.    If there is no unprocessed notifier, it",2],["notifies_wait","PGconn","classes/PGconn.html#M000120","(...)","Alias for #wait_for_notify",2],["nparams","PGresult","classes/PGresult.html#M000105","()","          Returns the number of parameters of a prepared statement.    Only useful for the result returned",2],["ntuples","PGresult","classes/PGresult.html#M000092","()","          Returns the number of tuples in the query result.     ",2],["num_fields","PGresult","classes/PGresult.html#M000139","()","Alias for #nfields",2],["num_tuples","PGresult","classes/PGresult.html#M000138","()","Alias for #ntuples",2],["oid_value","PGresult","classes/PGresult.html#M000109","()","          Returns the +oid+ of the inserted row if applicable,    otherwise +nil+.     ",2],["options","PGconn","classes/PGconn.html#M000026","()","          Returns backend option string.     ",2],["parameter_status","PGconn","classes/PGconn.html#M000029","(p1)","          Returns the setting of parameter _param_name_, where    _param_name_ is one of    * +server_version+",2],["paramtype","PGresult","classes/PGresult.html#M000106","(p1)","          Returns the Oid of the data type of parameter _param_number_.    Only useful for the result",2],["parse_connect_args","PGconn","classes/PGconn.html#M000001","( *args )","Parse the connection +args+ into a connection-parameter string. See PGconn.new for valid arguments. ",2],["pass","PGconn","classes/PGconn.html#M000022","()","          Returns the authenticated user name.     ",2],["port","PGconn","classes/PGconn.html#M000024","()","          Returns the connected server port number.     ",2],["prepare","PGconn","classes/PGconn.html#M000038","(...)","          Prepares statement _sql_ with name _name_ to be executed later.    Returns a PGresult instance",2],["protocol_version","PGconn","classes/PGconn.html#M000030","()","          The 3.0 protocol will normally be used when communicating with PostgreSQL 7.4     or later",2],["put_copy_data","PGconn","classes/PGconn.html#M000059","(p1)","          Transmits _buffer_ as copy data to the server.    Returns true if the data was sent, false",2],["put_copy_end","PGconn","classes/PGconn.html#M000060","(...)","          Sends end-of-data indication to the server.       _error_message_ is an optional parameter,",2],["query","PGconn","classes/PGconn.html#M000117","(...)","Alias for #exec",2],["quote_connstr","PGconn","classes/PGconn.html#M000000","( value )","Quote the given +value+ for use in a connection-parameter string. ",2],["quote_ident","PGconn","classes/PGconn.html#M000010","(p1)","          Returns a string that is safe for inclusion in a SQL query as an    identifier. Note: this",2],["quote_ident","PGconn","classes/PGconn.html#M000072","(p1)","          Returns a string that is safe for inclusion in a SQL query as an    identifier. Note: this",2],["res_status","PGresult","classes/PGresult.html#M000088","(p1)","          Returns the string representation of status +status+.       ",2],["reset","PGconn","classes/PGconn.html#M000016","()","          Resets the backend connection. This method closes the     backend connection and tries to re-connect.",2],["reset_poll","PGconn","classes/PGconn.html#M000018","()","          Checks the status of a connection reset operation.    See PGconn#connect_start and PGconn#connect_poll",2],["reset_start","PGconn","classes/PGconn.html#M000017","()","          Initiate a connection reset in a nonblocking manner.    This will close the current connection",2],["result_error_field","PGresult","classes/PGresult.html#M000137","(p1)","Alias for #error_field",2],["result_error_message","PGresult","classes/PGresult.html#M000136","()","Alias for #error_message",2],["result_status","PGresult","classes/PGresult.html#M000087","()","          Returns the status of the query. The status value is one of:    * +PGRES_EMPTY_QUERY+    *",2],["send_describe_portal","PGconn","classes/PGconn.html#M000050","(p1)","          Asynchronously send _command_ to the server. Does not block.     Use in combination with +conn.get_result+.",2],["send_describe_prepared","PGconn","classes/PGconn.html#M000049","(p1)","          Asynchronously send _command_ to the server. Does not block.     Use in combination with +conn.get_result+.",2],["send_prepare","PGconn","classes/PGconn.html#M000047","(...)","          Prepares statement _sql_ with name _name_ to be executed later.    Sends prepare command asynchronously,",2],["send_query","PGconn","classes/PGconn.html#M000046","(...)","          Sends SQL query request specified by _sql_ to PostgreSQL for    asynchronous processing, and",2],["send_query_prepared","PGconn","classes/PGconn.html#M000048","(...)","          Execute prepared named statement specified by _statement_name_    asynchronously, and returns",2],["server_version","PGconn","classes/PGconn.html#M000031","()","           The number is formed by converting the major, minor, and revision    numbers into two-decimal-digit",2],["set_client_encoding","PGconn","classes/PGconn.html#M000068","(p1)","          Sets the client encoding to the _encoding_ String.     ",2],["set_error_verbosity","PGconn","classes/PGconn.html#M000062","(p1)","          Sets connection's verbosity to _verbosity_ and returns    the previous setting. Available settings",2],["set_notice_processor","PGconn","classes/PGconn.html#M000066","()","          Notice and warning messages generated by the server are not returned    by the query execution",2],["set_notice_receiver","PGconn","classes/PGconn.html#M000065","()","          Notice and warning messages generated by the server are not returned    by the query execution",2],["setnonblocking","PGconn","classes/PGconn.html#M000054","(p1)","          Sets the nonblocking status of the connection.     In the blocking state, calls to PGconn#send_query",2],["socket","PGconn","classes/PGconn.html#M000033","()","          Returns the socket's file descriptor for this connection.     ",2],["status","PGconn","classes/PGconn.html#M000027","()","          Returns status of connection : CONNECTION_OK or CONNECTION_BAD     ",2],["trace","PGconn","classes/PGconn.html#M000063","(p1)","          Enables tracing message passing between backend. The     trace message will be written to the",2],["transaction","PGconn","classes/PGconn.html#M000069","()","          Executes a +BEGIN+ at the start of the block,    and a +COMMIT+ at the end of the block, or",2],["transaction_status","PGconn","classes/PGconn.html#M000028","()","          returns one of the following statuses:      PQTRANS_IDLE    = 0 (connection idle)      PQTRANS_ACTIVE",2],["tty","PGconn","classes/PGconn.html#M000025","()","          Returns the connected pgtty. (Obsolete)     ",2],["unescape_bytea","PGconn","classes/PGconn.html#M000045","(p1)","          Converts an escaped string representation of binary data into binary data --- the    reverse",2],["unescape_bytea","PGconn","classes/PGconn.html#M000007","(p1)","          Converts an escaped string representation of binary data into binary data --- the    reverse",2],["untrace","PGconn","classes/PGconn.html#M000064","()","          Disables the message tracing.     ",2],["user","PGconn","classes/PGconn.html#M000021","()","          Returns the authenticated user name.     ",2],["values","PGresult","classes/PGresult.html#M000113","()","          Returns all tuples as an array of arrays.     ",2],["wait_for_notify","PGconn","classes/PGconn.html#M000071","(...)","          Blocks while waiting for notification(s), or until the optional    _timeout_ is reached, whichever",2],["BSD","files/BSD.html","files/BSD.html","","PostgreSQL Database Management System (formerly known as Postgres, then as Postgres95)  Portions Copyright",3],["ChangeLog","files/ChangeLog.html","files/ChangeLog.html","","2012-01-03  Michael Granger  <ged@FaerieMUD.org>  \t* History.rdoc: \tUpdating history for Lars's patch",3],["Contributors.rdoc","files/Contributors_rdoc.html","files/Contributors_rdoc.html",""," Thanks to all the great people that have contributed code, suggestions, and patches through the years.",3],["GPL","files/GPL.html","files/GPL.html","","\t\t    GNU GENERAL PUBLIC LICENSE \t\t       Version 2, June 1991   Copyright (C) 1989, 1991 Free Software",3],["History.rdoc","files/History_rdoc.html","files/History_rdoc.html","","== v0.12.2 [2012-01-03] Michael Granger <ged@FaerieMUD.org>  - Fix for the 1.8.7 breakage introduced",3],["LICENSE","files/LICENSE.html","files/LICENSE.html","","Ruby is copyrighted free software by Yukihiro Matsumoto <matz@netlab.co.jp>. You can redistribute it",3],["Manifest.txt","files/Manifest_txt.html","files/Manifest_txt.html","",".gemtest BSD ChangeLog Contributors.rdoc GPL History.rdoc LICENSE Manifest.txt README.OS_X.rdoc README.ja.rdoc",3],["README.OS_X.rdoc","files/README_OS_X_rdoc.html","files/README_OS_X_rdoc.html","","= Compiling on MacOS X  The EnterpriseDB packages are the recommended PostgreSQL installations to use",3],["README.ja.rdoc","files/README_ja_rdoc.html","files/README_ja_rdoc.html","","= pg  * https://bitbucket.org/ged/ruby-pg  This file needs translation. Anyone who is willing to volunteer,",3],["README.rdoc","files/README_rdoc.html","files/README_rdoc.html","","= pg  * https://bitbucket.org/ged/ruby-pg  == Description  Pg is the Ruby interface to the {PostgreSQL",3],["README.windows.rdoc","files/README_windows_rdoc.html","files/README_windows_rdoc.html","","= Compiling 'pg' on MS Windows  In order to build this extension on MS Windows you will need a couple",3],["compat.c","files/ext/compat_c.html","files/ext/compat_c.html","","",3],["pg.c","files/ext/pg_c.html","files/ext/pg_c.html","","",3],["pg.rb","files/lib/pg_rb.html","files/lib/pg_rb.html","","",3]],"searchIndex":["pgerror","pgconn","pgresult","[]()","async_exec()","async_query()","backend_pid()","block()","cancel()","clear()","close()","cmd_status()","cmd_tuples()","cmdtuples()","column_values()","conndefaults()","conndefaults()","connect_poll()","connect_start()","connection_needs_password()","connection_used_password()","consume_input()","db()","describe_portal()","describe_prepared()","each()","encrypt_password()","error_field()","error_message()","error_message()","escape()","escape_bytea()","escape_bytea()","escape_string()","escape_string()","exec()","exec_prepared()","external_encoding()","fformat()","field_values()","fields()","finish()","flush()","fmod()","fname()","fnumber()","fsize()","ftable()","ftablecol()","ftype()","get_client_encoding()","get_copy_data()","get_last_result()","get_result()","getisnull()","getlength()","getvalue()","host()","internal_encoding()","internal_encoding=()","is_busy()","isnonblocking()","isthreadsafe()","lo_close()","lo_creat()","lo_create()","lo_export()","lo_import()","lo_lseek()","lo_open()","lo_read()","lo_seek()","lo_tell()","lo_truncate()","lo_unlink()","lo_write()","loclose()","locreat()","locreate()","loexport()","loimport()","lolseek()","loopen()","loread()","loseek()","lotell()","lotruncate()","lounlink()","lowrite()","make_empty_pgresult()","new()","nfields()","nonblocking?()","notifies()","notifies_wait()","nparams()","ntuples()","num_fields()","num_tuples()","oid_value()","options()","parameter_status()","paramtype()","parse_connect_args()","pass()","port()","prepare()","protocol_version()","put_copy_data()","put_copy_end()","query()","quote_connstr()","quote_ident()","quote_ident()","res_status()","reset()","reset_poll()","reset_start()","result_error_field()","result_error_message()","result_status()","send_describe_portal()","send_describe_prepared()","send_prepare()","send_query()","send_query_prepared()","server_version()","set_client_encoding()","set_error_verbosity()","set_notice_processor()","set_notice_receiver()","setnonblocking()","socket()","status()","trace()","transaction()","transaction_status()","tty()","unescape_bytea()","unescape_bytea()","untrace()","user()","values()","wait_for_notify()","bsd","changelog","contributors.rdoc","gpl","history.rdoc","license","manifest.txt","readme.os_x.rdoc","readme.ja.rdoc","readme.rdoc","readme.windows.rdoc","compat.c","pg.c","pg.rb"],"longSearchIndex":["ext/pg.c","ext/pg.c","ext/pg.c","pgresult","pgconn","pgconn","pgconn","pgconn","pgconn","pgresult","pgconn","pgresult","pgresult","pgresult","pgresult","pgconn","pgconn","pgconn","pgconn","pgconn","pgconn","pgconn","pgconn","pgconn","pgconn","pgresult","pgconn","pgresult","pgconn","pgresult","pgconn","pgconn","pgconn","pgconn","pgconn","pgconn","pgconn","pgconn","pgresult","pgresult","pgresult","pgconn","pgconn","pgresult","pgresult","pgresult","pgresult","pgresult","pgresult","pgresult","pgconn","pgconn","pgconn","pgconn","pgresult","pgresult","pgresult","pgconn","pgconn","pgconn","pgconn","pgconn","pgconn","pgconn","pgconn","pgconn","pgconn","pgconn","pgconn","pgconn","pgconn","pgconn","pgconn","pgconn","pgconn","pgconn","pgconn","pgconn","pgconn","pgconn","pgconn","pgconn","pgconn","pgconn","pgconn","pgconn","pgconn","pgconn","pgconn","pgconn","pgconn","pgresult","pgconn","pgconn","pgconn","pgresult","pgresult","pgresult","pgresult","pgresult","pgconn","pgconn","pgresult","pgconn","pgconn","pgconn","pgconn","pgconn","pgconn","pgconn","pgconn","pgconn","pgconn","pgconn","pgresult","pgconn","pgconn","pgconn","pgresult","pgresult","pgresult","pgconn","pgconn","pgconn","pgconn","pgconn","pgconn","pgconn","pgconn","pgconn","pgconn","pgconn","pgconn","pgconn","pgconn","pgconn","pgconn","pgconn","pgconn","pgconn","pgconn","pgconn","pgresult","pgconn","files/bsd.html","files/changelog.html","files/contributors_rdoc.html","files/gpl.html","files/history_rdoc.html","files/license.html","files/manifest_txt.html","files/readme_os_x_rdoc.html","files/readme_ja_rdoc.html","files/readme_rdoc.html","files/readme_windows_rdoc.html","files/ext/compat_c.html","files/ext/pg_c.html","files/lib/pg_rb.html"]}}