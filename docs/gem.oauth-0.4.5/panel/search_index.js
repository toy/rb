var search_data = {"index":{"info":[["ActionController","lib/oauth/client/action_controller_request.rb","classes/ActionController.html"," < ","",1],["Base","ActionController","classes/ActionController/Base.html"," < Object","",1],["TestRequest","ActionController","classes/ActionController/TestRequest.html"," < Object","",1],["Digest","lib/digest/hmac.rb","classes/Digest.html"," < ","",1],["HMAC","Digest","classes/Digest/HMAC.html"," < Digest::Class","",1],["EventMachine","lib/oauth/client/em_http.rb","classes/EventMachine.html"," < ","",1],["HttpClient","EventMachine","classes/EventMachine/HttpClient.html"," < Object","Extensions for em-http so that we can use consumer.sign! with an EventMachine::HttpClient instance. This",1],["Net","lib/oauth/client/net_http.rb","classes/Net.html"," < ","",1],["HTTPGenericRequest","Net","classes/Net/HTTPGenericRequest.html"," < Object","",1],["OAuth","lib/oauth/cli.rb","classes/OAuth.html"," < ","",1],["AccessToken","OAuth","classes/OAuth/AccessToken.html"," < ConsumerToken","The Access Token is used for the actual \"real\" web service calls that you perform against the server",1],["CLI","OAuth","classes/OAuth/CLI.html"," < Object","",1],["Client","OAuth","classes/OAuth/Client.html"," < ","",1],["Helper","OAuth::Client","classes/OAuth/Client/Helper.html"," < Object","",1],["Consumer","OAuth","classes/OAuth/Consumer.html"," < Object","",1],["ConsumerToken","OAuth","classes/OAuth/ConsumerToken.html"," < Token","Superclass for tokens used by OAuth Clients ",1],["Error","OAuth","classes/OAuth/Error.html"," < StandardError","",1],["Helper","OAuth","classes/OAuth/Helper.html"," < ","",1],["OAuthTestHelper","OAuth","classes/OAuth/OAuthTestHelper.html"," < ","",1],["Problem","OAuth","classes/OAuth/Problem.html"," < OAuth::Unauthorized","",1],["RequestProxy","OAuth","classes/OAuth/RequestProxy.html"," < ","",1],["ActionControllerRequest","OAuth::RequestProxy","classes/OAuth/RequestProxy/ActionControllerRequest.html"," < OAuth::RequestProxy::Base","",1],["Base","OAuth::RequestProxy","classes/OAuth/RequestProxy/Base.html"," < Object","",1],["Curl","OAuth::RequestProxy","classes/OAuth/RequestProxy/Curl.html"," < ","",1],["Easy","OAuth::RequestProxy::Curl","classes/OAuth/RequestProxy/Curl/Easy.html"," < OAuth::RequestProxy::Base","",1],["EventMachine","OAuth::RequestProxy","classes/OAuth/RequestProxy/EventMachine.html"," < ","",1],["HttpRequest","OAuth::RequestProxy::EventMachine","classes/OAuth/RequestProxy/EventMachine/HttpRequest.html"," < OAuth::RequestProxy::Base","",1],["JabberRequest","OAuth::RequestProxy","classes/OAuth/RequestProxy/JabberRequest.html"," < OAuth::RequestProxy::Base","",1],["MockRequest","OAuth::RequestProxy","classes/OAuth/RequestProxy/MockRequest.html"," < OAuth::RequestProxy::Base","RequestProxy for Hashes to facilitate simpler signature creation. Usage: request = OAuth::RequestProxy.proxy",1],["Net","OAuth::RequestProxy","classes/OAuth/RequestProxy/Net.html"," < ","",1],["HTTP","OAuth::RequestProxy::Net","classes/OAuth/RequestProxy/Net/HTTP.html"," < ","",1],["HTTPRequest","OAuth::RequestProxy::Net::HTTP","classes/OAuth/RequestProxy/Net/HTTP/HTTPRequest.html"," < OAuth::RequestProxy::Base","",1],["RackRequest","OAuth::RequestProxy","classes/OAuth/RequestProxy/RackRequest.html"," < OAuth::RequestProxy::Base","",1],["Typhoeus","OAuth::RequestProxy","classes/OAuth/RequestProxy/Typhoeus.html"," < ","",1],["Request","OAuth::RequestProxy::Typhoeus","classes/OAuth/RequestProxy/Typhoeus/Request.html"," < OAuth::RequestProxy::Base","",1],["UnknownRequestType","OAuth::RequestProxy","classes/OAuth/RequestProxy/UnknownRequestType.html"," < Exception","",1],["RequestToken","OAuth","classes/OAuth/RequestToken.html"," < ConsumerToken","The RequestToken is used for the initial Request. This is normally created by the Consumer object. ",1],["Server","OAuth","classes/OAuth/Server.html"," < Object","This is mainly used to create consumer credentials and can pretty much be ignored if you want to create",1],["ServerToken","OAuth","classes/OAuth/ServerToken.html"," < Token","Used on the server for generating tokens ",1],["Signature","OAuth","classes/OAuth/Signature.html"," < ","",1],["Base","OAuth::Signature","classes/OAuth/Signature/Base.html"," < Object","",1],["HMAC","OAuth::Signature","classes/OAuth/Signature/HMAC.html"," < ","",1],["Base","OAuth::Signature::HMAC","classes/OAuth/Signature/HMAC/Base.html"," < OAuth::Signature::Base","",1],["MD5","OAuth::Signature::HMAC","classes/OAuth/Signature/HMAC/MD5.html"," < Base","",1],["RMD160","OAuth::Signature::HMAC","classes/OAuth/Signature/HMAC/RMD160.html"," < Base","",1],["SHA1","OAuth::Signature::HMAC","classes/OAuth/Signature/HMAC/SHA1.html"," < Base","",1],["SHA2","OAuth::Signature::HMAC","classes/OAuth/Signature/HMAC/SHA2.html"," < Base","",1],["MD5","OAuth::Signature","classes/OAuth/Signature/MD5.html"," < Base","",1],["PLAINTEXT","OAuth::Signature","classes/OAuth/Signature/PLAINTEXT.html"," < Base","",1],["RSA","OAuth::Signature","classes/OAuth/Signature/RSA.html"," < ","",1],["SHA1","OAuth::Signature::RSA","classes/OAuth/Signature/RSA/SHA1.html"," < OAuth::Signature::Base","",1],["SHA1","OAuth::Signature","classes/OAuth/Signature/SHA1.html"," < Base","",1],["UnknownSignatureMethod","OAuth::Signature","classes/OAuth/Signature/UnknownSignatureMethod.html"," < Exception","",1],["Token","OAuth","classes/OAuth/Token.html"," < Object","Superclass for the various tokens used by OAuth ",1],["Unauthorized","OAuth","classes/OAuth/Unauthorized.html"," < OAuth::Error","",1],["Object","lib/oauth/core_ext.rb","classes/Object.html"," < Object","these are to backport methods from 1.8.7/1.9.1 to 1.8.6 ",1],["String","lib/oauth/core_ext.rb","classes/String.html"," < Object","",1],["<<","Digest::HMAC","classes/Digest/HMAC.html#M000003","(text)","Alias for #update",2],["==","OAuth::Signature::Base","classes/OAuth/Signature/Base.html#M000198","(cmp_signature)","",2],["==","OAuth::Signature::PLAINTEXT","classes/OAuth/Signature/PLAINTEXT.html#M000210","(cmp_signature)","",2],["==","OAuth::Signature::RSA::SHA1","classes/OAuth/Signature/RSA/SHA1.html#M000213","(cmp_signature)","",2],["access_token_path","OAuth::Consumer","classes/OAuth/Consumer.html#M000078","()","",2],["access_token_path","OAuth::Server","classes/OAuth/Server.html#M000195","()","",2],["access_token_url","OAuth::Consumer","classes/OAuth/Consumer.html#M000083","()","",2],["access_token_url","OAuth::Server","classes/OAuth/Server.html#M000196","()","",2],["access_token_url?","OAuth::Consumer","classes/OAuth/Consumer.html#M000084","()","",2],["all_parameters","OAuth::RequestProxy::EventMachine::HttpRequest","classes/OAuth/RequestProxy/EventMachine/HttpRequest.html#M000147","()","",2],["all_parameters","OAuth::RequestProxy::Net::HTTP::HTTPRequest","classes/OAuth/RequestProxy/Net/HTTP/HTTPRequest.html#M000163","()","",2],["amend_user_agent_header","OAuth::Client::Helper","classes/OAuth/Client/Helper.html#M000045","(headers)","",2],["apply_oauth!","ActionController::TestRequest","classes/ActionController/TestRequest.html#M000017","()","",2],["auth_header_params","OAuth::RequestProxy::Net::HTTP::HTTPRequest","classes/OAuth/RequestProxy/Net/HTTP/HTTPRequest.html#M000171","()","",2],["authorize_path","OAuth::Consumer","classes/OAuth/Consumer.html#M000077","()","",2],["authorize_path","OAuth::Server","classes/OAuth/Server.html#M000193","()","",2],["authorize_url","OAuth::Consumer","classes/OAuth/Consumer.html#M000081","()","",2],["authorize_url","OAuth::RequestToken","classes/OAuth/RequestToken.html#M000235","(params = nil)","Generate an authorization URL for user authorization ",2],["authorize_url","OAuth::Server","classes/OAuth/Server.html#M000194","()","",2],["authorize_url?","OAuth::Consumer","classes/OAuth/Consumer.html#M000082","()","",2],["available_methods","OAuth::Signature","classes/OAuth/Signature.html#M000218","()","Returns a list of available signature methods ",2],["block_length","Digest::HMAC","classes/Digest/HMAC.html#M000007","()","",2],["body","OAuth::RequestProxy::Net::HTTP::HTTPRequest","classes/OAuth/RequestProxy/Net/HTTP/HTTPRequest.html#M000162","()","",2],["body_hash","OAuth::Signature","classes/OAuth/Signature.html#M000223","(request, options = {}, &block)","Create the body hash for a request ",2],["body_hash","OAuth::Signature::Base","classes/OAuth/Signature/Base.html#M000201","()","",2],["build","OAuth::Signature","classes/OAuth/Signature.html#M000219","(request, options = {}, &block)","Build a signature from a +request+. Raises UnknownSignatureMethod exception if the signature method is",2],["build_authorize_url","OAuth::RequestToken","classes/OAuth/RequestToken.html#M000238","(base_url, params)","construct an authorization url ",2],["bytes","String","classes/String.html#M000059","()","",2],["bytesize","String","classes/String.html#M000058","()","",2],["callback_confirmed?","OAuth::RequestToken","classes/OAuth/RequestToken.html#M000236","()","",2],["combine_query","EventMachine::HttpClient","classes/EventMachine/HttpClient.html#M000026","(path, query, uri_query)","",2],["configure_oauth","ActionController::TestRequest","classes/ActionController/TestRequest.html#M000016","(consumer = nil, token = nil, options = {})","",2],["consumer_key","OAuth::RequestProxy::Base","classes/OAuth/RequestProxy/Base.html#M000124","()","Alias for #oauth_consumer_key",2],["consumer_key","OAuth::Signature::Base","classes/OAuth/Signature/Base.html#M000203","()","",2],["create_consumer","OAuth::Server","classes/OAuth/Server.html#M000190","()","mainly for testing purposes ",2],["create_http","OAuth::Consumer","classes/OAuth/Consumer.html#M000086","(_url = nil)","Instantiates the http object ",2],["create_http_request","OAuth::Consumer","classes/OAuth/Consumer.html#M000087","(http_method, path, *arguments)","create the http request object for a given http_method and path ",2],["create_signed_request","OAuth::Consumer","classes/OAuth/Consumer.html#M000067","(http_method, path, token = nil, request_options = {}, *arguments)","Creates and signs an http request. It's recommended to use the Token classes to set this up correctly",2],["decode_public_key","OAuth::Signature::RSA::SHA1","classes/OAuth/Signature/RSA/SHA1.html#M000215","()","",2],["delete","OAuth::AccessToken","classes/OAuth/AccessToken.html#M000233","(path, headers = {})","Make a regular DELETE request using AccessToken @response = @token.delete('/people/123') @response =",2],["digest","OAuth::Signature::Base","classes/OAuth/Signature/Base.html#M000206","()","",2],["digest","OAuth::Signature::HMAC::Base","classes/OAuth/Signature/HMAC/Base.html#M000207","()","",2],["digest","OAuth::Signature::RSA::SHA1","classes/OAuth/Signature/RSA/SHA1.html#M000217","()","",2],["digest_class","OAuth::Signature::Base","classes/OAuth/Signature/Base.html#M000183","(digest_class = nil)","",2],["digest_klass","OAuth::Signature::Base","classes/OAuth/Signature/Base.html#M000187","(digest_klass = nil)","",2],["digest_length","Digest::HMAC","classes/Digest/HMAC.html#M000006","()","",2],["escape","OAuth::Helper","classes/OAuth/Helper.html#M000092","(value)","Escape +value+ by URL encoding all non-reserved character. See Also: {OAuth core spec version 1.0, section",2],["execute","OAuth::CLI","classes/OAuth/CLI.html#M000009","(stdout, stdin, stderr, arguments = [])","",2],["execute","OAuth::CLI","classes/OAuth/CLI.html#M000011","(stdout, stdin, stderr, arguments = [])","",2],["extract_command_and_parse_options","OAuth::CLI","classes/OAuth/CLI.html#M000021","(arguments)","",2],["finish","Digest::HMAC","classes/Digest/HMAC.html#M000005","()","",2],["form_url_encoded?","OAuth::RequestProxy::Net::HTTP::HTTPRequest","classes/OAuth/RequestProxy/Net/HTTP/HTTPRequest.html#M000168","()","",2],["from_hash","OAuth::ConsumerToken","classes/OAuth/ConsumerToken.html#M000226","(consumer, hash)","",2],["generate_consumer_credentials","OAuth::Server","classes/OAuth/Server.html#M000186","(params = {})","",2],["generate_credentials","OAuth::Server","classes/OAuth/Server.html#M000185","()","",2],["generate_key","OAuth::Helper","classes/OAuth/Helper.html#M000093","(size=32)","Generate a random key of up to +size+ bytes. The value returned is Base64 encoded with non-word characters",2],["generate_nonce","OAuth::Helper","classes/OAuth/Helper.html#M000094","(size=32)","Alias for #generate_key",2],["get","OAuth::AccessToken","classes/OAuth/AccessToken.html#M000225","(path, headers = {})","Make a regular GET request using AccessToken @response = @token.get('/people') @response = @token.get('/people',",2],["get_access_token","OAuth::Consumer","classes/OAuth/Consumer.html#M000064","(request_token, request_options = {}, *arguments, &block)","",2],["get_access_token","OAuth::RequestToken","classes/OAuth/RequestToken.html#M000237","(options = {}, *arguments)","exchange for AccessToken on server ",2],["get_request_token","OAuth::Consumer","classes/OAuth/Consumer.html#M000065","(request_options = {}, *arguments, &block)","Makes a request to the service for a new OAuth::RequestToken @request_token = @consumer.get_request_token",2],["hash_body","OAuth::Client::Helper","classes/OAuth/Client/Helper.html#M000044","()","",2],["hash_class","OAuth::Signature::Base","classes/OAuth/Signature/Base.html#M000188","(hash_class = nil)","",2],["head","OAuth::AccessToken","classes/OAuth/AccessToken.html#M000228","(path, headers = {})","Make a regular HEAD request using AccessToken @response = @token.head('/people') ",2],["header","OAuth::Client::Helper","classes/OAuth/Client/Helper.html#M000046","()","",2],["header_params","OAuth::RequestProxy::Base","classes/OAuth/RequestProxy/Base.html#M000143","()","",2],["http","OAuth::Consumer","classes/OAuth/Consumer.html#M000062","()","The HTTP object for the site. The HTTP Object is what you get when you do Net::HTTP.new ",2],["http_method","OAuth::Consumer","classes/OAuth/Consumer.html#M000061","()","The default http method ",2],["implements","OAuth::Signature::Base","classes/OAuth/Signature/Base.html#M000182","(signature_method = nil)","",2],["initialize_copy","Digest::HMAC","classes/Digest/HMAC.html#M000001","(other)","",2],["inspect","Digest::HMAC","classes/Digest/HMAC.html#M000008","()","",2],["marshal_dump","OAuth::Consumer","classes/OAuth/Consumer.html#M000090","(*args)","",2],["marshal_load","OAuth::Consumer","classes/OAuth/Consumer.html#M000091","(data)","",2],["merged_parameters","OAuth::RequestProxy::EventMachine::HttpRequest","classes/OAuth/RequestProxy/EventMachine/HttpRequest.html#M000150","(params, *extra_params)","",2],["method","OAuth::RequestProxy::ActionControllerRequest","classes/OAuth/RequestProxy/ActionControllerRequest.html#M000100","()","",2],["method","OAuth::RequestProxy::Curl::Easy","classes/OAuth/RequestProxy/Curl/Easy.html#M000108","()","",2],["method","OAuth::RequestProxy::EventMachine::HttpRequest","classes/OAuth/RequestProxy/EventMachine/HttpRequest.html#M000144","()","Request in this con ",2],["method","OAuth::RequestProxy::JabberRequest","classes/OAuth/RequestProxy/JabberRequest.html#M000152","()","",2],["method","OAuth::RequestProxy::MockRequest","classes/OAuth/RequestProxy/MockRequest.html#M000156","()","",2],["method","OAuth::RequestProxy::Net::HTTP::HTTPRequest","classes/OAuth/RequestProxy/Net/HTTP/HTTPRequest.html#M000159","()","",2],["method","OAuth::RequestProxy::RackRequest","classes/OAuth/RequestProxy/RackRequest.html#M000164","()","",2],["method","OAuth::RequestProxy::Typhoeus::Request","classes/OAuth/RequestProxy/Typhoeus/Request.html#M000175","()","",2],["mock_incoming_request_with_authorize_header","OAuth::OAuthTestHelper","classes/OAuth/OAuthTestHelper.html#M000103","(request)","",2],["mock_incoming_request_with_query","OAuth::OAuthTestHelper","classes/OAuth/OAuthTestHelper.html#M000101","(request)","",2],["new","Digest::HMAC","classes/Digest/HMAC.html#M000000","(key, digester)","",2],["new","OAuth::CLI","classes/OAuth/CLI.html#M000010","()","",2],["new","OAuth::Client::Helper","classes/OAuth/Client/Helper.html#M000037","(request, options = {})","",2],["new","OAuth::Consumer","classes/OAuth/Consumer.html#M000060","(consumer_key, consumer_secret, options = {})","Create a new consumer instance by passing it a configuration hash: @consumer = OAuth::Consumer.new(key,",2],["new","OAuth::ConsumerToken","classes/OAuth/ConsumerToken.html#M000227","(consumer, token=\"\", secret=\"\")","",2],["new","OAuth::Problem","classes/OAuth/Problem.html#M000071","(problem, request = nil, params = {})","",2],["new","OAuth::RequestProxy::Base","classes/OAuth/RequestProxy/Base.html#M000112","(request, options = {})","",2],["new","OAuth::Server","classes/OAuth/Server.html#M000184","(base_url, paths = {})","Create a new server instance ",2],["new","OAuth::ServerToken","classes/OAuth/ServerToken.html#M000234","()","",2],["new","OAuth::Signature::Base","classes/OAuth/Signature/Base.html#M000189","(request, options = {}, &block)","",2],["new","OAuth::Token","classes/OAuth/Token.html#M000239","(token, secret)","",2],["new","OAuth::Unauthorized","classes/OAuth/Unauthorized.html#M000088","(request = nil)","",2],["non_oauth_parameters","OAuth::RequestProxy::Base","classes/OAuth/RequestProxy/Base.html#M000133","()","",2],["nonce","OAuth::Client::Helper","classes/OAuth/Client/Helper.html#M000039","()","",2],["nonce","OAuth::RequestProxy::Base","classes/OAuth/RequestProxy/Base.html#M000126","()","Alias for #oauth_nonce",2],["nonce","OAuth::Signature::Base","classes/OAuth/Signature/Base.html#M000204","()","",2],["normalize","OAuth::Helper","classes/OAuth/Helper.html#M000096","(params)","Normalize a +Hash+ of parameter values. Parameters are sorted by name, using lexicographical byte value",2],["normalize_uri","EventMachine::HttpClient","classes/EventMachine/HttpClient.html#M000025","()","This code was lifted from the em-http-request because it was removed from the gem June 19, 2010 see:",2],["normalized_oauth_uri","EventMachine::HttpClient","classes/EventMachine/HttpClient.html#M000027","(http)","Since we expect to get the host etc details from the http instance (...), we create a fake url here.",2],["normalized_parameters","OAuth::RequestProxy::Base","classes/OAuth/RequestProxy/Base.html#M000135","()","See 9.1.1. in specs Normalize Request Parameters ",2],["normalized_uri","OAuth::RequestProxy::Base","classes/OAuth/RequestProxy/Base.html#M000134","()","See 9.1.2 in specs ",2],["normalized_uri","OAuth::RequestProxy::JabberRequest","classes/OAuth/RequestProxy/JabberRequest.html#M000154","()","",2],["normalized_uri","OAuth::RequestProxy::MockRequest","classes/OAuth/RequestProxy/MockRequest.html#M000157","()","",2],["oauth!","EventMachine::HttpClient","classes/EventMachine/HttpClient.html#M000023","(http, consumer = nil, token = nil, options = {})","Add the OAuth information to an HTTP request. Depending on the <tt>options[:scheme]</tt> setting this",2],["oauth!","Net::HTTPGenericRequest","classes/Net/HTTPGenericRequest.html#M000049","(http, consumer = nil, token = nil, options = {})","Add the OAuth information to an HTTP request. Depending on the <tt>options[:scheme]</tt> setting this",2],["oauth_body_hash_required?","Net::HTTPGenericRequest","classes/Net/HTTPGenericRequest.html#M000053","()","",2],["oauth_callback","OAuth::RequestProxy::Base","classes/OAuth/RequestProxy/Base.html#M000113","()","OAuth parameters ",2],["oauth_consumer_key","OAuth::RequestProxy::Base","classes/OAuth/RequestProxy/Base.html#M000116","()","",2],["oauth_full_request_uri","Net::HTTPGenericRequest","classes/Net/HTTPGenericRequest.html#M000052","(http,options)","",2],["oauth_header","OAuth::RequestProxy::Base","classes/OAuth/RequestProxy/Base.html#M000141","(options = {})","Authorization header for OAuth ",2],["oauth_helper_options","Net::HTTPGenericRequest","classes/Net/HTTPGenericRequest.html#M000051","(http, consumer, token, options)","",2],["oauth_nonce","OAuth::RequestProxy::Base","classes/OAuth/RequestProxy/Base.html#M000117","()","",2],["oauth_parameters","OAuth::Client::Helper","classes/OAuth/Client/Helper.html#M000041","()","",2],["oauth_parameters","OAuth::RequestProxy::Base","classes/OAuth/RequestProxy/Base.html#M000132","()","",2],["oauth_signature","OAuth::RequestProxy::Base","classes/OAuth/RequestProxy/Base.html#M000118","()","",2],["oauth_signature_method","OAuth::RequestProxy::Base","classes/OAuth/RequestProxy/Base.html#M000119","()","",2],["oauth_timestamp","OAuth::RequestProxy::Base","classes/OAuth/RequestProxy/Base.html#M000120","()","",2],["oauth_token","OAuth::RequestProxy::Base","classes/OAuth/RequestProxy/Base.html#M000121","()","",2],["oauth_verifier","OAuth::RequestProxy::Base","classes/OAuth/RequestProxy/Base.html#M000122","()","",2],["oauth_version","OAuth::RequestProxy::Base","classes/OAuth/RequestProxy/Base.html#M000123","()","",2],["option_parser","OAuth::CLI","classes/OAuth/CLI.html#M000022","(arguments = \"\")","",2],["options","OAuth::Client::Helper","classes/OAuth/Client/Helper.html#M000038","()","",2],["parameters","OAuth::Client::Helper","classes/OAuth/Client/Helper.html#M000047","()","",2],["parameters","OAuth::RequestProxy::ActionControllerRequest","classes/OAuth/RequestProxy/ActionControllerRequest.html#M000104","()","",2],["parameters","OAuth::RequestProxy::Base","classes/OAuth/RequestProxy/Base.html#M000130","()","Parameter accessors ",2],["parameters","OAuth::RequestProxy::Curl::Easy","classes/OAuth/RequestProxy/Curl/Easy.html#M000110","()","",2],["parameters","OAuth::RequestProxy::EventMachine::HttpRequest","classes/OAuth/RequestProxy/EventMachine/HttpRequest.html#M000146","()","",2],["parameters","OAuth::RequestProxy::JabberRequest","classes/OAuth/RequestProxy/JabberRequest.html#M000151","()","",2],["parameters","OAuth::RequestProxy::MockRequest","classes/OAuth/RequestProxy/MockRequest.html#M000155","()","",2],["parameters","OAuth::RequestProxy::Net::HTTP::HTTPRequest","classes/OAuth/RequestProxy/Net/HTTP/HTTPRequest.html#M000161","()","",2],["parameters","OAuth::RequestProxy::RackRequest","classes/OAuth/RequestProxy/RackRequest.html#M000167","()","",2],["parameters","OAuth::RequestProxy::Typhoeus::Request","classes/OAuth/RequestProxy/Typhoeus/Request.html#M000179","()","",2],["parameters_for_signature","OAuth::RequestProxy::ActionControllerRequest","classes/OAuth/RequestProxy/ActionControllerRequest.html#M000105","()","Override from OAuth::RequestProxy::Base to avoid roundtrip conversion to Hash or Array and thus preserve",2],["parameters_for_signature","OAuth::RequestProxy::Base","classes/OAuth/RequestProxy/Base.html#M000131","()","",2],["parameters_with_oauth","OAuth::Client::Helper","classes/OAuth/Client/Helper.html#M000048","()","",2],["parse_header","OAuth::Helper","classes/OAuth/Helper.html#M000097","(header)","Parse an Authorization / WWW-Authenticate header into a hash. Takes care of unescaping and removing surrounding",2],["parse_options","OAuth::CLI","classes/OAuth/CLI.html#M000028","(arguments)","",2],["post","OAuth::AccessToken","classes/OAuth/AccessToken.html#M000229","(path, body = '', headers = {})","Make a regular POST request using AccessToken @response = @token.post('/people') @response = @token.post('/people',",2],["post_parameters","OAuth::RequestProxy::Curl::Easy","classes/OAuth/RequestProxy/Curl/Easy.html#M000115","()","",2],["post_parameters","OAuth::RequestProxy::EventMachine::HttpRequest","classes/OAuth/RequestProxy/EventMachine/HttpRequest.html#M000149","()","",2],["post_parameters","OAuth::RequestProxy::Typhoeus::Request","classes/OAuth/RequestProxy/Typhoeus/Request.html#M000181","()","",2],["post_params","OAuth::RequestProxy::Net::HTTP::HTTPRequest","classes/OAuth/RequestProxy/Net/HTTP/HTTPRequest.html#M000170","()","",2],["prepare_parameters","OAuth::CLI","classes/OAuth/CLI.html#M000032","()","",2],["process_with_new_base_test","ActionController::Base","classes/ActionController/Base.html#M000012","(request, response=nil)","",2],["process_with_oauth","ActionController::Base","classes/ActionController/Base.html#M000013","(request, response=nil)","",2],["proxies","OAuth::RequestProxy::Base","classes/OAuth/RequestProxy/Base.html#M000111","(klass)","",2],["proxy","OAuth::Consumer","classes/OAuth/Consumer.html#M000085","()","",2],["proxy","OAuth::RequestProxy","classes/OAuth/RequestProxy.html#M000178","(request, options = {})","",2],["public_key","OAuth::Signature::RSA::SHA1","classes/OAuth/Signature/RSA/SHA1.html#M000214","()","",2],["put","OAuth::AccessToken","classes/OAuth/AccessToken.html#M000232","(path, body = '', headers = {})","Make a regular PUT request using AccessToken @response = @token.put('/people/123') @response = @token.put('/people/123',",2],["query_parameters","OAuth::RequestProxy::Curl::Easy","classes/OAuth/RequestProxy/Curl/Easy.html#M000114","()","",2],["query_parameters","OAuth::RequestProxy::EventMachine::HttpRequest","classes/OAuth/RequestProxy/EventMachine/HttpRequest.html#M000148","()","",2],["query_parameters","OAuth::RequestProxy::Typhoeus::Request","classes/OAuth/RequestProxy/Typhoeus/Request.html#M000180","()","",2],["query_params","OAuth::RequestProxy::ActionControllerRequest","classes/OAuth/RequestProxy/ActionControllerRequest.html#M000106","()","",2],["query_params","OAuth::RequestProxy::Net::HTTP::HTTPRequest","classes/OAuth/RequestProxy/Net/HTTP/HTTPRequest.html#M000169","()","",2],["query_params","OAuth::RequestProxy::RackRequest","classes/OAuth/RequestProxy/RackRequest.html#M000173","()","",2],["query_string","OAuth::RequestProxy::Net::HTTP::HTTPRequest","classes/OAuth/RequestProxy/Net/HTTP/HTTPRequest.html#M000166","()","",2],["query_string_blank?","OAuth::RequestProxy::Base","classes/OAuth/RequestProxy/Base.html#M000142","()","",2],["request","OAuth::AccessToken","classes/OAuth/AccessToken.html#M000224","(http_method, path, *arguments)","The less intrusive way. Otherwise, if we are to do it correctly inside consumer, we need to restructure",2],["request","OAuth::Consumer","classes/OAuth/Consumer.html#M000066","(http_method, path, token = nil, request_options = {}, *arguments)","Creates, signs and performs an http request. It's recommended to use the OAuth::Token classes to set",2],["request","OAuth::ConsumerToken","classes/OAuth/ConsumerToken.html#M000230","(http_method, path, *arguments)","Make a signed request using given http_method to the path @token.request(:get,  '/people') @token.request(:post,",2],["request_endpoint","OAuth::Consumer","classes/OAuth/Consumer.html#M000074","()","",2],["request_params","OAuth::RequestProxy::ActionControllerRequest","classes/OAuth/RequestProxy/ActionControllerRequest.html#M000107","()","",2],["request_params","OAuth::RequestProxy::RackRequest","classes/OAuth/RequestProxy/RackRequest.html#M000174","()","",2],["request_token_path","OAuth::Consumer","classes/OAuth/Consumer.html#M000076","()","",2],["request_token_path","OAuth::Server","classes/OAuth/Server.html#M000191","()","",2],["request_token_url","OAuth::Consumer","classes/OAuth/Consumer.html#M000079","()","TODO this is ugly, rewrite ",2],["request_token_url","OAuth::Server","classes/OAuth/Server.html#M000192","()","",2],["request_token_url?","OAuth::Consumer","classes/OAuth/Consumer.html#M000080","()","",2],["reset","Digest::HMAC","classes/Digest/HMAC.html#M000004","()","",2],["scheme","OAuth::Consumer","classes/OAuth/Consumer.html#M000075","()","",2],["secret","OAuth::Signature::Base","classes/OAuth/Signature/Base.html#M000205","()","",2],["secret","OAuth::Signature::PLAINTEXT","classes/OAuth/Signature/PLAINTEXT.html#M000212","()","",2],["set_oauth_body","EventMachine::HttpClient","classes/EventMachine/HttpClient.html#M000030","()","",2],["set_oauth_body","Net::HTTPGenericRequest","classes/Net/HTTPGenericRequest.html#M000055","()","FIXME: if you're using a POST body and query string parameters, this method will move query string parameters",2],["set_oauth_header","ActionController::TestRequest","classes/ActionController/TestRequest.html#M000018","()","",2],["set_oauth_header","EventMachine::HttpClient","classes/EventMachine/HttpClient.html#M000029","()","",2],["set_oauth_header","Net::HTTPGenericRequest","classes/Net/HTTPGenericRequest.html#M000054","()","",2],["set_oauth_parameters","ActionController::TestRequest","classes/ActionController/TestRequest.html#M000019","()","",2],["set_oauth_query_string","ActionController::TestRequest","classes/ActionController/TestRequest.html#M000020","()","",2],["set_oauth_query_string","EventMachine::HttpClient","classes/EventMachine/HttpClient.html#M000031","()","",2],["set_oauth_query_string","Net::HTTPGenericRequest","classes/Net/HTTPGenericRequest.html#M000056","()","",2],["sign","OAuth::RequestProxy::Base","classes/OAuth/RequestProxy/Base.html#M000136","(options = {})","",2],["sign","OAuth::Signature","classes/OAuth/Signature.html#M000220","(request, options = {}, &block)","Sign a +request+ ",2],["sign!","OAuth::Consumer","classes/OAuth/Consumer.html#M000069","(request, token = nil, request_options = {})","Sign the Request object. Use this if you have an externally generated http request object you want to",2],["sign!","OAuth::ConsumerToken","classes/OAuth/ConsumerToken.html#M000231","(request, options = {})","Sign a request generated elsewhere using Net:HTTP::Post.new or friends ",2],["sign!","OAuth::RequestProxy::Base","classes/OAuth/RequestProxy/Base.html#M000137","(options = {})","",2],["signature","OAuth::Client::Helper","classes/OAuth/Client/Helper.html#M000042","(extra_options = {})","",2],["signature","OAuth::RequestProxy::Base","classes/OAuth/RequestProxy/Base.html#M000128","()","Alias for #oauth_signature",2],["signature","OAuth::RequestProxy::RackRequest","classes/OAuth/RequestProxy/RackRequest.html#M000172","()","",2],["signature","OAuth::Signature::Base","classes/OAuth/Signature/Base.html#M000197","()","",2],["signature","OAuth::Signature::PLAINTEXT","classes/OAuth/Signature/PLAINTEXT.html#M000209","()","",2],["signature_base_string","EventMachine::HttpClient","classes/EventMachine/HttpClient.html#M000024","(http, consumer = nil, token = nil, options = {})","Create a string suitable for signing for an HTTP request. This process involves parameter normalization",2],["signature_base_string","Net::HTTPGenericRequest","classes/Net/HTTPGenericRequest.html#M000050","(http, consumer = nil, token = nil, options = {})","Create a string suitable for signing for an HTTP request. This process involves parameter normalization",2],["signature_base_string","OAuth::Client::Helper","classes/OAuth/Client/Helper.html#M000043","(extra_options = {})","",2],["signature_base_string","OAuth::Consumer","classes/OAuth/Consumer.html#M000070","(request, token = nil, request_options = {})","Return the signature_base_string ",2],["signature_base_string","OAuth::RequestProxy::Base","classes/OAuth/RequestProxy/Base.html#M000138","()","See 9.1 in specs ",2],["signature_base_string","OAuth::Signature","classes/OAuth/Signature.html#M000222","(request, options = {}, &block)","Create the signature base string for +request+. This string is the normalized parameter information.",2],["signature_base_string","OAuth::Signature::Base","classes/OAuth/Signature/Base.html#M000200","()","",2],["signature_base_string","OAuth::Signature::MD5","classes/OAuth/Signature/MD5.html#M000208","()","",2],["signature_base_string","OAuth::Signature::PLAINTEXT","classes/OAuth/Signature/PLAINTEXT.html#M000211","()","",2],["signature_base_string","OAuth::Signature::SHA1","classes/OAuth/Signature/SHA1.html#M000216","()","",2],["signature_method","OAuth::RequestProxy::Base","classes/OAuth/RequestProxy/Base.html#M000129","()","Alias for #oauth_signature_method",2],["signed?","OAuth::RequestProxy::Base","classes/OAuth/RequestProxy/Base.html#M000139","()","Has this request been signed yet? ",2],["signed_uri","OAuth::RequestProxy::Base","classes/OAuth/RequestProxy/Base.html#M000140","(with_oauth = true)","URI, including OAuth parameters ",2],["site","OAuth::Consumer","classes/OAuth/Consumer.html#M000073","()","",2],["stringify_keys","OAuth::Helper","classes/OAuth/Helper.html#M000099","(hash)","",2],["sufficient_options?","OAuth::CLI","classes/OAuth/CLI.html#M000033","()","",2],["tap","Object","classes/Object.html#M000057","()","",2],["timestamp","OAuth::Client::Helper","classes/OAuth/Client/Helper.html#M000040","()","",2],["timestamp","OAuth::RequestProxy::Base","classes/OAuth/RequestProxy/Base.html#M000127","()","Alias for #oauth_timestamp",2],["to_query","OAuth::Token","classes/OAuth/Token.html#M000240","()","",2],["to_s","OAuth::Problem","classes/OAuth/Problem.html#M000072","()","",2],["to_s","OAuth::Unauthorized","classes/OAuth/Unauthorized.html#M000089","()","",2],["token","OAuth::RequestProxy::Base","classes/OAuth/RequestProxy/Base.html#M000125","()","Alias for #oauth_token",2],["token","OAuth::Signature::Base","classes/OAuth/Signature/Base.html#M000202","()","",2],["token_request","OAuth::Consumer","classes/OAuth/Consumer.html#M000068","(http_method, path, token = nil, request_options = {}, *arguments)","Creates a request and parses the result as url_encoded. This is used internally for the RequestToken",2],["unescape","OAuth::Helper","classes/OAuth/Helper.html#M000098","(value)","",2],["update","Digest::HMAC","classes/Digest/HMAC.html#M000002","(text)","",2],["uri","OAuth::Consumer","classes/OAuth/Consumer.html#M000063","(custom_uri = nil)","Contains the root URI for this site ",2],["uri","OAuth::RequestProxy::ActionControllerRequest","classes/OAuth/RequestProxy/ActionControllerRequest.html#M000102","()","",2],["uri","OAuth::RequestProxy::Curl::Easy","classes/OAuth/RequestProxy/Curl/Easy.html#M000109","()","",2],["uri","OAuth::RequestProxy::EventMachine::HttpRequest","classes/OAuth/RequestProxy/EventMachine/HttpRequest.html#M000145","()","",2],["uri","OAuth::RequestProxy::JabberRequest","classes/OAuth/RequestProxy/JabberRequest.html#M000153","()","",2],["uri","OAuth::RequestProxy::MockRequest","classes/OAuth/RequestProxy/MockRequest.html#M000158","()","",2],["uri","OAuth::RequestProxy::Net::HTTP::HTTPRequest","classes/OAuth/RequestProxy/Net/HTTP/HTTPRequest.html#M000160","()","",2],["uri","OAuth::RequestProxy::RackRequest","classes/OAuth/RequestProxy/RackRequest.html#M000165","()","",2],["uri","OAuth::RequestProxy::Typhoeus::Request","classes/OAuth/RequestProxy/Typhoeus/Request.html#M000176","()","",2],["usage","OAuth::CLI","classes/OAuth/CLI.html#M000034","()","",2],["use_oauth=","ActionController::TestRequest","classes/ActionController/TestRequest.html#M000014","(bool)","",2],["use_oauth?","ActionController::TestRequest","classes/ActionController/TestRequest.html#M000015","()","",2],["valid_command?","OAuth::CLI","classes/OAuth/CLI.html#M000035","()","",2],["verbose?","OAuth::CLI","classes/OAuth/CLI.html#M000036","()","",2],["verify","OAuth::Signature","classes/OAuth/Signature.html#M000221","(request, options = {}, &block)","Verify the signature of +request+ ",2],["verify","OAuth::Signature::Base","classes/OAuth/Signature/Base.html#M000199","()","",2],["HISTORY","files/HISTORY.html","files/HISTORY.html","","=== 0.4.5 2011-06-25  * Add explicit require for rsa/sha1 (Juris Galang) * Use webmock to mock all http-requests",3],["LICENSE","files/LICENSE.html","files/LICENSE.html","","Copyright (c) 2007 Blaine Cook, Larry Halff, Pelle Braendgaard  Permission is hereby granted, free of",3],["README.rdoc","files/README_rdoc.html","files/README_rdoc.html","","= Ruby OAuth  == What  This is a RubyGem for implementing both OAuth clients and servers in Ruby applications.",3],["TODO","files/TODO.html","files/TODO.html","","Common use-cases should be streamlined:  * I have a URL that I want to sign (given consumer key/secret,",3],["hmac.rb","files/lib/digest/hmac_rb.html","files/lib/digest/hmac_rb.html","","= digest/hmac.rb An implementation of HMAC keyed-hashing algorithm == Overview This library adds a method",3],["oauth.rb","files/lib/oauth_rb.html","files/lib/oauth_rb.html","","",3],["cli.rb","files/lib/oauth/cli_rb.html","files/lib/oauth/cli_rb.html","","",3],["client.rb","files/lib/oauth/client_rb.html","files/lib/oauth/client_rb.html","","",3],["action_controller_request.rb","files/lib/oauth/client/action_controller_request_rb.html","files/lib/oauth/client/action_controller_request_rb.html","","",3],["em_http.rb","files/lib/oauth/client/em_http_rb.html","files/lib/oauth/client/em_http_rb.html","","",3],["helper.rb","files/lib/oauth/client/helper_rb.html","files/lib/oauth/client/helper_rb.html","","",3],["net_http.rb","files/lib/oauth/client/net_http_rb.html","files/lib/oauth/client/net_http_rb.html","","",3],["consumer.rb","files/lib/oauth/consumer_rb.html","files/lib/oauth/consumer_rb.html","","",3],["core_ext.rb","files/lib/oauth/core_ext_rb.html","files/lib/oauth/core_ext_rb.html","","these are to backport methods from 1.8.7/1.9.1 to 1.8.6 ",3],["errors.rb","files/lib/oauth/errors_rb.html","files/lib/oauth/errors_rb.html","","",3],["error.rb","files/lib/oauth/errors/error_rb.html","files/lib/oauth/errors/error_rb.html","","",3],["problem.rb","files/lib/oauth/errors/problem_rb.html","files/lib/oauth/errors/problem_rb.html","","",3],["unauthorized.rb","files/lib/oauth/errors/unauthorized_rb.html","files/lib/oauth/errors/unauthorized_rb.html","","",3],["helper.rb","files/lib/oauth/helper_rb.html","files/lib/oauth/helper_rb.html","","",3],["oauth.rb","files/lib/oauth/oauth_rb.html","files/lib/oauth/oauth_rb.html","","",3],["oauth_test_helper.rb","files/lib/oauth/oauth_test_helper_rb.html","files/lib/oauth/oauth_test_helper_rb.html","","",3],["request_proxy.rb","files/lib/oauth/request_proxy_rb.html","files/lib/oauth/request_proxy_rb.html","","",3],["action_controller_request.rb","files/lib/oauth/request_proxy/action_controller_request_rb.html","files/lib/oauth/request_proxy/action_controller_request_rb.html","","",3],["base.rb","files/lib/oauth/request_proxy/base_rb.html","files/lib/oauth/request_proxy/base_rb.html","","",3],["curb_request.rb","files/lib/oauth/request_proxy/curb_request_rb.html","files/lib/oauth/request_proxy/curb_request_rb.html","","",3],["em_http_request.rb","files/lib/oauth/request_proxy/em_http_request_rb.html","files/lib/oauth/request_proxy/em_http_request_rb.html","","",3],["jabber_request.rb","files/lib/oauth/request_proxy/jabber_request_rb.html","files/lib/oauth/request_proxy/jabber_request_rb.html","","",3],["mock_request.rb","files/lib/oauth/request_proxy/mock_request_rb.html","files/lib/oauth/request_proxy/mock_request_rb.html","","",3],["net_http.rb","files/lib/oauth/request_proxy/net_http_rb.html","files/lib/oauth/request_proxy/net_http_rb.html","","",3],["rack_request.rb","files/lib/oauth/request_proxy/rack_request_rb.html","files/lib/oauth/request_proxy/rack_request_rb.html","","",3],["typhoeus_request.rb","files/lib/oauth/request_proxy/typhoeus_request_rb.html","files/lib/oauth/request_proxy/typhoeus_request_rb.html","","",3],["server.rb","files/lib/oauth/server_rb.html","files/lib/oauth/server_rb.html","","",3],["signature.rb","files/lib/oauth/signature_rb.html","files/lib/oauth/signature_rb.html","","",3],["base.rb","files/lib/oauth/signature/base_rb.html","files/lib/oauth/signature/base_rb.html","","",3],["base.rb","files/lib/oauth/signature/hmac/base_rb.html","files/lib/oauth/signature/hmac/base_rb.html","","",3],["md5.rb","files/lib/oauth/signature/hmac/md5_rb.html","files/lib/oauth/signature/hmac/md5_rb.html","","",3],["rmd160.rb","files/lib/oauth/signature/hmac/rmd160_rb.html","files/lib/oauth/signature/hmac/rmd160_rb.html","","",3],["sha1.rb","files/lib/oauth/signature/hmac/sha1_rb.html","files/lib/oauth/signature/hmac/sha1_rb.html","","",3],["sha2.rb","files/lib/oauth/signature/hmac/sha2_rb.html","files/lib/oauth/signature/hmac/sha2_rb.html","","",3],["md5.rb","files/lib/oauth/signature/md5_rb.html","files/lib/oauth/signature/md5_rb.html","","",3],["plaintext.rb","files/lib/oauth/signature/plaintext_rb.html","files/lib/oauth/signature/plaintext_rb.html","","",3],["sha1.rb","files/lib/oauth/signature/rsa/sha1_rb.html","files/lib/oauth/signature/rsa/sha1_rb.html","","",3],["sha1.rb","files/lib/oauth/signature/sha1_rb.html","files/lib/oauth/signature/sha1_rb.html","","",3],["token.rb","files/lib/oauth/token_rb.html","files/lib/oauth/token_rb.html","","this exists for backwards-compatibility ",3],["access_token.rb","files/lib/oauth/tokens/access_token_rb.html","files/lib/oauth/tokens/access_token_rb.html","","",3],["consumer_token.rb","files/lib/oauth/tokens/consumer_token_rb.html","files/lib/oauth/tokens/consumer_token_rb.html","","",3],["request_token.rb","files/lib/oauth/tokens/request_token_rb.html","files/lib/oauth/tokens/request_token_rb.html","","",3],["server_token.rb","files/lib/oauth/tokens/server_token_rb.html","files/lib/oauth/tokens/server_token_rb.html","","",3],["token.rb","files/lib/oauth/tokens/token_rb.html","files/lib/oauth/tokens/token_rb.html","","",3]],"searchIndex":["actioncontroller","base","testrequest","digest","hmac","eventmachine","httpclient","net","httpgenericrequest","oauth","accesstoken","cli","client","helper","consumer","consumertoken","error","helper","oauthtesthelper","problem","requestproxy","actioncontrollerrequest","base","curl","easy","eventmachine","httprequest","jabberrequest","mockrequest","net","http","httprequest","rackrequest","typhoeus","request","unknownrequesttype","requesttoken","server","servertoken","signature","base","hmac","base","md5","rmd160","sha1","sha2","md5","plaintext","rsa","sha1","sha1","unknownsignaturemethod","token","unauthorized","object","string","<<()","==()","==()","==()","access_token_path()","access_token_path()","access_token_url()","access_token_url()","access_token_url?()","all_parameters()","all_parameters()","amend_user_agent_header()","apply_oauth!()","auth_header_params()","authorize_path()","authorize_path()","authorize_url()","authorize_url()","authorize_url()","authorize_url?()","available_methods()","block_length()","body()","body_hash()","body_hash()","build()","build_authorize_url()","bytes()","bytesize()","callback_confirmed?()","combine_query()","configure_oauth()","consumer_key()","consumer_key()","create_consumer()","create_http()","create_http_request()","create_signed_request()","decode_public_key()","delete()","digest()","digest()","digest()","digest_class()","digest_klass()","digest_length()","escape()","execute()","execute()","extract_command_and_parse_options()","finish()","form_url_encoded?()","from_hash()","generate_consumer_credentials()","generate_credentials()","generate_key()","generate_nonce()","get()","get_access_token()","get_access_token()","get_request_token()","hash_body()","hash_class()","head()","header()","header_params()","http()","http_method()","implements()","initialize_copy()","inspect()","marshal_dump()","marshal_load()","merged_parameters()","method()","method()","method()","method()","method()","method()","method()","method()","mock_incoming_request_with_authorize_header()","mock_incoming_request_with_query()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","non_oauth_parameters()","nonce()","nonce()","nonce()","normalize()","normalize_uri()","normalized_oauth_uri()","normalized_parameters()","normalized_uri()","normalized_uri()","normalized_uri()","oauth!()","oauth!()","oauth_body_hash_required?()","oauth_callback()","oauth_consumer_key()","oauth_full_request_uri()","oauth_header()","oauth_helper_options()","oauth_nonce()","oauth_parameters()","oauth_parameters()","oauth_signature()","oauth_signature_method()","oauth_timestamp()","oauth_token()","oauth_verifier()","oauth_version()","option_parser()","options()","parameters()","parameters()","parameters()","parameters()","parameters()","parameters()","parameters()","parameters()","parameters()","parameters()","parameters_for_signature()","parameters_for_signature()","parameters_with_oauth()","parse_header()","parse_options()","post()","post_parameters()","post_parameters()","post_parameters()","post_params()","prepare_parameters()","process_with_new_base_test()","process_with_oauth()","proxies()","proxy()","proxy()","public_key()","put()","query_parameters()","query_parameters()","query_parameters()","query_params()","query_params()","query_params()","query_string()","query_string_blank?()","request()","request()","request()","request_endpoint()","request_params()","request_params()","request_token_path()","request_token_path()","request_token_url()","request_token_url()","request_token_url?()","reset()","scheme()","secret()","secret()","set_oauth_body()","set_oauth_body()","set_oauth_header()","set_oauth_header()","set_oauth_header()","set_oauth_parameters()","set_oauth_query_string()","set_oauth_query_string()","set_oauth_query_string()","sign()","sign()","sign!()","sign!()","sign!()","signature()","signature()","signature()","signature()","signature()","signature_base_string()","signature_base_string()","signature_base_string()","signature_base_string()","signature_base_string()","signature_base_string()","signature_base_string()","signature_base_string()","signature_base_string()","signature_base_string()","signature_method()","signed?()","signed_uri()","site()","stringify_keys()","sufficient_options?()","tap()","timestamp()","timestamp()","to_query()","to_s()","to_s()","token()","token()","token_request()","unescape()","update()","uri()","uri()","uri()","uri()","uri()","uri()","uri()","uri()","uri()","usage()","use_oauth=()","use_oauth?()","valid_command?()","verbose?()","verify()","verify()","history","license","readme.rdoc","todo","hmac.rb","oauth.rb","cli.rb","client.rb","action_controller_request.rb","em_http.rb","helper.rb","net_http.rb","consumer.rb","core_ext.rb","errors.rb","error.rb","problem.rb","unauthorized.rb","helper.rb","oauth.rb","oauth_test_helper.rb","request_proxy.rb","action_controller_request.rb","base.rb","curb_request.rb","em_http_request.rb","jabber_request.rb","mock_request.rb","net_http.rb","rack_request.rb","typhoeus_request.rb","server.rb","signature.rb","base.rb","base.rb","md5.rb","rmd160.rb","sha1.rb","sha2.rb","md5.rb","plaintext.rb","sha1.rb","sha1.rb","token.rb","access_token.rb","consumer_token.rb","request_token.rb","server_token.rb","token.rb"],"longSearchIndex":["lib/oauth/client/action_controller_request.rb","actioncontroller","actioncontroller","lib/digest/hmac.rb","digest","lib/oauth/client/em_http.rb","eventmachine","lib/oauth/client/net_http.rb","net","lib/oauth.rb","oauth","oauth","oauth","oauth::client","oauth","oauth","oauth","oauth","oauth","oauth","oauth","oauth::requestproxy","oauth::requestproxy","oauth::requestproxy","oauth::requestproxy::curl","oauth::requestproxy","oauth::requestproxy::eventmachine","oauth::requestproxy","oauth::requestproxy","oauth::requestproxy","oauth::requestproxy::net","oauth::requestproxy::net::http","oauth::requestproxy","oauth::requestproxy","oauth::requestproxy::typhoeus","oauth::requestproxy","oauth","oauth","oauth","oauth","oauth::signature","oauth::signature","oauth::signature::hmac","oauth::signature::hmac","oauth::signature::hmac","oauth::signature::hmac","oauth::signature::hmac","oauth::signature","oauth::signature","oauth::signature","oauth::signature::rsa","oauth::signature","oauth::signature","oauth","oauth","lib/oauth/core_ext.rb","lib/oauth/core_ext.rb","digest::hmac","oauth::signature::base","oauth::signature::plaintext","oauth::signature::rsa::sha1","oauth::consumer","oauth::server","oauth::consumer","oauth::server","oauth::consumer","oauth::requestproxy::eventmachine::httprequest","oauth::requestproxy::net::http::httprequest","oauth::client::helper","actioncontroller::testrequest","oauth::requestproxy::net::http::httprequest","oauth::consumer","oauth::server","oauth::consumer","oauth::requesttoken","oauth::server","oauth::consumer","oauth::signature","digest::hmac","oauth::requestproxy::net::http::httprequest","oauth::signature","oauth::signature::base","oauth::signature","oauth::requesttoken","string","string","oauth::requesttoken","eventmachine::httpclient","actioncontroller::testrequest","oauth::requestproxy::base","oauth::signature::base","oauth::server","oauth::consumer","oauth::consumer","oauth::consumer","oauth::signature::rsa::sha1","oauth::accesstoken","oauth::signature::base","oauth::signature::hmac::base","oauth::signature::rsa::sha1","oauth::signature::base","oauth::signature::base","digest::hmac","oauth::helper","oauth::cli","oauth::cli","oauth::cli","digest::hmac","oauth::requestproxy::net::http::httprequest","oauth::consumertoken","oauth::server","oauth::server","oauth::helper","oauth::helper","oauth::accesstoken","oauth::consumer","oauth::requesttoken","oauth::consumer","oauth::client::helper","oauth::signature::base","oauth::accesstoken","oauth::client::helper","oauth::requestproxy::base","oauth::consumer","oauth::consumer","oauth::signature::base","digest::hmac","digest::hmac","oauth::consumer","oauth::consumer","oauth::requestproxy::eventmachine::httprequest","oauth::requestproxy::actioncontrollerrequest","oauth::requestproxy::curl::easy","oauth::requestproxy::eventmachine::httprequest","oauth::requestproxy::jabberrequest","oauth::requestproxy::mockrequest","oauth::requestproxy::net::http::httprequest","oauth::requestproxy::rackrequest","oauth::requestproxy::typhoeus::request","oauth::oauthtesthelper","oauth::oauthtesthelper","digest::hmac","oauth::cli","oauth::client::helper","oauth::consumer","oauth::consumertoken","oauth::problem","oauth::requestproxy::base","oauth::server","oauth::servertoken","oauth::signature::base","oauth::token","oauth::unauthorized","oauth::requestproxy::base","oauth::client::helper","oauth::requestproxy::base","oauth::signature::base","oauth::helper","eventmachine::httpclient","eventmachine::httpclient","oauth::requestproxy::base","oauth::requestproxy::base","oauth::requestproxy::jabberrequest","oauth::requestproxy::mockrequest","eventmachine::httpclient","net::httpgenericrequest","net::httpgenericrequest","oauth::requestproxy::base","oauth::requestproxy::base","net::httpgenericrequest","oauth::requestproxy::base","net::httpgenericrequest","oauth::requestproxy::base","oauth::client::helper","oauth::requestproxy::base","oauth::requestproxy::base","oauth::requestproxy::base","oauth::requestproxy::base","oauth::requestproxy::base","oauth::requestproxy::base","oauth::requestproxy::base","oauth::cli","oauth::client::helper","oauth::client::helper","oauth::requestproxy::actioncontrollerrequest","oauth::requestproxy::base","oauth::requestproxy::curl::easy","oauth::requestproxy::eventmachine::httprequest","oauth::requestproxy::jabberrequest","oauth::requestproxy::mockrequest","oauth::requestproxy::net::http::httprequest","oauth::requestproxy::rackrequest","oauth::requestproxy::typhoeus::request","oauth::requestproxy::actioncontrollerrequest","oauth::requestproxy::base","oauth::client::helper","oauth::helper","oauth::cli","oauth::accesstoken","oauth::requestproxy::curl::easy","oauth::requestproxy::eventmachine::httprequest","oauth::requestproxy::typhoeus::request","oauth::requestproxy::net::http::httprequest","oauth::cli","actioncontroller::base","actioncontroller::base","oauth::requestproxy::base","oauth::consumer","oauth::requestproxy","oauth::signature::rsa::sha1","oauth::accesstoken","oauth::requestproxy::curl::easy","oauth::requestproxy::eventmachine::httprequest","oauth::requestproxy::typhoeus::request","oauth::requestproxy::actioncontrollerrequest","oauth::requestproxy::net::http::httprequest","oauth::requestproxy::rackrequest","oauth::requestproxy::net::http::httprequest","oauth::requestproxy::base","oauth::accesstoken","oauth::consumer","oauth::consumertoken","oauth::consumer","oauth::requestproxy::actioncontrollerrequest","oauth::requestproxy::rackrequest","oauth::consumer","oauth::server","oauth::consumer","oauth::server","oauth::consumer","digest::hmac","oauth::consumer","oauth::signature::base","oauth::signature::plaintext","eventmachine::httpclient","net::httpgenericrequest","actioncontroller::testrequest","eventmachine::httpclient","net::httpgenericrequest","actioncontroller::testrequest","actioncontroller::testrequest","eventmachine::httpclient","net::httpgenericrequest","oauth::requestproxy::base","oauth::signature","oauth::consumer","oauth::consumertoken","oauth::requestproxy::base","oauth::client::helper","oauth::requestproxy::base","oauth::requestproxy::rackrequest","oauth::signature::base","oauth::signature::plaintext","eventmachine::httpclient","net::httpgenericrequest","oauth::client::helper","oauth::consumer","oauth::requestproxy::base","oauth::signature","oauth::signature::base","oauth::signature::md5","oauth::signature::plaintext","oauth::signature::sha1","oauth::requestproxy::base","oauth::requestproxy::base","oauth::requestproxy::base","oauth::consumer","oauth::helper","oauth::cli","object","oauth::client::helper","oauth::requestproxy::base","oauth::token","oauth::problem","oauth::unauthorized","oauth::requestproxy::base","oauth::signature::base","oauth::consumer","oauth::helper","digest::hmac","oauth::consumer","oauth::requestproxy::actioncontrollerrequest","oauth::requestproxy::curl::easy","oauth::requestproxy::eventmachine::httprequest","oauth::requestproxy::jabberrequest","oauth::requestproxy::mockrequest","oauth::requestproxy::net::http::httprequest","oauth::requestproxy::rackrequest","oauth::requestproxy::typhoeus::request","oauth::cli","actioncontroller::testrequest","actioncontroller::testrequest","oauth::cli","oauth::cli","oauth::signature","oauth::signature::base","files/history.html","files/license.html","files/readme_rdoc.html","files/todo.html","files/lib/digest/hmac_rb.html","files/lib/oauth_rb.html","files/lib/oauth/cli_rb.html","files/lib/oauth/client_rb.html","files/lib/oauth/client/action_controller_request_rb.html","files/lib/oauth/client/em_http_rb.html","files/lib/oauth/client/helper_rb.html","files/lib/oauth/client/net_http_rb.html","files/lib/oauth/consumer_rb.html","files/lib/oauth/core_ext_rb.html","files/lib/oauth/errors_rb.html","files/lib/oauth/errors/error_rb.html","files/lib/oauth/errors/problem_rb.html","files/lib/oauth/errors/unauthorized_rb.html","files/lib/oauth/helper_rb.html","files/lib/oauth/oauth_rb.html","files/lib/oauth/oauth_test_helper_rb.html","files/lib/oauth/request_proxy_rb.html","files/lib/oauth/request_proxy/action_controller_request_rb.html","files/lib/oauth/request_proxy/base_rb.html","files/lib/oauth/request_proxy/curb_request_rb.html","files/lib/oauth/request_proxy/em_http_request_rb.html","files/lib/oauth/request_proxy/jabber_request_rb.html","files/lib/oauth/request_proxy/mock_request_rb.html","files/lib/oauth/request_proxy/net_http_rb.html","files/lib/oauth/request_proxy/rack_request_rb.html","files/lib/oauth/request_proxy/typhoeus_request_rb.html","files/lib/oauth/server_rb.html","files/lib/oauth/signature_rb.html","files/lib/oauth/signature/base_rb.html","files/lib/oauth/signature/hmac/base_rb.html","files/lib/oauth/signature/hmac/md5_rb.html","files/lib/oauth/signature/hmac/rmd160_rb.html","files/lib/oauth/signature/hmac/sha1_rb.html","files/lib/oauth/signature/hmac/sha2_rb.html","files/lib/oauth/signature/md5_rb.html","files/lib/oauth/signature/plaintext_rb.html","files/lib/oauth/signature/rsa/sha1_rb.html","files/lib/oauth/signature/sha1_rb.html","files/lib/oauth/token_rb.html","files/lib/oauth/tokens/access_token_rb.html","files/lib/oauth/tokens/consumer_token_rb.html","files/lib/oauth/tokens/request_token_rb.html","files/lib/oauth/tokens/server_token_rb.html","files/lib/oauth/tokens/token_rb.html"]}}