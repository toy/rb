var search_data = {"index":{"info":[["Dir","lib/rubigen/lookup.rb","classes/Dir.html"," < Object","",1],["Object","lib/rubigen/lookup.rb","classes/Object.html"," < Object","",1],["RubiGen","lib/rubigen/base.rb","classes/RubiGen.html"," < ","RubiGen is a code generation platform Ruby frameworks.   Generators are easily invoked within Ruby framework",1],["AbstractGemSource","RubiGen","classes/RubiGen/AbstractGemSource.html"," < Source","",1],["Base","RubiGen","classes/RubiGen/Base.html"," < Object","The base code generator is bare-bones.  It sets up the source and destination paths and tells the logger",1],["Commands","RubiGen","classes/RubiGen/Commands.html"," < ","",1],["Base","RubiGen::Commands","classes/RubiGen/Commands/Base.html"," < DelegateClass(RubiGen::Base)","Generator commands delegate RubiGen::Base and implement a standard set of actions.  Their behavior is",1],["Create","RubiGen::Commands","classes/RubiGen/Commands/Create.html"," < Base","Create is the premier generator command.  It copies files, creates directories, renders templates, and",1],["Destroy","RubiGen::Commands","classes/RubiGen/Commands/Destroy.html"," < RewindBase","Undo the actions performed by a generator.  Rewind the action manifest and attempt to completely erase",1],["List","RubiGen::Commands","classes/RubiGen/Commands/List.html"," < Base","List a generator's action manifest. ",1],["RewindBase","RubiGen::Commands","classes/RubiGen/Commands/RewindBase.html"," < Base","Base class for commands which handle generator actions in reverse, such as Destroy. ",1],["Update","RubiGen::Commands","classes/RubiGen/Commands/Update.html"," < Create","Update generator's action manifest. ",1],["GemPathSource","RubiGen","classes/RubiGen/GemPathSource.html"," < AbstractGemSource","GemPathSource looks for generators within any RubyGem's /{filter_}generators/**/<generator_name>_generator.rb",1],["GeneratedAttribute","RubiGen","classes/RubiGen/GeneratedAttribute.html"," < Object","",1],["GeneratorError","RubiGen","classes/RubiGen/GeneratorError.html"," < StandardError","",1],["GeneratorTestHelper","RubiGen","classes/RubiGen/GeneratorTestHelper.html"," < ","",1],["Lookup","RubiGen","classes/RubiGen/Lookup.html"," < ","Generator lookup is managed by a list of sources which return specs describing where to find and how",1],["ClassMethods","RubiGen::Lookup","classes/RubiGen/Lookup/ClassMethods.html"," < ","",1],["Manifest","RubiGen","classes/RubiGen/Manifest.html"," < Object","Manifest captures the actions a generator performs.  Instantiate a manifest with an optional target object,",1],["Options","RubiGen","classes/RubiGen/Options.html"," < ","",1],["ClassMethods","RubiGen::Options","classes/RubiGen/Options/ClassMethods.html"," < ","",1],["PathFilteredSource","RubiGen","classes/RubiGen/PathFilteredSource.html"," < PathSource","",1],["PathSource","RubiGen","classes/RubiGen/PathSource.html"," < Source","PathSource looks for generators in a filesystem directory. ",1],["Scripts","RubiGen","classes/RubiGen/Scripts.html"," < ","",1],["Base","RubiGen::Scripts","classes/RubiGen/Scripts/Base.html"," < Object","Generator scripts handle command-line invocation.  Each script responds to an invoke! class method which",1],["Destroy","RubiGen::Scripts","classes/RubiGen/Scripts/Destroy.html"," < Base","",1],["Generate","RubiGen::Scripts","classes/RubiGen/Scripts/Generate.html"," < Base","",1],["Update","RubiGen::Scripts","classes/RubiGen/Scripts/Update.html"," < Base","",1],["Source","RubiGen","classes/RubiGen/Source.html"," < Object","Sources enumerate (yield from #each) generator specs which describe where to find and how to create generators.",1],["Spec","RubiGen","classes/RubiGen/Spec.html"," < Object","A spec knows where a generator was found and how to instantiate it. Metadata include the generator's",1],["UsageError","RubiGen","classes/RubiGen/UsageError.html"," < GeneratorError","",1],["Rubigen","lib/rubigen/cli.rb","classes/Rubigen.html"," < ","",1],["CLI","Rubigen","classes/Rubigen/CLI.html"," < Object","",1],["==","RubiGen::GemPathSource","classes/RubiGen/GemPathSource.html#M000107","(source)","",2],["==","RubiGen::PathFilteredSource","classes/RubiGen/PathFilteredSource.html#M000103","(source)","",2],["==","RubiGen::PathSource","classes/RubiGen/PathSource.html#M000095","(source)","",2],["add_general_options!","RubiGen::Options","classes/RubiGen/Options.html#M000136","(opt)","Adds general options like -h and --quiet.  Usually don't override. ",2],["add_options!","RubiGen::Options","classes/RubiGen/Options.html#M000135","(opt)","Override to add your options to the parser: def add_options!(opt) opt.on('-v', '--verbose') { |value|",2],["after_generate","RubiGen::Base","classes/RubiGen/Base.html#M000008","()","",2],["app_root_files","RubiGen::GeneratorTestHelper","classes/RubiGen/GeneratorTestHelper.html#M000046","()","",2],["append_sources","RubiGen::Lookup::ClassMethods","classes/RubiGen/Lookup/ClassMethods.html#M000068","(*args)","Add a source to the end of the list. ",2],["application_sources","RubiGen::Lookup::ClassMethods","classes/RubiGen/Lookup/ClassMethods.html#M000073","(filters = [])","",2],["assert_directory_exists","RubiGen::GeneratorTestHelper","classes/RubiGen/GeneratorTestHelper.html#M000041","(path)","asserts that the given directory exists ",2],["assert_file_exists","RubiGen::GeneratorTestHelper","classes/RubiGen/GeneratorTestHelper.html#M000039","(path)","asserts that the given file exists ",2],["assert_generated_class","RubiGen::GeneratorTestHelper","classes/RubiGen/GeneratorTestHelper.html#M000042","(path,parent=nil)","asserts that the given class source file was generated. It takes a path without the <tt>.rb</tt> part",2],["assert_generated_file","RubiGen::GeneratorTestHelper","classes/RubiGen/GeneratorTestHelper.html#M000038","(path)","asserts that the given file was generated. the contents of the file is passed to a block. ",2],["assert_generated_module","RubiGen::GeneratorTestHelper","classes/RubiGen/GeneratorTestHelper.html#M000043","(path)","asserts that the given module source file was generated. It takes a path without the <tt>.rb</tt> part.",2],["assert_generated_test_for","RubiGen::GeneratorTestHelper","classes/RubiGen/GeneratorTestHelper.html#M000044","(name, parent=\"Test::Unit::TestCase\")","asserts that the given unit test was generated. It takes a name or symbol without the <tt>test_</tt>",2],["assert_has_method","RubiGen::GeneratorTestHelper","classes/RubiGen/GeneratorTestHelper.html#M000045","(body,*methods)","asserts that the given methods are defined in the body. This does assume standard rails code conventions",2],["banner","RubiGen::Base","classes/RubiGen/Base.html#M000010","()","Override with your own usage banner. ",2],["banner","RubiGen::Options","classes/RubiGen/Options.html#M000134","()","Override with your own usage banner. ",2],["banner","RubiGen::Scripts::Base","classes/RubiGen/Scripts/Base.html#M000140","()","Override with your own script usage banner. ",2],["banner","RubiGen::Scripts::Update","classes/RubiGen/Scripts/Update.html#M000138","()","",2],["bare_setup","RubiGen::GeneratorTestHelper","classes/RubiGen/GeneratorTestHelper.html#M000052","()","",2],["bare_teardown","RubiGen::GeneratorTestHelper","classes/RubiGen/GeneratorTestHelper.html#M000053","()","",2],["base_name","RubiGen::Base","classes/RubiGen/Base.html#M000007","()","Return the basename of the destination_root,  BUT, if it is trunk, tags, or branches, it continues to",2],["build_generator","RubiGen::GeneratorTestHelper","classes/RubiGen/GeneratorTestHelper.html#M000033","(name, params, sources, options)","Instatiates the Generator ",2],["cache","RubiGen::Lookup::ClassMethods","classes/RubiGen/Lookup/ClassMethods.html#M000083","()","Lookup and cache every generator from the source list. ",2],["class_collisions","RubiGen::Commands::Base","classes/RubiGen/Commands/Base.html#M000019","(*class_names)","Does nothing for all commands except Create. ",2],["class_collisions","RubiGen::Commands::Create","classes/RubiGen/Commands/Create.html#M000036","(*class_names)","Check whether the given class names are already taken. In the future, expand to check other namespaces",2],["class_collisions","RubiGen::Commands::List","classes/RubiGen/Commands/List.html#M000094","(*class_names)","",2],["class_file","RubiGen::Spec","classes/RubiGen/Spec.html#M000144","()","",2],["class_name","RubiGen::Spec","classes/RubiGen/Spec.html#M000145","()","",2],["complex_template","RubiGen::Commands::Create","classes/RubiGen/Commands/Create.html#M000057","(relative_source, relative_destination, template_options = {})","",2],["complex_template","RubiGen::Commands::Destroy","classes/RubiGen/Commands/Destroy.html#M000087","(*args)","",2],["complex_template","RubiGen::Commands::List","classes/RubiGen/Commands/List.html#M000100","(relative_source, relative_destination, options = {})","",2],["complex_template","RubiGen::Commands::Update","classes/RubiGen/Commands/Update.html#M000113","(relative_source, relative_destination, template_options = {})","",2],["current_migration_number","RubiGen::Commands::Base","classes/RubiGen/Commands/Base.html#M000022","()","",2],["default","RubiGen::GeneratedAttribute","classes/RubiGen/GeneratedAttribute.html#M000018","()","",2],["default_options","RubiGen::Options","classes/RubiGen/Options.html#M000129","()","Convenient access to class default options. ",2],["default_options","RubiGen::Options::ClassMethods","classes/RubiGen/Options/ClassMethods.html#M000122","(options = nil)","",2],["dependency","RubiGen::Commands::Base","classes/RubiGen/Commands/Base.html#M000017","(generator_name, args, runtime_options = {})","",2],["dependency","RubiGen::Commands::List","classes/RubiGen/Commands/List.html#M000093","(generator_name, args, options = {})","",2],["destination_path","RubiGen::Base","classes/RubiGen/Base.html#M000006","(relative_destination)","Return the full path from the destination root for the given path. Example for destination_root = '/dest':",2],["diff_cmd","RubiGen::Commands::Base","classes/RubiGen/Commands/Base.html#M000030","()","",2],["directory","RubiGen::Commands::Create","classes/RubiGen/Commands/Create.html#M000058","(relative_path)","Create a directory including any missing parent directories. Always skips directories which exist. ",2],["directory","RubiGen::Commands::Destroy","classes/RubiGen/Commands/Destroy.html#M000082","(relative_path)","Remove each directory in the given path from right to left. Remove each subdirectory if it exists and",2],["directory","RubiGen::Commands::List","classes/RubiGen/Commands/List.html#M000101","(relative_path)","",2],["directory","RubiGen::Commands::Update","classes/RubiGen/Commands/Update.html#M000115","(relative_path)","",2],["each","RubiGen::GemPathSource","classes/RubiGen/GemPathSource.html#M000106","()","Yield each generator within rails_generator subdirectories. ",2],["each","RubiGen::PathSource","classes/RubiGen/PathSource.html#M000091","()","Yield each eligible subdirectory. ",2],["each","RubiGen::Source","classes/RubiGen/Source.html#M000086","()","The each method must be implemented in subclasses. The base implementation raises an error. ",2],["erase","RubiGen::Manifest","classes/RubiGen/Manifest.html#M000124","()","Erase recorded actions. ",2],["execute","Rubigen::CLI","classes/Rubigen/CLI.html#M000001","(stdout, arguments, runtime_arguments = {})","",2],["execute","Rubigen::CLI","classes/Rubigen/CLI.html#M000000","(stdout, arguments, runtime_arguments = {})","",2],["existing_migrations","RubiGen::Commands::Base","classes/RubiGen/Commands/Base.html#M000025","(file_name)","",2],["field_type","RubiGen::GeneratedAttribute","classes/RubiGen/GeneratedAttribute.html#M000015","()","",2],["file","RubiGen::Commands::Create","classes/RubiGen/Commands/Create.html#M000040","(relative_source, relative_destination, file_options = {}, &block)","Copy a file from source to destination with collision checking. The file_options hash accepts :chmod",2],["file","RubiGen::Commands::Destroy","classes/RubiGen/Commands/Destroy.html#M000078","(relative_source, relative_destination, file_options = {})","Remove a file if it exists and is a file. ",2],["file","RubiGen::Commands::List","classes/RubiGen/Commands/List.html#M000098","(relative_source, relative_destination, options = {})","",2],["file","RubiGen::Commands::Update","classes/RubiGen/Commands/Update.html#M000110","(relative_source, relative_destination, options = {})","",2],["file_copy_each","RubiGen::Commands::Create","classes/RubiGen/Commands/Create.html#M000049","(files, path=nil, options = {})","",2],["filter_str","RubiGen::GemPathSource","classes/RubiGen/GemPathSource.html#M000114","()","",2],["filter_str","RubiGen::PathFilteredSource","classes/RubiGen/PathFilteredSource.html#M000097","(filters)","",2],["filtered_sources","RubiGen::Lookup::ClassMethods","classes/RubiGen/Lookup/ClassMethods.html#M000077","(filters)","",2],["find_synonyms","RubiGen::Commands::Create","classes/RubiGen/Commands/Create.html#M000075","(word)","Look up synonyms on WordNet.  Thanks to Florian Gross (flgr). ",2],["folder","RubiGen::Commands::Create","classes/RubiGen/Commands/Create.html#M000050","(template_path, path=nil, options = {})","",2],["force_file_collision?","RubiGen::Commands::Base","classes/RubiGen/Commands/Base.html#M000029","(destination, src, dst, file_options = {}, &block)","Ask the user interactively whether to force collision. ",2],["full_options","RubiGen::Options","classes/RubiGen/Options.html#M000130","(runtime_options = {})","Merge together our instance options.  In increasing precedence: default_options   (class default options)",2],["full_options","RubiGen::Options::ClassMethods","classes/RubiGen/Options/ClassMethods.html#M000126","(runtime_options = {})","Merge together our class options.  In increasing precedence: default_options   (class default options)",2],["generator_full_paths","RubiGen::GemPathSource","classes/RubiGen/GemPathSource.html#M000111","()","",2],["gsub_file","RubiGen::Commands::Base","classes/RubiGen/Commands/Base.html#M000028","(relative_destination, regexp, *args, &block)","",2],["identical?","RubiGen::Commands::Create","classes/RubiGen/Commands/Create.html#M000054","(source, destination, &block)","Checks if the source and the destination file are identical. If passed a block then the source file is",2],["included","RubiGen::Commands","classes/RubiGen/Commands.html#M000013","(base)","Even more convenient access to commands.  Include Commands in the generator Base class to get a nice",2],["included","RubiGen::Lookup","classes/RubiGen/Lookup.html#M000063","(base)","",2],["included","RubiGen::Options","classes/RubiGen/Options.html#M000116","(base)","",2],["inherited_with_options","RubiGen::Options::ClassMethods","classes/RubiGen/Options/ClassMethods.html#M000117","(sub)","",2],["instance","RubiGen::Commands","classes/RubiGen/Commands.html#M000012","(command, generator)","Here's a convenient way to get a handle on generator commands. Command.instance('destroy', my_generator)",2],["instance","RubiGen::Lookup","classes/RubiGen/Lookup.html#M000064","(generator_name, args, runtime_options = {})","Convenience method to instantiate another generator. ",2],["instance","RubiGen::Lookup::ClassMethods","classes/RubiGen/Lookup/ClassMethods.html#M000080","(generator_name, args = [], runtime_options = {})","Convenience method to lookup and instantiate a generator. ",2],["invalidate_cache!","RubiGen::Lookup::ClassMethods","classes/RubiGen/Lookup/ClassMethods.html#M000084","()","Clear the cache whenever the source list changes. ",2],["invoke!","RubiGen::Commands::Base","classes/RubiGen/Commands/Base.html#M000016","()","Replay action manifest.  RewindBase subclass rewinds manifest. ",2],["invoke!","RubiGen::Commands::RewindBase","classes/RubiGen/Commands/RewindBase.html#M000035","()","Rewind action manifest. ",2],["klass","RubiGen::Spec","classes/RubiGen/Spec.html#M000143","()","Look up the generator class.  Require its class file, find the class in ObjectSpace, tag it with this",2],["lookup","RubiGen::Lookup::ClassMethods","classes/RubiGen/Lookup/ClassMethods.html#M000079","(generator_name)","Lookup knows how to find generators' Specs from a list of Sources. Searches the sources, in order, for",2],["lookup_class","RubiGen::Spec","classes/RubiGen/Spec.html#M000148","()","Search for the first Class descending from RubiGen::Base whose name matches the requested class name.",2],["lookup_missing_generator","Object","classes/Object.html#M000060","(class_id)","Lookup missing generators using const_missing.  This allows any generator to reference another without",2],["main_usage","Rubigen::CLI","classes/Rubigen/CLI.html#M000003","()","",2],["mandatory_options","RubiGen::Options","classes/RubiGen/Options.html#M000128","()","Convenient access to class mandatory options. ",2],["mandatory_options","RubiGen::Options::ClassMethods","classes/RubiGen/Options/ClassMethods.html#M000121","(options = nil)","",2],["manifest","RubiGen::Base","classes/RubiGen/Base.html#M000004","()","Generators must provide a manifest.  Use the +record+ method to create a new manifest and record your",2],["method_missing","RubiGen::Manifest","classes/RubiGen/Manifest.html#M000119","(action, *args, &block)","Record an action. ",2],["migration_directory","RubiGen::Commands::Base","classes/RubiGen/Commands/Base.html#M000024","(relative_path)","",2],["migration_exists?","RubiGen::Commands::Base","classes/RubiGen/Commands/Base.html#M000026","(file_name)","",2],["migration_template","RubiGen::Commands::Create","classes/RubiGen/Commands/Create.html#M000066","(relative_source, relative_destination, template_options = {})","When creating a migration, it knows to find the first available file in db/migrate and use the migration.rb",2],["migration_template","RubiGen::Commands::Destroy","classes/RubiGen/Commands/Destroy.html#M000088","(relative_source, relative_destination, template_options = {})","When deleting a migration, it knows to delete every file named \"[0-9]*_#{file_name}\". ",2],["migration_template","RubiGen::Commands::List","classes/RubiGen/Commands/List.html#M000108","(relative_source, relative_destination, options = {})","",2],["names","RubiGen::Source","classes/RubiGen/Source.html#M000089","(filter = nil)","Return a convenient sorted list of all generator names. ",2],["new","RubiGen::AbstractGemSource","classes/RubiGen/AbstractGemSource.html#M000104","()","",2],["new","RubiGen::Base","classes/RubiGen/Base.html#M000002","(runtime_args, runtime_options = {})","",2],["new","RubiGen::GemPathSource","classes/RubiGen/GemPathSource.html#M000105","(*filters)","",2],["new","RubiGen::GeneratedAttribute","classes/RubiGen/GeneratedAttribute.html#M000014","(name, type)","",2],["new","RubiGen::Manifest","classes/RubiGen/Manifest.html#M000118","(target = nil)","Take a default action target.  Yield self if block given. ",2],["new","RubiGen::PathFilteredSource","classes/RubiGen/PathFilteredSource.html#M000096","(label, path, *filters)","",2],["new","RubiGen::PathSource","classes/RubiGen/PathSource.html#M000090","(label, path)","",2],["new","RubiGen::Source","classes/RubiGen/Source.html#M000085","(label)","",2],["new","RubiGen::Spec","classes/RubiGen/Spec.html#M000142","(name, path, source)","",2],["next_migration_number","RubiGen::Commands::Base","classes/RubiGen/Commands/Base.html#M000023","()","",2],["next_migration_string","RubiGen::Commands::Base","classes/RubiGen/Commands/Base.html#M000027","(padding = 3)","",2],["options","RubiGen::Options","classes/RubiGen/Options.html#M000127","()","Each instance has an options hash that's populated by #parse. ",2],["parse!","RubiGen::Options","classes/RubiGen/Options.html#M000131","(args, runtime_options = {})","Parse arguments into the options hash.  Classes may customize parsing behavior by overriding these methods:",2],["prepend_sources","RubiGen::Lookup::ClassMethods","classes/RubiGen/Lookup/ClassMethods.html#M000069","(*args)","Add a source to the beginning of the list. ",2],["raise_class_collision","RubiGen::Commands::Create","classes/RubiGen/Commands/Create.html#M000074","(class_name)","Raise a usage error with an informative WordNet suggestion. Thanks to Florian Gross (flgr). ",2],["readme","RubiGen::Commands::Base","classes/RubiGen/Commands/Base.html#M000020","(*args)","Does nothing for all commands except Create. ",2],["readme","RubiGen::Commands::Create","classes/RubiGen/Commands/Create.html#M000059","(*relative_sources)","Display a README. ",2],["readme","RubiGen::Commands::List","classes/RubiGen/Commands/List.html#M000102","(*args)","",2],["record","RubiGen::Base","classes/RubiGen/Base.html#M000009","()","Convenience method for generator subclasses to record a manifest. ",2],["render_file","RubiGen::Commands::Create","classes/RubiGen/Commands/Create.html#M000070","(path, options = {})","",2],["render_template_part","RubiGen::Commands::Base","classes/RubiGen/Commands/Base.html#M000031","(template_options)","",2],["replay","RubiGen::Manifest","classes/RubiGen/Manifest.html#M000120","(target = nil)","Replay recorded actions. ",2],["reset_sources","RubiGen::Lookup::ClassMethods","classes/RubiGen/Lookup/ClassMethods.html#M000071","()","Reset the source list. ",2],["rewind","RubiGen::Manifest","classes/RubiGen/Manifest.html#M000123","(target = nil)","Rewind recorded actions. ",2],["route_resources","RubiGen::Commands::Create","classes/RubiGen/Commands/Create.html#M000067","(*resources)","",2],["route_resources","RubiGen::Commands::Destroy","classes/RubiGen/Commands/Destroy.html#M000092","(*resources)","",2],["route_resources","RubiGen::Commands::List","classes/RubiGen/Commands/List.html#M000109","(*resources)","",2],["rubygem_folders","RubiGen::GeneratorTestHelper","classes/RubiGen/GeneratorTestHelper.html#M000047","()","",2],["rubygems_setup","RubiGen::GeneratorTestHelper","classes/RubiGen/GeneratorTestHelper.html#M000048","()","",2],["rubygems_teardown","RubiGen::GeneratorTestHelper","classes/RubiGen/GeneratorTestHelper.html#M000051","()","",2],["run","RubiGen::Scripts::Base","classes/RubiGen/Scripts/Base.html#M000139","(args = [], runtime_options = {})","Run the generator script.  Takes an array of unparsed arguments and a hash of parsed arguments, takes",2],["run_generator","RubiGen::GeneratorTestHelper","classes/RubiGen/GeneratorTestHelper.html#M000032","(name, params, sources, options = {})","Runs the create command (like the command line does) ",2],["send_actions","RubiGen::Manifest","classes/RubiGen/Manifest.html#M000125","(target, actions)","",2],["silence_generator","RubiGen::GeneratorTestHelper","classes/RubiGen/GeneratorTestHelper.html#M000037","()","Silences the logger temporarily and returns the output as a String ",2],["source_path","RubiGen::Base","classes/RubiGen/Base.html#M000005","(relative_source)","Return the full path from the source root for the given path. Example for source_root = '/source': source_path('some/path.rb')",2],["sources","RubiGen::Lookup::ClassMethods","classes/RubiGen/Lookup/ClassMethods.html#M000065","()","The list of sources where we look, in order, for generators. ",2],["template","RubiGen::Commands::Create","classes/RubiGen/Commands/Create.html#M000055","(relative_source, relative_destination, template_options = {})","Generate a file using an ERuby template. Looks up and evaluates a template by name and writes the result.",2],["template","RubiGen::Commands::Destroy","classes/RubiGen/Commands/Destroy.html#M000081","(relative_source, relative_destination, file_options = {})","Alias for #file",2],["template","RubiGen::Commands::List","classes/RubiGen/Commands/List.html#M000099","(relative_source, relative_destination, options = {})","",2],["template","RubiGen::Commands::Update","classes/RubiGen/Commands/Update.html#M000112","(relative_source, relative_destination, options = {})","",2],["template_copy_each","RubiGen::Commands::Create","classes/RubiGen/Commands/Create.html#M000056","(files, path = nil, options = {})","",2],["template_part_mark","RubiGen::Commands::Base","classes/RubiGen/Commands/Base.html#M000034","(name, id)","",2],["usage","RubiGen::Options","classes/RubiGen/Options.html#M000132","(message = usage_message)","Raise a usage error.  Override usage_message to provide a blurb after the option parser summary. ",2],["usage_file","RubiGen::Spec","classes/RubiGen/Spec.html#M000146","()","",2],["usage_message","RubiGen::Base","classes/RubiGen/Base.html#M000011","()","Read USAGE from file in generator base path. ",2],["usage_message","RubiGen::Options","classes/RubiGen/Options.html#M000133","()","",2],["usage_message","RubiGen::Scripts::Base","classes/RubiGen/Scripts/Base.html#M000141","()","",2],["usage_message","RubiGen::Scripts::Destroy","classes/RubiGen/Scripts/Destroy.html#M000137","()","",2],["use_application_sources!","RubiGen::Lookup::ClassMethods","classes/RubiGen/Lookup/ClassMethods.html#M000072","(*filters)","Use application generators (app, ?). ",2],["use_component_sources!","RubiGen::Lookup::ClassMethods","classes/RubiGen/Lookup/ClassMethods.html#M000076","(*filters)","Use component generators (test_unit, etc). 1.  Current application.  If APP_ROOT is defined we know we're",2],["user_home","Dir","classes/Dir.html#M000062","()","User home directory lookup adapted from RubyGems. ",2],["valid_generator_superclasses","RubiGen::Spec","classes/RubiGen/Spec.html#M000150","()","",2],["valid_superclass?","RubiGen::Spec","classes/RubiGen/Spec.html#M000149","(obj)","",2],["visible?","RubiGen::Spec","classes/RubiGen/Spec.html#M000147","()","",2],["write_manifest","RubiGen::Commands::Base","classes/RubiGen/Commands/Base.html#M000021","()","Does nothing for all commands except Create. ",2],["write_manifest","RubiGen::Commands::Create","classes/RubiGen/Commands/Create.html#M000061","(relative_destination)","",2],["History.txt","files/History_txt.html","files/History_txt.html","","== 1.5.6 2011-02-01 * Allow activesupport 3.0.0+  == 1.5.5 2010-05-25  * Allow activesupport 2.3.5+ ",3],["License.txt","files/License_txt.html","files/License_txt.html","","Copyright (c) 2005-7 Jeremy Kemper (original code from Ruby on Rails) Copyright (c) 2007 Dr Nic Williams",3],["Manifest.txt","files/Manifest_txt.html","files/Manifest_txt.html","",".autotest History.txt License.txt Manifest.txt README.rdoc Rakefile Todo.txt app_generators/ruby_app/USAGE",3],["README.rdoc","files/README_rdoc.html","files/README_rdoc.html","","= RubiGen - Ruby Generator Framework  * http://drnic.github.com/rubigen  == DESCRIPTION:  A framework",3],["Todo.txt","files/Todo_txt.html","files/Todo_txt.html","","= TODO  * default #manifest to clone over any folders + files + apply erb to any *.erb files * rspec",3],["README.txt","files/app_generators/ruby_app/templates/README_txt.html","files/app_generators/ruby_app/templates/README_txt.html","","README",3],["rubigen.rb","files/lib/rubigen_rb.html","files/lib/rubigen_rb.html","","",3],["base.rb","files/lib/rubigen/base_rb.html","files/lib/rubigen/base_rb.html","","",3],["cli.rb","files/lib/rubigen/cli_rb.html","files/lib/rubigen/cli_rb.html","","",3],["commands.rb","files/lib/rubigen/commands_rb.html","files/lib/rubigen/commands_rb.html","","",3],["generated_attribute.rb","files/lib/rubigen/generated_attribute_rb.html","files/lib/rubigen/generated_attribute_rb.html","","",3],["generator_test_helper.rb","files/lib/rubigen/helpers/generator_test_helper_rb.html","files/lib/rubigen/helpers/generator_test_helper_rb.html","","",3],["lookup.rb","files/lib/rubigen/lookup_rb.html","files/lib/rubigen/lookup_rb.html","","",3],["manifest.rb","files/lib/rubigen/manifest_rb.html","files/lib/rubigen/manifest_rb.html","","",3],["options.rb","files/lib/rubigen/options_rb.html","files/lib/rubigen/options_rb.html","","",3],["scripts.rb","files/lib/rubigen/scripts_rb.html","files/lib/rubigen/scripts_rb.html","","",3],["destroy.rb","files/lib/rubigen/scripts/destroy_rb.html","files/lib/rubigen/scripts/destroy_rb.html","","",3],["generate.rb","files/lib/rubigen/scripts/generate_rb.html","files/lib/rubigen/scripts/generate_rb.html","","",3],["update.rb","files/lib/rubigen/scripts/update_rb.html","files/lib/rubigen/scripts/update_rb.html","","",3],["simple_logger.rb","files/lib/rubigen/simple_logger_rb.html","files/lib/rubigen/simple_logger_rb.html","","",3],["spec.rb","files/lib/rubigen/spec_rb.html","files/lib/rubigen/spec_rb.html","","",3],["index.txt","files/website/index_txt.html","files/website/index_txt.html","","h1. rubigen  h1. Ruby Generator Framework  h2. What  A framework to allow Ruby applications to generate",3],["version-raw.txt","files/website/version-raw_txt.html","files/website/version-raw_txt.html","","h1. Announcement JS file MagicAnnouncement.show('compositekeys', version);",3],["version.txt","files/website/version_txt.html","files/website/version_txt.html","","h1. Version JS file  document.write(\" - \" + version);",3]],"searchIndex":["dir","object","rubigen","abstractgemsource","base","commands","base","create","destroy","list","rewindbase","update","gempathsource","generatedattribute","generatorerror","generatortesthelper","lookup","classmethods","manifest","options","classmethods","pathfilteredsource","pathsource","scripts","base","destroy","generate","update","source","spec","usageerror","rubigen","cli","==()","==()","==()","add_general_options!()","add_options!()","after_generate()","app_root_files()","append_sources()","application_sources()","assert_directory_exists()","assert_file_exists()","assert_generated_class()","assert_generated_file()","assert_generated_module()","assert_generated_test_for()","assert_has_method()","banner()","banner()","banner()","banner()","bare_setup()","bare_teardown()","base_name()","build_generator()","cache()","class_collisions()","class_collisions()","class_collisions()","class_file()","class_name()","complex_template()","complex_template()","complex_template()","complex_template()","current_migration_number()","default()","default_options()","default_options()","dependency()","dependency()","destination_path()","diff_cmd()","directory()","directory()","directory()","directory()","each()","each()","each()","erase()","execute()","execute()","existing_migrations()","field_type()","file()","file()","file()","file()","file_copy_each()","filter_str()","filter_str()","filtered_sources()","find_synonyms()","folder()","force_file_collision?()","full_options()","full_options()","generator_full_paths()","gsub_file()","identical?()","included()","included()","included()","inherited_with_options()","instance()","instance()","instance()","invalidate_cache!()","invoke!()","invoke!()","klass()","lookup()","lookup_class()","lookup_missing_generator()","main_usage()","mandatory_options()","mandatory_options()","manifest()","method_missing()","migration_directory()","migration_exists?()","migration_template()","migration_template()","migration_template()","names()","new()","new()","new()","new()","new()","new()","new()","new()","new()","next_migration_number()","next_migration_string()","options()","parse!()","prepend_sources()","raise_class_collision()","readme()","readme()","readme()","record()","render_file()","render_template_part()","replay()","reset_sources()","rewind()","route_resources()","route_resources()","route_resources()","rubygem_folders()","rubygems_setup()","rubygems_teardown()","run()","run_generator()","send_actions()","silence_generator()","source_path()","sources()","template()","template()","template()","template()","template_copy_each()","template_part_mark()","usage()","usage_file()","usage_message()","usage_message()","usage_message()","usage_message()","use_application_sources!()","use_component_sources!()","user_home()","valid_generator_superclasses()","valid_superclass?()","visible?()","write_manifest()","write_manifest()","history.txt","license.txt","manifest.txt","readme.rdoc","todo.txt","readme.txt","rubigen.rb","base.rb","cli.rb","commands.rb","generated_attribute.rb","generator_test_helper.rb","lookup.rb","manifest.rb","options.rb","scripts.rb","destroy.rb","generate.rb","update.rb","simple_logger.rb","spec.rb","index.txt","version-raw.txt","version.txt"],"longSearchIndex":["lib/rubigen/lookup.rb","lib/rubigen/lookup.rb","lib/rubigen.rb","rubigen","rubigen","rubigen","rubigen::commands","rubigen::commands","rubigen::commands","rubigen::commands","rubigen::commands","rubigen::commands","rubigen","rubigen","rubigen","rubigen","rubigen","rubigen::lookup","rubigen","rubigen","rubigen::options","rubigen","rubigen","rubigen","rubigen::scripts","rubigen::scripts","rubigen::scripts","rubigen::scripts","rubigen","rubigen","rubigen","lib/rubigen/cli.rb","rubigen","rubigen::gempathsource","rubigen::pathfilteredsource","rubigen::pathsource","rubigen::options","rubigen::options","rubigen::base","rubigen::generatortesthelper","rubigen::lookup::classmethods","rubigen::lookup::classmethods","rubigen::generatortesthelper","rubigen::generatortesthelper","rubigen::generatortesthelper","rubigen::generatortesthelper","rubigen::generatortesthelper","rubigen::generatortesthelper","rubigen::generatortesthelper","rubigen::base","rubigen::options","rubigen::scripts::base","rubigen::scripts::update","rubigen::generatortesthelper","rubigen::generatortesthelper","rubigen::base","rubigen::generatortesthelper","rubigen::lookup::classmethods","rubigen::commands::base","rubigen::commands::create","rubigen::commands::list","rubigen::spec","rubigen::spec","rubigen::commands::create","rubigen::commands::destroy","rubigen::commands::list","rubigen::commands::update","rubigen::commands::base","rubigen::generatedattribute","rubigen::options","rubigen::options::classmethods","rubigen::commands::base","rubigen::commands::list","rubigen::base","rubigen::commands::base","rubigen::commands::create","rubigen::commands::destroy","rubigen::commands::list","rubigen::commands::update","rubigen::gempathsource","rubigen::pathsource","rubigen::source","rubigen::manifest","rubigen::cli","rubigen::cli","rubigen::commands::base","rubigen::generatedattribute","rubigen::commands::create","rubigen::commands::destroy","rubigen::commands::list","rubigen::commands::update","rubigen::commands::create","rubigen::gempathsource","rubigen::pathfilteredsource","rubigen::lookup::classmethods","rubigen::commands::create","rubigen::commands::create","rubigen::commands::base","rubigen::options","rubigen::options::classmethods","rubigen::gempathsource","rubigen::commands::base","rubigen::commands::create","rubigen::commands","rubigen::lookup","rubigen::options","rubigen::options::classmethods","rubigen::commands","rubigen::lookup","rubigen::lookup::classmethods","rubigen::lookup::classmethods","rubigen::commands::base","rubigen::commands::rewindbase","rubigen::spec","rubigen::lookup::classmethods","rubigen::spec","object","rubigen::cli","rubigen::options","rubigen::options::classmethods","rubigen::base","rubigen::manifest","rubigen::commands::base","rubigen::commands::base","rubigen::commands::create","rubigen::commands::destroy","rubigen::commands::list","rubigen::source","rubigen::abstractgemsource","rubigen::base","rubigen::gempathsource","rubigen::generatedattribute","rubigen::manifest","rubigen::pathfilteredsource","rubigen::pathsource","rubigen::source","rubigen::spec","rubigen::commands::base","rubigen::commands::base","rubigen::options","rubigen::options","rubigen::lookup::classmethods","rubigen::commands::create","rubigen::commands::base","rubigen::commands::create","rubigen::commands::list","rubigen::base","rubigen::commands::create","rubigen::commands::base","rubigen::manifest","rubigen::lookup::classmethods","rubigen::manifest","rubigen::commands::create","rubigen::commands::destroy","rubigen::commands::list","rubigen::generatortesthelper","rubigen::generatortesthelper","rubigen::generatortesthelper","rubigen::scripts::base","rubigen::generatortesthelper","rubigen::manifest","rubigen::generatortesthelper","rubigen::base","rubigen::lookup::classmethods","rubigen::commands::create","rubigen::commands::destroy","rubigen::commands::list","rubigen::commands::update","rubigen::commands::create","rubigen::commands::base","rubigen::options","rubigen::spec","rubigen::base","rubigen::options","rubigen::scripts::base","rubigen::scripts::destroy","rubigen::lookup::classmethods","rubigen::lookup::classmethods","dir","rubigen::spec","rubigen::spec","rubigen::spec","rubigen::commands::base","rubigen::commands::create","files/history_txt.html","files/license_txt.html","files/manifest_txt.html","files/readme_rdoc.html","files/todo_txt.html","files/app_generators/ruby_app/templates/readme_txt.html","files/lib/rubigen_rb.html","files/lib/rubigen/base_rb.html","files/lib/rubigen/cli_rb.html","files/lib/rubigen/commands_rb.html","files/lib/rubigen/generated_attribute_rb.html","files/lib/rubigen/helpers/generator_test_helper_rb.html","files/lib/rubigen/lookup_rb.html","files/lib/rubigen/manifest_rb.html","files/lib/rubigen/options_rb.html","files/lib/rubigen/scripts_rb.html","files/lib/rubigen/scripts/destroy_rb.html","files/lib/rubigen/scripts/generate_rb.html","files/lib/rubigen/scripts/update_rb.html","files/lib/rubigen/simple_logger_rb.html","files/lib/rubigen/spec_rb.html","files/website/index_txt.html","files/website/version-raw_txt.html","files/website/version_txt.html"]}}