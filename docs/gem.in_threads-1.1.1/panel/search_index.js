var search_data = {"index":{"longSearchIndex":["lib/in_threads.rb","lib/in_threads.rb","inthreads","inthreads::filler","inthreads","inthreads::threadlimiter","inthreads::filler::extractor","inthreads::threadlimiter","inthreads","enumerable","inthreads","inthreads::threadlimiter","inthreads","inthreads::filler","inthreads::filler::extractor","inthreads::threadlimiter","inthreads::filler::extractor","inthreads::filler","inthreads","inthreads","inthreads","inthreads::filler","inthreads","files/license_txt.html","files/readme_markdown.html","files/lib/in_threads_rb.html","files/lib/in_threads/filler_rb.html","files/lib/in_threads/thread_limiter_rb.html"],"info":[["Enumerable","lib/in_threads.rb","classes/Enumerable.html"," < ","",1],["InThreads","lib/in_threads/filler.rb","classes/InThreads.html"," < Object","",1],["Filler","InThreads","classes/InThreads/Filler.html"," < Object","",1],["Extractor","InThreads::Filler","classes/InThreads/Filler/Extractor.html"," < Object","",1],["ThreadLimiter","InThreads","classes/InThreads/ThreadLimiter.html"," < Object","Use ThreadsWait to limit number of threads ",1],["<<","InThreads::ThreadLimiter","classes/InThreads/ThreadLimiter.html#M000008","(thread)","Add thread to <tt>ThreadsWait</tt>, wait for finishing of one thread if limit reached ",2],["each","InThreads::Filler::Extractor","classes/InThreads/Filler/Extractor.html#M000002","()","",2],["finalize","InThreads::ThreadLimiter","classes/InThreads/ThreadLimiter.html#M000009","()","Wait for waiting threads ",2],["grep","InThreads","classes/InThreads.html#M000014","(*args, &block)","Special case method, works by applying <tt>run_in_threads_consecutive</tt> with map on enumerable returned",2],["in_threads","Enumerable","classes/Enumerable.html#M000010","(thread_count = 10, &block)","Run enumerable method blocks in threads urls.in_threads.map do |url| url.fetch end Specify number of",2],["in_threads","InThreads","classes/InThreads.html#M000012","(thread_count = 10, &block)","Creates new instance using underlying enumerable and new thread_count ",2],["limit","InThreads::ThreadLimiter","classes/InThreads/ThreadLimiter.html#M000007","(count, &block)","Without block behaves as <tt>new</tt> With block yields it with <tt>self</tt> and ensures running of",2],["new","InThreads","classes/InThreads.html#M000011","(enumerable, thread_count = 10, &block)","",2],["new","InThreads::Filler","classes/InThreads/Filler.html#M000003","(enum, extractor_count)","",2],["new","InThreads::Filler::Extractor","classes/InThreads/Filler/Extractor.html#M000000","(filler)","",2],["new","InThreads::ThreadLimiter","classes/InThreads/ThreadLimiter.html#M000006","(count)","Initialize with limit ",2],["push","InThreads::Filler::Extractor","classes/InThreads/Filler/Extractor.html#M000001","(o)","",2],["run","InThreads::Filler","classes/InThreads/Filler.html#M000004","()","",2],["run_in_threads_consecutive","InThreads","classes/InThreads.html#M000016","(enumerable, method, *args, &block)","Use for methods which do use block result and fire objects in same way as <tt>each</tt> ",2],["run_in_threads_return_original_enum","InThreads","classes/InThreads.html#M000015","(enumerable, method, *args, &block)","Use for methods which don't use block result ",2],["run_without_threads","InThreads","classes/InThreads.html#M000017","(enumerable, method, *args, &block)","Use for methods which don't use blocks or can not use threads ",2],["synchronize","InThreads::Filler","classes/InThreads/Filler.html#M000005","(&block)","",2],["use","InThreads","classes/InThreads.html#M000013","(runner, options)","Specify runner to use use :run_in_threads_consecutive, :for => %w[all? any? none? one?] <tt>:for</tt>",2],["LICENSE.txt","files/LICENSE_txt.html","files/LICENSE_txt.html","","Copyright (c) 2010-2011 Ivan Kuchin  Permission is hereby granted, free of charge, to any person obtaining",3],["README.markdown","files/README_markdown.html","files/README_markdown.html","","# in_threads  Easily execute ruby code in parallel.  ## Installation      gem install in_threads  ##",3],["in_threads.rb","files/lib/in_threads_rb.html","files/lib/in_threads_rb.html","","",3],["filler.rb","files/lib/in_threads/filler_rb.html","files/lib/in_threads/filler_rb.html","","",3],["thread_limiter.rb","files/lib/in_threads/thread_limiter_rb.html","files/lib/in_threads/thread_limiter_rb.html","","",3]],"searchIndex":["enumerable","inthreads","filler","extractor","threadlimiter","<<()","each()","finalize()","grep()","in_threads()","in_threads()","limit()","new()","new()","new()","new()","push()","run()","run_in_threads_consecutive()","run_in_threads_return_original_enum()","run_without_threads()","synchronize()","use()","license.txt","readme.markdown","in_threads.rb","filler.rb","thread_limiter.rb"]}}