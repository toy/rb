var search_data = {"index":{"longSearchIndex":["lib/omniauth.rb","omniauth","omniauth::authhash","omniauth","omniauth","omniauth","omniauth","omniauth","omniauth::strategies","omniauth","omniauth::strategy","omniauth::strategy","omniauth","omniauth::test","omniauth::test","omniauth::test","omniauth","omniauth::configuration","omniauth::configuration","omniauth::test::strategytestcase","omniauth::test::strategytestcase","omniauth::strategy::classmethods","omniauth::strategy","omniauth::form","omniauth::form","omniauth::builder","omniauth::strategy","omniauth::test::phonysession","omniauth::strategy","omniauth::strategy","omniauth::strategy","omniauth::strategy","omniauth::strategy","omniauth::strategy","omniauth::strategy","omniauth::utils","omniauth::strategy::classmethods","omniauth","omniauth","omniauth::builder","omniauth::strategy::classmethods","omniauth::strategy","omniauth::form","omniauth::strategy","omniauth::utils","omniauth::strategy::classmethods","omniauth::configuration","omniauth::strategy","omniauth::strategy","omniauth::form","omniauth::form","omniauth::utils","omniauth::strategy","omniauth::form","omniauth::form","omniauth::strategy","omniauth::strategy","omniauth::form","omniauth::strategy","omniauth::form","omniauth::strategy","omniauth","omniauth::strategy","omniauth::strategy","omniauth::strategy","omniauth::authhash::infohash","omniauth::strategy","omniauth::authhash::infohash","omniauth::builder","omniauth::configuration","omniauth::form","omniauth::strategy","omniauth::test::phonysession","omniauth::strategy","omniauth::strategy","omniauth::builder","omniauth::configuration","omniauth::strategy","omniauth::strategy","omniauth::strategy::classmethods","omniauth::strategy","omniauth::strategy","omniauth::form","omniauth::strategy","omniauth::builder","omniauth::strategy","omniauth::builder","omniauth::strategy","omniauth::authhash","omniauth::strategy","omniauth::strategy","omniauth::strategy","omniauth::strategies::developer","omniauth::strategy","omniauth::strategy","omniauth::strategy","omniauth::test::strategytestcase","omniauth::test::strategymacros","omniauth::test::strategymacros","omniauth::test::strategymacros","omniauth::test::strategymacros","omniauth::strategy","omniauth::strategy","omniauth::strategy","omniauth","omniauth::test::strategytestcase","omniauth::authhash","omniauth::authhash::infohash","omniauth::form","omniauth::authhash::infohash","omniauth::form","omniauth::form","omniauth::strategy","omniauth::strategy","omniauth::authhash","omniauth::authhash::infohash","files/license.html","files/readme_md.html","files/lib/omniauth_rb.html","files/lib/omniauth/auth_hash_rb.html","files/lib/omniauth/builder_rb.html","files/lib/omniauth/form_rb.html","files/lib/omniauth/strategies/developer_rb.html","files/lib/omniauth/strategy_rb.html","files/lib/omniauth/test_rb.html","files/lib/omniauth/test/phony_session_rb.html","files/lib/omniauth/test/strategy_macros_rb.html","files/lib/omniauth/test/strategy_test_case_rb.html","files/lib/omniauth/version_rb.html"],"info":[["OmniAuth","lib/omniauth/auth_hash.rb","classes/OmniAuth.html"," < ","",1],["AuthHash","OmniAuth","classes/OmniAuth/AuthHash.html"," < Hashie::Mash","The AuthHash is a normalized schema returned by all OmniAuth strategies. It maps as much user information",1],["InfoHash","OmniAuth::AuthHash","classes/OmniAuth/AuthHash/InfoHash.html"," < Hashie::Mash","",1],["Builder","OmniAuth","classes/OmniAuth/Builder.html"," < ::Rack::Builder","",1],["Configuration","OmniAuth","classes/OmniAuth/Configuration.html"," < Object","",1],["Form","OmniAuth","classes/OmniAuth/Form.html"," < Object","",1],["NoSessionError","OmniAuth","classes/OmniAuth/NoSessionError.html"," < StandardError","",1],["Strategies","OmniAuth","classes/OmniAuth/Strategies.html"," < ","",1],["Developer","OmniAuth::Strategies","classes/OmniAuth/Strategies/Developer.html"," < Object","The Developer strategy is a very simple strategy that can be used as a placeholder in your application",1],["Strategy","OmniAuth","classes/OmniAuth/Strategy.html"," < ","The Strategy is the base unit of OmniAuth's ability to wrangle multiple providers. Each strategy provided",1],["ClassMethods","OmniAuth::Strategy","classes/OmniAuth/Strategy/ClassMethods.html"," < ","",1],["Options","OmniAuth::Strategy","classes/OmniAuth/Strategy/Options.html"," < Hashie::Mash","",1],["Test","OmniAuth","classes/OmniAuth/Test.html"," < ","Support for testing OmniAuth strategies. ",1],["PhonySession","OmniAuth::Test","classes/OmniAuth/Test/PhonySession.html"," < Object","",1],["StrategyMacros","OmniAuth::Test","classes/OmniAuth/Test/StrategyMacros.html"," < ","",1],["StrategyTestCase","OmniAuth::Test","classes/OmniAuth/Test/StrategyTestCase.html"," < ","Support for testing OmniAuth strategies. @example Usage class MyStrategyTest < Test::Unit::TestCase include",1],["Utils","OmniAuth","classes/OmniAuth/Utils.html"," < ","",1],["add_camelization","OmniAuth::Configuration","classes/OmniAuth/Configuration.html#M000092","(name, camelized)","This is a convenience method to be used by strategy authors so that they can add special cases to the",2],["add_mock","OmniAuth::Configuration","classes/OmniAuth/Configuration.html#M000082","(provider, mock={})","",2],["app","OmniAuth::Test::StrategyTestCase","classes/OmniAuth/Test/StrategyTestCase.html#M000047","()","",2],["app_response","OmniAuth::Test::StrategyTestCase","classes/OmniAuth/Test/StrategyTestCase.html#M000051","()","",2],["args","OmniAuth::Strategy::ClassMethods","classes/OmniAuth/Strategy/ClassMethods.html#M000035","(args = nil)","Sets (and retrieves) option key names for initializer arguments to be recorded as. This takes care of",2],["auth_hash","OmniAuth::Strategy","classes/OmniAuth/Strategy.html#M000066","()","",2],["build","OmniAuth::Form","classes/OmniAuth/Form.html#M000016","(options = {},&block)","",2],["button","OmniAuth::Form","classes/OmniAuth/Form.html#M000021","(text)","",2],["call","OmniAuth::Builder","classes/OmniAuth/Builder.html#M000013","(env)","",2],["call","OmniAuth::Strategy","classes/OmniAuth/Strategy.html#M000042","(env)","Duplicates this instance and runs #call! on it. @param [Hash] The Rack environment. ",2],["call","OmniAuth::Test::PhonySession","classes/OmniAuth/Test/PhonySession.html#M000030","(env)","",2],["call!","OmniAuth::Strategy","classes/OmniAuth/Strategy.html#M000044","(env)","The logic for dispatching any additional actions that need to be taken. For instance, calling the request",2],["call_app!","OmniAuth::Strategy","classes/OmniAuth/Strategy.html#M000077","(env = @env)","",2],["call_through_to_app","OmniAuth::Strategy","classes/OmniAuth/Strategy.html#M000076","()","",2],["callback_call","OmniAuth::Strategy","classes/OmniAuth/Strategy.html#M000048","()","Performs the steps necessary to run the callback phase of a strategy. ",2],["callback_path","OmniAuth::Strategy","classes/OmniAuth/Strategy.html#M000071","()","",2],["callback_phase","OmniAuth::Strategy","classes/OmniAuth/Strategy.html#M000068","()","",2],["callback_url","OmniAuth::Strategy","classes/OmniAuth/Strategy.html#M000083","()","",2],["camelize","OmniAuth::Utils","classes/OmniAuth/Utils.html#M000098","(word, first_letter_in_uppercase = true)","",2],["compile_stack","OmniAuth::Strategy::ClassMethods","classes/OmniAuth/Strategy/ClassMethods.html#M000036","(ancestors, method, context)","",2],["config","OmniAuth","classes/OmniAuth.html#M000093","()","",2],["configure","OmniAuth","classes/OmniAuth.html#M000094","()","",2],["configure","OmniAuth::Builder","classes/OmniAuth/Builder.html#M000011","(&block)","",2],["configure","OmniAuth::Strategy::ClassMethods","classes/OmniAuth/Strategy/ClassMethods.html#M000033","(options = nil)","This allows for more declarative subclassing of strategies by allowing default options to be set using",2],["credentials","OmniAuth::Strategy","classes/OmniAuth/Strategy.html#M000064","()","",2],["css","OmniAuth::Form","classes/OmniAuth/Form.html#M000028","()","",2],["current_path","OmniAuth::Strategy","classes/OmniAuth/Strategy.html#M000073","()","",2],["deep_merge","OmniAuth::Utils","classes/OmniAuth/Utils.html#M000097","(hash, other_hash)","",2],["default_options","OmniAuth::Strategy::ClassMethods","classes/OmniAuth/Strategy/ClassMethods.html#M000032","()","Returns an inherited set of default options set at the class-level for each strategy. ",2],["defaults","OmniAuth::Configuration","classes/OmniAuth/Configuration.html#M000079","()","",2],["extra","OmniAuth::Strategy","classes/OmniAuth/Strategy.html#M000065","()","",2],["fail!","OmniAuth::Strategy","classes/OmniAuth/Strategy.html#M000090","(message_key, exception = nil)","",2],["fieldset","OmniAuth::Form","classes/OmniAuth/Form.html#M000023","(legend, options = {}, &block)","",2],["footer","OmniAuth::Form","classes/OmniAuth/Form.html#M000025","()","",2],["form_css","OmniAuth::Utils","classes/OmniAuth/Utils.html#M000096","()","",2],["full_host","OmniAuth::Strategy","classes/OmniAuth/Strategy.html#M000078","()","",2],["header","OmniAuth::Form","classes/OmniAuth/Form.html#M000024","(title,header_info)","",2],["html","OmniAuth::Form","classes/OmniAuth/Form.html#M000022","(html)","",2],["included","OmniAuth::Strategy","classes/OmniAuth/Strategy.html#M000031","(base)","",2],["info","OmniAuth::Strategy","classes/OmniAuth/Strategy.html#M000063","()","",2],["input_field","OmniAuth::Form","classes/OmniAuth/Form.html#M000018","(type, name)","",2],["inspect","OmniAuth::Strategy","classes/OmniAuth/Strategy.html#M000041","()","",2],["label_field","OmniAuth::Form","classes/OmniAuth/Form.html#M000017","(text, target)","",2],["merge_stack","OmniAuth::Strategy","classes/OmniAuth/Strategy.html#M000091","(stack)","",2],["mock_auth_for","OmniAuth","classes/OmniAuth.html#M000095","(provider)","",2],["mock_call!","OmniAuth::Strategy","classes/OmniAuth/Strategy.html#M000057","(env)","This is called in lieu of the normal request process in the event that OmniAuth has been configured to",2],["mock_callback_call","OmniAuth::Strategy","classes/OmniAuth/Strategy.html#M000059","()","",2],["mock_request_call","OmniAuth::Strategy","classes/OmniAuth/Strategy.html#M000058","()","",2],["name","OmniAuth::AuthHash::InfoHash","classes/OmniAuth/AuthHash/InfoHash.html#M000004","()","",2],["name","OmniAuth::Strategy","classes/OmniAuth/Strategy.html#M000087","()","",2],["name?","OmniAuth::AuthHash::InfoHash","classes/OmniAuth/AuthHash/InfoHash.html#M000008","()","",2],["new","OmniAuth::Builder","classes/OmniAuth/Builder.html#M000005","(app, &block)","",2],["new","OmniAuth::Configuration","classes/OmniAuth/Configuration.html#M000080","()","",2],["new","OmniAuth::Form","classes/OmniAuth/Form.html#M000014","(options = {})","",2],["new","OmniAuth::Strategy","classes/OmniAuth/Strategy.html#M000037","(app, *args, &block)","Initializes the strategy by passing in the Rack endpoint, the unique URL segment name for this strategy,",2],["new","OmniAuth::Test::PhonySession","classes/OmniAuth/Test/PhonySession.html#M000029","(app)","",2],["on_auth_path?","OmniAuth::Strategy","classes/OmniAuth/Strategy.html#M000049","()","Returns true if the environment recognizes either the  request or callback path. ",2],["on_callback_path?","OmniAuth::Strategy","classes/OmniAuth/Strategy.html#M000054","()","",2],["on_failure","OmniAuth::Builder","classes/OmniAuth/Builder.html#M000007","(&block)","",2],["on_failure","OmniAuth::Configuration","classes/OmniAuth/Configuration.html#M000081","(&block)","",2],["on_path?","OmniAuth::Strategy","classes/OmniAuth/Strategy.html#M000055","(path)","",2],["on_request_path?","OmniAuth::Strategy","classes/OmniAuth/Strategy.html#M000050","()","",2],["option","OmniAuth::Strategy::ClassMethods","classes/OmniAuth/Strategy/ClassMethods.html#M000034","(name, value = nil)","Directly declare a default option for your class. This is a useful from a documentation perspective as",2],["options_call","OmniAuth::Strategy","classes/OmniAuth/Strategy.html#M000045","()","Responds to an OPTIONS request. ",2],["options_request?","OmniAuth::Strategy","classes/OmniAuth/Strategy.html#M000056","()","",2],["password_field","OmniAuth::Form","classes/OmniAuth/Form.html#M000020","(label, name)","",2],["path_prefix","OmniAuth::Strategy","classes/OmniAuth/Strategy.html#M000069","()","",2],["provider","OmniAuth::Builder","classes/OmniAuth/Builder.html#M000012","(klass, *args, &block)","",2],["query_string","OmniAuth::Strategy","classes/OmniAuth/Strategy.html#M000075","()","",2],["rack14?","OmniAuth::Builder","classes/OmniAuth/Builder.html#M000006","()","",2],["redirect","OmniAuth::Strategy","classes/OmniAuth/Strategy.html#M000088","(uri)","",2],["regular_writer","OmniAuth::AuthHash","classes/OmniAuth/AuthHash.html#M000002","(key, value)","",2],["request","OmniAuth::Strategy","classes/OmniAuth/Strategy.html#M000086","()","",2],["request_call","OmniAuth::Strategy","classes/OmniAuth/Strategy.html#M000046","()","Performs the steps necessary to run the request phase of a strategy. ",2],["request_path","OmniAuth::Strategy","classes/OmniAuth/Strategy.html#M000070","()","",2],["request_phase","OmniAuth::Strategies::Developer","classes/OmniAuth/Strategies/Developer.html#M000015","()","",2],["request_phase","OmniAuth::Strategy","classes/OmniAuth/Strategy.html#M000061","()","@abstract This method is called when the user is on the request path. You should perform any information",2],["script_name","OmniAuth::Strategy","classes/OmniAuth/Strategy.html#M000084","()","",2],["session","OmniAuth::Strategy","classes/OmniAuth/Strategy.html#M000085","()","",2],["session","OmniAuth::Test::StrategyTestCase","classes/OmniAuth/Test/StrategyTestCase.html#M000052","()","",2],["sets_an_auth_hash","OmniAuth::Test::StrategyMacros","classes/OmniAuth/Test/StrategyMacros.html#M000038","()","",2],["sets_provider_to","OmniAuth::Test::StrategyMacros","classes/OmniAuth/Test/StrategyMacros.html#M000039","(provider)","",2],["sets_uid_to","OmniAuth::Test::StrategyMacros","classes/OmniAuth/Test/StrategyMacros.html#M000040","(uid)","",2],["sets_user_info_to","OmniAuth::Test::StrategyMacros","classes/OmniAuth/Test/StrategyMacros.html#M000043","(user_info)","",2],["setup_path","OmniAuth::Strategy","classes/OmniAuth/Strategy.html#M000072","()","",2],["setup_phase","OmniAuth::Strategy","classes/OmniAuth/Strategy.html#M000060","()","The setup phase looks for the `:setup` option to exist and, if it is, will call either the Rack endpoint",2],["skip_info?","OmniAuth::Strategy","classes/OmniAuth/Strategy.html#M000067","()","Determines whether or not user info should be retrieved. This allows some strategies to save a call to",2],["strategies","OmniAuth","classes/OmniAuth.html#M000074","()","",2],["strategy","OmniAuth::Test::StrategyTestCase","classes/OmniAuth/Test/StrategyTestCase.html#M000053","()","",2],["subkey_class","OmniAuth::AuthHash","classes/OmniAuth/AuthHash.html#M000000","()","",2],["subkey_class","OmniAuth::AuthHash::InfoHash","classes/OmniAuth/AuthHash/InfoHash.html#M000003","()","",2],["text_field","OmniAuth::Form","classes/OmniAuth/Form.html#M000019","(label, name)","",2],["to_hash","OmniAuth::AuthHash::InfoHash","classes/OmniAuth/AuthHash/InfoHash.html#M000010","()","",2],["to_html","OmniAuth::Form","classes/OmniAuth/Form.html#M000026","()","",2],["to_response","OmniAuth::Form","classes/OmniAuth/Form.html#M000027","()","",2],["uid","OmniAuth::Strategy","classes/OmniAuth/Strategy.html#M000062","()","",2],["user_info","OmniAuth::Strategy","classes/OmniAuth/Strategy.html#M000089","()","",2],["valid?","OmniAuth::AuthHash","classes/OmniAuth/AuthHash.html#M000001","()","Tells you if this is considered to be a valid OmniAuth AuthHash. The requirements for that are that it",2],["valid?","OmniAuth::AuthHash::InfoHash","classes/OmniAuth/AuthHash/InfoHash.html#M000009","()","",2],["LICENSE","files/LICENSE.html","files/LICENSE.html","","Copyright (c) 2010-2011 Michael Bleigh and Intridea, Inc.  Permission is hereby granted, free of charge,",3],["README.md","files/README_md.html","files/README_md.html","","# OmniAuth: Standardized Multi-Provider Authentication [![CI Build Status](https://secure.travis-ci.org/intridea/omniauth.png?branch=master)][travis]",3],["omniauth.rb","files/lib/omniauth_rb.html","files/lib/omniauth_rb.html","","",3],["auth_hash.rb","files/lib/omniauth/auth_hash_rb.html","files/lib/omniauth/auth_hash_rb.html","","",3],["builder.rb","files/lib/omniauth/builder_rb.html","files/lib/omniauth/builder_rb.html","","",3],["form.rb","files/lib/omniauth/form_rb.html","files/lib/omniauth/form_rb.html","","",3],["developer.rb","files/lib/omniauth/strategies/developer_rb.html","files/lib/omniauth/strategies/developer_rb.html","","",3],["strategy.rb","files/lib/omniauth/strategy_rb.html","files/lib/omniauth/strategy_rb.html","","",3],["test.rb","files/lib/omniauth/test_rb.html","files/lib/omniauth/test_rb.html","","",3],["phony_session.rb","files/lib/omniauth/test/phony_session_rb.html","files/lib/omniauth/test/phony_session_rb.html","","",3],["strategy_macros.rb","files/lib/omniauth/test/strategy_macros_rb.html","files/lib/omniauth/test/strategy_macros_rb.html","","",3],["strategy_test_case.rb","files/lib/omniauth/test/strategy_test_case_rb.html","files/lib/omniauth/test/strategy_test_case_rb.html","","",3],["version.rb","files/lib/omniauth/version_rb.html","files/lib/omniauth/version_rb.html","","",3]],"searchIndex":["omniauth","authhash","infohash","builder","configuration","form","nosessionerror","strategies","developer","strategy","classmethods","options","test","phonysession","strategymacros","strategytestcase","utils","add_camelization()","add_mock()","app()","app_response()","args()","auth_hash()","build()","button()","call()","call()","call()","call!()","call_app!()","call_through_to_app()","callback_call()","callback_path()","callback_phase()","callback_url()","camelize()","compile_stack()","config()","configure()","configure()","configure()","credentials()","css()","current_path()","deep_merge()","default_options()","defaults()","extra()","fail!()","fieldset()","footer()","form_css()","full_host()","header()","html()","included()","info()","input_field()","inspect()","label_field()","merge_stack()","mock_auth_for()","mock_call!()","mock_callback_call()","mock_request_call()","name()","name()","name?()","new()","new()","new()","new()","new()","on_auth_path?()","on_callback_path?()","on_failure()","on_failure()","on_path?()","on_request_path?()","option()","options_call()","options_request?()","password_field()","path_prefix()","provider()","query_string()","rack14?()","redirect()","regular_writer()","request()","request_call()","request_path()","request_phase()","request_phase()","script_name()","session()","session()","sets_an_auth_hash()","sets_provider_to()","sets_uid_to()","sets_user_info_to()","setup_path()","setup_phase()","skip_info?()","strategies()","strategy()","subkey_class()","subkey_class()","text_field()","to_hash()","to_html()","to_response()","uid()","user_info()","valid?()","valid?()","license","readme.md","omniauth.rb","auth_hash.rb","builder.rb","form.rb","developer.rb","strategy.rb","test.rb","phony_session.rb","strategy_macros.rb","strategy_test_case.rb","version.rb"]}}