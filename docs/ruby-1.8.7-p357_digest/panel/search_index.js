var search_data = {"index":{"info":[["Digest","ext/digest/lib/digest.rb","classes/Digest.html"," < ","      This module provides a framework for message digest libraries.    ",1],["Base","Digest","classes/Digest/Base.html"," < Digest::Class","      This abstract class provides a common interface to message digest    implementation classes written",1],["Class","Digest","classes/Digest/Class.html"," < Object","      This module stands as a base class for digest implementation    classes.    ",1],["Instance","Digest","classes/Digest/Instance.html"," < ","      This module provides instance methods for a digest implementation    object to calculate message",1],["SHA2","Digest","classes/Digest/SHA2.html"," < Digest::Class","A meta digest provider class for SHA256, SHA384 and SHA512. ",1],["MD5","ext/digest/lib/md5.rb","classes/MD5.html"," < Digest::MD5","",1],["Object","ext/digest/lib/digest.rb","classes/Object.html"," < Object","",1],["SHA1","ext/digest/lib/sha1.rb","classes/SHA1.html"," < Digest::SHA1","",1],["<<","Digest::Instance","classes/Digest/Instance.html#M000021","(p1)","          Updates the digest using a given _string_ and returns self.       The update() method and the",2],["<<","Digest::SHA2","classes/Digest/SHA2.html#M000013","(str)","Alias for #update",2],["==","Digest::Instance","classes/Digest/Instance.html#M000026","(p1)","          If a string is given, checks whether it is equal to the hex-encoded    hash value of the digest",2],["Digest","Object","classes/Object.html#M000003","(name)","",2],["block_length","Digest::Instance","classes/Digest/Instance.html#M000025","()","          Returns the block length of the digest.       This method is overridden by each implementation",2],["block_length","Digest::SHA2","classes/Digest/SHA2.html#M000015","()","",2],["const_missing","Digest","classes/Digest.html#M000000","(name)","",2],["digest","Digest::Class","classes/Digest/Class.html#M000036","(...)","          Returns the hash value of a given _string_.  This is equivalent to    Digest::Class.new(*parameters).digest(string),",2],["digest","Digest::Instance","classes/Digest/Instance.html#M000029","(...)","          If none is given, returns the resulting hash value of the digest,    keeping the digest's state.",2],["digest!","Digest::Instance","classes/Digest/Instance.html#M000030","()","          Returns the resulting hash value and resets the digest to the    initial state.     ",2],["digest_length","Digest::Instance","classes/Digest/Instance.html#M000024","()","          Returns the length of the hash value of the digest.       This method should be overridden",2],["digest_length","Digest::SHA2","classes/Digest/SHA2.html#M000016","()","",2],["file","Digest::Class","classes/Digest/Class.html#M000001","(name)","creates a digest object and reads a given file, _name_. p Digest::SHA256.file(\"X11R6.8.2-src.tar.bz2\").hexdigest",2],["file","Digest::Instance","classes/Digest/Instance.html#M000002","(name)","updates the digest with the contents of a given file _name_ and returns self. ",2],["finish","Digest::Instance","classes/Digest/Instance.html#M000022","()","          Finishes the digest and returns the resulting hash value.       This method is overridden by",2],["finish","Digest::SHA2","classes/Digest/SHA2.html#M000014","()","",2],["hexdigest","Digest::Class","classes/Digest/Class.html#M000037","(...)","          Returns the hex-encoded hash value of a given _string_.  This is    almost equivalent to  ",2],["hexdigest","Digest::Instance","classes/Digest/Instance.html#M000031","(...)","          If none is given, returns the resulting hash value of the digest in    a hex-encoded form,",2],["hexdigest!","Digest::Instance","classes/Digest/Instance.html#M000032","()","          Returns the resulting hash value and resets the digest to the    initial state.     ",2],["hexencode","Digest","classes/Digest.html#M000019","(p1)","          Generates a hex-encoded version of a given _string_.     ",2],["initialize_copy","Digest::SHA2","classes/Digest/SHA2.html#M000017","(other)",":nodoc:  ",2],["inspect","Digest::Instance","classes/Digest/Instance.html#M000027","()","          Creates a printable version of the digest object.     ",2],["inspect","Digest::SHA2","classes/Digest/SHA2.html#M000018","()",":nodoc:  ",2],["length","Digest::Instance","classes/Digest/Instance.html#M000034","()","          Returns digest_obj.digest_length().     ",2],["md5","MD5","classes/MD5.html#M000006","(*args)","",2],["new","Digest::Instance","classes/Digest/Instance.html#M000028","()","          Returns a new, initialized copy of the digest object.  Equivalent    to digest_obj.clone().reset().",2],["new","Digest::SHA2","classes/Digest/SHA2.html#M000010","(bitlen = 256)","Creates a new SHA2 hash object with a given bit length. ",2],["new","MD5","classes/MD5.html#M000004","(str = nil)","",2],["new","SHA1","classes/SHA1.html#M000007","(str = nil)","",2],["orig_new","MD5","classes/MD5.html#M000005","(str = nil)","Alias for #new",2],["orig_new","SHA1","classes/SHA1.html#M000008","(str = nil)","Alias for #new",2],["reset","Digest::Instance","classes/Digest/Instance.html#M000023","()","          Resets the digest to the initial state and returns self.       This method is overridden by",2],["reset","Digest::SHA2","classes/Digest/SHA2.html#M000011","()",":nodoc:  ",2],["sha1","SHA1","classes/SHA1.html#M000009","(*args)","",2],["size","Digest::Instance","classes/Digest/Instance.html#M000035","()","          Returns digest_obj.digest_length().     ",2],["to_s","Digest::Instance","classes/Digest/Instance.html#M000033","()","          Returns digest_obj.hexdigest().     ",2],["update","Digest::Instance","classes/Digest/Instance.html#M000020","(p1)","          Updates the digest using a given _string_ and returns self.       The update() method and the",2],["update","Digest::SHA2","classes/Digest/SHA2.html#M000012","(str)",":nodoc:  ",2],["bubblebabble.c","files/ext/digest/bubblebabble/bubblebabble_c.html","files/ext/digest/bubblebabble/bubblebabble_c.html","","",3],["defs.h","files/ext/digest/defs_h.html","files/ext/digest/defs_h.html","","",3],["digest.c","files/ext/digest/digest_c.html","files/ext/digest/digest_c.html","","",3],["digest.h","files/ext/digest/digest_h.html","files/ext/digest/digest_h.html","","",3],["digest.rb","files/ext/digest/lib/digest_rb.html","files/ext/digest/lib/digest_rb.html","","",3],["md5.rb","files/ext/digest/lib/md5_rb.html","files/ext/digest/lib/md5_rb.html","","just for compatibility; requiring \"md5\" is obsoleted $RoughId: md5.rb,v 1.4 2001/07/13 15:38:27 knu Exp",3],["sha1.rb","files/ext/digest/lib/sha1_rb.html","files/ext/digest/lib/sha1_rb.html","","just for compatibility; requiring \"sha1\" is obsoleted $RoughId: sha1.rb,v 1.4 2001/07/13 15:38:27 knu",3],["md5.c","files/ext/digest/md5/md5_c.html","files/ext/digest/md5/md5_c.html","","",3],["md5.h","files/ext/digest/md5/md5_h.html","files/ext/digest/md5/md5_h.html","","",3],["md5init.c","files/ext/digest/md5/md5init_c.html","files/ext/digest/md5/md5init_c.html","","",3],["md5ossl.c","files/ext/digest/md5/md5ossl_c.html","files/ext/digest/md5/md5ossl_c.html","","",3],["md5ossl.h","files/ext/digest/md5/md5ossl_h.html","files/ext/digest/md5/md5ossl_h.html","","",3],["rmd160.c","files/ext/digest/rmd160/rmd160_c.html","files/ext/digest/rmd160/rmd160_c.html","","",3],["rmd160.h","files/ext/digest/rmd160/rmd160_h.html","files/ext/digest/rmd160/rmd160_h.html","","",3],["rmd160init.c","files/ext/digest/rmd160/rmd160init_c.html","files/ext/digest/rmd160/rmd160init_c.html","","",3],["rmd160ossl.c","files/ext/digest/rmd160/rmd160ossl_c.html","files/ext/digest/rmd160/rmd160ossl_c.html","","",3],["rmd160ossl.h","files/ext/digest/rmd160/rmd160ossl_h.html","files/ext/digest/rmd160/rmd160ossl_h.html","","",3],["sha1.c","files/ext/digest/sha1/sha1_c.html","files/ext/digest/sha1/sha1_c.html","","",3],["sha1.h","files/ext/digest/sha1/sha1_h.html","files/ext/digest/sha1/sha1_h.html","","",3],["sha1init.c","files/ext/digest/sha1/sha1init_c.html","files/ext/digest/sha1/sha1init_c.html","","",3],["sha1ossl.c","files/ext/digest/sha1/sha1ossl_c.html","files/ext/digest/sha1/sha1ossl_c.html","","",3],["sha1ossl.h","files/ext/digest/sha1/sha1ossl_h.html","files/ext/digest/sha1/sha1ossl_h.html","","",3],["sha2.rb","files/ext/digest/sha2/lib/sha2_rb.html","files/ext/digest/sha2/lib/sha2_rb.html","","Copyright (c) 2006 Akinori MUSHA <knu@iDaemons.org> All rights reserved.  You can redistribute and/or",3],["sha2.c","files/ext/digest/sha2/sha2_c.html","files/ext/digest/sha2/sha2_c.html","","",3],["sha2.h","files/ext/digest/sha2/sha2_h.html","files/ext/digest/sha2/sha2_h.html","","",3],["sha2init.c","files/ext/digest/sha2/sha2init_c.html","files/ext/digest/sha2/sha2init_c.html","","",3]],"searchIndex":["digest","base","class","instance","sha2","md5","object","sha1","<<()","<<()","==()","digest()","block_length()","block_length()","const_missing()","digest()","digest()","digest!()","digest_length()","digest_length()","file()","file()","finish()","finish()","hexdigest()","hexdigest()","hexdigest!()","hexencode()","initialize_copy()","inspect()","inspect()","length()","md5()","new()","new()","new()","new()","orig_new()","orig_new()","reset()","reset()","sha1()","size()","to_s()","update()","update()","bubblebabble.c","defs.h","digest.c","digest.h","digest.rb","md5.rb","sha1.rb","md5.c","md5.h","md5init.c","md5ossl.c","md5ossl.h","rmd160.c","rmd160.h","rmd160init.c","rmd160ossl.c","rmd160ossl.h","sha1.c","sha1.h","sha1init.c","sha1ossl.c","sha1ossl.h","sha2.rb","sha2.c","sha2.h","sha2init.c"],"longSearchIndex":["ext/digest/digest.c","digest","digest","digest","digest","ext/digest/lib/md5.rb","ext/digest/lib/digest.rb","ext/digest/lib/sha1.rb","digest::instance","digest::sha2","digest::instance","object","digest::instance","digest::sha2","digest","digest::class","digest::instance","digest::instance","digest::instance","digest::sha2","digest::class","digest::instance","digest::instance","digest::sha2","digest::class","digest::instance","digest::instance","digest","digest::sha2","digest::instance","digest::sha2","digest::instance","md5","digest::instance","digest::sha2","md5","sha1","md5","sha1","digest::instance","digest::sha2","sha1","digest::instance","digest::instance","digest::instance","digest::sha2","files/ext/digest/bubblebabble/bubblebabble_c.html","files/ext/digest/defs_h.html","files/ext/digest/digest_c.html","files/ext/digest/digest_h.html","files/ext/digest/lib/digest_rb.html","files/ext/digest/lib/md5_rb.html","files/ext/digest/lib/sha1_rb.html","files/ext/digest/md5/md5_c.html","files/ext/digest/md5/md5_h.html","files/ext/digest/md5/md5init_c.html","files/ext/digest/md5/md5ossl_c.html","files/ext/digest/md5/md5ossl_h.html","files/ext/digest/rmd160/rmd160_c.html","files/ext/digest/rmd160/rmd160_h.html","files/ext/digest/rmd160/rmd160init_c.html","files/ext/digest/rmd160/rmd160ossl_c.html","files/ext/digest/rmd160/rmd160ossl_h.html","files/ext/digest/sha1/sha1_c.html","files/ext/digest/sha1/sha1_h.html","files/ext/digest/sha1/sha1init_c.html","files/ext/digest/sha1/sha1ossl_c.html","files/ext/digest/sha1/sha1ossl_h.html","files/ext/digest/sha2/lib/sha2_rb.html","files/ext/digest/sha2/sha2_c.html","files/ext/digest/sha2/sha2_h.html","files/ext/digest/sha2/sha2init_c.html"]}}