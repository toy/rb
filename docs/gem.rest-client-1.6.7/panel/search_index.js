var search_data = {"index":{"info":[["MIME","lib/restclient/request.rb","classes/MIME.html"," < ","",1],["Types","MIME","classes/MIME/Types.html"," < Object","",1],["Net","lib/restclient/net_http_ext.rb","classes/Net.html"," < ","",1],["HTTP","Net","classes/Net/HTTP.html"," < Object","",1],["Patch","Net::HTTP","classes/Net/HTTP/Patch.html"," < HTTPRequest","",1],["Protocol","Net::HTTP","classes/Net/HTTP/Protocol.html"," < Object","Code taken from this commit: https://github.com/ruby/ruby/commit/ab70e53ac3b5102d4ecbe8f38d4f76afad29d37d#lib/net/http.rb",1],["RestClient","lib/restclient/abstract_response.rb","classes/RestClient.html"," < ","This module's static methods are the entry point for using the REST client. # GET xml = RestClient.get",1],["AbstractResponse","RestClient","classes/RestClient/AbstractResponse.html"," < ","",1],["Exception","RestClient","classes/RestClient/Exception.html"," < RuntimeError","This is the base RestClient exception class. Rescue it if you want to catch any exception that your request",1],["ExceptionWithResponse","RestClient","classes/RestClient/ExceptionWithResponse.html"," < Exception","Compatibility ",1],["Exceptions","RestClient","classes/RestClient/Exceptions.html"," < ","We will a create an exception for each status code, see http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html",1],["MaxRedirectsReached","RestClient","classes/RestClient/MaxRedirectsReached.html"," < Exception","",1],["Payload","RestClient","classes/RestClient/Payload.html"," < ","",1],["Base","RestClient::Payload","classes/RestClient/Payload/Base.html"," < Object","",1],["Multipart","RestClient::Payload","classes/RestClient/Payload/Multipart.html"," < Base","",1],["Streamed","RestClient::Payload","classes/RestClient/Payload/Streamed.html"," < Base","",1],["UrlEncoded","RestClient::Payload","classes/RestClient/Payload/UrlEncoded.html"," < Base","",1],["RawResponse","RestClient","classes/RestClient/RawResponse.html"," < Object","The response from RestClient on a raw request looks like a string, but is actually one of these.  99%",1],["Redirect","RestClient","classes/RestClient/Redirect.html"," < Exception","A redirect was encountered; caught by execute to retry with the new url. ",1],["Request","RestClient","classes/RestClient/Request.html"," < Object","This class is used internally by RestClient to send the request, but you can also call it directly if",1],["RequestFailed","RestClient","classes/RestClient/RequestFailed.html"," < ExceptionWithResponse","The request failed with an error code not managed by the code ",1],["Resource","RestClient","classes/RestClient/Resource.html"," < Object","A class that can be instantiated for access to a RESTful resource, including authentication. Example:",1],["Response","RestClient","classes/RestClient/Response.html"," < ","A Response from RestClient, you can access the response body, the code or the headers. ",1],["ResponseForException","RestClient","classes/RestClient/ResponseForException.html"," < ","Compatibility : make the Response act like a Net::HTTPResponse when needed ",1],["SSLCertificateNotVerified","RestClient","classes/RestClient/SSLCertificateNotVerified.html"," < Exception","",1],["ServerBrokeConnection","RestClient","classes/RestClient/ServerBrokeConnection.html"," < Exception","The server broke the connection prior to the request completing.  Usually this means it crashed, or sometimes",1],["<<","RestClient","classes/RestClient.html#M000107","(obj)","",2],["<<","RestClient","classes/RestClient.html#M000108","(obj)","",2],["<<","RestClient","classes/RestClient.html#M000106","(obj)","",2],["[]","RestClient::Resource","classes/RestClient/Resource.html#M000085","(suburl, &new_block)","Construct a subresource, preserving authentication. Example: site = RestClient::Resource.new('http://example.com',",2],["__request__","Net::HTTP","classes/Net/HTTP.html#M000025","(req, body=nil, &block)","Alias for #request",2],["add_before_execution_proc","RestClient","classes/RestClient.html#M000110","(&proc)","Add a Proc to be called before each request in executed. The proc parameters will be the http request",2],["beautify_headers","RestClient::AbstractResponse","classes/RestClient/AbstractResponse.html#M000008","(headers)","",2],["body","RestClient::Response","classes/RestClient/Response.html#M000091","()","",2],["boundary","RestClient::Payload::Multipart","classes/RestClient/Payload/Multipart.html#M000058","()","",2],["build_stream","RestClient::Payload::Base","classes/RestClient/Payload/Base.html#M000032","(params)","",2],["build_stream","RestClient::Payload::Multipart","classes/RestClient/Payload/Multipart.html#M000050","(params)","",2],["build_stream","RestClient::Payload::Streamed","classes/RestClient/Payload/Streamed.html#M000044","(params = nil)","",2],["build_stream","RestClient::Payload::UrlEncoded","classes/RestClient/Payload/UrlEncoded.html#M000047","(params = nil)","",2],["close","RestClient::Payload::Base","classes/RestClient/Payload/Base.html#M000041","()","",2],["close","RestClient::Payload::Multipart","classes/RestClient/Payload/Multipart.html#M000061","()","",2],["code","RestClient::AbstractResponse","classes/RestClient/AbstractResponse.html#M000000","()","HTTP status code ",2],["cookies","RestClient::AbstractResponse","classes/RestClient/AbstractResponse.html#M000003","()","Hash of cookies extracted from response headers ",2],["create","RestClient::Response","classes/RestClient/Response.html#M000092","(body, net_http_res, args)","",2],["create_file_field","RestClient::Payload::Multipart","classes/RestClient/Payload/Multipart.html#M000054","(s, k, v)","",2],["create_log","RestClient","classes/RestClient.html#M000105","(param)","Create a log that respond to << like a logger param can be 'stdout', 'stderr', a string (then we will",2],["create_regular_field","RestClient::Payload::Multipart","classes/RestClient/Payload/Multipart.html#M000053","(s, k, v)","",2],["decode","RestClient::Request","classes/RestClient/Request.html#M000086","(content_encoding, body)","",2],["default_headers","RestClient::Request","classes/RestClient/Request.html#M000093","()","",2],["delete","RestClient","classes/RestClient.html#M000100","(url, headers={}, &block)","",2],["delete","RestClient::Resource","classes/RestClient/Resource.html#M000077","(additional_headers={}, &block)","",2],["description","RestClient::AbstractResponse","classes/RestClient/AbstractResponse.html#M000006","()","",2],["execute","RestClient::Request","classes/RestClient/Request.html#M000055","(& block)","",2],["execute","RestClient::Request","classes/RestClient/Request.html#M000051","(args, & block)","",2],["fetch_body","RestClient::Request","classes/RestClient/Request.html#M000076","(http_response)","",2],["flatten_params","RestClient::Payload::Base","classes/RestClient/Payload/Base.html#M000036","(params, parent_key = nil)","Flatten parameters by converting hashes of hashes to flat hashes {keys1 => {keys2 => value}} will be",2],["flatten_params_array","RestClient::Payload::Base","classes/RestClient/Payload/Base.html#M000037","(value, calculated_key)","",2],["follow_redirection","RestClient::AbstractResponse","classes/RestClient/AbstractResponse.html#M000007","(request = nil, result = nil, & block)","Follow a redirection ",2],["generate","RestClient::Payload","classes/RestClient/Payload.html#M000026","(params)","",2],["get","RestClient","classes/RestClient.html#M000096","(url, headers={}, &block)","",2],["get","RestClient::Resource","classes/RestClient/Resource.html#M000069","(additional_headers={}, &block)","",2],["handle_key","RestClient::Payload::Multipart","classes/RestClient/Payload/Multipart.html#M000059","(key)","for Multipart do not escape the keys ",2],["handle_key","RestClient::Payload::UrlEncoded","classes/RestClient/Payload/UrlEncoded.html#M000048","(key)","for UrlEncoded escape the keys ",2],["has_file?","RestClient::Payload","classes/RestClient/Payload.html#M000027","(params)","",2],["has_file_array?","RestClient::Payload","classes/RestClient/Payload.html#M000028","(params)","",2],["head","RestClient","classes/RestClient.html#M000101","(url, headers={}, &block)","",2],["head","RestClient::Resource","classes/RestClient/Resource.html#M000071","(additional_headers={}, &block)","",2],["headers","RestClient::AbstractResponse","classes/RestClient/AbstractResponse.html#M000001","()","A hash of the headers, beautified with symbols and underscores. e.g. \"Content-type\" will become :content_type.",2],["headers","RestClient::Payload::Base","classes/RestClient/Payload/Base.html#M000038","()","",2],["headers","RestClient::Payload::Multipart","classes/RestClient/Payload/Multipart.html#M000060","()","",2],["headers","RestClient::Payload::UrlEncoded","classes/RestClient/Payload/UrlEncoded.html#M000049","()","",2],["headers","RestClient::Resource","classes/RestClient/Resource.html#M000081","()","",2],["http_body","RestClient::Exception","classes/RestClient/Exception.html#M000013","()","",2],["http_code","RestClient::Exception","classes/RestClient/Exception.html#M000012","()","",2],["inspect","RestClient::Exception","classes/RestClient/Exception.html#M000014","()","",2],["inspect","RestClient::Payload::Base","classes/RestClient/Payload/Base.html#M000042","()","",2],["length","RestClient::Payload::Base","classes/RestClient/Payload/Base.html#M000040","()","Alias for #size",2],["length","RestClient::Payload::Streamed","classes/RestClient/Payload/Streamed.html#M000046","()","Alias for #size",2],["log=","RestClient","classes/RestClient.html#M000103","(log)","Setup the log for RestClient calls. Value should be a logger but can can be stdout, stderr, or a filename.",2],["log_request","RestClient::Request","classes/RestClient/Request.html#M000088","()","",2],["log_response","RestClient::Request","classes/RestClient/Request.html#M000089","(res)","",2],["make_headers","RestClient::Request","classes/RestClient/Request.html#M000062","(user_headers)","",2],["message","RestClient::Exception","classes/RestClient/Exception.html#M000016","()","",2],["message","RestClient::RequestFailed","classes/RestClient/RequestFailed.html#M000017","()","",2],["method_missing","RestClient::ResponseForException","classes/RestClient/ResponseForException.html#M000010","(symbol, *args)","",2],["mime_for","RestClient::Payload::Multipart","classes/RestClient/Payload/Multipart.html#M000057","(path)","",2],["net_http_class","RestClient::Request","classes/RestClient/Request.html#M000063","()","",2],["net_http_request_class","RestClient::Request","classes/RestClient/Request.html#M000064","(method)","",2],["new","RestClient::Exception","classes/RestClient/Exception.html#M000011","(response = nil, initial_response_code = nil)","",2],["new","RestClient::Payload::Base","classes/RestClient/Payload/Base.html#M000029","(params)","",2],["new","RestClient::RawResponse","classes/RestClient/RawResponse.html#M000030","(tempfile, net_http_res, args)","",2],["new","RestClient::Redirect","classes/RestClient/Redirect.html#M000019","(url)","",2],["new","RestClient::Request","classes/RestClient/Request.html#M000052","(args)","",2],["new","RestClient::Resource","classes/RestClient/Resource.html#M000068","(url, options={}, backwards_compatibility=nil, &block)","",2],["new","RestClient::SSLCertificateNotVerified","classes/RestClient/SSLCertificateNotVerified.html#M000021","(message)","",2],["new","RestClient::ServerBrokeConnection","classes/RestClient/ServerBrokeConnection.html#M000020","(message = 'Server broke connection')","",2],["open_timeout","RestClient::Resource","classes/RestClient/Resource.html#M000083","()","",2],["options","RestClient","classes/RestClient.html#M000102","(url, headers={}, &block)","",2],["parse_cookie","RestClient::AbstractResponse","classes/RestClient/AbstractResponse.html#M000009","(cookie_content)","Parse a cookie value and return its content in an Hash ",2],["parse_url","RestClient::Request","classes/RestClient/Request.html#M000065","(url)","",2],["parse_url_with_auth","RestClient::Request","classes/RestClient/Request.html#M000066","(url)","",2],["password","RestClient::Resource","classes/RestClient/Resource.html#M000080","()","",2],["patch","Net::HTTP::Protocol","classes/Net/HTTP/Protocol.html#M000022","(path, data, initheader = nil, dest = nil)","Sends a PATCH request to the +path+ and gets a response, as an HTTPResponse object. ",2],["patch","RestClient","classes/RestClient.html#M000098","(url, payload, headers={}, &block)","",2],["patch","RestClient::Resource","classes/RestClient/Resource.html#M000074","(payload, additional_headers={}, &block)","",2],["post","RestClient","classes/RestClient.html#M000097","(url, payload, headers={}, &block)","",2],["post","RestClient::Resource","classes/RestClient/Resource.html#M000072","(payload, additional_headers={}, &block)","",2],["process_payload","RestClient::Request","classes/RestClient/Request.html#M000067","(p=nil, parent_key=nil)","",2],["process_result","RestClient::Request","classes/RestClient/Request.html#M000084","(res, & block)","",2],["process_url_params","RestClient::Request","classes/RestClient/Request.html#M000056","(url, headers)","Extract the query parameters and append them to the url ",2],["put","RestClient","classes/RestClient.html#M000099","(url, payload, headers={}, &block)","",2],["put","RestClient::Resource","classes/RestClient/Resource.html#M000073","(payload, additional_headers={}, &block)","",2],["raw_headers","RestClient::AbstractResponse","classes/RestClient/AbstractResponse.html#M000002","()","The raw headers. ",2],["read","RestClient::Payload::Base","classes/RestClient/Payload/Base.html#M000033","(bytes=nil)","",2],["request","Net::HTTP","classes/Net/HTTP.html#M000024","(req, body=nil, &block)","",2],["reset_before_execution_procs","RestClient","classes/RestClient.html#M000111","()","Reset the procs to be called before each request is executed. ",2],["return!","RestClient::AbstractResponse","classes/RestClient/AbstractResponse.html#M000004","(request = nil, result = nil, & block)","Return the default behavior corresponding to the response code: the response itself for code in 200..206,",2],["send_entity","Net::HTTP::Protocol","classes/Net/HTTP/Protocol.html#M000023","(path, data, initheader, dest, type, &block)","Executes a request which uses a representation and returns its body. ",2],["setup_credentials","RestClient::Request","classes/RestClient/Request.html#M000075","(req)","",2],["short_inspect","RestClient::Payload::Base","classes/RestClient/Payload/Base.html#M000043","()","",2],["size","RestClient::Payload::Base","classes/RestClient/Payload/Base.html#M000039","()","",2],["size","RestClient::Payload::Streamed","classes/RestClient/Payload/Streamed.html#M000045","()","",2],["size","RestClient::RawResponse","classes/RestClient/RawResponse.html#M000035","()","",2],["stringify_headers","RestClient::Request","classes/RestClient/Request.html#M000090","(headers)","Return a hash of headers whose keys are capitalized strings ",2],["timeout","RestClient::Resource","classes/RestClient/Resource.html#M000082","()","",2],["to_i","RestClient::AbstractResponse","classes/RestClient/AbstractResponse.html#M000005","()","",2],["to_s","RestClient::Exception","classes/RestClient/Exception.html#M000015","()","",2],["to_s","RestClient::Payload::Base","classes/RestClient/Payload/Base.html#M000034","(bytes=nil)","Alias for #read",2],["to_s","RestClient::RawResponse","classes/RestClient/RawResponse.html#M000031","()","",2],["to_s","RestClient::RequestFailed","classes/RestClient/RequestFailed.html#M000018","()","",2],["to_s","RestClient::Resource","classes/RestClient/Resource.html#M000078","()","",2],["transmit","RestClient::Request","classes/RestClient/Request.html#M000070","(uri, req, payload, & block)","",2],["type_for_extension","MIME::Types","classes/MIME/Types.html#M000095","(ext)","",2],["type_for_extension","MIME::Types","classes/MIME/Types.html#M000094","(ext)","Return the first found content-type for a value considered as an extension or the value itself ",2],["user","RestClient::Resource","classes/RestClient/Resource.html#M000079","()","",2],["version","RestClient","classes/RestClient.html#M000104","()","",2],["README.rdoc","files/README_rdoc.html","files/README_rdoc.html","","= REST Client -- simple DSL for accessing HTTP and REST resources  A simple HTTP and REST client for",3],["history.md","files/history_md.html","files/history_md.html","","# 1.6.7  - rebuild with 1.8.7 to avoid https://github.com/rubygems/rubygems/pull/57  # 1.6.6  - 1.6.5",3],["rest-client.rb","files/lib/rest-client_rb.html","files/lib/rest-client_rb.html","","More logical way to require 'rest-client' ",3],["rest_client.rb","files/lib/rest_client_rb.html","files/lib/rest_client_rb.html","","This file exists for backward compatbility with require 'rest_client' ",3],["restclient.rb","files/lib/restclient_rb.html","files/lib/restclient_rb.html","","",3],["abstract_response.rb","files/lib/restclient/abstract_response_rb.html","files/lib/restclient/abstract_response_rb.html","","",3],["exceptions.rb","files/lib/restclient/exceptions_rb.html","files/lib/restclient/exceptions_rb.html","","",3],["net_http_ext.rb","files/lib/restclient/net_http_ext_rb.html","files/lib/restclient/net_http_ext_rb.html","","",3],["payload.rb","files/lib/restclient/payload_rb.html","files/lib/restclient/payload_rb.html","","",3],["raw_response.rb","files/lib/restclient/raw_response_rb.html","files/lib/restclient/raw_response_rb.html","","",3],["request.rb","files/lib/restclient/request_rb.html","files/lib/restclient/request_rb.html","","",3],["resource.rb","files/lib/restclient/resource_rb.html","files/lib/restclient/resource_rb.html","","",3],["response.rb","files/lib/restclient/response_rb.html","files/lib/restclient/response_rb.html","","",3]],"searchIndex":["mime","types","net","http","patch","protocol","restclient","abstractresponse","exception","exceptionwithresponse","exceptions","maxredirectsreached","payload","base","multipart","streamed","urlencoded","rawresponse","redirect","request","requestfailed","resource","response","responseforexception","sslcertificatenotverified","serverbrokeconnection","<<()","<<()","<<()","[]()","__request__()","add_before_execution_proc()","beautify_headers()","body()","boundary()","build_stream()","build_stream()","build_stream()","build_stream()","close()","close()","code()","cookies()","create()","create_file_field()","create_log()","create_regular_field()","decode()","default_headers()","delete()","delete()","description()","execute()","execute()","fetch_body()","flatten_params()","flatten_params_array()","follow_redirection()","generate()","get()","get()","handle_key()","handle_key()","has_file?()","has_file_array?()","head()","head()","headers()","headers()","headers()","headers()","headers()","http_body()","http_code()","inspect()","inspect()","length()","length()","log=()","log_request()","log_response()","make_headers()","message()","message()","method_missing()","mime_for()","net_http_class()","net_http_request_class()","new()","new()","new()","new()","new()","new()","new()","new()","open_timeout()","options()","parse_cookie()","parse_url()","parse_url_with_auth()","password()","patch()","patch()","patch()","post()","post()","process_payload()","process_result()","process_url_params()","put()","put()","raw_headers()","read()","request()","reset_before_execution_procs()","return!()","send_entity()","setup_credentials()","short_inspect()","size()","size()","size()","stringify_headers()","timeout()","to_i()","to_s()","to_s()","to_s()","to_s()","to_s()","transmit()","type_for_extension()","type_for_extension()","user()","version()","readme.rdoc","history.md","rest-client.rb","rest_client.rb","restclient.rb","abstract_response.rb","exceptions.rb","net_http_ext.rb","payload.rb","raw_response.rb","request.rb","resource.rb","response.rb"],"longSearchIndex":["lib/restclient/request.rb","mime","lib/restclient/net_http_ext.rb","net","net::http","net::http","lib/restclient.rb","restclient","restclient","restclient","restclient","restclient","restclient","restclient::payload","restclient::payload","restclient::payload","restclient::payload","restclient","restclient","restclient","restclient","restclient","restclient","restclient","restclient","restclient","restclient","restclient","restclient","restclient::resource","net::http","restclient","restclient::abstractresponse","restclient::response","restclient::payload::multipart","restclient::payload::base","restclient::payload::multipart","restclient::payload::streamed","restclient::payload::urlencoded","restclient::payload::base","restclient::payload::multipart","restclient::abstractresponse","restclient::abstractresponse","restclient::response","restclient::payload::multipart","restclient","restclient::payload::multipart","restclient::request","restclient::request","restclient","restclient::resource","restclient::abstractresponse","restclient::request","restclient::request","restclient::request","restclient::payload::base","restclient::payload::base","restclient::abstractresponse","restclient::payload","restclient","restclient::resource","restclient::payload::multipart","restclient::payload::urlencoded","restclient::payload","restclient::payload","restclient","restclient::resource","restclient::abstractresponse","restclient::payload::base","restclient::payload::multipart","restclient::payload::urlencoded","restclient::resource","restclient::exception","restclient::exception","restclient::exception","restclient::payload::base","restclient::payload::base","restclient::payload::streamed","restclient","restclient::request","restclient::request","restclient::request","restclient::exception","restclient::requestfailed","restclient::responseforexception","restclient::payload::multipart","restclient::request","restclient::request","restclient::exception","restclient::payload::base","restclient::rawresponse","restclient::redirect","restclient::request","restclient::resource","restclient::sslcertificatenotverified","restclient::serverbrokeconnection","restclient::resource","restclient","restclient::abstractresponse","restclient::request","restclient::request","restclient::resource","net::http::protocol","restclient","restclient::resource","restclient","restclient::resource","restclient::request","restclient::request","restclient::request","restclient","restclient::resource","restclient::abstractresponse","restclient::payload::base","net::http","restclient","restclient::abstractresponse","net::http::protocol","restclient::request","restclient::payload::base","restclient::payload::base","restclient::payload::streamed","restclient::rawresponse","restclient::request","restclient::resource","restclient::abstractresponse","restclient::exception","restclient::payload::base","restclient::rawresponse","restclient::requestfailed","restclient::resource","restclient::request","mime::types","mime::types","restclient::resource","restclient","files/readme_rdoc.html","files/history_md.html","files/lib/rest-client_rb.html","files/lib/rest_client_rb.html","files/lib/restclient_rb.html","files/lib/restclient/abstract_response_rb.html","files/lib/restclient/exceptions_rb.html","files/lib/restclient/net_http_ext_rb.html","files/lib/restclient/payload_rb.html","files/lib/restclient/raw_response_rb.html","files/lib/restclient/request_rb.html","files/lib/restclient/resource_rb.html","files/lib/restclient/response_rb.html"]}}