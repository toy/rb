var search_data = {"index":{"info":[["BigDecimal","ext/bigdecimal/lib/bigdecimal/util.rb","classes/BigDecimal.html"," < Numeric","   Class and method registration   ",1],["BigMath","ext/bigdecimal/lib/bigdecimal/math.rb","classes/BigMath.html"," < ","Provides mathematical functions. Example: require \"bigdecimal\" require \"bigdecimal/math\" include BigMath",1],["Float","ext/bigdecimal/lib/bigdecimal/util.rb","classes/Float.html"," < Numeric","BigDecimal utility library. To use these functions, require 'bigdecimal/util' The following methods are",1],["Jacobian","ext/bigdecimal/lib/bigdecimal/jacobian.rb","classes/Jacobian.html"," < ","require 'bigdecimal/jacobian' Provides methods to compute the Jacobian matrix of a set of equations at",1],["Kernel","ext/bigdecimal/bigdecimal.c","classes/Kernel.html"," < ","",1],["LUSolve","ext/bigdecimal/lib/bigdecimal/ludcmp.rb","classes/LUSolve.html"," < ","Solves a*x = b for x, using LU decomposition. ",1],["Newton","ext/bigdecimal/lib/bigdecimal/newton.rb","classes/Newton.html"," < ","",1],["Rational","ext/bigdecimal/lib/bigdecimal/util.rb","classes/Rational.html"," < Numeric","",1],["String","ext/bigdecimal/lib/bigdecimal/util.rb","classes/String.html"," < Object","",1],["%","BigDecimal","classes/BigDecimal.html#M000044","(p1)","       Returns the modulus from dividing by b. See divmod.     ",2],["*","BigDecimal","classes/BigDecimal.html#M000041","(p1)","        Multiply by the specified value.          e.g.       c = a.mult(b,n)       c = a * b        ",2],["**","BigDecimal","classes/BigDecimal.html#M000058","(p1)","       Returns the value raised to the power of n. Note that n must be an Integer.       Also available",2],["+","BigDecimal","classes/BigDecimal.html#M000037","(p1)","        Add the specified value.          e.g.       c = a.add(b,n)       c = a + b         digits::",2],["-","BigDecimal","classes/BigDecimal.html#M000038","(p1)","        Subtract the specified value.          e.g.       c = a.sub(b,n)       c = a - b         digits::",2],["/","BigDecimal","classes/BigDecimal.html#M000042","(p1)","        Divide by the specified value.          e.g.       c = a.div(b,n)         digits:: If specified",2],["<","BigDecimal","classes/BigDecimal.html#M000063","(p1)","       Returns true if a is less than b. Values may be coerced to perform the    comparison (see ==,",2],["<=","BigDecimal","classes/BigDecimal.html#M000064","(p1)","       Returns true if a is less than or equal to b. Values may be coerced to     perform the comparison",2],["<=>","BigDecimal","classes/BigDecimal.html#M000059","(p1)","   The comparison operator.    a <=> b is 0 if a == b, 1 if a > b, -1 if a < b.     ",2],["==","BigDecimal","classes/BigDecimal.html#M000060","(p1)","      Tests for value equality; returns true if the values are equal.       The == and === operators",2],["===","BigDecimal","classes/BigDecimal.html#M000061","(p1)","      Tests for value equality; returns true if the values are equal.       The == and === operators",2],[">","BigDecimal","classes/BigDecimal.html#M000065","(p1)","       Returns true if a is greater than b.  Values may be coerced to     perform the comparison (see",2],[">=","BigDecimal","classes/BigDecimal.html#M000066","(p1)","       Returns true if a is greater than or equal to b. Values may be coerced to     perform the comparison",2],["E","BigMath","classes/BigMath.html#M000018","(prec)","Computes e (the base of natural logarithms) to the specified number of digits of precision. ",2],["PI","BigMath","classes/BigMath.html#M000013","(prec)","Computes the value of pi to the specified number of digits of precision. ",2],["_load","BigDecimal","classes/BigDecimal.html#M000025","(p1)","      Internal method used to provide marshalling support. See the Marshal module.     ",2],["abs","BigDecimal","classes/BigDecimal.html#M000050","()","   Returns the absolute value.       BigDecimal('5').abs -> 5       BigDecimal('-3').abs -> 3     ",2],["atan","BigMath","classes/BigMath.html#M000009","(x, prec)","Computes the arctangent of x to the specified number of digits of precision. If x is infinite or NaN,",2],["ceil","BigDecimal","classes/BigDecimal.html#M000056","(...)","       Return the smallest integer greater than or equal to the value, as a BigDecimal.       BigDecimal('3.14159').ceil",2],["coerce","BigDecimal","classes/BigDecimal.html#M000069","(p1)","   The coerce method provides support for Ruby type coercion. It is not    enabled by default.      ",2],["cos","BigMath","classes/BigMath.html#M000007","(x, prec)","Computes the cosine of x to the specified number of digits of precision. If x is infinite or NaN, returns",2],["dfdxi","Jacobian","classes/Jacobian.html#M000001","(f,fx,x,i)","Computes the derivative of f[i] at x[i]. fx is the value of f at x. ",2],["divmod","BigDecimal","classes/BigDecimal.html#M000047","(p1)","   Divides by the specified value, and returns the quotient and modulus    as BigDecimal numbers. The",2],["double_fig","BigDecimal","classes/BigDecimal.html#M000023","()","       The BigDecimal.double_fig class method returns the number of digits a    Float number is allowed",2],["eql?","BigDecimal","classes/BigDecimal.html#M000062","(p1)","      Tests for value equality; returns true if the values are equal.       The == and === operators",2],["exp","BigMath","classes/BigMath.html#M000011","(x, prec)","Computes the value of e (the base of natural logarithms) raised to the  power of x, to the specified",2],["exponent","BigDecimal","classes/BigDecimal.html#M000071","()","   Returns the exponent of the BigDecimal number, as an Integer.       If the number can be represented",2],["finite?","BigDecimal","classes/BigDecimal.html#M000075","()","   Returns True if the value is finite (not NaN or infinite)    ",2],["fix","BigDecimal","classes/BigDecimal.html#M000052","()","   Return the integer part of the number.     ",2],["floor","BigDecimal","classes/BigDecimal.html#M000055","(...)","       Return the largest integer less than or equal to the value, as a BigDecimal.       BigDecimal('3.14159').floor",2],["frac","BigDecimal","classes/BigDecimal.html#M000054","()","   Return the fractional part of the number.     ",2],["infinite?","BigDecimal","classes/BigDecimal.html#M000074","()","   Returns True if the value is infinite    ",2],["inspect","BigDecimal","classes/BigDecimal.html#M000070","()","   Returns debugging information about the value as a string of comma-separated    values in angle brackets",2],["isEqual","Jacobian","classes/Jacobian.html#M000000","(a,b,zero=0.0,e=1.0e-8)","",2],["jacobian","Jacobian","classes/Jacobian.html#M000003","(f,fx,x)","Computes the Jacobian of f at x. fx is the value of f at x. ",2],["limit","BigDecimal","classes/BigDecimal.html#M000022","(...)","        Limit the number of significant digits in newly created BigDecimal      numbers to the specified",2],["log","BigMath","classes/BigMath.html#M000012","(x, prec)","Computes the natural logarithm of x to the specified number of digits  of precision. Returns x if x is",2],["ludecomp","LUSolve","classes/LUSolve.html#M000002","(a,n,zero=0,one=1)","Performs LU decomposition of the n by n matrix a. ",2],["lusolve","LUSolve","classes/LUSolve.html#M000004","(a,b,ps,zero=0.0)","Solves a*x = b for x, using LU decomposition. a is a matrix, b is a constant vector, x is the solution",2],["mode","BigDecimal","classes/BigDecimal.html#M000021","(...)","        Controls handling of arithmetic exceptions and rounding. If no value     is supplied, the current",2],["modulo","BigDecimal","classes/BigDecimal.html#M000045","(p1)","       Returns the modulus from dividing by b. See divmod.     ",2],["nan?","BigDecimal","classes/BigDecimal.html#M000073","()","   Returns True if the value is Not a Number    ",2],["new","BigDecimal","classes/BigDecimal.html#M000020","(...)","        Create a new BigDecimal object.         initial:: The initial value, as a String. Spaces are",2],["nlsolve","Newton","classes/Newton.html#M000010","(f,x)","",2],["nonzero?","BigDecimal","classes/BigDecimal.html#M000068","()","   Returns True if the value is non-zero.    ",2],["norm","Newton","classes/Newton.html#M000008","(fv,zero=0.0)","",2],["power","BigDecimal","classes/BigDecimal.html#M000057","(p1)","       Returns the value raised to the power of n. Note that n must be an Integer.       Also available",2],["precs","BigDecimal","classes/BigDecimal.html#M000027","()","       Returns an Array of two Integer values.       The first value is the current number of significant",2],["quo","BigDecimal","classes/BigDecimal.html#M000043","(p1)","        Divide by the specified value.          e.g.       c = a.div(b,n)         digits:: If specified",2],["remainder","BigDecimal","classes/BigDecimal.html#M000046","(p1)","   Returns the remainder from dividing by the value.       If the values divided are of the same sign,",2],["round","BigDecimal","classes/BigDecimal.html#M000053","(...)","       Round to the nearest 1 (by default), returning the result as a BigDecimal.       BigDecimal('3.14159').round",2],["sign","BigDecimal","classes/BigDecimal.html#M000072","()","   Returns the sign of the value.       Returns a positive value if > 0, a negative value if < 0, and",2],["sin","BigMath","classes/BigMath.html#M000006","(x, prec)","Computes the sine of x to the specified number of digits of precision. If x is infinite or NaN, returns",2],["split","BigDecimal","classes/BigDecimal.html#M000036","()","   Splits a BigDecimal number into four parts, returned as an array of values.       The first value",2],["sqrt","BigDecimal","classes/BigDecimal.html#M000051","(p1)","       Returns the square root of the value.       If n is specified, returns at least that many significant",2],["sqrt","BigMath","classes/BigMath.html#M000005","(x,prec)","Computes the square root of x to the specified number of digits of  precision. BigDecimal.new('2').sqrt(16).to_s",2],["to_d","Float","classes/Float.html#M000014","()","",2],["to_d","Rational","classes/Rational.html#M000019","(nFig=0)","Converts a Rational to a BigDecimal ",2],["to_d","String","classes/String.html#M000015","()","",2],["to_digits","BigDecimal","classes/BigDecimal.html#M000016","()","Converts a BigDecimal to a String of the form \"nnnnnn.mmm\". This method is deprecated; use BigDecimal#to_s(\"F\")",2],["to_f","BigDecimal","classes/BigDecimal.html#M000049","()","   Returns a new Float object having approximately the same value as the    BigDecimal number. Normal",2],["to_i","BigDecimal","classes/BigDecimal.html#M000034","()","   Returns the value as an integer (Fixnum or Bignum).       If the BigNumber is infinity or NaN, returns",2],["to_int","BigDecimal","classes/BigDecimal.html#M000035","()","   Returns the value as an integer (Fixnum or Bignum).       If the BigNumber is infinity or NaN, returns",2],["to_r","BigDecimal","classes/BigDecimal.html#M000017","()","Converts a BigDecimal to a Rational. ",2],["to_s","BigDecimal","classes/BigDecimal.html#M000033","(...)","       Converts the value to a string.       The default format looks like  0.xxxxEnn.       The optional",2],["truncate","BigDecimal","classes/BigDecimal.html#M000076","(...)","       Truncate to the nearest 1, returning the result as a BigDecimal.       BigDecimal('3.14159').truncate",2],["ver","BigDecimal","classes/BigDecimal.html#M000026","()","      Returns the BigDecimal version number.       Ruby 1.8.0 returns 1.0.0.    Ruby 1.8.1 thru 1.8.3",2],["zero?","BigDecimal","classes/BigDecimal.html#M000067","()","   Returns True if the value is zero.    ",2],["README","files/ext/bigdecimal/README.html","files/ext/bigdecimal/README.html","","   Ruby BIGDECIMAL(Variable Precision) extension library.   Copyright (C) 1999  by Shigeo Kobayashi(shigeo@tinyforest.gr.jp)",3],["bigdecimal.c","files/ext/bigdecimal/bigdecimal_c.html","files/ext/bigdecimal/bigdecimal_c.html","","",3],["bigdecimal.h","files/ext/bigdecimal/bigdecimal_h.html","files/ext/bigdecimal/bigdecimal_h.html","","",3],["jacobian.rb","files/ext/bigdecimal/lib/bigdecimal/jacobian_rb.html","files/ext/bigdecimal/lib/bigdecimal/jacobian_rb.html","","require 'bigdecimal/jacobian' Provides methods to compute the Jacobian matrix of a set of equations at",3],["ludcmp.rb","files/ext/bigdecimal/lib/bigdecimal/ludcmp_rb.html","files/ext/bigdecimal/lib/bigdecimal/ludcmp_rb.html","","Solves a*x = b for x, using LU decomposition. ",3],["math.rb","files/ext/bigdecimal/lib/bigdecimal/math_rb.html","files/ext/bigdecimal/lib/bigdecimal/math_rb.html","","Provides mathematical functions. Example: require \"bigdecimal\" require \"bigdecimal/math\" include BigMath",3],["newton.rb","files/ext/bigdecimal/lib/bigdecimal/newton_rb.html","files/ext/bigdecimal/lib/bigdecimal/newton_rb.html","","newton.rb  Solves the nonlinear algebraic equation system f = 0 by Newton's method. This program is not",3],["util.rb","files/ext/bigdecimal/lib/bigdecimal/util_rb.html","files/ext/bigdecimal/lib/bigdecimal/util_rb.html","","BigDecimal utility library. To use these functions, require 'bigdecimal/util' The following methods are",3]],"searchIndex":["bigdecimal","bigmath","float","jacobian","kernel","lusolve","newton","rational","string","%()","*()","**()","+()","-()","/()","<()","<=()","<=>()","==()","===()",">()",">=()","e()","pi()","_load()","abs()","atan()","ceil()","coerce()","cos()","dfdxi()","divmod()","double_fig()","eql?()","exp()","exponent()","finite?()","fix()","floor()","frac()","infinite?()","inspect()","isequal()","jacobian()","limit()","log()","ludecomp()","lusolve()","mode()","modulo()","nan?()","new()","nlsolve()","nonzero?()","norm()","power()","precs()","quo()","remainder()","round()","sign()","sin()","split()","sqrt()","sqrt()","to_d()","to_d()","to_d()","to_digits()","to_f()","to_i()","to_int()","to_r()","to_s()","truncate()","ver()","zero?()","readme","bigdecimal.c","bigdecimal.h","jacobian.rb","ludcmp.rb","math.rb","newton.rb","util.rb"],"longSearchIndex":["ext/bigdecimal/bigdecimal.c","ext/bigdecimal/lib/bigdecimal/math.rb","ext/bigdecimal/lib/bigdecimal/util.rb","ext/bigdecimal/lib/bigdecimal/jacobian.rb","ext/bigdecimal/bigdecimal.c","ext/bigdecimal/lib/bigdecimal/ludcmp.rb","ext/bigdecimal/lib/bigdecimal/newton.rb","ext/bigdecimal/lib/bigdecimal/util.rb","ext/bigdecimal/lib/bigdecimal/util.rb","bigdecimal","bigdecimal","bigdecimal","bigdecimal","bigdecimal","bigdecimal","bigdecimal","bigdecimal","bigdecimal","bigdecimal","bigdecimal","bigdecimal","bigdecimal","bigmath","bigmath","bigdecimal","bigdecimal","bigmath","bigdecimal","bigdecimal","bigmath","jacobian","bigdecimal","bigdecimal","bigdecimal","bigmath","bigdecimal","bigdecimal","bigdecimal","bigdecimal","bigdecimal","bigdecimal","bigdecimal","jacobian","jacobian","bigdecimal","bigmath","lusolve","lusolve","bigdecimal","bigdecimal","bigdecimal","bigdecimal","newton","bigdecimal","newton","bigdecimal","bigdecimal","bigdecimal","bigdecimal","bigdecimal","bigdecimal","bigmath","bigdecimal","bigdecimal","bigmath","float","rational","string","bigdecimal","bigdecimal","bigdecimal","bigdecimal","bigdecimal","bigdecimal","bigdecimal","bigdecimal","bigdecimal","files/ext/bigdecimal/readme.html","files/ext/bigdecimal/bigdecimal_c.html","files/ext/bigdecimal/bigdecimal_h.html","files/ext/bigdecimal/lib/bigdecimal/jacobian_rb.html","files/ext/bigdecimal/lib/bigdecimal/ludcmp_rb.html","files/ext/bigdecimal/lib/bigdecimal/math_rb.html","files/ext/bigdecimal/lib/bigdecimal/newton_rb.html","files/ext/bigdecimal/lib/bigdecimal/util_rb.html"]}}