var search_data = {"index":{"longSearchIndex":["lib/pry/core_extensions.rb","lib/pry.rb","pry","pry","pry","pry","pry","pry::command","pry","pry","pry","pry","pry","pry::helpers","pry::helpers","pry::helpers","pry::helpers","pry","pry","pry","pry","pry","pry","pry::method","pry","pry","pry::pluginmanager","pry::pluginmanager","pry","pry","pry","pry","pry::code","pry::history","pry::historyarray","pry::code","pry::method","pry","pry","pry::historyarray","pry::hooks","pry::hooks","object","pry::helpers::commandhelpers","pry::helpers::commandhelpers","pry::pluginmanager::plugin","pry::hooks","pry::cli","pry::cli","pry::code","pry::commandset","pry::method","pry::commandset","pry::method","pry::method","pry::method","pry::defaultcommands","pry::code","pry::code","pry::command","pry::code","pry::commandset","pry::defaultcommands","pry::code","pry","pry::command","pry::commandset","pry::helpers::text","pry::inputcompleter","pry::blockcommand","pry::classcommand","pry::command","pry::command","pry::command","pry::history","pry::hooks","pry::hooks","pry::history","pry::defaultcommands","pry::helpers::basehelpers","pry::commandset","pry::result","pry::helpers::basehelpers","pry::helpers::commandhelpers","pry::command","pry::command","pry::command","pry::command","pry::command","pry::defaultcommands","pry","pry::historyarray","pry::rbxpath","pry::historyarray","pry::defaultcommands","pry::command","pry::rbxmethod","pry::rbxmethod","pry::rbxmethod","pry::rbxmethod","pry::command","pry::indent","pry::historyarray","pry::commandset","pry::helpers::basehelpers","pry::helpers::text","pry","pry::commandset","pry::commandset","pry","pry::commandset","pry::hooks","pry::hooks","pry::command","pry::commandset","pry::command","pry::command","pry::pluginmanager::plugin","pry::method","pry::method","pry::commandset","pry::historyarray","pry::historyarray","pry::pluginmanager::plugin","pry::indent","pry::hooks","pry","pry::hooks","pry","pry::commandset","pry::helpers::basehelpers","pry::commandset","pry","pry::defaultcommands","pry::defaultcommands","pry::defaultcommands","pry::defaultcommands","pry::defaultcommands","pry::method","pry::method","pry::code","pry::hooks","pry::code","pry::method","pry::method","pry::helpers::basehelpers","pry::pluginmanager","pry::hooks","pry::hooks","pry::helpers::commandhelpers","pry::defaultcommands","pry::code","pry","pry::helpers::basehelpers","pry::blockcommand","pry::classcommand","pry::commandset","pry::helpers::basehelpers","pry::hooks","pry::hooks","pry::command","pry::hooks","pry","pry::config","pry::commandset","pry::commandset","pry","pry::helpers::text","pry::indent","pry::indent","pry","pry","pry","pry::hooks","pry","pry","pry","pry::code","pry::command","pry::command::void_value","pry::historyarray","pry::method","pry::command","pry::helpers::commandhelpers","pry::method","pry::rbxpath","pry::helpers::basehelpers","pry::method","pry","pry","pry::code","pry::historyarray","pry::helpers::basehelpers","pry::commandset","pry::history","pry::pluginmanager::plugin","pry","pry::pluginmanager","pry","pry","pry","pry::pluginmanager","pry::helpers::commandhelpers","pry::command","pry","pry","pry::hooks","pry::hooks","pry::hooks","pry::code","pry::method","pry::method::disowned","pry::pluginmanager::noplugin","pry::wrappedmodule","pry::method","pry::helpers::optionshelpers","pry::helpers::optionshelpers","pry::wrappedmodule","pry::defaultcommands","pry::command","pry::method","pry::method","pry","pry::code","pry::command","pry::commandset","pry::history","pry::historyarray","pry::hooks","pry::indent","pry::method","pry::method::disowned","pry::nocommanderror","pry::pluginmanager","pry::pluginmanager::noplugin","pry::pluginmanager::plugin","pry::result","pry::wrappedmodule","pry::helpers::text","pry::helpers::text","pry::wrappedmodule","pry::helpers::basehelpers","pry::helpers::commandhelpers","pry::helpers::commandhelpers","pry::helpers::commandhelpers","pry","pry","pry::classcommand","pry::command","pry::defaultcommands","pry::defaultcommands","pry::defaultcommands","pry::defaultcommands","pry::defaultcommands","pry::defaultcommands","pry::defaultcommands","pry::method","pry::defaultcommands","pry::method::disowned","pry::helpers::basehelpers","pry::cli","pry::defaultcommands","pry::defaultcommands","pry::pluginmanager","pry","object","object","pry","pry","pry","pry","pry::classcommand","pry::commandset","pry::commandset","pry::defaultcommands","pry::defaultcommands","pry::defaultcommands","pry::defaultcommands","pry::defaultcommands","pry::defaultcommands","pry::defaultcommands","pry::defaultcommands","pry::defaultcommands","pry::defaultcommands","pry::defaultcommands","pry","pry::helpers::commandhelpers","pry::defaultcommands","pry::defaultcommands","pry","pry","pry::defaultcommands","pry","pry::defaultcommands","pry::command","pry::commandset","pry","pry::defaultcommands","pry::cli","pry","pry","pry::helpers::commandhelpers","pry","pry::defaultcommands","pry::defaultcommands","pry::helpers::commandhelpers","pry::helpers::commandhelpers","pry","pry","pry","object","pry::method","pry::method","pry::code","pry::history","pry","pry::history","pry","pry::code","pry::helpers::basehelpers","pry","pry::history","pry","pry","pry::commandset","pry::helpers::commandhelpers","pry","pry","pry","pry","pry::cli","pry::indent","pry","pry::defaultcommands","pry::method","pry::method","pry::wrappedmodule","pry::history","pry::helpers::commandhelpers","pry","pry::command","pry","pry","pry::commandset","pry::rbxpath","pry::rbxpath","pry::method","pry::history","pry::defaultcommands","pry","pry::code","pry::inputcompleter","pry","pry","pry::helpers::basehelpers","pry","pry::classcommand","pry::defaultcommands","pry::defaultcommands","pry::defaultcommands","pry","pry","pry","pry::method","pry::helpers::basehelpers","pry::helpers::basehelpers","pry::method","pry::wrappedmodule","pry::method","pry::wrappedmodule","pry::historyarray","pry::classcommand","pry::method","pry::method","pry::method","pry::method","pry::method","pry","pry::helpers::basehelpers","pry","pry::defaultcommands","pry::defaultcommands","pry::helpers::commandhelpers","pry::rbxpath","pry::helpers::text","pry::method","pry::method","pry::method","pry::helpers::basehelpers","pry::command","pry::method","pry::method","pry::command","pry::helpers::commandhelpers","pry::command","pry::history","pry::historyarray","pry::code","pry::command","pry::code","pry::method","pry::method::disowned","pry::helpers::commandhelpers","pry::hooks","pry","pry::helpers::basehelpers","pry::defaultcommands","pry::commandset","pry","pry::method","pry::command","pry::result","pry::helpers::basehelpers","pry::code","pry::code","pry::helpers::text","pry::code","pry","pry::method","pry::history","files/changelog.html","files/license.html","files/readme_markdown.html","files/todo.html","files/lib/pry_rb.html","files/lib/pry/cli_rb.html","files/lib/pry/code_rb.html","files/lib/pry/command_rb.html","files/lib/pry/command_set_rb.html","files/lib/pry/commands_rb.html","files/lib/pry/completion_rb.html","files/lib/pry/config_rb.html","files/lib/pry/core_extensions_rb.html","files/lib/pry/custom_completions_rb.html","files/lib/pry/default_commands/basic_rb.html","files/lib/pry/default_commands/context_rb.html","files/lib/pry/default_commands/documentation_rb.html","files/lib/pry/default_commands/easter_eggs_rb.html","files/lib/pry/default_commands/gems_rb.html","files/lib/pry/default_commands/input_rb.html","files/lib/pry/default_commands/introspection_rb.html","files/lib/pry/default_commands/ls_rb.html","files/lib/pry/default_commands/shell_rb.html","files/lib/pry/extended_commands/experimental_rb.html","files/lib/pry/helpers_rb.html","files/lib/pry/helpers/base_helpers_rb.html","files/lib/pry/helpers/command_helpers_rb.html","files/lib/pry/helpers/options_helpers_rb.html","files/lib/pry/helpers/text_rb.html","files/lib/pry/history_rb.html","files/lib/pry/history_array_rb.html","files/lib/pry/hooks_rb.html","files/lib/pry/indent_rb.html","files/lib/pry/method_rb.html","files/lib/pry/plugins_rb.html","files/lib/pry/pry_class_rb.html","files/lib/pry/pry_instance_rb.html","files/lib/pry/rbx_method_rb.html","files/lib/pry/rbx_path_rb.html","files/lib/pry/version_rb.html","files/lib/pry/wrapped_module_rb.html"],"info":[["Object","lib/pry/core_extensions.rb","classes/Object.html"," < Object","",1],["Pry","lib/pry/cli.rb","classes/Pry.html"," < Object","",1],["BlockCommand","Pry","classes/Pry/BlockCommand.html"," < Command","A super-class for Commands that are created with a single block. This class ensures that the block is",1],["CLI","Pry","classes/Pry/CLI.html"," < Object","Manage the processing of command line options ",1],["ClassCommand","Pry","classes/Pry/ClassCommand.html"," < Command","A super-class ofr Commands with structure. This class implements the bare-minimum functionality that",1],["Code","Pry","classes/Pry/Code.html"," < Object","`Pry::Code` is a class that encapsulates lines of source code and their line numbers and formats them",1],["Command","Pry","classes/Pry/Command.html"," < Object","The super-class of all commands, new commands should be created by calling {Pry::CommandSet#command}",1],["VOID_VALUE","Pry::Command","classes/Pry/Command/VOID_VALUE.html"," < ","",1],["CommandSet","Pry","classes/Pry/CommandSet.html"," < Object","This class is used to create sets of commands. Commands can be imported from different sets, aliased,",1],["Config","Pry","classes/Pry/Config.html"," < OpenStruct","",1],["DefaultCommands","Pry","classes/Pry/DefaultCommands.html"," < ","",1],["ExtendedCommands","Pry","classes/Pry/ExtendedCommands.html"," < ","",1],["Helpers","Pry","classes/Pry/Helpers.html"," < ","",1],["BaseHelpers","Pry::Helpers","classes/Pry/Helpers/BaseHelpers.html"," < ","",1],["CommandHelpers","Pry::Helpers","classes/Pry/Helpers/CommandHelpers.html"," < ","",1],["OptionsHelpers","Pry::Helpers","classes/Pry/Helpers/OptionsHelpers.html"," < ","",1],["Text","Pry::Helpers","classes/Pry/Helpers/Text.html"," < ","The methods defined on {Text} are available to custom commands via {Pry::Command#text}. ",1],["History","Pry","classes/Pry/History.html"," < Object","The History class is responsible for maintaining the user's input history, both internally and within",1],["HistoryArray","Pry","classes/Pry/HistoryArray.html"," < Object","A history array is an array to which you can only add elements. Older entries are removed progressively,",1],["Hooks","Pry","classes/Pry/Hooks.html"," < Object","Implements a hooks system for Pry. A hook is a callable that is associated with an event. A number of",1],["Indent","Pry","classes/Pry/Indent.html"," < Object","Pry::Indent is a class that can be used to indent a number of lines containing Ruby code similar as to",1],["InputCompleter","Pry","classes/Pry/InputCompleter.html"," < ","Implements tab completion for Readline in Pry ",1],["Method","Pry","classes/Pry/Method.html"," < Object","",1],["Disowned","Pry::Method","classes/Pry/Method/Disowned.html"," < Method","A Disowned Method is one that's been removed from the class on which it was defined. e.g. class C def",1],["NoCommandError","Pry","classes/Pry/NoCommandError.html"," < StandardError","",1],["PluginManager","Pry","classes/Pry/PluginManager.html"," < Object","",1],["NoPlugin","Pry::PluginManager","classes/Pry/PluginManager/NoPlugin.html"," < Object","Placeholder when no associated gem found, displays warning ",1],["Plugin","Pry::PluginManager","classes/Pry/PluginManager/Plugin.html"," < Object","",1],["RbxMethod","Pry","classes/Pry/RbxMethod.html"," < ","",1],["RbxPath","Pry","classes/Pry/RbxPath.html"," < ","",1],["Result","Pry","classes/Pry/Result.html"," < Object","Wraps the return result of process_commands, indicates if the result IS a command and what kind of command",1],["WrappedModule","Pry","classes/Pry/WrappedModule.html"," < Object","",1],["<<","Pry::Code","classes/Pry/Code.html#M000011","(line, line_num=nil)","Alias for #push",2],["<<","Pry::History","classes/Pry/History.html#M000217","(line)","Alias for #push",2],["<<","Pry::HistoryArray","classes/Pry/HistoryArray.html#M000215","(value)","Pushes an object at the end of the array @param [Object] value Object to be added ",2],["==","Pry::Code","classes/Pry/Code.html#M000041","(other)","Two `Code` objects are equal if they contain the same lines with the same numbers. Otherwise, call `to_s`",2],["==","Pry::Method","classes/Pry/Method.html#M000317","(obj)","@return [Boolean] ",2],["Code","Pry","classes/Pry.html#M000005","(obj)","Convert the given object into an instance of `Pry::Code`, if it isn't already one. @param [Code, Method,",2],["Method","Pry","classes/Pry.html#M000267","(obj)","If the given object is a `Pry::Method`, return it unaltered. If it's anything else, return it wrapped",2],["[]","Pry::HistoryArray","classes/Pry/HistoryArray.html#M000220","(index_or_range, size = nil)","@overload [](index) @param [Integer] index Index of the item to access. @return [Object, nil] Item at",2],["[]","Pry::Hooks","classes/Pry/Hooks.html#M000241","(event_name)","FIXME: This is a hack to alert people of the new API. ",2],["[]=","Pry::Hooks","classes/Pry/Hooks.html#M000242","(event_name, callable)","FIXME: This is a hack to alert people of the new API. ",2],["__binding__","Object","classes/Object.html#M000098","()","Return a binding object for the receiver. ",2],["absolute_index_number","Pry::Helpers::CommandHelpers","classes/Pry/Helpers/CommandHelpers.html#M000201","(line_number, array_length)","",2],["absolute_index_range","Pry::Helpers::CommandHelpers","classes/Pry/Helpers/CommandHelpers.html#M000202","(range_or_number, array_length)","",2],["activate!","Pry::PluginManager::Plugin","classes/Pry/PluginManager/Plugin.html#M000268","()","Activate the plugin (require the gem - enables/loads the plugin immediately at point of call, even if",2],["add_hook","Pry::Hooks","classes/Pry/Hooks.html#M000249","(event_name, hook_name, callable=nil, &block)","Add a new hook to be executed for the `name` even. @param [Symbol] event_name The name of the event.",2],["add_options","Pry::CLI","classes/Pry/CLI.html#M000000","(&block)","Add another set of CLI options (a Slop block) ",2],["add_plugin_options","Pry::CLI","classes/Pry/CLI.html#M000001","()","Bring in options defined in plugins ",2],["after","Pry::Code","classes/Pry/Code.html#M000016","(line_num, lines=1)","Remove all lines except for the `lines` after and excluding `line_num`. @param [Fixnum] line_num @param",2],["after_command","Pry::CommandSet","classes/Pry/CommandSet.html#M000070","(name, &block)","Execute a block of code after a command is invoked. The block also gets access to parameters that will",2],["alias?","Pry::Method","classes/Pry/Method.html#M000316","()","@return [Boolean] Is the method definitely an alias? ",2],["alias_command","Pry::CommandSet","classes/Pry/CommandSet.html#M000078","(new_name, old_name, desc=\"\")","Aliases a command @param [String] new_name New name of the command. @param [String] old_name Old name",2],["all_from_class","Pry::Method","classes/Pry/Method.html#M000278","(klass)","Get all of the instance methods of a `Class` or `Module` @param [Class,Module] klass @return [Array[Pry::Method]]",2],["all_from_common","Pry::Method","classes/Pry/Method.html#M000282","(obj, method_type)","See all_from_class and all_from_obj. If method_type is :instance_method, obj must be a `Class` or a `Module`",2],["all_from_obj","Pry::Method","classes/Pry/Method.html#M000279","(obj)","Get all of the methods on an `Object` @param [Object] obj @return [Array[Pry::Method]] ",2],["all_methods","Pry::DefaultCommands","classes/Pry/DefaultCommands.html#M000144","(obj)","Get all the methods that we'll want to output ",2],["alter","Pry::Code","classes/Pry/Code.html#M000044","(&blk)","An abstraction of the `dup.instance_eval` pattern used throughout this class. ",2],["around","Pry::Code","classes/Pry/Code.html#M000015","(line_num, lines=1)","Remove all lines except for the `lines` on either side of and including `line_num`. @param [Fixnum] line_num",2],["banner","Pry::Command","classes/Pry/Command.html#M000026","(arg=nil)","Define or get the command's banner ",2],["before","Pry::Code","classes/Pry/Code.html#M000014","(line_num, lines=1)","Remove all lines except for the `lines` up to and excluding `line_num`. @param [Fixnum] line_num @param",2],["before_command","Pry::CommandSet","classes/Pry/CommandSet.html#M000069","(name, &block)","Execute a block of code before a command is invoked. The block also gets access to parameters that will",2],["below_ceiling","Pry::DefaultCommands","classes/Pry/DefaultCommands.html#M000146","(obj)","Get a lambda that can be used with .take_while to prevent over-eager traversal of the Object's ancestry",2],["between","Pry::Code","classes/Pry/Code.html#M000013","(start_line, end_line=nil)","Remove all lines that aren't in the given range, expressed either as a `Range` object or a first and",2],["binding_for","Pry","classes/Pry.html#M000333","(target)","Return a `Binding` object for `target` or return `target` if it is already a `Binding`. In the case where",2],["block","Pry::Command","classes/Pry/Command.html#M000029","()","",2],["block_command","Pry::CommandSet","classes/Pry/CommandSet.html#M000060","(name, description=\"No description.\", options={}, &block)","Defines a new Pry command. @param [String, Regexp] name The name of the command. Can be Regexp as well",2],["bold","Pry::Helpers::Text","classes/Pry/Helpers/Text.html#M000204","(text)","Returns _text_ as bold text for use on a terminal. _Pry.color_ must be true for this method to perform",2],["build_completion_proc","Pry::InputCompleter","classes/Pry/InputCompleter.html#M000092","(target, commands=[\"\"])","Return a new completion proc for use by Readline. @param [Binding] target The current binding context.",2],["call","Pry::BlockCommand","classes/Pry/BlockCommand.html#M000061","(*args)","Call the block that was registered with this command. @param *String  the arguments passed @return Object",2],["call","Pry::ClassCommand","classes/Pry/ClassCommand.html#M000064","(*args)","Set up {opts} and {args}, and then call {process} This function will display help if necessary. @param",2],["call_safely","Pry::Command","classes/Pry/Command.html#M000054","(*args)","Run the command with the given {args}. This is a public wrapper around {#call} which ensures all preconditions",2],["call_with_hooks","Pry::Command","classes/Pry/Command.html#M000058","(*args)","Run the {#call} method and all the registered hooks. @param *String  the arguments to #{call} @return",2],["check_for_command_name_collision","Pry::Command","classes/Pry/Command.html#M000051","(command_name_match, arg_string)","Display a warning if a command collides with a local/method in the current scope. @param [String] command_name_match",2],["clear","Pry::History","classes/Pry/History.html#M000218","()","Clear all history. Anything the user entered before this point won't be saved, but anything they put",2],["clear","Pry::Hooks","classes/Pry/Hooks.html#M000258","(event_name)","Alias for #delete_hooks",2],["clear_all","Pry::Hooks","classes/Pry/Hooks.html#M000259","()","Remove all events and hooks, clearing out the Pry::Hooks instance completely. @example my_hooks = Pry::Hooks.new.add_hook(:before_session,",2],["clear_readline","Pry::History","classes/Pry/History.html#M000228","()","The default clearer. Clears Readline::HISTORY. ",2],["color","Pry::DefaultCommands","classes/Pry/DefaultCommands.html#M000155","(type, str)","Color output based on config.ls.*_color ",2],["colorize_code","Pry::Helpers::BaseHelpers","classes/Pry/Helpers/BaseHelpers.html#M000173","(code)","",2],["command","Pry::CommandSet","classes/Pry/CommandSet.html#M000063","(name, description=\"No description.\", options={}, &block)","Alias for #block_command",2],["command?","Pry::Result","classes/Pry/Result.html#M000093","()","Is the result a command? @return [Boolean] ",2],["command_dependencies_met?","Pry::Helpers::BaseHelpers","classes/Pry/Helpers/BaseHelpers.html#M000168","(options)","",2],["command_error","Pry::Helpers::CommandHelpers","classes/Pry/Helpers/CommandHelpers.html#M000185","(message, omit_help, klass=CommandError)","",2],["command_name","Pry::Command","classes/Pry/Command.html#M000032","()","",2],["command_options","Pry::Command","classes/Pry/Command.html#M000030","()","",2],["command_options","Pry::Command","classes/Pry/Command.html#M000025","(arg=nil)","Define or get the command's options ",2],["command_regex","Pry::Command","classes/Pry/Command.html#M000039","()","",2],["commands","Pry::Command","classes/Pry/Command.html#M000045","()","",2],["comment_expression_result_for_gist","Pry::DefaultCommands","classes/Pry/DefaultCommands.html#M000114","(result)","",2],["complete_expression?","Pry","classes/Pry.html#M000388","(str)","Determine if a string of code is a complete Ruby expression. @param [String] code The code to validate.",2],["convert_index","Pry::HistoryArray","classes/Pry/HistoryArray.html#M000232","(n)","",2],["convert_path_to_full","Pry::RbxPath","classes/Pry/RbxPath.html#M000341","(path)","",2],["convert_range","Pry::HistoryArray","classes/Pry/HistoryArray.html#M000233","(range)","",2],["convert_to_range","Pry::DefaultCommands","classes/Pry/DefaultCommands.html#M000113","(n)","",2],["convert_to_regex","Pry::Command","classes/Pry/Command.html#M000040","(obj)","",2],["core?","Pry::RbxMethod","classes/Pry/RbxMethod.html#M000336","()","",2],["core_code","Pry::RbxMethod","classes/Pry/RbxMethod.html#M000337","()","",2],["core_doc","Pry::RbxMethod","classes/Pry/RbxMethod.html#M000338","()","",2],["core_path_line","Pry::RbxMethod","classes/Pry/RbxMethod.html#M000339","()","",2],["correct_arg_arity","Pry::Command","classes/Pry/Command.html#M000059","(arity, args)","Fix the number of arguments we pass to a block to avoid arity warnings. @param Number  the arity of the",2],["correct_indentation","Pry::Indent","classes/Pry/Indent.html#M000252","(full_line, overhang=0)","Return a string which, when printed, will rewrite the previous line with the correct indentation. Mostly",2],["count","Pry::HistoryArray","classes/Pry/HistoryArray.html#M000224","()","Alias for #size",2],["create_command","Pry::CommandSet","classes/Pry/CommandSet.html#M000066","(name, description=\"No description.\", options={}, &block)","Defines a new Pry command class. @param [String, Regexp] name The name of the command. Can be Regexp",2],["create_command_stub","Pry::Helpers::BaseHelpers","classes/Pry/Helpers/BaseHelpers.html#M000171","(names, description, options, block)","",2],["default","Pry::Helpers::Text","classes/Pry/Helpers/Text.html#M000205","(text)","Returns _text_ in the default foreground colour. Use this instead of \"black\" or \"white\" when you mean",2],["default_editor_for_platform","Pry","classes/Pry.html#M000311","()","",2],["default_options","Pry::CommandSet","classes/Pry/CommandSet.html#M000087","(name)","",2],["define_default_commands","Pry::CommandSet","classes/Pry/CommandSet.html#M000088","()","",2],["delegate_accessors","Pry","classes/Pry.html#M000283","(delagatee, *names)","convenience method ",2],["delete","Pry::CommandSet","classes/Pry/CommandSet.html#M000074","(*names)","Removes some commands from the set @param [Array<String>] names name of the commands to remove ",2],["delete_hook","Pry::Hooks","classes/Pry/Hooks.html#M000256","(event_name, hook_name)","Delete a hook for an event. @param [Symbol] event_name The name of the event. @param [Symbol] hook_name",2],["delete_hooks","Pry::Hooks","classes/Pry/Hooks.html#M000257","(event_name)","Clear all hooks functions for a given event. @param [String] event_name The name of the event. @example",2],["dependencies_met?","Pry::Command","classes/Pry/Command.html#M000057","()","Are all the gems required to use this command installed? @return  Boolean ",2],["desc","Pry::CommandSet","classes/Pry/CommandSet.html#M000080","(name, description=nil)","Sets or gets the description for a command (replacing the old description). Returns current description",2],["description","Pry::Command","classes/Pry/Command.html#M000028","()","",2],["description","Pry::Command","classes/Pry/Command.html#M000021","(arg=nil)","Define or get the command's description ",2],["disable!","Pry::PluginManager::Plugin","classes/Pry/PluginManager/Plugin.html#M000264","()","Disable a plugin. (prevents plugin from being loaded, cannot disable an already activated plugin) ",2],["doc","Pry::Method","classes/Pry/Method.html#M000298","()","@return [String, nil] The documentation for the method, or `nil` if it's unavailable. @raise [CommandError]",2],["dynamically_defined?","Pry::Method","classes/Pry/Method.html#M000314","()","@return [Boolean] Was the method defined outside a source file? ",2],["each","Pry::CommandSet","classes/Pry/CommandSet.html#M000073","(&block)","",2],["each","Pry::HistoryArray","classes/Pry/HistoryArray.html#M000229","()","",2],["empty?","Pry::HistoryArray","classes/Pry/HistoryArray.html#M000226","()","",2],["enable!","Pry::PluginManager::Plugin","classes/Pry/PluginManager/Plugin.html#M000265","()","Enable a plugin. (does not load it immediately but puts on 'white list' to be loaded) ",2],["end_of_statement?","Pry::Indent","classes/Pry/Indent.html#M000251","(last_token, last_kind)","If the code just before an \"if\" or \"while\" token on a line looks like the end of a statement, then we",2],["errors","Pry::Hooks","classes/Pry/Hooks.html#M000240","()","",2],["exec_hook","Pry","classes/Pry.html#M000374","(name, *args, &block)","Execute the specified hook. @param [Symbol] name The hook name to execute @param [*Object] args The arguments",2],["exec_hook","Pry::Hooks","classes/Pry/Hooks.html#M000250","(event_name, *args, &block)","Execute the list of hooks for the `event_name` event. @param [Symbol] event_name The name of the event.",2],["extract_file_and_line","Pry","classes/Pry.html#M000142","()","",2],["find_command","Pry::CommandSet","classes/Pry/CommandSet.html#M000083","(val)","Find a command that matches the given line @param [String]  the line that may be a command invocation",2],["find_command","Pry::Helpers::BaseHelpers","classes/Pry/Helpers/BaseHelpers.html#M000165","(name)","",2],["find_command_by_name_or_listing","Pry::CommandSet","classes/Pry/CommandSet.html#M000077","(name_or_listing)","@param [String, Regexp] name_or_listing The name or listing name of the command to retrieve. @return",2],["fix_coderay_colors","Pry","classes/Pry.html#M000329","()","To avoid mass-confusion, we change the default colour of \"white\" to \"blue\" enabling global legibility",2],["format_constants","Pry::DefaultCommands","classes/Pry/DefaultCommands.html#M000149","(mod, constants)","",2],["format_globals","Pry::DefaultCommands","classes/Pry/DefaultCommands.html#M000150","(globals)","",2],["format_locals","Pry::DefaultCommands","classes/Pry/DefaultCommands.html#M000153","(locals)","",2],["format_methods","Pry::DefaultCommands","classes/Pry/DefaultCommands.html#M000147","(methods)","Format and colourise a list of methods. ",2],["format_variables","Pry::DefaultCommands","classes/Pry/DefaultCommands.html#M000148","(type, vars)","",2],["from_binding","Pry::Method","classes/Pry/Method.html#M000273","(b)","Given a `Binding`, try to extract the `::Method` it originated from and use it to instantiate a `Pry::Method`.",2],["from_class","Pry::Method","classes/Pry/Method.html#M000276","(klass, name)","Given a `Class` or `Module` and the name of a method, try to instantiate a `Pry::Method` containing the",2],["from_file","Pry::Code","classes/Pry/Code.html#M000006","(fn, code_type=nil)","Instantiate a `Code` object containing code loaded from a file or Pry's line buffer. @param [String]",2],["from_hash","Pry::Hooks","classes/Pry/Hooks.html#M000234","(hash)","Converts a hash to a `Pry::Hooks` instance. All hooks defined this way are anonymous. This functionality",2],["from_method","Pry::Code","classes/Pry/Code.html#M000007","(meth, start_line=nil)","Instantiate a `Code` object containing code extracted from a `::Method`, `UnboundMethod`, `Proc`, or",2],["from_obj","Pry::Method","classes/Pry/Method.html#M000277","(obj, name)","Given an object and the name of a method, try to instantiate a `Pry::Method` containing the method of",2],["from_str","Pry::Method","classes/Pry/Method.html#M000271","(name, target=TOPLEVEL_BINDING, options={})","Given a string representing a method name and optionally a binding to search in, find and return the",2],["gem_installed?","Pry::Helpers::BaseHelpers","classes/Pry/Helpers/BaseHelpers.html#M000166","(gem_name)","",2],["gem_located?","Pry::PluginManager","classes/Pry/PluginManager.html#M000275","(gem_name)","",2],["get_hook","Pry::Hooks","classes/Pry/Hooks.html#M000254","(event_name, hook_name)","Return a specific hook for a given event. @param [Symbol] event_name The name of the event. @param [Symbol[",2],["get_hooks","Pry::Hooks","classes/Pry/Hooks.html#M000255","(event_name)","Return the hash of hook names / hook functions for a given event. (Note that modifying the returned hash",2],["get_method_or_raise","Pry::Helpers::CommandHelpers","classes/Pry/Helpers/CommandHelpers.html#M000184","(name, target, opts={}, omit_help=false)","",2],["gist_file_extension","Pry::DefaultCommands","classes/Pry/DefaultCommands.html#M000112","(file_name)","",2],["grep","Pry::Code","classes/Pry/Code.html#M000017","(pattern)","Remove all lines that don't match the given `pattern`. @param [Regexp] pattern @return [Code] ",2],["handle_read_errors","Pry","classes/Pry.html#M000381","()","Manage switching of input objects on encountering EOFErrors ",2],["heading","Pry::Helpers::BaseHelpers","classes/Pry/Helpers/BaseHelpers.html#M000175","(text)","formatting ",2],["help","Pry::BlockCommand","classes/Pry/BlockCommand.html#M000062","()","",2],["help","Pry::ClassCommand","classes/Pry/ClassCommand.html#M000065","()","Return the help generated by Slop for this command. ",2],["helpers","Pry::CommandSet","classes/Pry/CommandSet.html#M000081","(&block)","Defines helpers methods for this command sets. Those helpers are only defined in this command set. @yield",2],["highlight","Pry::Helpers::BaseHelpers","classes/Pry/Helpers/BaseHelpers.html#M000174","(string, regexp, highlight_color=:bright_yellow)","",2],["hook_count","Pry::Hooks","classes/Pry/Hooks.html#M000253","(event_name)","Return the number of hook functions registered for the `event_name` event. @param [Symbol] event_name",2],["hook_exists?","Pry::Hooks","classes/Pry/Hooks.html#M000260","(event_name, hook_name)","@param [Symbol] event_name Name of the event. @param [Symbol] hook_name Name of the hook. @return [Boolean]",2],["hooks","Pry::Command","classes/Pry/Command.html#M000038","()","Store hooks to be run before or after the command body. @see {Pry::CommandSet#before_command} @see {Pry::CommandSet#after_command}",2],["hooks","Pry::Hooks","classes/Pry/Hooks.html#M000239","()","",2],["hooks=","Pry","classes/Pry.html#M000344","(v)","FIXME: This is a hack to alert people of the new API. @param [Pry::Hooks] v Only accept `Pry::Hooks`",2],["hooks=","Pry::Config","classes/Pry/Config.html#M000095","(v)","FIXME: This is a hack to alert people of the new API. @param [Pry::Hooks] v Only accept `Pry::Hooks`",2],["import","Pry::CommandSet","classes/Pry/CommandSet.html#M000075","(*sets)","Imports all the commands from one or more sets. @param [Array<CommandSet>] sets Command sets, all of",2],["import_from","Pry::CommandSet","classes/Pry/CommandSet.html#M000076","(set, *names)","Imports some commands from a set @param [CommandSet] set Set to import commands from @param [Array<String>]",2],["incomplete_user_input_exception?","Pry","classes/Pry.html#M000389","(ex)","Check whether the exception indicates that the user should input more. @param [SyntaxError] the exception",2],["indent","Pry::Helpers::Text","classes/Pry/Helpers/Text.html#M000209","(text, chars)","Returns _text_ indented by _chars_ spaces. @param [String] text @param [Fixnum] chars ",2],["indent","Pry::Indent","classes/Pry/Indent.html#M000243","(input)","Indents a string and returns it. This string can either be a single line or multiple ones. @example str",2],["indentation_delta","Pry::Indent","classes/Pry/Indent.html#M000246","(tokens)","Get the change in indentation indicated by the line. By convention, you remove indent from the line containing",2],["init","Pry","classes/Pry.html#M000330","()","Basic initialization. ",2],["initial_session?","Pry","classes/Pry.html#M000308","()","@return [Boolean] Whether this is the first time a Pry session has been started since loading the Pry",2],["initial_session_setup","Pry","classes/Pry.html#M000296","()","Do basic setup for initial session. Including: loading .pryrc, loading plugins, loading requires, and",2],["initialize_copy","Pry::Hooks","classes/Pry/Hooks.html#M000238","(orig)","Ensure that duplicates have their @hooks object ",2],["initialize_special_locals","Pry","classes/Pry.html#M000353","(target)","Make sure special locals exist at start of session ",2],["inject_local","Pry","classes/Pry.html#M000350","(name, value, b)","Injects a local variable into the provided binding. @param [String] name The name of the local to inject.",2],["inject_special_locals","Pry","classes/Pry.html#M000354","(target)","",2],["inspect","Pry::Code","classes/Pry/Code.html#M000023","()","@return [String] ",2],["inspect","Pry::Command","classes/Pry/Command.html#M000033","()","",2],["inspect","Pry::Command::VOID_VALUE","classes/Pry/Command/VOID_VALUE.html#M000020","()","give it a nice inspect ",2],["inspect","Pry::HistoryArray","classes/Pry/HistoryArray.html#M000231","()","",2],["instance_resolution_order","Pry::Method","classes/Pry/Method.html#M000281","(klass)","Get every `Class` and `Module`, in order, that will be checked when looking for methods on instances",2],["interpolate_string","Pry::Command","classes/Pry/Command.html#M000050","(str)","Revaluate the string (str) and perform interpolation. @param [String] str The string to reevaluate with",2],["invoke_editor","Pry::Helpers::CommandHelpers","classes/Pry/Helpers/CommandHelpers.html#M000192","(file, line)","",2],["is_a?","Pry::Method","classes/Pry/Method.html#M000318","(klass)","@param [Class] klass @return [Boolean] ",2],["is_core_path?","Pry::RbxPath","classes/Pry/RbxPath.html#M000340","(path)","",2],["jruby?","Pry::Helpers::BaseHelpers","classes/Pry/Helpers/BaseHelpers.html#M000178","()","are we on Jruby platform? ",2],["kind_of?","Pry::Method","classes/Pry/Method.html#M000319","(klass)","Alias for #is_a?",2],["last_exception=","Pry","classes/Pry.html#M000376","(ex)","Set the last exception for a session. @param [Exception] ex ",2],["last_result_is_exception?","Pry","classes/Pry.html#M000380","()","@return [Boolean] True if the last result is an exception that was raised, as opposed to simply an instance",2],["length","Pry::Code","classes/Pry/Code.html#M000036","()","Return the number of lines stored. @return [Fixnum] ",2],["length","Pry::HistoryArray","classes/Pry/HistoryArray.html#M000225","()","Alias for #size",2],["lesspipe","Pry::Helpers::BaseHelpers","classes/Pry/Helpers/BaseHelpers.html#M000188","(*args)","Create scrollable output via less! This command runs `less` in a subprocess, and gives you the IO to",2],["list_commands","Pry::CommandSet","classes/Pry/CommandSet.html#M000082","()","@return [Array] The list of commands provided by the command set. ",2],["load","Pry::History","classes/Pry/History.html#M000212","()","Load the input history using `History.loader`. @return [Integer] The number of lines loaded ",2],["load_cli_options","Pry::PluginManager::Plugin","classes/Pry/PluginManager/Plugin.html#M000266","()","Load the Command line options defined by this plugin (if they exist) ",2],["load_history","Pry","classes/Pry.html#M000305","()","Load Readline history if required. ",2],["load_plugins","Pry::PluginManager","classes/Pry/PluginManager.html#M000274","()","Require all enabled plugins, disabled plugins are skipped. ",2],["load_rc","Pry","classes/Pry.html#M000288","()","Load the rc files given in the `Pry::RC_FILES` array. This method can also be used to reload the files",2],["load_requires","Pry","classes/Pry.html#M000294","()","Load any Ruby files specified with the -r flag on the command line. ",2],["load_traps","Pry","classes/Pry.html#M000295","()","Trap interrupts on jruby, and make them behave like MRI so we can catch them. ",2],["locate_plugins","Pry::PluginManager","classes/Pry/PluginManager.html#M000270","()","Find all installed Pry plugins and store them in an internal array. ",2],["make_header","Pry::Helpers::CommandHelpers","classes/Pry/Helpers/CommandHelpers.html#M000186","(meth, content=meth.source)","",2],["matches?","Pry::Command","classes/Pry/Command.html#M000037","(val)","Should this command be called for the given line? @param String  a line input at the REPL @return Boolean",2],["memory_size","Pry","classes/Pry.html#M000351","()","@return [Integer] The maximum amount of objects remembered by the inp and out arrays. Defaults to 100.",2],["memory_size=","Pry","classes/Pry.html#M000352","(size)","",2],["merge","Pry::Hooks","classes/Pry/Hooks.html#M000248","(other)","Return a new `Pry::Hooks` instance containing a merge of the contents of two `Pry:Hooks` instances, @param",2],["merge!","Pry::Hooks","classes/Pry/Hooks.html#M000244","(other)","Destructively merge the contents of two `Pry:Hooks` instances. @param [Pry::Hooks] other The `Pry::Hooks`",2],["merge_arrays","Pry::Hooks","classes/Pry/Hooks.html#M000245","(array1, array2)","",2],["method_missing","Pry::Code","classes/Pry/Code.html#M000042","(name, *args, &blk)","Forward any missing methods to the output of `#to_s`. ",2],["method_missing","Pry::Method","classes/Pry/Method.html#M000321","(method_name, *args, &block)","Delegate any unknown calls to the wrapped method. ",2],["method_missing","Pry::Method::Disowned","classes/Pry/Method/Disowned.html#M000335","(meth_name, *args, &block)","Raise a more useful error message instead of trying to forward to nil. ",2],["method_missing","Pry::PluginManager::NoPlugin","classes/Pry/PluginManager/NoPlugin.html#M000262","(*args)","",2],["method_missing","Pry::WrappedModule","classes/Pry/WrappedModule.html#M000366","(method_name, *args, &block)","Forward method invocations to the wrapped module ",2],["method_name_from_first_line","Pry::Method","classes/Pry/Method.html#M000328","(first_ln)","@param [String] first_ln The first line of a method definition. @return [String, nil] ",2],["method_object","Pry::Helpers::OptionsHelpers","classes/Pry/Helpers/OptionsHelpers.html#M000196","()","Get the method object parsed by the slop instance ",2],["method_options","Pry::Helpers::OptionsHelpers","classes/Pry/Helpers/OptionsHelpers.html#M000194","(opt)","Add method options to the Slop instance ",2],["method_prefix","Pry::WrappedModule","classes/Pry/WrappedModule.html#M000361","()","The prefix that would appear before methods defined on this class. i.e. the \"String.\" or \"String#\" in",2],["mode","Pry::DefaultCommands","classes/Pry/DefaultCommands.html#M000158","()","",2],["name","Pry::Command","classes/Pry/Command.html#M000027","()","Make those properties accessible to instances ",2],["name","Pry::Method","classes/Pry/Method.html#M000289","()","Get the name of the method as a String, regardless of the underlying Method#name type. @return [String]",2],["name_with_owner","Pry::Method","classes/Pry/Method.html#M000292","()","Get the name of the method including the class on which it was defined. @example method(:puts).method_name",2],["new","Pry","classes/Pry.html#M000345","(options={})","Create a new `Pry` object. @param [Hash] options The optional configuration parameters. @option options",2],["new","Pry::Code","classes/Pry/Code.html#M000009","(lines=[], start_line=1, code_type=:ruby)","Instantiate a `Code` object containing code from the given `Array`, `String`, or `IO`. The first line",2],["new","Pry::Command","classes/Pry/Command.html#M000048","(context={})","Instantiate a command, in preparation for calling it. @param Hash context  The runtime context to use",2],["new","Pry::CommandSet","classes/Pry/CommandSet.html#M000056","(*imported_sets, &block)","@param [Array<CommandSet>] imported_sets Sets which will be imported automatically @yield Optional block",2],["new","Pry::History","classes/Pry/History.html#M000210","()","",2],["new","Pry::HistoryArray","classes/Pry/HistoryArray.html#M000214","(size)","@param [Integer] size Maximum amount of objects in the array ",2],["new","Pry::Hooks","classes/Pry/Hooks.html#M000235","()","",2],["new","Pry::Indent","classes/Pry/Indent.html#M000236","()","",2],["new","Pry::Method","classes/Pry/Method.html#M000287","(method, known_info={})","A new instance of `Pry::Method` wrapping the given `::Method`, `UnboundMethod`, or `Proc`. @param [::Method,",2],["new","Pry::Method::Disowned","classes/Pry/Method/Disowned.html#M000331","(*args)","Create a new Disowned method. @param [Object] receiver @param [String] method_name ",2],["new","Pry::NoCommandError","classes/Pry/NoCommandError.html#M000055","(name, owner)","",2],["new","Pry::PluginManager","classes/Pry/PluginManager.html#M000269","()","",2],["new","Pry::PluginManager::NoPlugin","classes/Pry/PluginManager/NoPlugin.html#M000261","(name)","",2],["new","Pry::PluginManager::Plugin","classes/Pry/PluginManager/Plugin.html#M000263","(name, gem_name, spec, enabled)","",2],["new","Pry::Result","classes/Pry/Result.html#M000091","(is_command, retval = nil)","",2],["new","Pry::WrappedModule","classes/Pry/WrappedModule.html#M000360","(mod)","Create a new WrappedModule @raise ArgumentError, if the argument is not a Module @param [Module] ",2],["no_color","Pry::Helpers::Text","classes/Pry/Helpers/Text.html#M000206","(&block)","Executes _block_ with _Pry.color_ set to false. @param [Proc] @return [void] ",2],["no_pager","Pry::Helpers::Text","classes/Pry/Helpers/Text.html#M000207","(&block)","Executes _block_ with _Pry.config.pager_ set to false. @param [Proc] @return [void] ",2],["nonblank_name","Pry::WrappedModule","classes/Pry/WrappedModule.html#M000363","()","The name of the Module if it has one, otherwise #<Class:0xf00>. @return [String] ",2],["not_a_real_file?","Pry::Helpers::BaseHelpers","classes/Pry/Helpers/BaseHelpers.html#M000167","(file)","",2],["one_index_number","Pry::Helpers::CommandHelpers","classes/Pry/Helpers/CommandHelpers.html#M000198","(line_number)","",2],["one_index_range","Pry::Helpers::CommandHelpers","classes/Pry/Helpers/CommandHelpers.html#M000199","(range)","convert a 1-index range to a 0-indexed one ",2],["one_index_range_or_number","Pry::Helpers::CommandHelpers","classes/Pry/Helpers/CommandHelpers.html#M000200","(range_or_number)","",2],["options","Pry","classes/Pry.html#M000137","(opt)","",2],["options","Pry","classes/Pry.html#M000132","(opt)","",2],["options","Pry::ClassCommand","classes/Pry/ClassCommand.html#M000071","(opt)","A function to setup Slop so it can parse the options your command expects. NOTE: please don't do anything",2],["options","Pry::Command","classes/Pry/Command.html#M000031","()","Alias for #command_options",2],["options","Pry::DefaultCommands","classes/Pry/DefaultCommands.html#M000152","(opt)","",2],["options","Pry::DefaultCommands","classes/Pry/DefaultCommands.html#M000120","(opt)","",2],["options","Pry::DefaultCommands","classes/Pry/DefaultCommands.html#M000109","(opt)","",2],["options","Pry::DefaultCommands","classes/Pry/DefaultCommands.html#M000124","(opt)","",2],["options","Pry::DefaultCommands","classes/Pry/DefaultCommands.html#M000099","(opt)","",2],["options","Pry::DefaultCommands","classes/Pry/DefaultCommands.html#M000159","(opt)","",2],["options","Pry::DefaultCommands","classes/Pry/DefaultCommands.html#M000105","(opt)","",2],["original_name","Pry::Method","classes/Pry/Method.html#M000312","()","@return [String, nil] The original name the method was defined under, before any aliasing, or `nil` if",2],["output_section","Pry::DefaultCommands","classes/Pry/DefaultCommands.html#M000154","(heading, body)","Add a new section to the output. Outputs nothing if the section would be empty. ",2],["owner","Pry::Method::Disowned","classes/Pry/Method/Disowned.html#M000334","()","Get the hypothesized owner of the method. @return [Object] ",2],["page_size","Pry::Helpers::BaseHelpers","classes/Pry/Helpers/BaseHelpers.html#M000176","()","",2],["parse_options","Pry::CLI","classes/Pry/CLI.html#M000004","(args=ARGV.dup)","",2],["perform_gist","Pry::DefaultCommands","classes/Pry/DefaultCommands.html#M000111","()","",2],["perform_play","Pry::DefaultCommands","classes/Pry/DefaultCommands.html#M000123","()","",2],["plugins","Pry::PluginManager","classes/Pry/PluginManager.html#M000272","()","@return [Hash] A hash with all plugin names (minus the 'pry-') as keys and Plugin objects as values.",2],["pop_prompt","Pry","classes/Pry.html#M000387","()","Pops the current prompt off of the prompt stack. If the prompt you are popping is the last prompt, it",2],["process","Object","classes/Object.html#M000118","(pattern=nil)","",2],["process","Object","classes/Object.html#M000116","(gem)","",2],["process","Pry","classes/Pry.html#M000133","()","",2],["process","Pry","classes/Pry.html#M000107","()","",2],["process","Pry","classes/Pry.html#M000138","()","",2],["process","Pry","classes/Pry.html#M000101","()","",2],["process","Pry::ClassCommand","classes/Pry/ClassCommand.html#M000072","()","The actual body of your command should go here. The {opts} mehod can be called to get the options that",2],["process","Pry::CommandSet","classes/Pry/CommandSet.html#M000090","(name)","",2],["process","Pry::CommandSet","classes/Pry/CommandSet.html#M000089","()","",2],["process","Pry::DefaultCommands","classes/Pry/DefaultCommands.html#M000160","()","",2],["process","Pry::DefaultCommands","classes/Pry/DefaultCommands.html#M000156","()","",2],["process","Pry::DefaultCommands","classes/Pry/DefaultCommands.html#M000121","()","",2],["process","Pry::DefaultCommands","classes/Pry/DefaultCommands.html#M000115","()","",2],["process","Pry::DefaultCommands","classes/Pry/DefaultCommands.html#M000100","()","",2],["process","Pry::DefaultCommands","classes/Pry/DefaultCommands.html#M000110","()","",2],["process","Pry::DefaultCommands","classes/Pry/DefaultCommands.html#M000106","()","",2],["process","Pry::DefaultCommands","classes/Pry/DefaultCommands.html#M000125","()","",2],["process","Pry::DefaultCommands","classes/Pry/DefaultCommands.html#M000140","()","",2],["process","Pry::DefaultCommands","classes/Pry/DefaultCommands.html#M000117","()","",2],["process_clear","Pry::DefaultCommands","classes/Pry/DefaultCommands.html#M000130","()","",2],["process_command","Pry","classes/Pry.html#M000372","(val, eval_string, target)","If the given line is a valid command, process it in the context of the current `eval_string` and context.",2],["process_comment_markup","Pry::Helpers::CommandHelpers","classes/Pry/Helpers/CommandHelpers.html#M000191","(comment, code_type)","",2],["process_display","Pry::DefaultCommands","classes/Pry/DefaultCommands.html#M000128","()","",2],["process_ex","Pry::DefaultCommands","classes/Pry/DefaultCommands.html#M000161","()","",2],["process_exit_all","Pry","classes/Pry.html#M000102","()","",2],["process_file","Pry","classes/Pry.html#M000141","()","",2],["process_file","Pry::DefaultCommands","classes/Pry/DefaultCommands.html#M000163","()","",2],["process_i","Pry","classes/Pry.html#M000134","()","",2],["process_in","Pry::DefaultCommands","classes/Pry/DefaultCommands.html#M000162","()","",2],["process_line","Pry::Command","classes/Pry/Command.html#M000053","(line)","Process a line that Command.matches? this command. @param String  the line to process @return  Object",2],["process_line","Pry::CommandSet","classes/Pry/CommandSet.html#M000085","(val, context={})","Process the given line to see whether it needs executing as a command. @param String  the line to execute",2],["process_local_edit","Pry","classes/Pry.html#M000135","()","",2],["process_non_opt","Pry::DefaultCommands","classes/Pry/DefaultCommands.html#M000122","()","",2],["process_options","Pry::CLI","classes/Pry/CLI.html#M000002","(&block)","Add a block responsible for processing parsed options. ",2],["process_patch","Pry","classes/Pry.html#M000139","()","",2],["process_pop_and_return","Pry","classes/Pry.html#M000103","()","",2],["process_rdoc","Pry::Helpers::CommandHelpers","classes/Pry/Helpers/CommandHelpers.html#M000187","(comment, code_type)","",2],["process_remote_edit","Pry","classes/Pry.html#M000136","()","",2],["process_replay","Pry::DefaultCommands","classes/Pry/DefaultCommands.html#M000131","()","",2],["process_save","Pry::DefaultCommands","classes/Pry/DefaultCommands.html#M000129","()","",2],["process_yardoc","Pry::Helpers::CommandHelpers","classes/Pry/Helpers/CommandHelpers.html#M000190","(comment)","",2],["process_yardoc_tag","Pry::Helpers::CommandHelpers","classes/Pry/Helpers/CommandHelpers.html#M000189","(comment, tag)","",2],["prompt","Pry","classes/Pry.html#M000348","()","The current prompt. This is the prompt at the top of the prompt stack. @example self.prompt = Pry::SIMPLE_PROMPT",2],["prompt=","Pry","classes/Pry.html#M000349","(new_prompt)","",2],["prompt_stack","Pry","classes/Pry.html#M000385","()","the array that the prompt stack is stored in ",2],["pry","Object","classes/Object.html#M000097","(target=self)","Start a Pry REPL. This method differs from `Pry.start` in that it does not support an options hash. Also,",2],["pry_doc_info","Pry::Method","classes/Pry/Method.html#M000322","()","@return [YARD::CodeObjects::MethodObject] @raise [CommandError] Raises when the method can't be found",2],["pry_method?","Pry::Method","classes/Pry/Method.html#M000315","()","@return [Boolean] Was the method defined within the Pry REPL? ",2],["push","Pry::Code","classes/Pry/Code.html#M000010","(line, line_num=nil)","Append the given line. `line_num` is one more than the last existing line, unless specified otherwise.",2],["push","Pry::History","classes/Pry/History.html#M000216","(line)","Add a line to the input history, ignoring blank and duplicate lines. @param [String] line @return [String]",2],["push_prompt","Pry","classes/Pry.html#M000386","(new_prompt)","Pushes the current prompt onto a stack that it can be restored from later. Use this if you wish to temporarily",2],["push_to_readline","Pry::History","classes/Pry/History.html#M000227","(line)","The default pusher. Appends the given line to Readline::HISTORY. @param [String] line ",2],["r","Pry","classes/Pry.html#M000368","(target=TOPLEVEL_BINDING, eval_string=\"\")","Perform a read. If no parameter is given, default to top-level (main). This is a multi-line read; so",2],["raw","Pry::Code","classes/Pry/Code.html#M000035","()","Return an unformatted String of the code. @return [String] ",2],["rbx?","Pry::Helpers::BaseHelpers","classes/Pry/Helpers/BaseHelpers.html#M000179","()","are we on rbx platform? ",2],["re","Pry","classes/Pry.html#M000362","(target=TOPLEVEL_BINDING)","Perform a read-eval If no parameter is given, default to top-level (main). @param [Object, Binding] target",2],["read_from_file","Pry::History","classes/Pry/History.html#M000221","()","The default loader. Yields lines from `Pry.history.config.file`. ",2],["readline","Pry","classes/Pry.html#M000382","(current_prompt=\"> \")","Returns the next line of input to be used by the pry instance. This method should not need to be invoked",2],["refresh","Pry","classes/Pry.html#M000347","(options={})","Refresh the Pry instance settings from the Pry class. Allows options to be specified to override settings",2],["rename_command","Pry::CommandSet","classes/Pry/CommandSet.html#M000079","(new_name, old_name, options={})","Rename a command. Accepts either actual name or listing name for the `old_name`. `new_name` must be the",2],["render_output","Pry::Helpers::CommandHelpers","classes/Pry/Helpers/CommandHelpers.html#M000182","(str, opts={})","",2],["rep","Pry","classes/Pry.html#M000359","(target=TOPLEVEL_BINDING)","Perform a read-eval-print. If no parameter is given, default to top-level (main). @param [Object, Binding]",2],["repl","Pry","classes/Pry.html#M000358","(target=TOPLEVEL_BINDING)","Start a read-eval-print-loop. If no parameter is given, default to top-level (main). @param [Object,",2],["repl_epilogue","Pry","classes/Pry.html#M000357","(target)","Clean-up after the repl session. @param [Binding] target The target binding for the session. ",2],["repl_prologue","Pry","classes/Pry.html#M000356","(target)","Initialize the repl session. @param [Binding] target The target binding for the session. ",2],["reset","Pry::CLI","classes/Pry/CLI.html#M000003","()","Clear `options` and `option_processors` ",2],["reset","Pry::Indent","classes/Pry/Indent.html#M000237","()","reset internal state ",2],["reset_defaults","Pry","classes/Pry.html#M000327","()","Set all the configurable options back to their default values ",2],["resolution_order","Pry::DefaultCommands","classes/Pry/DefaultCommands.html#M000145","(obj)","",2],["resolution_order","Pry::Method","classes/Pry/Method.html#M000280","(obj)","Get every `Class` and `Module`, in order, that will be checked when looking for an instance method to",2],["respond_to?","Pry::Method","classes/Pry/Method.html#M000320","(method_name)","@param [String, Symbol] method_name @return [Boolean] ",2],["respond_to?","Pry::WrappedModule","classes/Pry/WrappedModule.html#M000367","(method_name)","",2],["restore_default_behavior","Pry::History","classes/Pry/History.html#M000211","()","Assign the default methods for loading, saving, pushing, and clearing. ",2],["restrict_to_lines","Pry::Helpers::CommandHelpers","classes/Pry/Helpers/CommandHelpers.html#M000197","(content, lines)","Restrict a string to the given range of lines (1-indexed) @param [String] content The string. @param",2],["retrieve_line","Pry","classes/Pry.html#M000371","(eval_string, target)","Read and process a line of input -- check for ^D, determine which prompt to use, rewrite the indentation",2],["run","Pry::Command","classes/Pry/Command.html#M000043","(command_string, *args)","Run a command from another command. @param [String] command_string The string that invokes the command",2],["run_command","Pry","classes/Pry.html#M000309","(command_string, options={})","Run a Pry command from outside a session. The commands available are those referenced by `Pry.commands`",2],["run_command","Pry","classes/Pry.html#M000373","(val, eval_string = \"\", target = binding_stack.last)","Run the specified command. @param [String] val The command (and its params) to execute. @param [String]",2],["run_command","Pry::CommandSet","classes/Pry/CommandSet.html#M000086","(context, name, *args)","@nodoc  used for testing ",2],["rvm_convert_path_to_full","Pry::RbxPath","classes/Pry/RbxPath.html#M000343","(path)","",2],["rvm_ruby?","Pry::RbxPath","classes/Pry/RbxPath.html#M000342","(path)","",2],["safe_send","Pry::Method","classes/Pry/Method.html#M000284","(obj, method, *args, &block)","Acts like send but ignores any methods defined below Object or Class in the inheritance hierarchy. This",2],["save","Pry::History","classes/Pry/History.html#M000213","()","Write this session's history using `History.saver`. @return [Integer] The number of lines saved ",2],["save_file","Pry::DefaultCommands","classes/Pry/DefaultCommands.html#M000157","()","",2],["save_history","Pry","classes/Pry.html#M000306","()","Save new lines of Readline history if required. ",2],["select","Pry::Code","classes/Pry/Code.html#M000012","(&blk)","Filter the lines using the given block. @yield [line] @return [Code] ",2],["select_message","Pry::InputCompleter","classes/Pry/InputCompleter.html#M000096","(receiver, message, candidates)","",2],["select_prompt","Pry","classes/Pry.html#M000384","(eval_string, target)","Returns the appropriate prompt to use. This method should not need to be invoked directly. @param [String]",2],["set_config_defaults","Pry","classes/Pry.html#M000313","()","",2],["set_file_and_dir_locals","Pry::Helpers::BaseHelpers","classes/Pry/Helpers/BaseHelpers.html#M000169","(file_name)","",2],["set_last_result","Pry","classes/Pry.html#M000375","(result, target, code=\"\")","Set the last result of an eval. This method should not need to be invoked directly. @param [Object] result",2],["setup","Pry::ClassCommand","classes/Pry/ClassCommand.html#M000068","()","A function called just before {options(opt)} as part of {call}. This function can be used to set up any",2],["setup","Pry::DefaultCommands","classes/Pry/DefaultCommands.html#M000108","()","",2],["setup","Pry::DefaultCommands","classes/Pry/DefaultCommands.html#M000119","()","",2],["setup","Pry::DefaultCommands","classes/Pry/DefaultCommands.html#M000151","()","",2],["should_force_encoding?","Pry","classes/Pry.html#M000370","(eval_string, val)","",2],["should_print?","Pry","classes/Pry.html#M000383","()","Whether the print proc should be invoked. Currently only invoked if the output is not suppressed OR the",2],["show_result","Pry","classes/Pry.html#M000369","(result)","Output the result or pass to an exception handler (if result is an exception). ",2],["signature","Pry::Method","classes/Pry/Method.html#M000307","()","@return [String] A representation of the method's signature, including its name and parameters. Optional",2],["silence_warnings","Pry::Helpers::BaseHelpers","classes/Pry/Helpers/BaseHelpers.html#M000164","()","",2],["simple_pager","Pry::Helpers::BaseHelpers","classes/Pry/Helpers/BaseHelpers.html#M000180","(text, output=output())","a simple pager for systems without `less`. A la windows. ",2],["singleton_class","Pry::Method","classes/Pry/Method.html#M000286","(obj)","",2],["singleton_class?","Pry::WrappedModule","classes/Pry/WrappedModule.html#M000364","()","Is this a singleton class? @return [Boolean] ",2],["singleton_class_resolution_order","Pry::Method","classes/Pry/Method.html#M000285","(klass)","Get the singleton classes of superclasses that could define methods on the given class object, and any",2],["singleton_instance","Pry::WrappedModule","classes/Pry/WrappedModule.html#M000365","()","Get the instance associated with this singleton class. @raise ArgumentError: tried to get instance of",2],["size","Pry::HistoryArray","classes/Pry/HistoryArray.html#M000223","()","@return [Integer] Amount of objects in the array ",2],["slop","Pry::ClassCommand","classes/Pry/ClassCommand.html#M000067","()","Return an instance of Slop that can parse the options that this command accepts. ",2],["source","Pry::Method","classes/Pry/Method.html#M000293","()","@return [String, nil] The source code of the method, or `nil` if it's unavailable. ",2],["source_file","Pry::Method","classes/Pry/Method.html#M000300","()","@return [String, nil] The name of the file the method is defined in, or `nil` if the filename is unavailable.",2],["source_line","Pry::Method","classes/Pry/Method.html#M000301","()","@return [Fixnum, nil] The line of code in `source_file` which begins the method's definition, or `nil`",2],["source_range","Pry::Method","classes/Pry/Method.html#M000302","()","@return [Range, nil] The range of lines in `source_file` which contain the method's definition, or `nil`",2],["source_type","Pry::Method","classes/Pry/Method.html#M000299","()","@return [Symbol] The source type of the method. The options are `:ruby` for Ruby methods or `:c` for",2],["special_locals","Pry","classes/Pry.html#M000355","()","",2],["stagger_output","Pry::Helpers::BaseHelpers","classes/Pry/Helpers/BaseHelpers.html#M000183","(text, output=output())","Try to use `less` for paging, if it fails then use simple_pager. Also do not page if Pry.pager is falsey",2],["start","Pry","classes/Pry.html#M000297","(target=TOPLEVEL_BINDING, options={})","Start a Pry REPL. This method also loads the files specified in `Pry::RC_FILES` the first time it is",2],["start_line","Pry::DefaultCommands","classes/Pry/DefaultCommands.html#M000127","()","",2],["start_line","Pry::DefaultCommands","classes/Pry/DefaultCommands.html#M000104","()","",2],["start_line_syntax_for_editor","Pry::Helpers::CommandHelpers","classes/Pry/Helpers/CommandHelpers.html#M000193","(file_name, line_number)","Return the syntax for a given editor for starting the editor and moving to a particular line within that",2],["std_convert_path_to_full","Pry::RbxPath","classes/Pry/RbxPath.html#M000346","(path)","",2],["strip_color","Pry::Helpers::Text","classes/Pry/Helpers/Text.html#M000203","(text)","Remove any color codes from _text_. @param  [String, #to_s] text @return [String] _text_ stripped of",2],["strip_comments_from_c_code","Pry::Method","classes/Pry/Method.html#M000323","(code)","@param [String] code @return [String] ",2],["strip_leading_hash_and_whitespace_from_ruby_comments","Pry::Method","classes/Pry/Method.html#M000324","(comment)","@param [String] comment @return [String] ",2],["strip_leading_whitespace","Pry::Method","classes/Pry/Method.html#M000325","(text)","@param [String] text @return [String] ",2],["stub_proc","Pry::Helpers::BaseHelpers","classes/Pry/Helpers/BaseHelpers.html#M000170","(name, options)","",2],["subclass","Pry::Command","classes/Pry/Command.html#M000034","(name, description, options, helpers, &block)","Create a new command with the given properties. @param String name  the name of the command @param String",2],["super","Pry::Method","classes/Pry/Method.html#M000310","(times=1)","@return [Pry::Method, nil] The wrapped method that is called when you use \"super\" in the body of this",2],["super_using_ancestors","Pry::Method","classes/Pry/Method.html#M000326","(ancestors, times=1)","@param [Class,Module] the ancestors to investigate @return [Method] the unwrapped super-method ",2],["target_self","Pry::Command","classes/Pry/Command.html#M000049","()","The value of {self} inside the {target} binding. ",2],["temp_file","Pry::Helpers::CommandHelpers","classes/Pry/Helpers/CommandHelpers.html#M000181","(ext='.rb')","Open a temp file and yield it to the block, closing it after @return [String] The path of the temp file",2],["text","Pry::Command","classes/Pry/Command.html#M000046","()","",2],["to_a","Pry::History","classes/Pry/History.html#M000219","()","Return an Array containing all stored history. @return [Array<String>] An Array containing all lines",2],["to_a","Pry::HistoryArray","classes/Pry/HistoryArray.html#M000230","()","",2],["to_s","Pry::Code","classes/Pry/Code.html#M000024","()","Based on the configuration of the object, return a formatted String representation. @return [String]",2],["tokenize","Pry::Command","classes/Pry/Command.html#M000052","(val)","Extract necessary information from a line that Command.matches? this command. @param String  the line",2],["type_from_filename","Pry::Code","classes/Pry/Code.html#M000008","(filename)","Guess the CodeRay type of a file from its extension, or nil if unknown. @param [String] filename @return",2],["undefined?","Pry::Method","classes/Pry/Method.html#M000291","()","Is the method undefined? (aka `Disowned`) @return [Boolean] false ",2],["undefined?","Pry::Method::Disowned","classes/Pry/Method/Disowned.html#M000332","()","Is the method undefined? (aka `Disowned`) @return [Boolean] true ",2],["unindent","Pry::Helpers::CommandHelpers","classes/Pry/Helpers/CommandHelpers.html#M000195","(text)","Remove any common leading whitespace from every line in `text`. This can be used to make a HEREDOC line",2],["uniq_keeping_last","Pry::Hooks","classes/Pry/Hooks.html#M000247","(input, &block)","",2],["update_input_history","Pry","classes/Pry.html#M000379","(code)","Update Pry's internal state after evalling code. This method should not need to be invoked directly.",2],["use_ansi_codes?","Pry::Helpers::BaseHelpers","classes/Pry/Helpers/BaseHelpers.html#M000172","()","",2],["use_line_numbers?","Pry::DefaultCommands","classes/Pry/DefaultCommands.html#M000126","()","",2],["valid_command?","Pry::CommandSet","classes/Pry/CommandSet.html#M000084","(val)","Is the given line a command invocation? @param [String] @return [Boolean] ",2],["view_clip","Pry","classes/Pry.html#M000303","(obj, max_length = 60)","An inspector that clips the output to `max_length` chars. In case of > `max_length` chars the `#<Object...>",2],["visibility","Pry::Method","classes/Pry/Method.html#M000304","()","@return [Symbol] The visibility of the method. May be `:public`, `:protected`, or `:private`. ",2],["void","Pry::Command","classes/Pry/Command.html#M000047","()","",2],["void_command?","Pry::Result","classes/Pry/Result.html#M000094","()","Is the result a command and if it is, is it a void command? (one that does not return a value) @return",2],["windows?","Pry::Helpers::BaseHelpers","classes/Pry/Helpers/BaseHelpers.html#M000177","()","have fun on the Windows platform. ",2],["with_indentation","Pry::Code","classes/Pry/Code.html#M000022","(spaces=0)","Format output with the specified number of spaces in front of every line, unless `spaces` is falsy. @param",2],["with_line_numbers","Pry::Code","classes/Pry/Code.html#M000018","(y_n=true)","Format output with line numbers next to it, unless `y_n` is falsy. @param [Boolean?] (true) y_n @return",2],["with_line_numbers","Pry::Helpers::Text","classes/Pry/Helpers/Text.html#M000208","(text, offset, color=:blue)","Returns _text_ in a numbered list, beginning at _offset_. @param  [#each_line] text @param  [Fixnum]",2],["with_marker","Pry::Code","classes/Pry/Code.html#M000019","(line_num=1)","Format output with a marker next to the given `line_num`, unless `line_num` is falsy. @param [Fixnum?]",2],["with_method_transaction","Pry","classes/Pry.html#M000143","(meth_name, target=TOPLEVEL_BINDING)","",2],["wrapped_owner","Pry::Method","classes/Pry/Method.html#M000290","()","Get the owner of the method as a Pry::Module @return [Pry::Module] ",2],["write_to_file","Pry::History","classes/Pry/History.html#M000222","(lines)","The default saver. Appends the given lines to `Pry.history.config.file`. @param [Array<String>] lines",2],["CHANGELOG","files/CHANGELOG.html","files/CHANGELOG.html","","9/2/2012 version 0.9.8.2 bugfix * fixed bugs related to --super * upgraded slop dependency * added edit",3],["LICENSE","files/LICENSE.html","files/LICENSE.html","","License -------  (The MIT License)   Copyright (c) 2011 John Mair (banisterfiend)  Permission is hereby",3],["README.markdown","files/README_markdown.html","files/README_markdown.html","","[![Build Status](https://secure.travis-ci.org/pry/pry.png)](http://travis-ci.org/pry/pry) <center> ![Alt",3],["TODO","files/TODO.html","files/TODO.html","","0.9.5 * include method visiblity in show-doc and stat output * tempfile should end in .rb (for edit -t)",3],["pry.rb","files/lib/pry_rb.html","files/lib/pry_rb.html","","(C) John Mair (banisterfiend) 2011 MIT License ",3],["cli.rb","files/lib/pry/cli_rb.html","files/lib/pry/cli_rb.html","","",3],["code.rb","files/lib/pry/code_rb.html","files/lib/pry/code_rb.html","","",3],["command.rb","files/lib/pry/command_rb.html","files/lib/pry/command_rb.html","","",3],["command_set.rb","files/lib/pry/command_set_rb.html","files/lib/pry/command_set_rb.html","","",3],["commands.rb","files/lib/pry/commands_rb.html","files/lib/pry/commands_rb.html","","",3],["completion.rb","files/lib/pry/completion_rb.html","files/lib/pry/completion_rb.html","","taken from irb ",3],["config.rb","files/lib/pry/config_rb.html","files/lib/pry/config_rb.html","","",3],["core_extensions.rb","files/lib/pry/core_extensions_rb.html","files/lib/pry/core_extensions_rb.html","","",3],["custom_completions.rb","files/lib/pry/custom_completions_rb.html","files/lib/pry/custom_completions_rb.html","","",3],["basic.rb","files/lib/pry/default_commands/basic_rb.html","files/lib/pry/default_commands/basic_rb.html","","",3],["context.rb","files/lib/pry/default_commands/context_rb.html","files/lib/pry/default_commands/context_rb.html","","",3],["documentation.rb","files/lib/pry/default_commands/documentation_rb.html","files/lib/pry/default_commands/documentation_rb.html","","",3],["easter_eggs.rb","files/lib/pry/default_commands/easter_eggs_rb.html","files/lib/pry/default_commands/easter_eggs_rb.html","","",3],["gems.rb","files/lib/pry/default_commands/gems_rb.html","files/lib/pry/default_commands/gems_rb.html","","",3],["input.rb","files/lib/pry/default_commands/input_rb.html","files/lib/pry/default_commands/input_rb.html","","",3],["introspection.rb","files/lib/pry/default_commands/introspection_rb.html","files/lib/pry/default_commands/introspection_rb.html","","",3],["ls.rb","files/lib/pry/default_commands/ls_rb.html","files/lib/pry/default_commands/ls_rb.html","","",3],["shell.rb","files/lib/pry/default_commands/shell_rb.html","files/lib/pry/default_commands/shell_rb.html","","",3],["experimental.rb","files/lib/pry/extended_commands/experimental_rb.html","files/lib/pry/extended_commands/experimental_rb.html","","",3],["helpers.rb","files/lib/pry/helpers_rb.html","files/lib/pry/helpers_rb.html","","",3],["base_helpers.rb","files/lib/pry/helpers/base_helpers_rb.html","files/lib/pry/helpers/base_helpers_rb.html","","",3],["command_helpers.rb","files/lib/pry/helpers/command_helpers_rb.html","files/lib/pry/helpers/command_helpers_rb.html","","",3],["options_helpers.rb","files/lib/pry/helpers/options_helpers_rb.html","files/lib/pry/helpers/options_helpers_rb.html","","",3],["text.rb","files/lib/pry/helpers/text_rb.html","files/lib/pry/helpers/text_rb.html","","",3],["history.rb","files/lib/pry/history_rb.html","files/lib/pry/history_rb.html","","",3],["history_array.rb","files/lib/pry/history_array_rb.html","files/lib/pry/history_array_rb.html","","",3],["hooks.rb","files/lib/pry/hooks_rb.html","files/lib/pry/hooks_rb.html","","",3],["indent.rb","files/lib/pry/indent_rb.html","files/lib/pry/indent_rb.html","","",3],["method.rb","files/lib/pry/method_rb.html","files/lib/pry/method_rb.html","","",3],["plugins.rb","files/lib/pry/plugins_rb.html","files/lib/pry/plugins_rb.html","","",3],["pry_class.rb","files/lib/pry/pry_class_rb.html","files/lib/pry/pry_class_rb.html","","",3],["pry_instance.rb","files/lib/pry/pry_instance_rb.html","files/lib/pry/pry_instance_rb.html","","",3],["rbx_method.rb","files/lib/pry/rbx_method_rb.html","files/lib/pry/rbx_method_rb.html","","",3],["rbx_path.rb","files/lib/pry/rbx_path_rb.html","files/lib/pry/rbx_path_rb.html","","",3],["version.rb","files/lib/pry/version_rb.html","files/lib/pry/version_rb.html","","",3],["wrapped_module.rb","files/lib/pry/wrapped_module_rb.html","files/lib/pry/wrapped_module_rb.html","","",3]],"searchIndex":["object","pry","blockcommand","cli","classcommand","code","command","void_value","commandset","config","defaultcommands","extendedcommands","helpers","basehelpers","commandhelpers","optionshelpers","text","history","historyarray","hooks","indent","inputcompleter","method","disowned","nocommanderror","pluginmanager","noplugin","plugin","rbxmethod","rbxpath","result","wrappedmodule","<<()","<<()","<<()","==()","==()","code()","method()","[]()","[]()","[]=()","__binding__()","absolute_index_number()","absolute_index_range()","activate!()","add_hook()","add_options()","add_plugin_options()","after()","after_command()","alias?()","alias_command()","all_from_class()","all_from_common()","all_from_obj()","all_methods()","alter()","around()","banner()","before()","before_command()","below_ceiling()","between()","binding_for()","block()","block_command()","bold()","build_completion_proc()","call()","call()","call_safely()","call_with_hooks()","check_for_command_name_collision()","clear()","clear()","clear_all()","clear_readline()","color()","colorize_code()","command()","command?()","command_dependencies_met?()","command_error()","command_name()","command_options()","command_options()","command_regex()","commands()","comment_expression_result_for_gist()","complete_expression?()","convert_index()","convert_path_to_full()","convert_range()","convert_to_range()","convert_to_regex()","core?()","core_code()","core_doc()","core_path_line()","correct_arg_arity()","correct_indentation()","count()","create_command()","create_command_stub()","default()","default_editor_for_platform()","default_options()","define_default_commands()","delegate_accessors()","delete()","delete_hook()","delete_hooks()","dependencies_met?()","desc()","description()","description()","disable!()","doc()","dynamically_defined?()","each()","each()","empty?()","enable!()","end_of_statement?()","errors()","exec_hook()","exec_hook()","extract_file_and_line()","find_command()","find_command()","find_command_by_name_or_listing()","fix_coderay_colors()","format_constants()","format_globals()","format_locals()","format_methods()","format_variables()","from_binding()","from_class()","from_file()","from_hash()","from_method()","from_obj()","from_str()","gem_installed?()","gem_located?()","get_hook()","get_hooks()","get_method_or_raise()","gist_file_extension()","grep()","handle_read_errors()","heading()","help()","help()","helpers()","highlight()","hook_count()","hook_exists?()","hooks()","hooks()","hooks=()","hooks=()","import()","import_from()","incomplete_user_input_exception?()","indent()","indent()","indentation_delta()","init()","initial_session?()","initial_session_setup()","initialize_copy()","initialize_special_locals()","inject_local()","inject_special_locals()","inspect()","inspect()","inspect()","inspect()","instance_resolution_order()","interpolate_string()","invoke_editor()","is_a?()","is_core_path?()","jruby?()","kind_of?()","last_exception=()","last_result_is_exception?()","length()","length()","lesspipe()","list_commands()","load()","load_cli_options()","load_history()","load_plugins()","load_rc()","load_requires()","load_traps()","locate_plugins()","make_header()","matches?()","memory_size()","memory_size=()","merge()","merge!()","merge_arrays()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_name_from_first_line()","method_object()","method_options()","method_prefix()","mode()","name()","name()","name_with_owner()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","no_color()","no_pager()","nonblank_name()","not_a_real_file?()","one_index_number()","one_index_range()","one_index_range_or_number()","options()","options()","options()","options()","options()","options()","options()","options()","options()","options()","options()","original_name()","output_section()","owner()","page_size()","parse_options()","perform_gist()","perform_play()","plugins()","pop_prompt()","process()","process()","process()","process()","process()","process()","process()","process()","process()","process()","process()","process()","process()","process()","process()","process()","process()","process()","process()","process_clear()","process_command()","process_comment_markup()","process_display()","process_ex()","process_exit_all()","process_file()","process_file()","process_i()","process_in()","process_line()","process_line()","process_local_edit()","process_non_opt()","process_options()","process_patch()","process_pop_and_return()","process_rdoc()","process_remote_edit()","process_replay()","process_save()","process_yardoc()","process_yardoc_tag()","prompt()","prompt=()","prompt_stack()","pry()","pry_doc_info()","pry_method?()","push()","push()","push_prompt()","push_to_readline()","r()","raw()","rbx?()","re()","read_from_file()","readline()","refresh()","rename_command()","render_output()","rep()","repl()","repl_epilogue()","repl_prologue()","reset()","reset()","reset_defaults()","resolution_order()","resolution_order()","respond_to?()","respond_to?()","restore_default_behavior()","restrict_to_lines()","retrieve_line()","run()","run_command()","run_command()","run_command()","rvm_convert_path_to_full()","rvm_ruby?()","safe_send()","save()","save_file()","save_history()","select()","select_message()","select_prompt()","set_config_defaults()","set_file_and_dir_locals()","set_last_result()","setup()","setup()","setup()","setup()","should_force_encoding?()","should_print?()","show_result()","signature()","silence_warnings()","simple_pager()","singleton_class()","singleton_class?()","singleton_class_resolution_order()","singleton_instance()","size()","slop()","source()","source_file()","source_line()","source_range()","source_type()","special_locals()","stagger_output()","start()","start_line()","start_line()","start_line_syntax_for_editor()","std_convert_path_to_full()","strip_color()","strip_comments_from_c_code()","strip_leading_hash_and_whitespace_from_ruby_comments()","strip_leading_whitespace()","stub_proc()","subclass()","super()","super_using_ancestors()","target_self()","temp_file()","text()","to_a()","to_a()","to_s()","tokenize()","type_from_filename()","undefined?()","undefined?()","unindent()","uniq_keeping_last()","update_input_history()","use_ansi_codes?()","use_line_numbers?()","valid_command?()","view_clip()","visibility()","void()","void_command?()","windows?()","with_indentation()","with_line_numbers()","with_line_numbers()","with_marker()","with_method_transaction()","wrapped_owner()","write_to_file()","changelog","license","readme.markdown","todo","pry.rb","cli.rb","code.rb","command.rb","command_set.rb","commands.rb","completion.rb","config.rb","core_extensions.rb","custom_completions.rb","basic.rb","context.rb","documentation.rb","easter_eggs.rb","gems.rb","input.rb","introspection.rb","ls.rb","shell.rb","experimental.rb","helpers.rb","base_helpers.rb","command_helpers.rb","options_helpers.rb","text.rb","history.rb","history_array.rb","hooks.rb","indent.rb","method.rb","plugins.rb","pry_class.rb","pry_instance.rb","rbx_method.rb","rbx_path.rb","version.rb","wrapped_module.rb"]}}