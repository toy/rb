var search_data = {"index":{"longSearchIndex":["lib/phash.rb","phash","phash","phash","phash","phash","phash","phash","phash","phash","phash","phash","phash","phash","phash::filehash","phash","phash","phash","phash","phash","phash::audio","phash::filehash","phash::filehash","phash::filehash","phash::hashdata","phash","phash","phash","phash::audio","phash::data","phash::filehash","phash::filehash","phash::filehash","phash::hashdata","phash","phash","phash","phash","phash","files/license_txt.html","files/readme_markdown.html","files/lib/phash_rb.html","files/lib/phash/all_rb.html","files/lib/phash/audio_rb.html","files/lib/phash/image_rb.html","files/lib/phash/text_rb.html","files/lib/phash/video_rb.html"],"info":[["Phash","lib/phash/image.rb","classes/Phash.html"," < ","",1],["Audio","Phash","classes/Phash/Audio.html"," < FileHash","Class to store audio file hash and compare to other ",1],["AudioHash","Phash","classes/Phash/AudioHash.html"," < HashData","Class to store audio hash and compare to other ",1],["Data","Phash","classes/Phash/Data.html"," < Object","",1],["FileHash","Phash","classes/Phash/FileHash.html"," < Object","",1],["HashData","Phash","classes/Phash/HashData.html"," < Data","",1],["Image","Phash","classes/Phash/Image.html"," < FileHash","Class to store image file hash and compare to other ",1],["ImageHash","Phash","classes/Phash/ImageHash.html"," < HashData","Class to store image hash and compare to other ",1],["Text","Phash","classes/Phash/Text.html"," < FileHash","Class to store text file hash and compare to other ",1],["TextHash","Phash","classes/Phash/TextHash.html"," < HashData","Class to store text hash and compare to other ",1],["TxtHashPoint","Phash","classes/Phash/TxtHashPoint.html"," < FFI::Struct","",1],["TxtMatch","Phash","classes/Phash/TxtMatch.html"," < FFI::Struct","",1],["Video","Phash","classes/Phash/Video.html"," < FileHash","Class to store video file hash and compare to other ",1],["VideoHash","Phash","classes/Phash/VideoHash.html"," < HashData","Class to store video hash and compare to other ",1],["%","Phash::FileHash","classes/Phash/FileHash.html#M000023","(other, *args)","Alias for #similarity",2],["audio_data","Phash","classes/Phash.html#M000003","(path, length = 0, sample_rate = nil)","Read audio file specified by path and optional length using <tt>ph_readaudio</tt> ",2],["audio_data_hash","Phash","classes/Phash.html#M000004","(audio_data, sample_rate = nil)","Get hash of audio data using <tt>ph_audiohash</tt> ",2],["audio_distance_ber","Phash","classes/Phash.html#M000006","(hash_a, hash_b, threshold = 0.25, block_size = 256)","Get distance between two audio hashes using <tt>ph_audio_distance_ber</tt> ",2],["audio_hash","Phash","classes/Phash.html#M000005","(path, length = nil, sample_rate = nil)","Use <tt>audio_data</tt> and <tt>audio_data_hash</tt> to compute hash for file at path, specify max length",2],["audio_similarity","Phash","classes/Phash.html#M000007","(hash_a, hash_b, *args)","Get similarity from audio_distance_ber ",2],["compute_phash","Phash::Audio","classes/Phash/Audio.html#M000010","()","",2],["compute_phash","Phash::FileHash","classes/Phash/FileHash.html#M000021","()","",2],["for_paths","Phash::FileHash","classes/Phash/FileHash.html#M000019","(paths, *args)","Init multiple image instances ",2],["hash_type","Phash::FileHash","classes/Phash/FileHash.html#M000024","()","",2],["hash_type","Phash::HashData","classes/Phash/HashData.html#M000017","()","",2],["image_hamming_distance","Phash","classes/Phash.html#M000001","(hash_a, hash_b)","Get distance between two image hashes using <tt>ph_hamming_distance</tt> ",2],["image_hash","Phash","classes/Phash.html#M000000","(path)","Get image file hash using <tt>ph_dct_imagehash</tt> ",2],["image_similarity","Phash","classes/Phash.html#M000002","(hash_a, hash_b)","Get similarity from hamming_distance ",2],["new","Phash::Audio","classes/Phash/Audio.html#M000008","(path, length = nil, sample_rate = nil)","Audio path and optional length in seconds to read ",2],["new","Phash::Data","classes/Phash/Data.html#M000015","(data, length = nil)","",2],["new","Phash::FileHash","classes/Phash/FileHash.html#M000018","(path)","File path ",2],["phash","Phash::FileHash","classes/Phash/FileHash.html#M000020","()","Cached hash of text ",2],["similarity","Phash::FileHash","classes/Phash/FileHash.html#M000022","(other, *args)","Similarity with other phash ",2],["similarity","Phash::HashData","classes/Phash/HashData.html#M000016","(other, *args)","",2],["text_hash","Phash","classes/Phash.html#M000009","(path)","Get text file hash using <tt>ph_texthash</tt> ",2],["text_hash_matches","Phash","classes/Phash.html#M000011","(hash_a, hash_b)","Get distance between two text hashes using <tt>text_distance</tt> ",2],["text_similarity","Phash","classes/Phash.html#M000012","(hash_a, hash_b)","",2],["video_dct_distance","Phash","classes/Phash.html#M000014","(hash_a, hash_b, threshold = 21)","Get distance between two video hashes using <tt>ph_dct_videohash_dist</tt> ",2],["video_hash","Phash","classes/Phash.html#M000013","(path)","Get video hash using <tt>ph_dct_videohash</tt> ",2],["LICENSE.txt","files/LICENSE_txt.html","files/LICENSE_txt.html","","Copyright (c) 2011 Ivan Kuchin  Permission is hereby granted, free of charge, to any person obtaining",3],["README.markdown","files/README_markdown.html","files/README_markdown.html","","# pHash  Interface to [pHash](http://pHash.org/).  ## Installation      gem install pHash  Audio hash",3],["phash.rb","files/lib/phash_rb.html","files/lib/phash_rb.html","","",3],["all.rb","files/lib/phash/all_rb.html","files/lib/phash/all_rb.html","","",3],["audio.rb","files/lib/phash/audio_rb.html","files/lib/phash/audio_rb.html","","",3],["image.rb","files/lib/phash/image_rb.html","files/lib/phash/image_rb.html","","",3],["text.rb","files/lib/phash/text_rb.html","files/lib/phash/text_rb.html","","",3],["video.rb","files/lib/phash/video_rb.html","files/lib/phash/video_rb.html","","",3]],"searchIndex":["phash","audio","audiohash","data","filehash","hashdata","image","imagehash","text","texthash","txthashpoint","txtmatch","video","videohash","%()","audio_data()","audio_data_hash()","audio_distance_ber()","audio_hash()","audio_similarity()","compute_phash()","compute_phash()","for_paths()","hash_type()","hash_type()","image_hamming_distance()","image_hash()","image_similarity()","new()","new()","new()","phash()","similarity()","similarity()","text_hash()","text_hash_matches()","text_similarity()","video_dct_distance()","video_hash()","license.txt","readme.markdown","phash.rb","all.rb","audio.rb","image.rb","text.rb","video.rb"]}}