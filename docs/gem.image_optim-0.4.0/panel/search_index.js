var search_data = {"index":{"longSearchIndex":["lib/image_optim.rb","imageoptim","imageoptim","imageoptim","imageoptim","imageoptim","imageoptim","imageoptim","imageoptim","imageoptim","imageoptim","imageoptim","imageoptim","imageoptim::optionhelpers","imageoptim::advpng","imageoptim::gifsicle","imageoptim::jpegoptim","imageoptim::jpegtran","imageoptim::optipng","imageoptim::pngcrush","imageoptim::pngout","imageoptim::imagepath","imageoptim::worker","imageoptim::imagepath","imageoptim::optionhelpers","imageoptim::worker","imageoptim::worker","imageoptim::worker","imageoptim::optionhelpers","imageoptim","imageoptim","imageoptim::worker","imageoptim::worker","imageoptim","imageoptim","imageoptim","imageoptim","imageoptim::advpng","imageoptim::gifsicle","imageoptim::jpegoptim","imageoptim::jpegtran","imageoptim::optipng","imageoptim::pngcrush","imageoptim::pngout","imageoptim::util","imageoptim::imagepath","imageoptim::jpegoptim","imageoptim::pngcrush","imageoptim::pngout","imageoptim::worker","imageoptim","imageoptim::worker","imageoptim::imagepath","imageoptim::worker","imageoptim","imageoptim","files/license_txt.html","files/readme_markdown.html","files/todo.html","files/lib/image_optim_rb.html","files/lib/image_optim/image_path_rb.html","files/lib/image_optim/option_helpers_rb.html","files/lib/image_optim/util_rb.html","files/lib/image_optim/worker_rb.html","files/lib/image_optim/workers/advpng_rb.html","files/lib/image_optim/workers/gifsicle_rb.html","files/lib/image_optim/workers/jpegoptim_rb.html","files/lib/image_optim/workers/jpegtran_rb.html","files/lib/image_optim/workers/optipng_rb.html","files/lib/image_optim/workers/pngcrush_rb.html","files/lib/image_optim/workers/pngout_rb.html"],"info":[["ImageOptim","lib/image_optim/image_path.rb","classes/ImageOptim.html"," < Object","",1],["Advpng","ImageOptim","classes/ImageOptim/Advpng.html"," < Worker","",1],["Gifsicle","ImageOptim","classes/ImageOptim/Gifsicle.html"," < Worker","",1],["ImagePath","ImageOptim","classes/ImageOptim/ImagePath.html"," < FSPath","",1],["Jpegoptim","ImageOptim","classes/ImageOptim/Jpegoptim.html"," < Worker","",1],["Jpegtran","ImageOptim","classes/ImageOptim/Jpegtran.html"," < Worker","",1],["OptionHelpers","ImageOptim","classes/ImageOptim/OptionHelpers.html"," < ","",1],["Optipng","ImageOptim","classes/ImageOptim/Optipng.html"," < Worker","",1],["Pngcrush","ImageOptim","classes/ImageOptim/Pngcrush.html"," < Worker","",1],["Pngout","ImageOptim","classes/ImageOptim/Pngout.html"," < Worker","",1],["Util","ImageOptim","classes/ImageOptim/Util.html"," < ","",1],["Worker","ImageOptim","classes/ImageOptim/Worker.html"," < Object","",1],["apply_threading","ImageOptim","classes/ImageOptim.html#M000043","(array)","",2],["assert_options_empty!","ImageOptim::OptionHelpers","classes/ImageOptim/OptionHelpers.html#M000006","(options)","Raise unless all options are deleted ",2],["command_args","ImageOptim::Advpng","classes/ImageOptim/Advpng.html#M000013","(src, dst)","",2],["command_args","ImageOptim::Gifsicle","classes/ImageOptim/Gifsicle.html#M000020","(src, dst)","",2],["command_args","ImageOptim::Jpegoptim","classes/ImageOptim/Jpegoptim.html#M000025","(src, dst)","",2],["command_args","ImageOptim::Jpegtran","classes/ImageOptim/Jpegtran.html#M000024","(src, dst)","",2],["command_args","ImageOptim::Optipng","classes/ImageOptim/Optipng.html#M000027","(src, dst)","",2],["command_args","ImageOptim::Pngcrush","classes/ImageOptim/Pngcrush.html#M000030","(src, dst)","",2],["command_args","ImageOptim::Pngout","classes/ImageOptim/Pngout.html#M000033","(src, dst)","",2],["copy","ImageOptim::ImagePath","classes/ImageOptim/ImagePath.html#M000001","(dst)","Copy file to dest preserving attributes ",2],["default_bin","ImageOptim::Worker","classes/ImageOptim/Worker.html#M000018","()","Name of binary determined from class name ",2],["format","ImageOptim::ImagePath","classes/ImageOptim/ImagePath.html#M000003","()","Get format using ImageSize ",2],["get_option!","ImageOptim::OptionHelpers","classes/ImageOptim/OptionHelpers.html#M000004","(options, name, default)","Remove option from hash and run through block or return default ",2],["image_formats","ImageOptim::Worker","classes/ImageOptim/Worker.html#M000010","()","List of formats which worker can optimize ",2],["inherited","ImageOptim::Worker","classes/ImageOptim/Worker.html#M000009","(base)","Remember all classes inheriting from this one ",2],["klasses","ImageOptim::Worker","classes/ImageOptim/Worker.html#M000008","()","List of avaliable workers ",2],["limit_with_range","ImageOptim::OptionHelpers","classes/ImageOptim/OptionHelpers.html#M000005","(number, range)","Ensure number is in range ",2],["method_missing","ImageOptim","classes/ImageOptim.html#M000040","(method, *args, &block)","Optimization methods with default options ",2],["new","ImageOptim","classes/ImageOptim.html#M000034","(options = {})","Initialize workers, specify options using worker underscored name: pass false to disable worker ImageOptim.new(:pngcrush",2],["new","ImageOptim::Worker","classes/ImageOptim/Worker.html#M000014","(options = {})","Configure (raises on extra options), find binary (raises if not found) ",2],["optimize","ImageOptim::Worker","classes/ImageOptim/Worker.html#M000017","(src, dst)","Optimize file from src to dst, return boolean representing success status ",2],["optimize_image","ImageOptim","classes/ImageOptim.html#M000036","(original)","Optimize one file, return new path or nil if optimization failed ",2],["optimize_image!","ImageOptim","classes/ImageOptim.html#M000037","(original)","Optimize one file in place, return optimization status ",2],["optimize_images","ImageOptim","classes/ImageOptim.html#M000038","(paths, &block)","Optimize multiple images if block given yields path and result for each image and returns array of yield",2],["optimize_images!","ImageOptim","classes/ImageOptim.html#M000039","(paths, &block)","Optimize multiple images in place if block given yields path and result for each image and returns array",2],["parse_options","ImageOptim::Advpng","classes/ImageOptim/Advpng.html#M000012","(options)","",2],["parse_options","ImageOptim::Gifsicle","classes/ImageOptim/Gifsicle.html#M000019","(options)","",2],["parse_options","ImageOptim::Jpegoptim","classes/ImageOptim/Jpegoptim.html#M000022","(options)","",2],["parse_options","ImageOptim::Jpegtran","classes/ImageOptim/Jpegtran.html#M000023","(options)","",2],["parse_options","ImageOptim::Optipng","classes/ImageOptim/Optipng.html#M000026","(options)","",2],["parse_options","ImageOptim::Pngcrush","classes/ImageOptim/Pngcrush.html#M000029","(options)","",2],["parse_options","ImageOptim::Pngout","classes/ImageOptim/Pngout.html#M000032","(options)","",2],["processor_count","ImageOptim::Util","classes/ImageOptim/Util.html#M000007","()","http://stackoverflow.com/questions/891537/ruby-detect-number-of-cpus-installed ",2],["replace","ImageOptim::ImagePath","classes/ImageOptim/ImagePath.html#M000002","(src)","Atomic replace src with self ",2],["run_first?","ImageOptim::Jpegoptim","classes/ImageOptim/Jpegoptim.html#M000021","()","Run first if max_quality < 100 ",2],["run_first?","ImageOptim::Pngcrush","classes/ImageOptim/Pngcrush.html#M000028","()","Always run first ",2],["run_first?","ImageOptim::Pngout","classes/ImageOptim/Pngout.html#M000031","()","Always run first ",2],["run_first?","ImageOptim::Worker","classes/ImageOptim/Worker.html#M000015","()","Put first in list of workers ",2],["run_method_for","ImageOptim","classes/ImageOptim.html#M000042","(paths, method_name, &block)","",2],["run_priority","ImageOptim::Worker","classes/ImageOptim/Worker.html#M000016","()","Priority in list of workers ",2],["temp_path","ImageOptim::ImagePath","classes/ImageOptim/ImagePath.html#M000000","(*args, &block)","Get temp path for this file with same extension ",2],["underscored_name","ImageOptim::Worker","classes/ImageOptim/Worker.html#M000011","()","Undercored class name ",2],["version","ImageOptim","classes/ImageOptim.html#M000041","()","",2],["workers_for_image","ImageOptim","classes/ImageOptim.html#M000035","(path)","Get workers for image ",2],["LICENSE.txt","files/LICENSE_txt.html","files/LICENSE_txt.html","","Copyright (c) 2012 Ivan Kuchin  Permission is hereby granted, free of charge, to any person obtaining",3],["README.markdown","files/README_markdown.html","files/README_markdown.html","","# image_optim  Optimize images (jpeg, png, gif) using external utilities (advpng, gifsicle, jpegoptim,",3],["TODO","files/TODO.html","files/TODO.html","","timeout workers? ",3],["image_optim.rb","files/lib/image_optim_rb.html","files/lib/image_optim_rb.html","","",3],["image_path.rb","files/lib/image_optim/image_path_rb.html","files/lib/image_optim/image_path_rb.html","","",3],["option_helpers.rb","files/lib/image_optim/option_helpers_rb.html","files/lib/image_optim/option_helpers_rb.html","","",3],["util.rb","files/lib/image_optim/util_rb.html","files/lib/image_optim/util_rb.html","","",3],["worker.rb","files/lib/image_optim/worker_rb.html","files/lib/image_optim/worker_rb.html","","",3],["advpng.rb","files/lib/image_optim/workers/advpng_rb.html","files/lib/image_optim/workers/advpng_rb.html","","",3],["gifsicle.rb","files/lib/image_optim/workers/gifsicle_rb.html","files/lib/image_optim/workers/gifsicle_rb.html","","",3],["jpegoptim.rb","files/lib/image_optim/workers/jpegoptim_rb.html","files/lib/image_optim/workers/jpegoptim_rb.html","","",3],["jpegtran.rb","files/lib/image_optim/workers/jpegtran_rb.html","files/lib/image_optim/workers/jpegtran_rb.html","","",3],["optipng.rb","files/lib/image_optim/workers/optipng_rb.html","files/lib/image_optim/workers/optipng_rb.html","","",3],["pngcrush.rb","files/lib/image_optim/workers/pngcrush_rb.html","files/lib/image_optim/workers/pngcrush_rb.html","","",3],["pngout.rb","files/lib/image_optim/workers/pngout_rb.html","files/lib/image_optim/workers/pngout_rb.html","","",3]],"searchIndex":["imageoptim","advpng","gifsicle","imagepath","jpegoptim","jpegtran","optionhelpers","optipng","pngcrush","pngout","util","worker","apply_threading()","assert_options_empty!()","command_args()","command_args()","command_args()","command_args()","command_args()","command_args()","command_args()","copy()","default_bin()","format()","get_option!()","image_formats()","inherited()","klasses()","limit_with_range()","method_missing()","new()","new()","optimize()","optimize_image()","optimize_image!()","optimize_images()","optimize_images!()","parse_options()","parse_options()","parse_options()","parse_options()","parse_options()","parse_options()","parse_options()","processor_count()","replace()","run_first?()","run_first?()","run_first?()","run_first?()","run_method_for()","run_priority()","temp_path()","underscored_name()","version()","workers_for_image()","license.txt","readme.markdown","todo","image_optim.rb","image_path.rb","option_helpers.rb","util.rb","worker.rb","advpng.rb","gifsicle.rb","jpegoptim.rb","jpegtran.rb","optipng.rb","pngcrush.rb","pngout.rb"]}}