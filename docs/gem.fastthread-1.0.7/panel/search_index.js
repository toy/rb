var search_data = {"index":{"info":[["ConditionVariable","ext/fastthread/fastthread.c","classes/ConditionVariable.html"," < Object","      ConditionVariable objects augment class Mutex. Using condition variables,    it is possible to",1],["Mutex","ext/fastthread/fastthread.c","classes/Mutex.html"," < Object","      Mutex implements a simple semaphore that can be used to coordinate access to    shared data from",1],["Queue","ext/fastthread/fastthread.c","classes/Queue.html"," < Object","      This class provides a way to synchronize communication between threads.       Example:        ",1],["SizedQueue","ext/fastthread/fastthread.c","classes/SizedQueue.html"," < Queue","      This class represents queues of specified size capacity.  The push operation    may be blocked",1],["broadcast","ConditionVariable","classes/ConditionVariable.html#M000011","()","       Wakes up all threads waiting for this condition.       ",2],["broadcast","ConditionVariable","classes/ConditionVariable.html#M000041","()","       Wakes up all threads waiting for this condition.       ",2],["clear","Queue","classes/Queue.html#M000045","()","       Removes all objects from the queue.       ",2],["clear","Queue","classes/Queue.html#M000015","()","       Removes all objects from the queue.       ",2],["clear","SizedQueue","classes/SizedQueue.html#M000052","()","       Removes all objects from the queue.       ",2],["clear","SizedQueue","classes/SizedQueue.html#M000022","()","       Removes all objects from the queue.       ",2],["empty?","Queue","classes/Queue.html#M000046","()","       Returns +true+ if the queue is empty.       ",2],["empty?","Queue","classes/Queue.html#M000016","()","       Returns +true+ if the queue is empty.       ",2],["empty?","SizedQueue","classes/SizedQueue.html#M000053","()","       Returns +true+ if the queue is empty.       ",2],["empty?","SizedQueue","classes/SizedQueue.html#M000023","()","       Returns +true+ if the queue is empty.       ",2],["exclusive_unlock","Mutex","classes/Mutex.html#M000036","()","       If the mutex is locked, unlocks the mutex, wakes one waiting thread, and    yields in a critical",2],["exclusive_unlock","Mutex","classes/Mutex.html#M000006","()","       If the mutex is locked, unlocks the mutex, wakes one waiting thread, and    yields in a critical",2],["length","Queue","classes/Queue.html#M000017","()","       Returns the length of the queue.       ",2],["length","Queue","classes/Queue.html#M000047","()","       Returns the length of the queue.       ",2],["length","SizedQueue","classes/SizedQueue.html#M000024","()","       Returns the length of the queue.       ",2],["length","SizedQueue","classes/SizedQueue.html#M000054","()","       Returns the length of the queue.       ",2],["lock","Mutex","classes/Mutex.html#M000004","()","       Attempts to grab the lock and waits if it isn't available.       ",2],["lock","Mutex","classes/Mutex.html#M000034","()","       Attempts to grab the lock and waits if it isn't available.       ",2],["locked?","Mutex","classes/Mutex.html#M000002","()","       Returns +true+ if this lock is currently held by some thread.       ",2],["locked?","Mutex","classes/Mutex.html#M000032","()","       Returns +true+ if this lock is currently held by some thread.       ",2],["marshal_load","ConditionVariable","classes/ConditionVariable.html#M000038","(p1)","   for marshalling mutexes and condvars     ",2],["marshal_load","ConditionVariable","classes/ConditionVariable.html#M000008","(p1)","   for marshalling mutexes and condvars     ",2],["marshal_load","Mutex","classes/Mutex.html#M000000","(p1)","   for marshalling mutexes and condvars     ",2],["marshal_load","Mutex","classes/Mutex.html#M000030","(p1)","   for marshalling mutexes and condvars     ",2],["max","SizedQueue","classes/SizedQueue.html#M000028","()","       Returns the maximum size of the queue.       ",2],["max","SizedQueue","classes/SizedQueue.html#M000058","()","       Returns the maximum size of the queue.       ",2],["max=","SizedQueue","classes/SizedQueue.html#M000029","(p1)","       Sets the maximum size of the queue.       ",2],["max=","SizedQueue","classes/SizedQueue.html#M000059","(p1)","       Sets the maximum size of the queue.       ",2],["new","SizedQueue","classes/SizedQueue.html#M000021","(p1)","       Creates a new Mutex       ",2],["new","SizedQueue","classes/SizedQueue.html#M000051","(p1)","       Creates a new Mutex       ",2],["num_waiting","Queue","classes/Queue.html#M000018","()","       Returns the number of threads waiting on the queue.       ",2],["num_waiting","Queue","classes/Queue.html#M000048","()","       Returns the number of threads waiting on the queue.       ",2],["num_waiting","SizedQueue","classes/SizedQueue.html#M000025","()","       Returns the number of threads waiting on the queue.       ",2],["num_waiting","SizedQueue","classes/SizedQueue.html#M000055","()","       Returns the number of threads waiting on the queue.       ",2],["pop","Queue","classes/Queue.html#M000049","(...)","   call_seq: pop(non_block=false)       Retrieves data from the queue.  If the queue is empty, the calling",2],["pop","Queue","classes/Queue.html#M000019","(...)","   call_seq: pop(non_block=false)       Retrieves data from the queue.  If the queue is empty, the calling",2],["pop","SizedQueue","classes/SizedQueue.html#M000056","(...)","   call_seq: pop(non_block=false)       Retrieves data from the queue.  If the queue is empty, the calling",2],["pop","SizedQueue","classes/SizedQueue.html#M000026","(...)","   call_seq: pop(non_block=false)       Retrieves data from the queue.  If the queue is empty, the calling",2],["push","Queue","classes/Queue.html#M000050","(p1)","       Pushes +obj+ to the queue.       ",2],["push","Queue","classes/Queue.html#M000020","(p1)","       Pushes +obj+ to the queue.       ",2],["push","SizedQueue","classes/SizedQueue.html#M000027","(p1)","       Pushes +obj+ to the queue.       ",2],["push","SizedQueue","classes/SizedQueue.html#M000057","(p1)","       Pushes +obj+ to the queue.       ",2],["signal","ConditionVariable","classes/ConditionVariable.html#M000042","()","       Wakes up the first thread in line waiting for this condition.       ",2],["signal","ConditionVariable","classes/ConditionVariable.html#M000012","()","       Wakes up the first thread in line waiting for this condition.       ",2],["synchronize","Mutex","classes/Mutex.html#M000007","()","       Obtains a lock, runs the block, and releases the lock when the block    completes.  See the example",2],["synchronize","Mutex","classes/Mutex.html#M000037","()","       Obtains a lock, runs the block, and releases the lock when the block    completes.  See the example",2],["try_lock","Mutex","classes/Mutex.html#M000003","()","       Attempts to obtain the lock and returns immediately. Returns +true+ if the    lock was granted.",2],["try_lock","Mutex","classes/Mutex.html#M000033","()","       Attempts to obtain the lock and returns immediately. Returns +true+ if the    lock was granted.",2],["unlock","Mutex","classes/Mutex.html#M000005","()","      Releases the lock. Returns +nil+ if ref wasn't locked.       ",2],["unlock","Mutex","classes/Mutex.html#M000035","()","      Releases the lock. Returns +nil+ if ref wasn't locked.       ",2],["wait","ConditionVariable","classes/ConditionVariable.html#M000010","(p1)","       Releases the lock held in +mutex+ and waits; reacquires the lock on wakeup.       ",2],["wait","ConditionVariable","classes/ConditionVariable.html#M000040","(p1)","       Releases the lock held in +mutex+ and waits; reacquires the lock on wakeup.       ",2],["CHANGELOG","files/CHANGELOG.html","files/CHANGELOG.html","","  v1.0.7  Enable for all 1.8.x versions; add fix for 1.8.6 patchlevels < 31    v1.0.6  Try again for",3],["Makefile","files/ext/fastthread/Makefile.html","files/ext/fastthread/Makefile.html",""," SHELL = /bin/sh  #### Start of system configuration section. ####  srcdir = . topdir = /opt/local/lib/ruby/1.8/i686-darwin11",3],["extconf.rb","files/ext/fastthread/extconf_rb.html","files/ext/fastthread/extconf_rb.html","","",3],["extconf.rb","files/ext/fastthread/extconf_rb.html","files/ext/fastthread/extconf_rb.html","","",3],["fastthread.c","files/ext/fastthread/fastthread_c.html","files/ext/fastthread/fastthread_c.html","","",3],["fastthread.c","files/ext/fastthread/fastthread_c.html","files/ext/fastthread/fastthread_c.html","","",3]],"searchIndex":["conditionvariable","mutex","queue","sizedqueue","broadcast()","broadcast()","clear()","clear()","clear()","clear()","empty?()","empty?()","empty?()","empty?()","exclusive_unlock()","exclusive_unlock()","length()","length()","length()","length()","lock()","lock()","locked?()","locked?()","marshal_load()","marshal_load()","marshal_load()","marshal_load()","max()","max()","max=()","max=()","new()","new()","num_waiting()","num_waiting()","num_waiting()","num_waiting()","pop()","pop()","pop()","pop()","push()","push()","push()","push()","signal()","signal()","synchronize()","synchronize()","try_lock()","try_lock()","unlock()","unlock()","wait()","wait()","changelog","makefile","extconf.rb","extconf.rb","fastthread.c","fastthread.c"],"longSearchIndex":["ext/fastthread/fastthread.c","ext/fastthread/fastthread.c","ext/fastthread/fastthread.c","ext/fastthread/fastthread.c","conditionvariable","conditionvariable","queue","queue","sizedqueue","sizedqueue","queue","queue","sizedqueue","sizedqueue","mutex","mutex","queue","queue","sizedqueue","sizedqueue","mutex","mutex","mutex","mutex","conditionvariable","conditionvariable","mutex","mutex","sizedqueue","sizedqueue","sizedqueue","sizedqueue","sizedqueue","sizedqueue","queue","queue","sizedqueue","sizedqueue","queue","queue","sizedqueue","sizedqueue","queue","queue","sizedqueue","sizedqueue","conditionvariable","conditionvariable","mutex","mutex","mutex","mutex","mutex","mutex","conditionvariable","conditionvariable","files/changelog.html","files/ext/fastthread/makefile.html","files/ext/fastthread/extconf_rb.html","files/ext/fastthread/extconf_rb.html","files/ext/fastthread/fastthread_c.html","files/ext/fastthread/fastthread_c.html"]}}