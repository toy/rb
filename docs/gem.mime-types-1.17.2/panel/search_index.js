var search_data = {"index":{"info":[["MIME","lib/mime/types.rb","classes/MIME.html"," < ","The namespace for MIME applications, tools, and libraries. ",1],["InvalidContentType","MIME","classes/MIME/InvalidContentType.html"," < RuntimeError","Reflects a MIME Content-Type which is in invalid format (e.g., it isn't in the form of type/subtype).",1],["Type","MIME","classes/MIME/Type.html"," < Object","The definition of one MIME content-type. == Usage require 'mime/types' plaintext = MIME::Types['text/plain']",1],["Types","MIME","classes/MIME/Types.html"," < Object","= MIME::Types MIME types are used in MIME-compliant communications, as in e-mail or HTTP traffic, to",1],["<=>","MIME::Type","classes/MIME/Type.html#M000001","(other)","Compares the MIME::Type against the exact content type or the simplified type (the simplified type will",2],["[]","MIME::Types","classes/MIME/Types.html#M000032","(type_id, flags = {})","Returns a list of MIME::Type objects, which may be empty. The optional flag parameters are :complete",2],["[]","MIME::Types","classes/MIME/Types.html#M000039","(type_id, flags = {})","Returns a list of MIME::Type objects, which may be empty. The optional flag parameters are :complete",2],["add","MIME::Types","classes/MIME/Types.html#M000035","(*types)","Add one or more MIME::Type objects to the set of known types. Each type should be experimental (e.g.,",2],["add","MIME::Types","classes/MIME/Types.html#M000042","(*types)","Add one or more MIME::Type objects to the set of known types. Each type should be experimental (e.g.,",2],["ascii?","MIME::Type","classes/MIME/Type.html#M000019","()","MIME types can be specified to be sent across a network in particular formats. This method returns +false+",2],["binary?","MIME::Type","classes/MIME/Type.html#M000018","()","MIME types can be specified to be sent across a network in particular formats. This method returns +true+",2],["complete?","MIME::Type","classes/MIME/Type.html#M000023","()","Returns +true+ if the MIME::Type specifies an extension list, indicating that it is a complete MIME::Type.",2],["default_encoding","MIME::Type","classes/MIME/Type.html#M000007","()","",2],["docs=","MIME::Type","classes/MIME/Type.html#M000010","(d)","",2],["eql?","MIME::Type","classes/MIME/Type.html#M000003","(other)","Returns +true+ if the other object is a MIME::Type and the content types match. ",2],["from_array","MIME::Type","classes/MIME/Type.html#M000013","(*args)","Creates a MIME::Type from an array in the form of: [type-name, [extensions], encoding, system] +extensions+,",2],["from_hash","MIME::Type","classes/MIME/Type.html#M000014","(hash)","Creates a MIME::Type from a hash. Keys are case-insensitive, dashes may be replaced with underscores,",2],["from_mime_type","MIME::Type","classes/MIME/Type.html#M000015","(mime_type)","Essentially a copy constructor. MIME::Type.from_mime_type(plaintext) is equivalent to: MIME::Type.new(plaintext.content_type.dup)",2],["like?","MIME::Type","classes/MIME/Type.html#M000000","(other)","Returns +true+ if the simplified type matches the current  ",2],["new","MIME::Type","classes/MIME/Type.html#M000016","(content_type)","Builds a MIME::Type object from the provided MIME Content Type value (e.g., 'text/plain' or 'applicaton/x-eruby').",2],["new","MIME::Types","classes/MIME/Types.html#M000028","(data_version = nil)","",2],["obsolete?","MIME::Type","classes/MIME/Type.html#M000009","()","Returns +true+ if the media type is obsolete. ",2],["of","MIME::Types","classes/MIME/Types.html#M000041","(filename, platform = false)","A synonym for MIME::Types.type_for ",2],["of","MIME::Types","classes/MIME/Types.html#M000034","(filename, platform = false)","A synonym for MIME::Types.type_for ",2],["platform?","MIME::Type","classes/MIME/Type.html#M000022","()","Returns +true+ if the MIME::Type is specific to the current operating system as represented by RUBY_PLATFORM.",2],["priority_compare","MIME::Type","classes/MIME/Type.html#M000002","(other)","Compares the MIME::Type based on how reliable it is before doing a normal <=> comparison. Used by MIME::Types#[]",2],["registered?","MIME::Type","classes/MIME/Type.html#M000017","()","MIME content-types which are not regestered by IANA nor defined in RFCs are required to start with <tt>x-</tt>.",2],["signature?","MIME::Type","classes/MIME/Type.html#M000020","()","Returns +true+ when the simplified MIME type is in the list of known digital signatures. ",2],["simplified","MIME::Type","classes/MIME/Type.html#M000012","(content_type)","The MIME types main- and sub-label can both start with <tt>x-</tt>, which indicates that it is a non-registered",2],["system?","MIME::Type","classes/MIME/Type.html#M000021","()","Returns +true+ if the MIME::Type is specific to an operating system. ",2],["to_a","MIME::Type","classes/MIME/Type.html#M000026","()","Returns the MIME type as an array suitable for use with MIME::Type.from_array. ",2],["to_hash","MIME::Type","classes/MIME/Type.html#M000027","()","Returns the MIME type as an array suitable for use with MIME::Type.from_hash. ",2],["to_s","MIME::Type","classes/MIME/Type.html#M000024","()","Returns the MIME type as a string. ",2],["to_str","MIME::Type","classes/MIME/Type.html#M000025","()","Returns the MIME type as a string for implicit conversions. ",2],["type_for","MIME::Types","classes/MIME/Types.html#M000033","(filename, platform = false)","Return the list of MIME::Types which belongs to the file based on its filename extension. If +platform+",2],["type_for","MIME::Types","classes/MIME/Types.html#M000040","(filename, platform = false)","Return the list of MIME::Types which belongs to the file based on its filename extension. If +platform+",2],["urls","MIME::Type","classes/MIME/Type.html#M000011","()","The decoded URL list for this MIME::Type. The special URL value IANA will be translated into: http://www.iana.org/assignments/media-types/<mediatype>/<subtype>",2],["use_instead","MIME::Type","classes/MIME/Type.html#M000008","()","",2],["History.rdoc","files/History_rdoc.html","files/History_rdoc.html","","== MIME::Types 1.17.2 / 2011-10-25 * Bug Fixes:   * Fixed an issue with Ruby 1.9 and file encoding. ",3],["License.rdoc","files/License_rdoc.html","files/License_rdoc.html","","== License  This software is available under a triple disjunctive license: {Ruby's license}[http://www.ruby-lang.org/en/LICENSE.txt],",3],["Manifest.txt","files/Manifest_txt.html","files/Manifest_txt.html","",".hoerc History.rdoc License.rdoc Manifest.txt README.rdoc Rakefile lib/mime/types.rb lib/mime/types/application",3],["README.rdoc","files/README_rdoc.html","files/README_rdoc.html","","= MIME::Types for Ruby  == Description  This library allows for the identification of a file's likely",3],["types.rb","files/lib/mime/types_rb.html","files/lib/mime/types_rb.html","","The namespace for MIME applications, tools, and libraries. ",3],["application","files/lib/mime/types/application.html","files/lib/mime/types/application.html","","application/1d-interleaved-parityfec 'IANA,RFC6015 application/3gpp-ims+xml 'IANA,[Meredith] application/CSTAdata+xml",3],["application.mac","files/lib/mime/types/application_mac.html","files/lib/mime/types/application_mac.html","","mac:application/x-mac @bin :base64 mac:application/x-macbase64 @bin :base64 ",3],["application.nonstandard","files/lib/mime/types/application_nonstandard.html","files/lib/mime/types/application_nonstandard.html","","*application/SLA 'LTSW *application/STEP 'LTSW *application/acad 'LTSW *application/appledouble :base64",3],["application.obsolete","files/lib/mime/types/application_obsolete.html","files/lib/mime/types/application_obsolete.html","","!application/smil @smi,smil :8bit 'IANA,RFC4536 =use-instead:application/smil+xml !application/vnd.arastra.swi",3],["audio","files/lib/mime/types/audio.html","files/lib/mime/types/audio.html","","audio/1d-interleaved-parityfec 'IANA,RFC6015 audio/32kadpcm 'IANA,RFC3802,RFC2421 audio/3gpp 'IANA,RFC3839,RFC6381",3],["audio.nonstandard","files/lib/mime/types/audio_nonstandard.html","files/lib/mime/types/audio_nonstandard.html","","audio/x-aiff @aif,aifc,aiff :base64 audio/x-aac @aac audio/x-midi @mid,midi,kar :base64 audio/x-pn-realaudio",3],["audio.obsolete","files/lib/mime/types/audio_obsolete.html","files/lib/mime/types/audio_obsolete.html","","!audio/vnd.qcelp @qcp 'IANA,RFC3625 =use-instead:audio/QCELP ",3],["image","files/lib/mime/types/image.html","files/lib/mime/types/image.html","","image/cgm 'IANA,[Francis] image/example 'IANA,RFC4735 image/fits 'IANA,RFC4047 image/g3fax 'IANA,RFC1494",3],["image.nonstandard","files/lib/mime/types/image_nonstandard.html","files/lib/mime/types/image_nonstandard.html","","*image/pjpeg :base64 =Fixes a bug with IE6 and progressive JPEGs image/x-bmp @bmp image/x-cmu-raster",3],["image.obsolete","files/lib/mime/types/image_obsolete.html","files/lib/mime/types/image_obsolete.html","","*!image/bmp @bmp =use-instead:image/x-bmp *!image/cmu-raster =use-instead:image/x-cmu-raster *!image/targa",3],["message","files/lib/mime/types/message.html","files/lib/mime/types/message.html","","message/CPIM 'IANA,RFC3862 message/delivery-status 'IANA,RFC1894 message/disposition-notification 'IANA,RFC3798",3],["message.obsolete","files/lib/mime/types/message_obsolete.html","files/lib/mime/types/message_obsolete.html","","!message/news :8bit 'IANA,RFC1036,[H.Spencer] ",3],["model","files/lib/mime/types/model.html","files/lib/mime/types/model.html","","model/example 'IANA,RFC4735 model/iges @igs,iges 'IANA,[Parks] model/mesh @msh,mesh,silo 'IANA,RFC2077",3],["multipart","files/lib/mime/types/multipart.html","files/lib/mime/types/multipart.html","","multipart/alternative :8bit 'IANA,RFC2045,RFC2046 multipart/appledouble :8bit 'IANA,[Faltstrom] multipart/byteranges",3],["multipart.nonstandard","files/lib/mime/types/multipart_nonstandard.html","files/lib/mime/types/multipart_nonstandard.html","","!multipart/x-parallel =use-instead:multipart/parallel ",3],["multipart.obsolete","files/lib/mime/types/multipart_obsolete.html","files/lib/mime/types/multipart_obsolete.html","","multipart/x-gzip multipart/x-mixed-replace multipart/x-tar multipart/x-ustar multipart/x-www-form-urlencoded",3],["other.nonstandard","files/lib/mime/types/other_nonstandard.html","files/lib/mime/types/other_nonstandard.html","","!chemical/x-pdb @pdb =use-instead:x-chemical/x-pdb !chemical/x-xyz @xyz =use-instead:x-chemical/x-xyz",3],["text","files/lib/mime/types/text.html","files/lib/mime/types/text.html","","text/1d-interleaved-parityfec 'IANA,RFC6015 text/RED 'IANA,RFC4102 text/calendar 'IANA,RFC5545 text/css",3],["text.nonstandard","files/lib/mime/types/text_nonstandard.html","files/lib/mime/types/text_nonstandard.html","","text/x-component @htc :8bit text/x-setext @etx text/x-vcalendar @vcs :8bit text/x-vcard @vcf :8bit text/x-yaml",3],["text.obsolete","files/lib/mime/types/text_obsolete.html","files/lib/mime/types/text_obsolete.html","","!text/directory 'IANA,RFC2425,RFC6350 !text/ecmascript 'IANA,RFC4329 !text/javascript 'IANA,RFC4329 !text/x-rtf",3],["text.vms","files/lib/mime/types/text_vms.html","files/lib/mime/types/text_vms.html","","vms:text/plain @doc :8bit ",3],["video","files/lib/mime/types/video.html","files/lib/mime/types/video.html","","video/1d-interleaved-parityfec 'IANA,RFC6015 video/3gpp @3gp,3gpp 'IANA,RFC3839,RFC6381 video/3gpp-tt",3],["video.nonstandard","files/lib/mime/types/video_nonstandard.html","files/lib/mime/types/video_nonstandard.html","","video/x-dl @dl :base64 video/x-fli @fli :base64 video/x-flv @flv :base64 video/x-gl @gl :base64 video/x-ms-asf",3],["video.obsolete","files/lib/mime/types/video_obsolete.html","files/lib/mime/types/video_obsolete.html","","*!video/dl @dl :base64 =use-instead:video/x-dl *!video/gl @gl :base64 =use-instead:video/x-gl *!video/vnd.dlna.mpeg-tts",3],["application.txt","files/type-lists/application_txt.html","files/type-lists/application_txt.html","","application/1d-interleaved-parityfec 'IANA,RFC6015 application/3gpp-ims+xml 'IANA,[Meredith] application/activemessage",3],["audio.txt","files/type-lists/audio_txt.html","files/type-lists/audio_txt.html","","audio/1d-interleaved-parityfec 'IANA,RFC6015 audio/32kadpcm 'IANA,RFC3802,RFC2421 audio/3gpp 'IANA,RFC3839,RFC6381",3],["image.txt","files/type-lists/image_txt.html","files/type-lists/image_txt.html","","image/cgm 'IANA,[Francis] image/example 'IANA,RFC4735 image/fits 'IANA,RFC4047 image/g3fax 'IANA,RFC1494",3],["message.txt","files/type-lists/message_txt.html","files/type-lists/message_txt.html","","message/CPIM 'IANA,RFC3862 message/delivery-status 'IANA,RFC1894 message/disposition-notification 'IANA,RFC3798",3],["model.txt","files/type-lists/model_txt.html","files/type-lists/model_txt.html","","model/example 'IANA,RFC4735 model/iges 'IANA,[Parks] model/mesh 'IANA,RFC2077 model/vnd.collada+xml 'IANA,[Riordon]",3],["multipart.txt","files/type-lists/multipart_txt.html","files/type-lists/multipart_txt.html","","multipart/alternative 'IANA,RFC2045,RFC2046 multipart/appledouble 'IANA,[Faltstrom] multipart/byteranges",3],["text.txt","files/type-lists/text_txt.html","files/type-lists/text_txt.html","","text/1d-interleaved-parityfec 'IANA,RFC6015 text/calendar 'IANA,RFC5545 text/css 'IANA,RFC2318 text/csv",3],["video.txt","files/type-lists/video_txt.html","files/type-lists/video_txt.html","","video/1d-interleaved-parityfec 'IANA,RFC6015 video/3gpp 'IANA,RFC3839,RFC6381 video/3gpp2 'IANA,RFC4393,RFC6381",3]],"searchIndex":["mime","invalidcontenttype","type","types","<=>()","[]()","[]()","add()","add()","ascii?()","binary?()","complete?()","default_encoding()","docs=()","eql?()","from_array()","from_hash()","from_mime_type()","like?()","new()","new()","obsolete?()","of()","of()","platform?()","priority_compare()","registered?()","signature?()","simplified()","system?()","to_a()","to_hash()","to_s()","to_str()","type_for()","type_for()","urls()","use_instead()","history.rdoc","license.rdoc","manifest.txt","readme.rdoc","types.rb","application","application.mac","application.nonstandard","application.obsolete","audio","audio.nonstandard","audio.obsolete","image","image.nonstandard","image.obsolete","message","message.obsolete","model","multipart","multipart.nonstandard","multipart.obsolete","other.nonstandard","text","text.nonstandard","text.obsolete","text.vms","video","video.nonstandard","video.obsolete","application.txt","audio.txt","image.txt","message.txt","model.txt","multipart.txt","text.txt","video.txt"],"longSearchIndex":["lib/mime/types.rb","mime","mime","mime","mime::type","mime::types","mime::types","mime::types","mime::types","mime::type","mime::type","mime::type","mime::type","mime::type","mime::type","mime::type","mime::type","mime::type","mime::type","mime::type","mime::types","mime::type","mime::types","mime::types","mime::type","mime::type","mime::type","mime::type","mime::type","mime::type","mime::type","mime::type","mime::type","mime::type","mime::types","mime::types","mime::type","mime::type","files/history_rdoc.html","files/license_rdoc.html","files/manifest_txt.html","files/readme_rdoc.html","files/lib/mime/types_rb.html","files/lib/mime/types/application.html","files/lib/mime/types/application_mac.html","files/lib/mime/types/application_nonstandard.html","files/lib/mime/types/application_obsolete.html","files/lib/mime/types/audio.html","files/lib/mime/types/audio_nonstandard.html","files/lib/mime/types/audio_obsolete.html","files/lib/mime/types/image.html","files/lib/mime/types/image_nonstandard.html","files/lib/mime/types/image_obsolete.html","files/lib/mime/types/message.html","files/lib/mime/types/message_obsolete.html","files/lib/mime/types/model.html","files/lib/mime/types/multipart.html","files/lib/mime/types/multipart_nonstandard.html","files/lib/mime/types/multipart_obsolete.html","files/lib/mime/types/other_nonstandard.html","files/lib/mime/types/text.html","files/lib/mime/types/text_nonstandard.html","files/lib/mime/types/text_obsolete.html","files/lib/mime/types/text_vms.html","files/lib/mime/types/video.html","files/lib/mime/types/video_nonstandard.html","files/lib/mime/types/video_obsolete.html","files/type-lists/application_txt.html","files/type-lists/audio_txt.html","files/type-lists/image_txt.html","files/type-lists/message_txt.html","files/type-lists/model_txt.html","files/type-lists/multipart_txt.html","files/type-lists/text_txt.html","files/type-lists/video_txt.html"]}}