var search_data = {"index":{"info":[["HTTParty","lib/httparty/core_extensions.rb","classes/HTTParty.html"," < ","@see HTTParty::ClassMethods ",1],["AllowedFormatsDeprecation","HTTParty","classes/HTTParty/AllowedFormatsDeprecation.html"," < ","",1],["ClassMethods","HTTParty","classes/HTTParty/ClassMethods.html"," < ","== Common Request Options Request methods (get, post, put, delete, head, options) all take a common set",1],["HashConversions","HTTParty","classes/HTTParty/HashConversions.html"," < ","",1],["Parser","HTTParty","classes/HTTParty/Parser.html"," < Object","The default parser used by HTTParty, supports xml, json, html, yaml, and plain text. == Custom Parsers",1],["RedirectionTooDeep","HTTParty","classes/HTTParty/RedirectionTooDeep.html"," < ResponseError","Exception that is raised when request has redirected too many times. Calling {#response} returns the",1],["Headers","HTTParty::Response","classes/HTTParty/Response/Headers.html"," < Object","",1],["Response","HTTParty::Response","classes/HTTParty/Response/Response.html"," < Object","",1],["ResponseError","HTTParty","classes/HTTParty/ResponseError.html"," < StandardError","@abstract Exceptions which inherit from ResponseError contain the Net::HTTP response object accessible",1],["UnsupportedFormat","HTTParty","classes/HTTParty/UnsupportedFormat.html"," < StandardError","Exception raised when you attempt to set a non-existant format ",1],["UnsupportedURIScheme","HTTParty","classes/HTTParty/UnsupportedURIScheme.html"," < StandardError","Exception raised when using a URI scheme other than HTTP or HTTPS ",1],["Net","lib/httparty/net_digest_auth.rb","classes/Net.html"," < ","",1],["HTTPHeader","Net","classes/Net/HTTPHeader.html"," < ","",1],["DigestAuthenticator","Net::HTTPHeader","classes/Net/HTTPHeader/DigestAuthenticator.html"," < Object","",1],["==","HTTParty::Response::Headers","classes/HTTParty/Response/Headers.html#M000028","(other)","",2],["a1","Net::HTTPHeader::DigestAuthenticator","classes/Net/HTTPHeader/DigestAuthenticator.html#M000017","()","",2],["a2","Net::HTTPHeader::DigestAuthenticator","classes/Net/HTTPHeader/DigestAuthenticator.html#M000020","()","",2],["authorization_header","Net::HTTPHeader::DigestAuthenticator","classes/Net/HTTPHeader/DigestAuthenticator.html#M000005","()","",2],["base_uri","HTTParty::ClassMethods","classes/HTTParty/ClassMethods.html#M000035","(uri=nil)","Allows setting a base uri to be used for each request. Will normalize uri to include http, etc. class",2],["basic_auth","HTTParty::ClassMethods","classes/HTTParty/ClassMethods.html#M000036","(u, p)","Allows setting basic authentication username and password. class Foo include HTTParty basic_auth 'username',",2],["call","HTTParty::Parser","classes/HTTParty/Parser.html#M000006","(body, format)","Instantiate the parser and call {#parse}. @param [String] body the response body @param [Symbol] format",2],["const_missing","HTTParty::AllowedFormatsDeprecation","classes/HTTParty/AllowedFormatsDeprecation.html#M000032","(const)","",2],["cookies","HTTParty::ClassMethods","classes/HTTParty/ClassMethods.html#M000043","(h={})","",2],["debug_output","HTTParty::ClassMethods","classes/HTTParty/ClassMethods.html#M000041","(stream = $stderr)","Set an output stream for debugging, defaults to $stderr. The output stream is passed on to Net::HTTP#set_debug_output.",2],["default_params","HTTParty::ClassMethods","classes/HTTParty/ClassMethods.html#M000039","(h={})","Allows setting default parameters to be appended to each request. Great for api keys and such. class",2],["default_timeout","HTTParty::ClassMethods","classes/HTTParty/ClassMethods.html#M000040","(t)","Allows setting a default timeout for all HTTP calls Timeout is specified in seconds. class Foo include",2],["delete","HTTParty","classes/HTTParty.html#M000067","(*args)","",2],["delete","HTTParty::ClassMethods","classes/HTTParty/ClassMethods.html#M000056","(path, options={})","Perform a DELETE request to a path ",2],["digest_auth","HTTParty::ClassMethods","classes/HTTParty/ClassMethods.html#M000037","(u, p)","Allows setting digest authentication username and password. class Foo include HTTParty digest_auth 'username',",2],["digest_auth","Net::HTTPHeader","classes/Net/HTTPHeader.html#M000003","(username, password, response)","",2],["disable_rails_query_string_format","HTTParty::ClassMethods","classes/HTTParty/ClassMethods.html#M000038","()","Do not send rails style query strings. Specically, don't use bracket notation when sending an array For",2],["follow_redirects","HTTParty::ClassMethods","classes/HTTParty/ClassMethods.html#M000044","(value = true)","Proceed to the location header when an HTTP response dictates a redirect. Redirects are always followed",2],["format","HTTParty::ClassMethods","classes/HTTParty/ClassMethods.html#M000045","(f = nil)","Allows setting the format with which to parse. Must be one of the allowed formats ie: json, xml class",2],["format_from_mimetype","HTTParty::Parser","classes/HTTParty/Parser.html#M000012","(mimetype)","@param [String] mimetype response MIME type @return [Symbol] @return [nil] mime type not supported ",2],["formats","HTTParty::Parser","classes/HTTParty/Parser.html#M000011","()","@return [Hash] the SupportedFormats hash ",2],["get","HTTParty","classes/HTTParty.html#M000064","(*args)","",2],["get","HTTParty::ClassMethods","classes/HTTParty/ClassMethods.html#M000053","(path, options={})","Allows making a get request to a url. class Foo include HTTParty end # Simple get with full url Foo.get('http://foo.com/resource.json')",2],["head","HTTParty","classes/HTTParty.html#M000068","(*args)","",2],["head","HTTParty::ClassMethods","classes/HTTParty/ClassMethods.html#M000057","(path, options={})","Perform a HEAD request to a path ",2],["headers","HTTParty::ClassMethods","classes/HTTParty/ClassMethods.html#M000042","(h={})","Allows setting HTTP headers to be used for each request. class Foo include HTTParty headers 'Accept'",2],["html","HTTParty::Parser","classes/HTTParty/Parser.html#M000023","()","",2],["http_proxy","HTTParty::ClassMethods","classes/HTTParty/ClassMethods.html#M000034","(addr=nil, port = nil)","Allows setting http proxy information to be used class Foo include HTTParty http_proxy 'http://foo.com',",2],["included","HTTParty","classes/HTTParty.html#M000033","(base)","",2],["inspect","HTTParty::Response::Headers","classes/HTTParty/Response/Headers.html#M000029","()","",2],["json","HTTParty::Parser","classes/HTTParty/Parser.html#M000021","()","",2],["maintain_method_across_redirects","HTTParty::ClassMethods","classes/HTTParty/ClassMethods.html#M000047","(value = true)","Declare that you wish to maintain the chosen HTTP method across redirects. The default behavior is to",2],["md5","Net::HTTPHeader::DigestAuthenticator","classes/Net/HTTPHeader/DigestAuthenticator.html#M000016","(str)","",2],["method_missing","HTTParty::Response::Headers","classes/HTTParty/Response/Headers.html#M000030","(name, *args, &block)","",2],["new","HTTParty::Parser","classes/HTTParty/Parser.html#M000015","(body, format)","",2],["new","HTTParty::Response::Headers","classes/HTTParty/Response/Headers.html#M000027","(header)","",2],["new","HTTParty::ResponseError","classes/HTTParty/ResponseError.html#M000000","(response)","Instantiate an instance of ResponseError with a Net::HTTPResponse object @param [Net::HTTPResponse] ",2],["new","Net::HTTPHeader::DigestAuthenticator","classes/Net/HTTPHeader/DigestAuthenticator.html#M000004","(username, password, method, path, response_header)","",2],["no_follow","HTTParty::ClassMethods","classes/HTTParty/ClassMethods.html#M000046","(value = false)","Declare whether or not to follow redirects.  When true, an {HTTParty::RedirectionTooDeep} error will",2],["normalize_param","HTTParty::HashConversions","classes/HTTParty/HashConversions.html#M000002","(key, value)","@param key<Object> The key for the param. @param value<Object> The value for the param. @return <String>",2],["options","HTTParty","classes/HTTParty.html#M000069","(*args)","",2],["options","HTTParty::ClassMethods","classes/HTTParty/ClassMethods.html#M000058","(path, options={})","Perform an OPTIONS request to a path ",2],["parse","HTTParty::Parser","classes/HTTParty/Parser.html#M000018","()","@return [Object] the parsed body @return [nil] when the response body is nil or an empty string ",2],["parse","Net::HTTPHeader::DigestAuthenticator","classes/Net/HTTPHeader/DigestAuthenticator.html#M000007","(response_header)","",2],["parse_supported_format","HTTParty::Parser","classes/HTTParty/Parser.html#M000026","()","",2],["parser","HTTParty::ClassMethods","classes/HTTParty/ClassMethods.html#M000052","(custom_parser = nil)","Allows setting a custom parser for the response. class Foo include HTTParty parser Proc.new {|data| ...}",2],["pem","HTTParty::ClassMethods","classes/HTTParty/ClassMethods.html#M000048","(pem_contents, password=nil)","Allows setting a PEM file to be used class Foo include HTTParty pem File.read('/home/user/my.pem'), \"optional",2],["plain","HTTParty::Parser","classes/HTTParty/Parser.html#M000024","()","",2],["post","HTTParty","classes/HTTParty.html#M000065","(*args)","",2],["post","HTTParty::ClassMethods","classes/HTTParty/ClassMethods.html#M000054","(path, options={})","Allows making a post request to a url. class Foo include HTTParty end # Simple post with full url and",2],["put","HTTParty","classes/HTTParty.html#M000066","(*args)","",2],["put","HTTParty::ClassMethods","classes/HTTParty/ClassMethods.html#M000055","(path, options={})","Perform a PUT request to a path ",2],["qop_present?","Net::HTTPHeader::DigestAuthenticator","classes/Net/HTTPHeader/DigestAuthenticator.html#M000008","()","",2],["query_string_normalizer","HTTParty::ClassMethods","classes/HTTParty/ClassMethods.html#M000049","(normalizer)","Override the way query strings are normalized. Helpful for overriding the default rails normalization",2],["random","Net::HTTPHeader::DigestAuthenticator","classes/Net/HTTPHeader/DigestAuthenticator.html#M000009","()","",2],["request_digest","Net::HTTPHeader::DigestAuthenticator","classes/Net/HTTPHeader/DigestAuthenticator.html#M000010","()","",2],["respond_to?","HTTParty::Response::Headers","classes/HTTParty/Response/Headers.html#M000031","(method)","",2],["ssl_ca_file","HTTParty::ClassMethods","classes/HTTParty/ClassMethods.html#M000050","(path)","Allows setting an OpenSSL certificate authority file class Foo include HTTParty ssl_ca_file '/etc/ssl/certs/ca-certificates.crt'",2],["ssl_ca_path","HTTParty::ClassMethods","classes/HTTParty/ClassMethods.html#M000051","(path)","Allows setting an OpenSSL certificate authority path (directory) class Foo include HTTParty ssl_ca_path",2],["supported_formats","HTTParty::Parser","classes/HTTParty/Parser.html#M000013","()","@return [Array<Symbol>] list of supported formats ",2],["supports_format?","HTTParty::Parser","classes/HTTParty/Parser.html#M000014","(format)","@param [Symbol] format e.g. :json, :xml @return [Boolean] ",2],["supports_format?","HTTParty::Parser","classes/HTTParty/Parser.html#M000025","()","",2],["to_params","HTTParty::HashConversions","classes/HTTParty/HashConversions.html#M000001","(hash)","@return <String> This hash as a query string @example { :name => \"Bob\", :address => { :street => '111",2],["validate_format","HTTParty::ClassMethods","classes/HTTParty/ClassMethods.html#M000062","()","",2],["xml","HTTParty::Parser","classes/HTTParty/Parser.html#M000019","()","",2],["yaml","HTTParty::Parser","classes/HTTParty/Parser.html#M000022","()","",2],["History","files/History.html","files/History.html","","== 0.8.0 2011-09-13 * new   * switch to multi json/xml for parsing by default * bug fixes   * fix redirects",3],["MIT-LICENSE","files/MIT-LICENSE.html","files/MIT-LICENSE.html","","Copyright (c) 2008 John Nunemaker  Permission is hereby granted, free of charge, to any person obtaining",3],["README.rdoc","files/README_rdoc.html","files/README_rdoc.html","","= httparty  Makes http fun again!  == Note on Releases  Releases are tagged on github and also released",3],["httparty.rb","files/lib/httparty_rb.html","files/lib/httparty_rb.html","","",3],["cookie_hash.rb","files/lib/httparty/cookie_hash_rb.html","files/lib/httparty/cookie_hash_rb.html","","",3],["core_extensions.rb","files/lib/httparty/core_extensions_rb.html","files/lib/httparty/core_extensions_rb.html","","",3],["exceptions.rb","files/lib/httparty/exceptions_rb.html","files/lib/httparty/exceptions_rb.html","","",3],["hash_conversions.rb","files/lib/httparty/hash_conversions_rb.html","files/lib/httparty/hash_conversions_rb.html","","",3],["module_inheritable_attributes.rb","files/lib/httparty/module_inheritable_attributes_rb.html","files/lib/httparty/module_inheritable_attributes_rb.html","","",3],["net_digest_auth.rb","files/lib/httparty/net_digest_auth_rb.html","files/lib/httparty/net_digest_auth_rb.html","","",3],["parser.rb","files/lib/httparty/parser_rb.html","files/lib/httparty/parser_rb.html","","",3],["request.rb","files/lib/httparty/request_rb.html","files/lib/httparty/request_rb.html","","",3],["response.rb","files/lib/httparty/response_rb.html","files/lib/httparty/response_rb.html","","",3],["version.rb","files/lib/httparty/version_rb.html","files/lib/httparty/version_rb.html","","",3]],"searchIndex":["httparty","allowedformatsdeprecation","classmethods","hashconversions","parser","redirectiontoodeep","headers","response","responseerror","unsupportedformat","unsupportedurischeme","net","httpheader","digestauthenticator","==()","a1()","a2()","authorization_header()","base_uri()","basic_auth()","call()","const_missing()","cookies()","debug_output()","default_params()","default_timeout()","delete()","delete()","digest_auth()","digest_auth()","disable_rails_query_string_format()","follow_redirects()","format()","format_from_mimetype()","formats()","get()","get()","head()","head()","headers()","html()","http_proxy()","included()","inspect()","json()","maintain_method_across_redirects()","md5()","method_missing()","new()","new()","new()","new()","no_follow()","normalize_param()","options()","options()","parse()","parse()","parse_supported_format()","parser()","pem()","plain()","post()","post()","put()","put()","qop_present?()","query_string_normalizer()","random()","request_digest()","respond_to?()","ssl_ca_file()","ssl_ca_path()","supported_formats()","supports_format?()","supports_format?()","to_params()","validate_format()","xml()","yaml()","history","mit-license","readme.rdoc","httparty.rb","cookie_hash.rb","core_extensions.rb","exceptions.rb","hash_conversions.rb","module_inheritable_attributes.rb","net_digest_auth.rb","parser.rb","request.rb","response.rb","version.rb"],"longSearchIndex":["lib/httparty.rb","httparty","httparty","httparty","httparty","httparty","httparty::response","httparty::response","httparty","httparty","httparty","lib/httparty/net_digest_auth.rb","net","net::httpheader","httparty::response::headers","net::httpheader::digestauthenticator","net::httpheader::digestauthenticator","net::httpheader::digestauthenticator","httparty::classmethods","httparty::classmethods","httparty::parser","httparty::allowedformatsdeprecation","httparty::classmethods","httparty::classmethods","httparty::classmethods","httparty::classmethods","httparty","httparty::classmethods","httparty::classmethods","net::httpheader","httparty::classmethods","httparty::classmethods","httparty::classmethods","httparty::parser","httparty::parser","httparty","httparty::classmethods","httparty","httparty::classmethods","httparty::classmethods","httparty::parser","httparty::classmethods","httparty","httparty::response::headers","httparty::parser","httparty::classmethods","net::httpheader::digestauthenticator","httparty::response::headers","httparty::parser","httparty::response::headers","httparty::responseerror","net::httpheader::digestauthenticator","httparty::classmethods","httparty::hashconversions","httparty","httparty::classmethods","httparty::parser","net::httpheader::digestauthenticator","httparty::parser","httparty::classmethods","httparty::classmethods","httparty::parser","httparty","httparty::classmethods","httparty","httparty::classmethods","net::httpheader::digestauthenticator","httparty::classmethods","net::httpheader::digestauthenticator","net::httpheader::digestauthenticator","httparty::response::headers","httparty::classmethods","httparty::classmethods","httparty::parser","httparty::parser","httparty::parser","httparty::hashconversions","httparty::classmethods","httparty::parser","httparty::parser","files/history.html","files/mit-license.html","files/readme_rdoc.html","files/lib/httparty_rb.html","files/lib/httparty/cookie_hash_rb.html","files/lib/httparty/core_extensions_rb.html","files/lib/httparty/exceptions_rb.html","files/lib/httparty/hash_conversions_rb.html","files/lib/httparty/module_inheritable_attributes_rb.html","files/lib/httparty/net_digest_auth_rb.html","files/lib/httparty/parser_rb.html","files/lib/httparty/request_rb.html","files/lib/httparty/response_rb.html","files/lib/httparty/version_rb.html"]}}