var search_data = {"index":{"longSearchIndex":["lib/bundler.rb","bundler","bundler","bundler","bundler","bundler","bundler","bundler","bundler","bundler","bundler","bundler","bundler","bundler","bundler","bundler","bundler","bundler","bundler","bundler","bundler","bundler","bundler","bundler","bundler","bundler","bundler","bundler","bundler","bundler","bundler","bundler","bundler","bundler::resolver","bundler","bundler::rubygemsintegration","bundler::rubygemsintegration","bundler::rubygemsintegration","bundler::rubygemsintegration","bundler::rubygemsintegration","bundler::rubygemsintegration","bundler","bundler","bundler","bundler","bundler::source","bundler::source","bundler::source::path","bundler::source","bundler","bundler","bundler::ui","bundler::ui","bundler","lib/bundler/shared_helpers.rb","gem","gem","gem","gem","lib/bundler/vendor/thor.rb","thor","thor::actions","thor","thor::base","thor","thor","thor","thor","thor","thor::invocation","thor","thor","thor","thor","thor","thor::shell","thor::shell","thor::shell","thor","thor","thor","thor","bundler::index","bundler::depproxy","bundler::index","bundler::source::git","bundler::source::path","bundler::source::rubygems","bundler::index","bundler::settings","bundler::specset","bundler::settings","bundler::specset","bundler::resolver::specgroup","bundler::lazyspecification","bundler::remotespecification","bundler::dsl","bundler::dsl","bundler::dsl","bundler::remotespecification","bundler::resolver::specgroup","gem::specification","thor::actions","thor::actions","bundler::source::rubygems","thor::actions::classmethods","bundler::settings","bundler::rubygemsintegration::legacy","bundler::rubygemsintegration::modern","thor::base::classmethods","bundler::source::git","bundler::settings","bundler","bundler","thor::actions","thor::actions","thor::actions","thor::base::classmethods","thor::base::classmethods","thor::shell::basic","thor::shell::html","bundler::rubygemsintegration","thor","thor::group","bundler::source::git","thor::base::classmethods","bundler::ui::shell","bundler","bundler::rubygemsintegration","bundler::definition","bundler::index","bundler::gemhelper","bundler::gemhelper","bundler","bundler","bundler::cli","bundler::runtime","bundler::source::git","bundler::source::path","bundler::source::rubygems","bundler::runtime","bundler::source::git","bundler::source::path","bundler::source::rubygems","bundler::source::git","bundler::source::rubygems","bundler::source::rubygems","thor::util","thor::actions","bundler::cli","bundler::geminstaller","thor","thor::base::classmethods","bundler::source::git","thor::actions","thor::base::classmethods","thor::base::classmethods","bundler::gemhelper","bundler::sharedhelpers","bundler::resolver","bundler::rubygemsintegration","thor::actions","bundler::cli","bundler::rubygemsintegration","bundler","bundler","bundler::ui","bundler::ui::shell","bundler::cli","bundler::definition","bundler::definition","bundler::definition","thor::actions","thor::actions","thor::actions","bundler::definition","bundler::environment","bundler::dependency","bundler::dependency","bundler::resolver","bundler::ui","bundler::ui::shell","bundler::ui::shell","bundler","bundler::sharedhelpers","bundler","bundler::sharedhelpers","thor","bundler::deployment","bundler","bundler::settings","bundler::environment","bundler::runtime","gem::specification","bundler::dsl","thor","thor::group","thor::actions","thor::actions","thor::actions","bundler::rubygemsintegration","bundler::source::rubygems","thor::shell::basic","thor::shell::basic","thor::shell::basic","bundler::index","bundler::index","thor::actions","gem::dependency","bundler::definition","bundler::dsl","bundler","bundler::depproxy","bundler::source::git","bundler::source::path","bundler::source::rubygems","bundler::ui","bundler::ui::shell","thor::shell::basic","bundler::resolver","bundler::dsl","bundler::cli","thor::base::classmethods","bundler::definition","bundler::definition","bundler::source::rubygems","bundler::source::rubygems","bundler::remotespecification","bundler::rubygemsintegration","bundler::source::rubygems","thor::shell::basic","thor::util","thor::util","bundler::sharedhelpers","thor::actions","bundler::rubygemsintegration::legacy","bundler::rubygemsintegration::modern","thor","thor","bundler::definition","bundler::specset","bundler::resolver::specgroup","thor::task","bundler::source::git","bundler::source::path","bundler::source::rubygems","thor::base::classmethods","gem::specification","bundler::lazyspecification","bundler::remotespecification","bundler::cli","bundler::dsl","bundler::rubygemsintegration","bundler::rubygemsintegration","gem::specification","bundler::resolver","bundler::rubygemsintegration","bundler::dependency","bundler::resolver","bundler::dsl","bundler::source::path","bundler::source::path::installer","bundler::installer","bundler::gemhelpers","thor::actions","bundler::dsl","bundler::source::git","bundler::gemhelper","gem::specification","bundler::settings","thor::util","bundler::dsl","thor::base::classmethods","bundler::definition","bundler::graph","gem::specification","thor::actions","bundler::gemhelper","bundler::gemhelper","thor::task","thor::task","bundler::source::git","bundler::depproxy","bundler::source::path","bundler::source::rubygems","gem::platform","bundler::cli","bundler::cli","thor","thor","thor::group","thor::hiddentask","thor::task","bundler","bundler::sharedhelpers","bundler::source::git","bundler::definition","thor::actions","thor::rakecompat","bundler::definition","bundler::environment","bundler::rubygemsintegration","bundler::ui","bundler::ui::shell","thor::base::classmethods","bundler::cli","bundler::index","bundler::resolver::specgroup","thor::actions","thor::actions","thor::actions","thor::actions","bundler::environment","bundler::cli","bundler::gemhelper","bundler::installer","bundler::source::git","bundler::source::path","bundler::source::rubygems","bundler::gemhelper","bundler::installer","bundler","bundler::gemhelper","bundler::source::rubygems","thor::group","thor::invocation","thor::group","thor::invocation","bundler::dependency","bundler::settings","thor::actions","bundler","bundler","gem::specification","bundler::source::git","bundler::source::path","thor::util","gem::specification","bundler::rubygemsintegration","bundler::settings","bundler::source::path","bundler::cli","bundler::settings","bundler::cli","bundler::definition","bundler::environment","thor","bundler::specset","bundler::dependency","thor","bundler::rubygemsintegration","bundler::rubygemsintegration","bundler::matchplatform","gem::dependency","bundler::specset","bundler::specset","bundler::source::rubygems","thor::base::classmethods","bundler::depproxy","bundler::lazyspecification","bundler::remotespecification","thor","thor","bundler::dependency","bundler::dependency","bundler::dependency","bundler::definition","bundler","bundler::dependency","bundler::dependency","bundler::dependency","bundler::dependency","thor::shell::basic","thor::shell::basic","bundler::gemhelper","bundler::resolver::specgroup","bundler::source::git","bundler::source::path","bundler::source::rubygems","thor::base::classmethods","thor::util","thor::util","bundler::cli","bundler::definition","bundler::depproxy","bundler::dependency","bundler::dsl","bundler::environment","bundler::gemhelper","bundler::graph","bundler::graphnode","bundler::index","bundler::lazyspecification","bundler::lockfileparser","bundler::remotespecification","bundler::resolver","bundler::resolver::specgroup","bundler::rubygemsintegration","bundler::rubygemsintegration::ancient","bundler::settings","bundler::source::git","bundler::source::path","bundler::source::path::installer","bundler::source::rubygems","bundler::specset","bundler::ui::rgproxy","bundler::ui::shell","bundler::versionconflict","thor::actions","thor::base","thor::dynamictask","thor::shell","thor::task","bundler::definition","bundler::definition","thor::shell::basic","bundler::definition","thor::base::classmethods","bundler::graph","gem::specification","gem::requirement","bundler::source::rubygems","thor::task","bundler::cli","bundler::source::rubygems","bundler::cli","thor::shell::basic","bundler::lockfileparser","bundler::lockfileparser","bundler::lockfileparser","bundler::lockfileparser","bundler::dsl","bundler::rubygemsintegration","bundler::settings","bundler::source::git","bundler::gemhelper","bundler::dsl","bundler::dsl","bundler::rubygemsintegration","bundler::graph","thor::actions","thor::actions","bundler::rubygemsintegration","bundler::rubygemsintegration::almostmodern","bundler::definition","bundler::settings","thor::base::classmethods","thor::shell::basic","thor::shell::basic","thor","thor::group","bundler::runtime","thor::base::classmethods","thor::rakecompat","bundler::dependency","bundler::rubygemsintegration","bundler","thor","bundler::source::path","thor::actions","bundler::gemhelper","bundler::source::path","bundler::source::rubygems","bundler::source::rubygems","thor::base::classmethods","thor::base::classmethods","thor::actions","thor::actions","thor::group","thor::base::classmethods","bundler::definition","bundler::rubygemsintegration","bundler::rubygemsintegration","bundler::rubygemsintegration","bundler::rubygemsintegration","bundler::definition","bundler::definition","bundler::environment","bundler","bundler::runtime","gem::dependency","gem::specification","thor::task","gem::dependency","bundler","bundler::definition","bundler::resolver","bundler::resolver","bundler::definition","bundler::resolver","bundler::definition","bundler::lazyspecification","bundler::rubygemsintegration","bundler::source::git","gem::specification","gem::specification","bundler","bundler::dependency","bundler::dependency","bundler::dependency","thor::util","bundler::rubygemsintegration","bundler","bundler::gemhelper","bundler::definition","bundler::dsl","bundler::installer","thor::actions","thor::dynamictask","thor::task","thor::actions","bundler::index","bundler::index","bundler::lazyspecification","bundler::definition","bundler::ui::rgproxy","thor::shell::basic","thor::shell::basic","bundler::index","bundler::resolver","bundler::index","bundler::index","bundler::index","thor::shell::color","thor::shell::html","bundler::settings","bundler::settings","bundler","bundler","bundler::runtime","bundler::runtime","bundler::gemhelper","bundler::gemhelper","thor::base","thor::shell","thor::base","thor::shell","bundler::source::git","bundler::source::git","bundler::dependency","bundler::cli","bundler::rubygemsintegration::deprecate","thor::util","bundler::specset","bundler::specset","bundler::definition","bundler::dsl","bundler::resolver::specgroup","thor::actions","thor::actions::classmethods","thor::actions::classmethods","bundler::cli","thor::actions::classmethods","bundler::index","bundler::rubygemsintegration","bundler::rubygemsintegration","bundler::rubygemsintegration","bundler::index","bundler::definition","bundler::environment","bundler::source::git","bundler::source::path","bundler::source::rubygems","bundler::definition","bundler","bundler::resolver","thor::base::classmethods","bundler::bundlererror","thor::shell::basic","thor::shell::basic","thor::shell::basic","bundler::rubygemsintegration::legacy","bundler::rubygemsintegration::modern","bundler::rubygemsintegration::transitional","bundler::rubygemsintegration","bundler::rubygemsintegration","thor::base","thor::base","thor","thor","thor","bundler::resolver","bundler","bundler::source::rubygems","bundler::gemhelper","thor","thor::base::classmethods","thor::actions","thor::shell::basic","thor::actions","thor::util","thor::util","thor::util","bundler","bundler::specset","bundler::lazyspecification","bundler::dsl","gem::specification","bundler::specset","bundler::definition","bundler::dependency","bundler::lazyspecification","bundler::source::git","bundler::source::path","bundler::source::rubygems","gem::dependency","bundler::depproxy","bundler::lazyspecification","bundler::resolver::specgroup","bundler::source::git","bundler::source::path","bundler::source::rubygems","bundler::resolver::specgroup","gem::dependency","thor::shell::basic","bundler::specset","bundler::specset","bundler::depproxy","bundler","bundler::rubygemsintegration","thor::shell::basic","bundler::cli","bundler::source::git","bundler::cli","bundler::environment","bundler","bundler::source::git","bundler::source::git","bundler::index","bundler","bundler::rubygemsintegration","thor::util","bundler::specset","bundler::cli","bundler::gemhelper","bundler::resolver::specgroup","bundler::resolver","bundler::gemhelper","bundler::cli","bundler::graph","bundler::ui","bundler::ui::shell","bundler::rubygemsintegration","bundler","thor::shell","bundler::settings","bundler::settings","thor::shell::basic","files/changelog_md.html","files/license.html","files/readme_md.html","files/lib/bundler_rb.html","files/lib/bundler/capistrano_rb.html","files/lib/bundler/cli_rb.html","files/lib/bundler/definition_rb.html","files/lib/bundler/dependency_rb.html","files/lib/bundler/deployment_rb.html","files/lib/bundler/dsl_rb.html","files/lib/bundler/environment_rb.html","files/lib/bundler/gem_helper_rb.html","files/lib/bundler/gem_installer_rb.html","files/lib/bundler/gem_tasks_rb.html","files/lib/bundler/graph_rb.html","files/lib/bundler/index_rb.html","files/lib/bundler/installer_rb.html","files/lib/bundler/lazy_specification_rb.html","files/lib/bundler/lockfile_parser_rb.html","files/lib/bundler/man/bundle.html","files/lib/bundler/man/bundle-config.html","files/lib/bundler/man/bundle-config_txt.html","files/lib/bundler/man/bundle-exec.html","files/lib/bundler/man/bundle-exec_txt.html","files/lib/bundler/man/bundle-install.html","files/lib/bundler/man/bundle-install_txt.html","files/lib/bundler/man/bundle-package.html","files/lib/bundler/man/bundle-package_txt.html","files/lib/bundler/man/bundle-update.html","files/lib/bundler/man/bundle-update_txt.html","files/lib/bundler/man/bundle_txt.html","files/lib/bundler/man/gemfile_5.html","files/lib/bundler/man/gemfile_5_txt.html","files/lib/bundler/remote_specification_rb.html","files/lib/bundler/resolver_rb.html","files/lib/bundler/rubygems_ext_rb.html","files/lib/bundler/rubygems_integration_rb.html","files/lib/bundler/runtime_rb.html","files/lib/bundler/settings_rb.html","files/lib/bundler/setup_rb.html","files/lib/bundler/shared_helpers_rb.html","files/lib/bundler/source_rb.html","files/lib/bundler/spec_set_rb.html","files/lib/bundler/templates/executable.html","files/lib/bundler/templates/gemfile.html","files/lib/bundler/templates/newgem/gemfile_tt.html","files/lib/bundler/templates/newgem/rakefile_tt.html","files/lib/bundler/templates/newgem/bin/newgem_tt.html","files/lib/bundler/templates/newgem/gitignore_tt.html","files/lib/bundler/templates/newgem/lib/newgem_rb_tt.html","files/lib/bundler/templates/newgem/lib/newgem/version_rb_tt.html","files/lib/bundler/templates/newgem/newgem_gemspec_tt.html","files/lib/bundler/ui_rb.html","files/lib/bundler/vendor/thor_rb.html","files/lib/bundler/vendor/thor/actions_rb.html","files/lib/bundler/vendor/thor/actions/create_file_rb.html","files/lib/bundler/vendor/thor/actions/create_link_rb.html","files/lib/bundler/vendor/thor/actions/directory_rb.html","files/lib/bundler/vendor/thor/actions/empty_directory_rb.html","files/lib/bundler/vendor/thor/actions/file_manipulation_rb.html","files/lib/bundler/vendor/thor/actions/inject_into_file_rb.html","files/lib/bundler/vendor/thor/base_rb.html","files/lib/bundler/vendor/thor/core_ext/file_binary_read_rb.html","files/lib/bundler/vendor/thor/core_ext/hash_with_indifferent_access_rb.html","files/lib/bundler/vendor/thor/core_ext/ordered_hash_rb.html","files/lib/bundler/vendor/thor/error_rb.html","files/lib/bundler/vendor/thor/group_rb.html","files/lib/bundler/vendor/thor/invocation_rb.html","files/lib/bundler/vendor/thor/parser_rb.html","files/lib/bundler/vendor/thor/parser/argument_rb.html","files/lib/bundler/vendor/thor/parser/arguments_rb.html","files/lib/bundler/vendor/thor/parser/option_rb.html","files/lib/bundler/vendor/thor/parser/options_rb.html","files/lib/bundler/vendor/thor/rake_compat_rb.html","files/lib/bundler/vendor/thor/runner_rb.html","files/lib/bundler/vendor/thor/shell_rb.html","files/lib/bundler/vendor/thor/shell/basic_rb.html","files/lib/bundler/vendor/thor/shell/color_rb.html","files/lib/bundler/vendor/thor/shell/html_rb.html","files/lib/bundler/vendor/thor/task_rb.html","files/lib/bundler/vendor/thor/util_rb.html","files/lib/bundler/vendor/thor/version_rb.html","files/lib/bundler/vendored_thor_rb.html","files/lib/bundler/version_rb.html","files/lib/bundler/vlad_rb.html"],"info":[["Bundler","lib/bundler/cli.rb","classes/Bundler.html"," < ","",1],["BundlerError","Bundler","classes/Bundler/BundlerError.html"," < StandardError","",1],["CLI","Bundler","classes/Bundler/CLI.html"," < Thor","",1],["Definition","Bundler","classes/Bundler/Definition.html"," < Object","",1],["DepProxy","Bundler","classes/Bundler/DepProxy.html"," < Object","",1],["Dependency","Bundler","classes/Bundler/Dependency.html"," < Gem::Dependency","",1],["Deployment","Bundler","classes/Bundler/Deployment.html"," < Object","",1],["DeprecatedError","Bundler","classes/Bundler/DeprecatedError.html"," < BundlerError","",1],["Dsl","Bundler","classes/Bundler/Dsl.html"," < Object","",1],["DslError","Bundler","classes/Bundler/DslError.html"," < BundlerError","",1],["Environment","Bundler","classes/Bundler/Environment.html"," < Object","",1],["GemHelper","Bundler","classes/Bundler/GemHelper.html"," < Object","",1],["GemHelpers","Bundler","classes/Bundler/GemHelpers.html"," < ","",1],["GemInstaller","Bundler","classes/Bundler/GemInstaller.html"," < Gem::Installer","",1],["GemNotFound","Bundler","classes/Bundler/GemNotFound.html"," < BundlerError","",1],["GemfileError","Bundler","classes/Bundler/GemfileError.html"," < BundlerError","",1],["GemfileNotFound","Bundler","classes/Bundler/GemfileNotFound.html"," < BundlerError","",1],["GemspecError","Bundler","classes/Bundler/GemspecError.html"," < BundlerError","",1],["GitError","Bundler","classes/Bundler/GitError.html"," < BundlerError","",1],["Graph","Bundler","classes/Bundler/Graph.html"," < Object","",1],["GraphNode","Bundler","classes/Bundler/GraphNode.html"," < Object","Add version info ",1],["Index","Bundler","classes/Bundler/Index.html"," < Object","",1],["InstallError","Bundler","classes/Bundler/InstallError.html"," < BundlerError","",1],["Installer","Bundler","classes/Bundler/Installer.html"," < Environment","",1],["InvalidOption","Bundler","classes/Bundler/InvalidOption.html"," < DslError","",1],["InvalidSpecSet","Bundler","classes/Bundler/InvalidSpecSet.html"," < StandardError","",1],["LazySpecification","Bundler","classes/Bundler/LazySpecification.html"," < Object","",1],["LockfileParser","Bundler","classes/Bundler/LockfileParser.html"," < Object","",1],["MatchPlatform","Bundler","classes/Bundler/MatchPlatform.html"," < ","",1],["PathError","Bundler","classes/Bundler/PathError.html"," < BundlerError","",1],["ProductionError","Bundler","classes/Bundler/ProductionError.html"," < BundlerError","",1],["RemoteSpecification","Bundler","classes/Bundler/RemoteSpecification.html"," < Object","Represents a lazily loaded gem specification, where the full specification is on the source server in",1],["Resolver","Bundler","classes/Bundler/Resolver.html"," < Object","",1],["SpecGroup","Bundler::Resolver","classes/Bundler/Resolver/SpecGroup.html"," < Array","",1],["RubygemsIntegration","Bundler","classes/Bundler/RubygemsIntegration.html"," < Object","",1],["AlmostModern","Bundler::RubygemsIntegration","classes/Bundler/RubygemsIntegration/AlmostModern.html"," < Modern","Rubygems 1.8.0 to 1.8.4 ",1],["Ancient","Bundler::RubygemsIntegration","classes/Bundler/RubygemsIntegration/Ancient.html"," < Legacy","Rubygems versions 1.3.6 and 1.3.7 ",1],["Deprecate","Bundler::RubygemsIntegration","classes/Bundler/RubygemsIntegration/Deprecate.html"," < Object","",1],["Legacy","Bundler::RubygemsIntegration","classes/Bundler/RubygemsIntegration/Legacy.html"," < RubygemsIntegration","Rubygems 1.4 through 1.6 ",1],["Modern","Bundler::RubygemsIntegration","classes/Bundler/RubygemsIntegration/Modern.html"," < RubygemsIntegration","Rubygems 1.8.5 ",1],["Transitional","Bundler::RubygemsIntegration","classes/Bundler/RubygemsIntegration/Transitional.html"," < Legacy","Rubygems 1.7 ",1],["Runtime","Bundler","classes/Bundler/Runtime.html"," < Environment","",1],["Settings","Bundler","classes/Bundler/Settings.html"," < Object","",1],["SharedHelpers","Bundler","classes/Bundler/SharedHelpers.html"," < ","",1],["Source","Bundler","classes/Bundler/Source.html"," < ","",1],["Git","Bundler::Source","classes/Bundler/Source/Git.html"," < Path","",1],["Path","Bundler::Source","classes/Bundler/Source/Path.html"," < Object","",1],["Installer","Bundler::Source::Path","classes/Bundler/Source/Path/Installer.html"," < Bundler::GemInstaller","",1],["Rubygems","Bundler::Source","classes/Bundler/Source/Rubygems.html"," < Object","TODO: Refactor this class ",1],["SpecSet","Bundler","classes/Bundler/SpecSet.html"," < Object","",1],["UI","Bundler","classes/Bundler/UI.html"," < Object","",1],["RGProxy","Bundler::UI","classes/Bundler/UI/RGProxy.html"," < ::Gem::SilentUI","",1],["Shell","Bundler::UI","classes/Bundler/UI/Shell.html"," < UI","",1],["VersionConflict","Bundler","classes/Bundler/VersionConflict.html"," < BundlerError","Internal errors, should be rescued ",1],["Gem","lib/bundler/resolver.rb","classes/Gem.html"," < ","Extending Gem classes to add necessary tracking information ",1],["Dependency","Gem","classes/Gem/Dependency.html"," < Object","",1],["Platform","Gem","classes/Gem/Platform.html"," < Object","",1],["Requirement","Gem","classes/Gem/Requirement.html"," < Object","",1],["Specification","Gem","classes/Gem/Specification.html"," < Object","",1],["Thor","lib/bundler/vendor/thor/actions/create_file.rb","classes/Thor.html"," < Object","",1],["Actions","Thor","classes/Thor/Actions.html"," < ","",1],["ClassMethods","Thor::Actions","classes/Thor/Actions/ClassMethods.html"," < ","",1],["Base","Thor","classes/Thor/Base.html"," < ","",1],["ClassMethods","Thor::Base","classes/Thor/Base/ClassMethods.html"," < ","",1],["DynamicTask","Thor","classes/Thor/DynamicTask.html"," < Task","A dynamic task that handles method missing scenarios. ",1],["Error","Thor","classes/Thor/Error.html"," < StandardError","Thor::Error is raised when it's caused by wrong usage of thor classes. Those errors have their backtrace",1],["Group","Thor","classes/Thor/Group.html"," < Object","Thor has a special class called Thor::Group. The main difference to Thor class is that it invokes all",1],["HiddenTask","Thor","classes/Thor/HiddenTask.html"," < Task","A task that is hidden in help messages but still invocable. ",1],["Invocation","Thor","classes/Thor/Invocation.html"," < ","",1],["ClassMethods","Thor::Invocation","classes/Thor/Invocation/ClassMethods.html"," < ","",1],["InvocationError","Thor","classes/Thor/InvocationError.html"," < Error","Raised when a task was found, but not invoked properly. ",1],["MalformattedArgumentError","Thor","classes/Thor/MalformattedArgumentError.html"," < InvocationError","",1],["RakeCompat","Thor","classes/Thor/RakeCompat.html"," < ","Adds a compatibility layer to your Thor classes which allows you to use rake package tasks. For example,",1],["RequiredArgumentMissingError","Thor","classes/Thor/RequiredArgumentMissingError.html"," < InvocationError","",1],["Shell","Thor","classes/Thor/Shell.html"," < ","",1],["Basic","Thor::Shell","classes/Thor/Shell/Basic.html"," < Object","",1],["Color","Thor::Shell","classes/Thor/Shell/Color.html"," < Basic","Inherit from Thor::Shell::Basic and add set_color behavior. Check Thor::Shell::Basic to see all available",1],["HTML","Thor::Shell","classes/Thor/Shell/HTML.html"," < Basic","Inherit from Thor::Shell::Basic and add set_color behavior. Check Thor::Shell::Basic to see all available",1],["Task","Thor","classes/Thor/Task.html"," < Struct.new(:name, :description, :long_description, :usage, :options)","",1],["UndefinedTaskError","Thor","classes/Thor/UndefinedTaskError.html"," < Error","Raised when a task was not found. ",1],["UnknownArgumentError","Thor","classes/Thor/UnknownArgumentError.html"," < Error","",1],["Util","Thor","classes/Thor/Util.html"," < ","This module holds several utilities: 1) Methods to convert thor namespaces to constants and vice-versa.",1],["<<","Bundler::Index","classes/Bundler/Index.html#M000130","(spec)","",2],["==","Bundler::DepProxy","classes/Bundler/DepProxy.html#M000203","(o)","",2],["==","Bundler::Index","classes/Bundler/Index.html#M000133","(o)","",2],["==","Bundler::Source::Git","classes/Bundler/Source/Git.html#M000351","(o)","Alias for #eql?",2],["==","Bundler::Source::Path","classes/Bundler/Source/Path.html#M000336","(o)","Alias for #eql?",2],["==","Bundler::Source::Rubygems","classes/Bundler/Source/Rubygems.html#M000296","(o)","Alias for #eql?",2],["[]","Bundler::Index","classes/Bundler/Index.html#M000129","(query)","Alias for #search",2],["[]","Bundler::Settings","classes/Bundler/Settings.html#M000267","(key)","",2],["[]","Bundler::SpecSet","classes/Bundler/SpecSet.html#M000301","(key)","",2],["[]=","Bundler::Settings","classes/Bundler/Settings.html#M000268","(key, value)","",2],["[]=","Bundler::SpecSet","classes/Bundler/SpecSet.html#M000302","(key, value)","",2],["__dependencies","Bundler::Resolver::SpecGroup","classes/Bundler/Resolver/SpecGroup.html#M000184","()","",2],["__materialize__","Bundler::LazySpecification","classes/Bundler/LazySpecification.html#M000148","()","",2],["__swap__","Bundler::RemoteSpecification","classes/Bundler/RemoteSpecification.html#M000162","(spec)","Because Rubyforge cannot be trusted to provide valid specifications once the remote gem is downloaded,",2],["_deprecated_options","Bundler::Dsl","classes/Bundler/Dsl.html#M000107","(options)","",2],["_normalize_hash","Bundler::Dsl","classes/Bundler/Dsl.html#M000098","(opts)","",2],["_normalize_options","Bundler::Dsl","classes/Bundler/Dsl.html#M000099","(name, version, opts)","",2],["_remote_specification","Bundler::RemoteSpecification","classes/Bundler/RemoteSpecification.html#M000163","()","",2],["activate_platform","Bundler::Resolver::SpecGroup","classes/Bundler/Resolver/SpecGroup.html#M000172","(platform)","",2],["add_bundler_dependencies","Gem::Specification","classes/Gem/Specification.html#M000188","(*groups)","",2],["add_file","Thor::Actions","classes/Thor/Actions.html#M000389","(destination, *args, &block)","Alias for #create_file",2],["add_link","Thor::Actions","classes/Thor/Actions.html#M000391","(destination, *args, &block)","Alias for #create_link",2],["add_remote","Bundler::Source::Rubygems","classes/Bundler/Source/Rubygems.html#M000318","(source)","",2],["add_runtime_options!","Thor::Actions::ClassMethods","classes/Thor/Actions/ClassMethods.html#M000415","()","Add runtime options that help actions execution. ",2],["all","Bundler::Settings","classes/Bundler/Settings.html#M000271","()","",2],["all_specs","Bundler::RubygemsIntegration::Legacy","classes/Bundler/RubygemsIntegration/Legacy.html#M000252","()","",2],["all_specs","Bundler::RubygemsIntegration::Modern","classes/Bundler/RubygemsIntegration/Modern.html#M000258","()","",2],["all_tasks","Thor::Base::ClassMethods","classes/Thor/Base/ClassMethods.html#M000451","()","Returns the tasks for this Thor class and all subclasses. ==== Returns OrderedHash:: An ordered hash",2],["allow_git_ops?","Bundler::Source::Git","classes/Bundler/Source/Git.html#M000369","()","",2],["allow_sudo?","Bundler::Settings","classes/Bundler/Settings.html#M000277","()","",2],["app_cache","Bundler","classes/Bundler.html#M000618","()","",2],["app_config_path","Bundler","classes/Bundler.html#M000617","()","",2],["append_file","Thor::Actions","classes/Thor/Actions.html#M000404","(path, *args, &block)","Alias for #append_to_file",2],["append_to_file","Thor::Actions","classes/Thor/Actions.html#M000403","(path, *args, &block)","Append text to a file. Since it depends on insert_into_file, it's reversible. ==== Parameters path<String>::",2],["apply","Thor::Actions","classes/Thor/Actions.html#M000426","(path, config={})","Loads an external file and execute it in the instance binding. ==== Parameters path<String>:: The path",2],["argument","Thor::Base::ClassMethods","classes/Thor/Base/ClassMethods.html#M000443","(name, options={})","Adds an argument to the class and creates an attr_accessor for it. Arguments are different from options",2],["arguments","Thor::Base::ClassMethods","classes/Thor/Base/ClassMethods.html#M000444","()","Returns this class arguments, looking up in the ancestors chain. ==== Returns Array[Thor::Argument] ",2],["ask","Thor::Shell::Basic","classes/Thor/Shell/Basic.html#M000507","(statement, color=nil)","Ask something to the user and receives a response. ==== Example ask(\"What is your name?\") ",2],["ask","Thor::Shell::HTML","classes/Thor/Shell/HTML.html#M000532","(statement, color=nil)","Ask something to the user and receives a response. ==== Example ask(\"What is your name?\") TODO: Implement",2],["backport_segment_generation","Bundler::RubygemsIntegration","classes/Bundler/RubygemsIntegration.html#M000250","()","This backports the correct segment generation code from Rubygems 1.4+ by monkeypatching it into the method",2],["banner","Thor","classes/Thor.html#M000588","(task, namespace = nil, subcommand = false)","The banner for this class. You can customize it if you are invoking the thor class by another ways which",2],["banner","Thor::Group","classes/Thor/Group.html#M000496","()","The banner for this class. You can customize it if you are invoking the thor class by another ways which",2],["base_name","Bundler::Source::Git","classes/Bundler/Source/Git.html#M000360","()","",2],["basename","Thor::Base::ClassMethods","classes/Thor/Base/ClassMethods.html#M000469","()","The basename of the program invoking the thor class. ",2],["be_quiet!","Bundler::UI::Shell","classes/Bundler/UI/Shell.html#M000384","()","",2],["bin_path","Bundler","classes/Bundler.html#M000604","()","",2],["bin_path","Bundler::RubygemsIntegration","classes/Bundler/RubygemsIntegration.html#M000232","(gem, bin, ver)","",2],["build","Bundler::Definition","classes/Bundler/Definition.html#M000001","(gemfile, lockfile, unlock)","",2],["build","Bundler::Index","classes/Bundler/Index.html#M000122","()","",2],["build_gem","Bundler::GemHelper","classes/Bundler/GemHelper.html#M000100","()","",2],["built_gem_path","Bundler::GemHelper","classes/Bundler/GemHelper.html#M000104","()","",2],["bundle_path","Bundler","classes/Bundler.html#M000603","()","",2],["cache","Bundler","classes/Bundler.html#M000615","()","",2],["cache","Bundler::CLI","classes/Bundler/CLI.html#M000032","()","",2],["cache","Bundler::Runtime","classes/Bundler/Runtime.html#M000262","()","",2],["cache","Bundler::Source::Git","classes/Bundler/Source/Git.html#M000366","()","",2],["cache","Bundler::Source::Path","classes/Bundler/Source/Path.html#M000344","(spec)","",2],["cache","Bundler::Source::Rubygems","classes/Bundler/Source/Rubygems.html#M000317","(spec)","",2],["cache_path","Bundler::Runtime","classes/Bundler/Runtime.html#M000264","()","",2],["cache_path","Bundler::Source::Git","classes/Bundler/Source/Git.html#M000365","()","",2],["cached!","Bundler::Source::Path","classes/Bundler/Source/Path.html#M000330","()","",2],["cached!","Bundler::Source::Rubygems","classes/Bundler/Source/Rubygems.html#M000292","()","",2],["cached?","Bundler::Source::Git","classes/Bundler/Source/Git.html#M000371","()","",2],["cached_gem","Bundler::Source::Rubygems","classes/Bundler/Source/Rubygems.html#M000320","(spec)","",2],["cached_specs","Bundler::Source::Rubygems","classes/Bundler/Source/Rubygems.html#M000324","()","",2],["camel_case","Thor::Util","classes/Thor/Util.html#M000565","(str)","Receives a string and convert it to camel case. camel_case returns CamelCase. ==== Parameters String",2],["capture","Thor::Actions","classes/Thor/Actions.html#M000412","(*args, &block)","",2],["check","Bundler::CLI","classes/Bundler/CLI.html#M000006","()","",2],["check_executable_overwrite","Bundler::GemInstaller","classes/Bundler/GemInstaller.html#M000117","(filename)","",2],["check_unknown_options!","Thor","classes/Thor.html#M000585","(options={})","Extend check unknown options to accept a hash of conditions. === Parameters options<Hash>: A hash containing",2],["check_unknown_options!","Thor::Base::ClassMethods","classes/Thor/Base/ClassMethods.html#M000439","()","If you want to raise an error for unknown options, call check_unknown_options! This is disabled by default",2],["checkout","Bundler::Source::Git","classes/Bundler/Source/Git.html#M000367","()","",2],["chmod","Thor::Actions","classes/Thor/Actions.html#M000400","(path, mode, config={})","Changes the mode of the given file or directory. ==== Parameters mode<Integer>:: the file mode path<String>::",2],["class_option","Thor::Base::ClassMethods","classes/Thor/Base/ClassMethods.html#M000446","(name, options={})","Adds an option to the set of class options ==== Parameters name<Symbol>:: The name of the argument. options<Hash>::",2],["class_options","Thor::Base::ClassMethods","classes/Thor/Base/ClassMethods.html#M000445","(options=nil)","Adds a bunch of options to the set of class options. class_options :foo => false, :bar => :required,",2],["clean?","Bundler::GemHelper","classes/Bundler/GemHelper.html#M000110","()","",2],["clean_load_path","Bundler::SharedHelpers","classes/Bundler/SharedHelpers.html#M000287","()","",2],["clean_req","Bundler::Resolver","classes/Bundler/Resolver.html#M000223","(req)","",2],["clear_paths","Bundler::RubygemsIntegration","classes/Bundler/RubygemsIntegration.html#M000231","()","",2],["concat","Thor::Actions","classes/Thor/Actions.html#M000411","(string)","",2],["config","Bundler::CLI","classes/Bundler/CLI.html#M000037","(name = nil, *args)","",2],["configuration","Bundler::RubygemsIntegration","classes/Bundler/RubygemsIntegration.html#M000218","()","",2],["configure","Bundler","classes/Bundler.html#M000601","()","",2],["configure_gem_home_and_path","Bundler","classes/Bundler.html#M000629","()","",2],["confirm","Bundler::UI","classes/Bundler/UI.html#M000377","(message)","",2],["confirm","Bundler::UI::Shell","classes/Bundler/UI/Shell.html#M000381","(msg)","",2],["console","Bundler::CLI","classes/Bundler/CLI.html#M000044","(group = nil)","",2],["converge_dependencies","Bundler::Definition","classes/Bundler/Definition.html#M000033","()","",2],["converge_locked_specs","Bundler::Definition","classes/Bundler/Definition.html#M000034","()","Remove elements from the locked specs that are expired. This will most commonly happen if the Gemfile",2],["converge_sources","Bundler::Definition","classes/Bundler/Definition.html#M000031","()","",2],["copy_file","Thor::Actions","classes/Thor/Actions.html#M000395","(source, *args, &block)","Copies the file from the relative source to the relative destination. If the destination is not given",2],["create_file","Thor::Actions","classes/Thor/Actions.html#M000388","(destination, *args, &block)","Create a new file relative to the destination root with the given data, which is the return value of",2],["create_link","Thor::Actions","classes/Thor/Actions.html#M000390","(destination, *args, &block)","Create a new file relative to the destination root from the given source. ==== Parameters destination<String>::",2],["current_dependencies","Bundler::Definition","classes/Bundler/Definition.html#M000015","()","",2],["current_dependencies","Bundler::Environment","classes/Bundler/Environment.html#M000082","()","",2],["current_env?","Bundler::Dependency","classes/Bundler/Dependency.html#M000055","()","",2],["current_platform?","Bundler::Dependency","classes/Bundler/Dependency.html#M000056","()","",2],["debug","Bundler::Resolver","classes/Bundler/Resolver.html#M000191","()","",2],["debug","Bundler::UI","classes/Bundler/UI.html#M000374","(message)","",2],["debug","Bundler::UI::Shell","classes/Bundler/UI/Shell.html#M000379","(msg)","",2],["debug!","Bundler::UI::Shell","classes/Bundler/UI/Shell.html#M000385","()","",2],["default_gemfile","Bundler","classes/Bundler.html#M000622","()","",2],["default_gemfile","Bundler::SharedHelpers","classes/Bundler/SharedHelpers.html#M000283","()","",2],["default_lockfile","Bundler","classes/Bundler.html#M000623","()","",2],["default_lockfile","Bundler::SharedHelpers","classes/Bundler/SharedHelpers.html#M000284","()","",2],["default_task","Thor","classes/Thor.html#M000569","(meth=nil)","Sets the default task when thor is executed without an explicit task to be called. ==== Parameters meth<Symbol>::",2],["define_task","Bundler::Deployment","classes/Bundler/Deployment.html#M000071","(context, task_method = :task, opts = {})","",2],["definition","Bundler","classes/Bundler.html#M000609","(unlock = nil)","",2],["delete","Bundler::Settings","classes/Bundler/Settings.html#M000269","(key)","",2],["dependencies","Bundler::Environment","classes/Bundler/Environment.html#M000081","()","",2],["dependencies_for","Bundler::Runtime","classes/Bundler/Runtime.html#M000259","(*groups)","",2],["dependencies_to_gemfile","Gem::Specification","classes/Gem/Specification.html#M000190","(dependencies, group = nil)","",2],["deprecate","Bundler::Dsl","classes/Bundler/Dsl.html#M000093","(name, replacement = nil)","Deprecated methods ",2],["desc","Thor","classes/Thor.html#M000573","(usage, description, options={})","Defines the usage and the description of the next task. ==== Parameters usage<String> description<String>",2],["desc","Thor::Group","classes/Thor/Group.html#M000474","(description=nil)","The description for this Thor::Group. If none is provided, but a source root exists, tries to find the",2],["destination_root","Thor::Actions","classes/Thor/Actions.html#M000419","()","Returns the root for this thor class (also aliased as destination root). ",2],["destination_root=","Thor::Actions","classes/Thor/Actions.html#M000420","(root)","Sets the root for this thor class. Relatives path are added to the directory where the script was invoked",2],["directory","Thor::Actions","classes/Thor/Actions.html#M000392","(source, *args, &block)","Copies recursively the files from source directory to root directory. If any of the files finishes with",2],["download_gem","Bundler::RubygemsIntegration","classes/Bundler/RubygemsIntegration.html#M000240","(spec, uri, path)","",2],["download_gem_from_uri","Bundler::Source::Rubygems","classes/Bundler/Source/Rubygems.html#M000327","(spec, uri)","",2],["dynamic_width","Thor::Shell::Basic","classes/Thor/Shell/Basic.html#M000525","()","Calculate the dynamic width of the terminal ",2],["dynamic_width_stty","Thor::Shell::Basic","classes/Thor/Shell/Basic.html#M000526","()","",2],["dynamic_width_tput","Thor::Shell::Basic","classes/Thor/Shell/Basic.html#M000527","()","",2],["each","Bundler::Index","classes/Bundler/Index.html#M000131","(&blk)","",2],["empty?","Bundler::Index","classes/Bundler/Index.html#M000125","()","",2],["empty_directory","Thor::Actions","classes/Thor/Actions.html#M000393","(destination, config={})","Creates an empty directory. ==== Parameters destination<String>:: the relative path to the destination",2],["encode_with","Gem::Dependency","classes/Gem/Dependency.html#M000194","(coder)","",2],["ensure_equivalent_gemfile_and_lockfile","Bundler::Definition","classes/Bundler/Definition.html#M000025","(explicit_flag = false)","",2],["env","Bundler::Dsl","classes/Bundler/Dsl.html#M000092","(name)","",2],["environment","Bundler","classes/Bundler.html#M000608","()","",2],["eql?","Bundler::DepProxy","classes/Bundler/DepProxy.html#M000204","(o)","Alias for #==",2],["eql?","Bundler::Source::Git","classes/Bundler/Source/Git.html#M000350","(o)","",2],["eql?","Bundler::Source::Path","classes/Bundler/Source/Path.html#M000335","(o)","",2],["eql?","Bundler::Source::Rubygems","classes/Bundler/Source/Rubygems.html#M000294","(o)","",2],["error","Bundler::UI","classes/Bundler/UI.html#M000375","(message)","",2],["error","Bundler::UI::Shell","classes/Bundler/UI/Shell.html#M000383","(msg)","",2],["error","Thor::Shell::Basic","classes/Thor/Shell/Basic.html#M000515","(statement)","Called if something goes wrong during the execution. This is used by Thor internally and should not be",2],["error_message","Bundler::Resolver","classes/Bundler/Resolver.html#M000235","()","",2],["evaluate","Bundler::Dsl","classes/Bundler/Dsl.html#M000072","(gemfile, lockfile, unlock)","",2],["exec","Bundler::CLI","classes/Bundler/CLI.html#M000036","(*)","",2],["exit_on_failure?","Thor::Base::ClassMethods","classes/Thor/Base/ClassMethods.html#M000468","()","A flag that makes the process exit with status 1 if any error happens. ",2],["expand_dependencies","Bundler::Definition","classes/Bundler/Definition.html#M000041","(dependencies, remote = false)","",2],["expanded_dependencies","Bundler::Definition","classes/Bundler/Definition.html#M000040","()","",2],["fetch","Bundler::Source::Rubygems","classes/Bundler/Source/Rubygems.html#M000309","(spec)","",2],["fetch_all_remote_specs","Bundler::Source::Rubygems","classes/Bundler/Source/Rubygems.html#M000326","(&blk)","",2],["fetch_platform","Bundler::RemoteSpecification","classes/Bundler/RemoteSpecification.html#M000160","()","Needed before installs, since the arch matters then and quick specs don't bother to include the arch",2],["fetch_specs","Bundler::RubygemsIntegration","classes/Bundler/RubygemsIntegration.html#M000237","(all, pre, &blk)","",2],["fetch_specs","Bundler::Source::Rubygems","classes/Bundler/Source/Rubygems.html#M000322","()","",2],["file_collision","Thor::Shell::Basic","classes/Thor/Shell/Basic.html#M000514","(destination)","Deals with file collision and returns true if the file should be overwriten and false otherwise. If a",2],["find_by_namespace","Thor::Util","classes/Thor/Util.html#M000560","(namespace)","Receives a namespace and search for it in the Thor::Base subclasses. ==== Parameters namespace<String>::",2],["find_class_and_task_by_namespace","Thor::Util","classes/Thor/Util.html#M000566","(namespace, fallback = true)","Receives a namespace and tries to retrieve a Thor or Thor::Group class from it. It first searches for",2],["find_gemfile","Bundler::SharedHelpers","classes/Bundler/SharedHelpers.html#M000286","()","",2],["find_in_source_paths","Thor::Actions","classes/Thor/Actions.html#M000423","(file)","Receives a file or directory and search for it in the source paths. ",2],["find_name","Bundler::RubygemsIntegration::Legacy","classes/Bundler/RubygemsIntegration/Legacy.html#M000253","(name)","",2],["find_name","Bundler::RubygemsIntegration::Modern","classes/Bundler/RubygemsIntegration/Modern.html#M000260","(name)","",2],["find_subcommand","Thor","classes/Thor.html#M000595","(subcmd_name)","",2],["find_subcommand_possibilities","Thor","classes/Thor.html#M000597","(subcmd_name)","",2],["fixup_dependency_types!","Bundler::Definition","classes/Bundler/Definition.html#M000005","()","",2],["for","Bundler::SpecSet","classes/Bundler/SpecSet.html#M000289","(dependencies, skip = [], check = false, match_current_platform = false)","",2],["for?","Bundler::Resolver::SpecGroup","classes/Bundler/Resolver/SpecGroup.html#M000182","(platform)","",2],["formatted_usage","Thor::Task","classes/Thor/Task.html#M000549","(klass, namespace = true, subcommand = false)","Returns the formatted usage by injecting given required arguments and required options into the given",2],["from_lock","Bundler::Source::Git","classes/Bundler/Source/Git.html#M000348","(options)","",2],["from_lock","Bundler::Source::Path","classes/Bundler/Source/Path.html#M000331","(options)","",2],["from_lock","Bundler::Source::Rubygems","classes/Bundler/Source/Rubygems.html#M000298","(options)","",2],["from_superclass","Thor::Base::ClassMethods","classes/Thor/Base/ClassMethods.html#M000467","(method, default=nil)","Retrieves a value from superclass. If it reaches the baseclass, returns default. ",2],["full_gem_path","Gem::Specification","classes/Gem/Specification.html#M000170","()","",2],["full_name","Bundler::LazySpecification","classes/Bundler/LazySpecification.html#M000144","()","",2],["full_name","Bundler::RemoteSpecification","classes/Bundler/RemoteSpecification.html#M000161","()","",2],["gem","Bundler::CLI","classes/Bundler/CLI.html#M000048","(name)","",2],["gem","Bundler::Dsl","classes/Bundler/Dsl.html#M000079","(name, *args)","",2],["gem_bindir","Bundler::RubygemsIntegration","classes/Bundler/RubygemsIntegration.html#M000227","()","",2],["gem_dir","Bundler::RubygemsIntegration","classes/Bundler/RubygemsIntegration.html#M000226","()","",2],["gem_dir","Gem::Specification","classes/Gem/Specification.html#M000176","()","",2],["gem_message","Bundler::Resolver","classes/Bundler/Resolver.html#M000234","(requirement)","For a given conflicted requirement, print out what exactly went wrong ",2],["gem_path","Bundler::RubygemsIntegration","classes/Bundler/RubygemsIntegration.html#M000229","()","",2],["gem_platforms","Bundler::Dependency","classes/Bundler/Dependency.html#M000053","(valid_platforms)","",2],["gems_size","Bundler::Resolver","classes/Bundler/Resolver.html#M000211","(dep)","",2],["gemspec","Bundler::Dsl","classes/Bundler/Dsl.html#M000074","(opts = nil)","",2],["generate_bin","Bundler::Source::Path","classes/Bundler/Source/Path.html#M000346","(spec)","",2],["generate_bin","Bundler::Source::Path::Installer","classes/Bundler/Source/Path/Installer.html#M000341","()","",2],["generate_bundler_executable_stubs","Bundler::Installer","classes/Bundler/Installer.html#M000153","(spec)","",2],["generic","Bundler::GemHelpers","classes/Bundler/GemHelpers.html#M000208","(p)","",2],["get","Thor::Actions","classes/Thor/Actions.html#M000398","(source, *args, &block)","Gets the content at the given address and places it at the given relative destination. If a block is",2],["git","Bundler::Dsl","classes/Bundler/Dsl.html#M000087","(uri, options = {}, source_options = {}, &blk)","",2],["git","Bundler::Source::Git","classes/Bundler/Source/Git.html#M000359","(command)","",2],["git_push","Bundler::GemHelper","classes/Bundler/GemHelper.html#M000105","()","",2],["git_version","Gem::Specification","classes/Gem/Specification.html#M000178","()","",2],["global_config_file","Bundler::Settings","classes/Bundler/Settings.html#M000280","()","",2],["globs_for","Thor::Util","classes/Thor/Util.html#M000574","(path)","Where to look for Thor files. ",2],["group","Bundler::Dsl","classes/Bundler/Dsl.html#M000089","(*args, &blk)","",2],["group","Thor::Base::ClassMethods","classes/Thor/Base/ClassMethods.html#M000449","(name=nil)","Defines the group. This is used when thor list is invoked so you can specify that only tasks from a pre-defined",2],["groups","Bundler::Definition","classes/Bundler/Definition.html#M000022","()","",2],["groups","Bundler::Graph","classes/Bundler/Graph.html#M000120","()","",2],["groups","Gem::Specification","classes/Gem/Specification.html#M000177","()","",2],["gsub_file","Thor::Actions","classes/Thor/Actions.html#M000406","(path, flag, *args, &block)","Run a regular expression replacement on a file. ==== Parameters path<String>:: path of the file to be",2],["guard_already_tagged","Bundler::GemHelper","classes/Bundler/GemHelper.html#M000108","()","",2],["guard_clean","Bundler::GemHelper","classes/Bundler/GemHelper.html#M000109","()","",2],["handle_argument_error?","Thor::Task","classes/Thor/Task.html#M000555","(instance, error, caller)","",2],["handle_no_method_error?","Thor::Task","classes/Thor/Task.html#M000556","(instance, error, caller)","",2],["has_revision_cached?","Bundler::Source::Git","classes/Bundler/Source/Git.html#M000368","()","",2],["hash","Bundler::DepProxy","classes/Bundler/DepProxy.html#M000202","()","",2],["hash","Bundler::Source::Path","classes/Bundler/Source/Path.html#M000334","()","",2],["hash","Bundler::Source::Rubygems","classes/Bundler/Source/Rubygems.html#M000293","()","",2],["hash","Gem::Platform","classes/Gem/Platform.html#M000200","()","",2],["have_groff?","Bundler::CLI","classes/Bundler/CLI.html#M000051","()","",2],["help","Bundler::CLI","classes/Bundler/CLI.html#M000002","(cli = nil)","",2],["help","Thor","classes/Thor.html#M000581","(shell, subcommand = false)","Prints help information for this class. ==== Parameters shell<Thor::Shell> ",2],["help","Thor","classes/Thor.html#M000599","(task = nil, subcommand = false)","",2],["help","Thor::Group","classes/Thor/Group.html#M000475","(shell)","Prints help information. ==== Options short:: When true, shows only usage. ",2],["hidden?","Thor::HiddenTask","classes/Thor/HiddenTask.html#M000557","()","",2],["hidden?","Thor::Task","classes/Thor/Task.html#M000542","()","",2],["home","Bundler","classes/Bundler.html#M000612","()","",2],["in_bundle?","Bundler::SharedHelpers","classes/Bundler/SharedHelpers.html#M000285","()","",2],["in_cache","Bundler::Source::Git","classes/Bundler/Source/Git.html#M000372","(&blk)","",2],["in_locked_deps?","Bundler::Definition","classes/Bundler/Definition.html#M000038","(dep, d)","",2],["in_root","Thor::Actions","classes/Thor/Actions.html#M000425","()","Goes to the root and execute the given block. ",2],["included","Thor::RakeCompat","classes/Thor/RakeCompat.html#M000502","(base)","",2],["index","Bundler::Definition","classes/Bundler/Definition.html#M000019","()","",2],["index","Bundler::Environment","classes/Bundler/Environment.html#M000077","()","TODO: Remove this method. It's used in cli.rb still ",2],["inflate","Bundler::RubygemsIntegration","classes/Bundler/RubygemsIntegration.html#M000221","(obj)","",2],["info","Bundler::UI","classes/Bundler/UI.html#M000376","(message)","",2],["info","Bundler::UI::Shell","classes/Bundler/UI/Shell.html#M000380","(msg)","",2],["inherited","Thor::Base::ClassMethods","classes/Thor/Base/ClassMethods.html#M000465","(klass)","Everytime someone inherits from a Thor class, register the klass and file into baseclass. ",2],["init","Bundler::CLI","classes/Bundler/CLI.html#M000004","()","",2],["initialize_copy","Bundler::Index","classes/Bundler/Index.html#M000124","(o)","",2],["initialize_copy","Bundler::Resolver::SpecGroup","classes/Bundler/Resolver/SpecGroup.html#M000168","(o)","",2],["inject_into_class","Thor::Actions","classes/Thor/Actions.html#M000405","(path, klass, *args, &block)","Injects text right after the class definition. Since it depends on insert_into_file, it's reversible.",2],["inject_into_file","Thor::Actions","classes/Thor/Actions.html#M000396","(destination, *args, &block)","Alias for #insert_into_file",2],["insert_into_file","Thor::Actions","classes/Thor/Actions.html#M000394","(destination, *args, &block)","Injects the given content into a file. Different from gsub_file, this method is reversible. ==== Parameters",2],["inside","Thor::Actions","classes/Thor/Actions.html#M000424","(dir='', config={}, &block)","Do something in the root or on a provided subfolder. If a relative path is given it's referenced from",2],["inspect","Bundler::Environment","classes/Bundler/Environment.html#M000076","()","",2],["install","Bundler::CLI","classes/Bundler/CLI.html#M000018","(path = nil)","",2],["install","Bundler::GemHelper","classes/Bundler/GemHelper.html#M000097","()","",2],["install","Bundler::Installer","classes/Bundler/Installer.html#M000141","(root, definition, options = {})","",2],["install","Bundler::Source::Git","classes/Bundler/Source/Git.html#M000357","(spec)","",2],["install","Bundler::Source::Path","classes/Bundler/Source/Path.html#M000342","(spec)","",2],["install","Bundler::Source::Rubygems","classes/Bundler/Source/Rubygems.html#M000310","(spec)","",2],["install_gem","Bundler::GemHelper","classes/Bundler/GemHelper.html#M000101","()","",2],["install_gem_from_spec","Bundler::Installer","classes/Bundler/Installer.html#M000145","(spec)","",2],["install_path","Bundler","classes/Bundler.html#M000613","()","",2],["install_tasks","Bundler::GemHelper","classes/Bundler/GemHelper.html#M000094","(opts = {})","",2],["installed_specs","Bundler::Source::Rubygems","classes/Bundler/Source/Rubygems.html#M000323","()","",2],["invoke","Thor::Group","classes/Thor/Group.html#M000480","(*names, &block)","Invoke the given namespace or class given. It adds an instance method that will invoke the klass and",2],["invoke","Thor::Invocation","classes/Thor/Invocation.html#M000483","(name=nil, *args)","Receives a name and invokes it. The name can be a string (either \"task\" or \"namespace:task\"), a Thor::Task,",2],["invoke_from_option","Thor::Group","classes/Thor/Group.html#M000482","(*names, &block)","Invoke a thor class based on the value supplied by the user to the given option named \"name\". A class",2],["invoke_with_padding","Thor::Invocation","classes/Thor/Invocation.html#M000489","(*args)","Invokes using shell padding. ",2],["jruby?","Bundler::Dependency","classes/Bundler/Dependency.html#M000065","()","",2],["key_for","Bundler::Settings","classes/Bundler/Settings.html#M000278","(key)","",2],["link_file","Thor::Actions","classes/Thor/Actions.html#M000397","(source, *args, &block)","Links the file from the relative source to the relative destination. If the destination is not given",2],["load","Bundler","classes/Bundler.html#M000607","()","",2],["load_gemspec","Bundler","classes/Bundler.html#M000628","(file)","",2],["load_paths","Gem::Specification","classes/Gem/Specification.html#M000175","()","",2],["load_spec_files","Bundler::Source::Git","classes/Bundler/Source/Git.html#M000358","()","",2],["load_spec_files","Bundler::Source::Path","classes/Bundler/Source/Path.html#M000338","()","",2],["load_thorfile","Thor::Util","classes/Thor/Util.html#M000567","(path, content=nil, debug=false)","Receives a path and load the thor file in the path. The file is evaluated inside the sandbox to avoid",2],["loaded_from","Gem::Specification","classes/Gem/Specification.html#M000173","()","",2],["loaded_specs","Bundler::RubygemsIntegration","classes/Bundler/RubygemsIntegration.html#M000214","(name)","",2],["local_config_file","Bundler::Settings","classes/Bundler/Settings.html#M000281","()","",2],["local_specs","Bundler::Source::Path","classes/Bundler/Source/Path.html#M000339","()","",2],["locate_gem","Bundler::CLI","classes/Bundler/CLI.html#M000052","(name)","",2],["locations","Bundler::Settings","classes/Bundler/Settings.html#M000272","(key)","",2],["lock","Bundler::CLI","classes/Bundler/CLI.html#M000027","()","",2],["lock","Bundler::Definition","classes/Bundler/Definition.html#M000023","(file)","",2],["lock","Bundler::Environment","classes/Bundler/Environment.html#M000083","()","",2],["long_desc","Thor","classes/Thor.html#M000576","(long_description, options={})","Defines the long description of the next task. ==== Parameters long description<String> ",2],["lookup","Bundler::SpecSet","classes/Bundler/SpecSet.html#M000313","()","",2],["maglev?","Bundler::Dependency","classes/Bundler/Dependency.html#M000066","()","",2],["map","Thor","classes/Thor.html#M000577","(mappings=nil)","Maps an input to a task. If you define: map \"-T\" => \"list\" Running: thor -T Will invoke the list task.",2],["mark_loaded","Bundler::RubygemsIntegration","classes/Bundler/RubygemsIntegration.html#M000215","(spec)","",2],["marshal_spec_dir","Bundler::RubygemsIntegration","classes/Bundler/RubygemsIntegration.html#M000230","()","",2],["match_platform","Bundler::MatchPlatform","classes/Bundler/MatchPlatform.html#M000209","(p)","",2],["matches_spec?","Gem::Dependency","classes/Gem/Dependency.html#M000198","(spec)","Backport of performance enhancement added to Rubygems 1.4 ",2],["materialize","Bundler::SpecSet","classes/Bundler/SpecSet.html#M000306","(deps, missing_specs = nil)","",2],["merge","Bundler::SpecSet","classes/Bundler/SpecSet.html#M000311","(set)","",2],["merge_remotes","Bundler::Source::Rubygems","classes/Bundler/Source/Rubygems.html#M000319","(source)","",2],["method_added","Thor::Base::ClassMethods","classes/Thor/Base/ClassMethods.html#M000466","(meth)","Fire this callback whenever a method is added. Added methods are tracked as tasks by invoking the create_task",2],["method_missing","Bundler::DepProxy","classes/Bundler/DepProxy.html#M000207","(*args)","",2],["method_missing","Bundler::LazySpecification","classes/Bundler/LazySpecification.html#M000152","(method, *args, &blk)","",2],["method_missing","Bundler::RemoteSpecification","classes/Bundler/RemoteSpecification.html#M000164","(method, *args, &blk)","",2],["method_option","Thor","classes/Thor.html#M000579","(name, options={})","Adds an option to the set of method options. If :for is given as option, it allows you to change the",2],["method_options","Thor","classes/Thor.html#M000578","(options=nil)","Declares the options for the next task to be declared. ==== Parameters Hash[Symbol => Object]:: The hash",2],["mingw?","Bundler::Dependency","classes/Bundler/Dependency.html#M000068","()","",2],["mingw_18?","Bundler::Dependency","classes/Bundler/Dependency.html#M000069","()","",2],["mingw_19?","Bundler::Dependency","classes/Bundler/Dependency.html#M000070","()","",2],["missing_specs","Bundler::Definition","classes/Bundler/Definition.html#M000013","()","",2],["mkdir_p","Bundler","classes/Bundler.html#M000625","(path)","",2],["mri?","Bundler::Dependency","classes/Bundler/Dependency.html#M000061","()","",2],["mri_18?","Bundler::Dependency","classes/Bundler/Dependency.html#M000062","()","",2],["mri_19?","Bundler::Dependency","classes/Bundler/Dependency.html#M000063","()","",2],["mswin?","Bundler::Dependency","classes/Bundler/Dependency.html#M000067","()","",2],["mute","Thor::Shell::Basic","classes/Thor/Shell/Basic.html#M000504","()","Mute everything that's inside given block ",2],["mute?","Thor::Shell::Basic","classes/Thor/Shell/Basic.html#M000505","()","Check if base is muted ",2],["name","Bundler::GemHelper","classes/Bundler/GemHelper.html#M000114","()","",2],["name","Bundler::Resolver::SpecGroup","classes/Bundler/Resolver/SpecGroup.html#M000179","()","",2],["name","Bundler::Source::Git","classes/Bundler/Source/Git.html#M000353","()","",2],["name","Bundler::Source::Path","classes/Bundler/Source/Path.html#M000337","()","",2],["name","Bundler::Source::Rubygems","classes/Bundler/Source/Rubygems.html#M000307","()","Alias for #to_s",2],["namespace","Thor::Base::ClassMethods","classes/Thor/Base/ClassMethods.html#M000454","(name=nil)","Sets the namespace for the Thor or Thor::Group class. By default the namespace is retrieved from the",2],["namespace_from_thor_class","Thor::Util","classes/Thor/Util.html#M000561","(constant)","Receives a constant and converts it to a Thor namespace. Since Thor tasks can be added to a sandbox,",2],["namespaces_in_content","Thor::Util","classes/Thor/Util.html#M000562","(contents, file=__FILE__)","Given the contents, evaluate it inside the sandbox and returns the namespaces defined in the sandbox.",2],["new","Bundler::CLI","classes/Bundler/CLI.html#M000000","(*)","",2],["new","Bundler::Definition","classes/Bundler/Definition.html#M000003","(lockfile, dependencies, sources, unlock)","",2],["new","Bundler::DepProxy","classes/Bundler/DepProxy.html#M000201","(dep, platform)","",2],["new","Bundler::Dependency","classes/Bundler/Dependency.html#M000050","(name, version, options = {}, &blk)","",2],["new","Bundler::Dsl","classes/Bundler/Dsl.html#M000073","()","",2],["new","Bundler::Environment","classes/Bundler/Environment.html#M000075","(root, definition)","",2],["new","Bundler::GemHelper","classes/Bundler/GemHelper.html#M000095","(base, name = nil)","",2],["new","Bundler::Graph","classes/Bundler/Graph.html#M000118","(env)","",2],["new","Bundler::GraphNode","classes/Bundler/GraphNode.html#M000137","(name, version)","",2],["new","Bundler::Index","classes/Bundler/Index.html#M000123","()","",2],["new","Bundler::LazySpecification","classes/Bundler/LazySpecification.html#M000143","(name, version, platform, source = nil)","",2],["new","Bundler::LockfileParser","classes/Bundler/LockfileParser.html#M000154","(lockfile)","",2],["new","Bundler::RemoteSpecification","classes/Bundler/RemoteSpecification.html#M000159","(name, version, platform, source_uri)","",2],["new","Bundler::Resolver","classes/Bundler/Resolver.html#M000189","(index, source_requirements, base)","",2],["new","Bundler::Resolver::SpecGroup","classes/Bundler/Resolver/SpecGroup.html#M000167","(a)","",2],["new","Bundler::RubygemsIntegration","classes/Bundler/RubygemsIntegration.html#M000213","()","",2],["new","Bundler::RubygemsIntegration::Ancient","classes/Bundler/RubygemsIntegration/Ancient.html#M000255","()","",2],["new","Bundler::Settings","classes/Bundler/Settings.html#M000266","(root)","",2],["new","Bundler::Source::Git","classes/Bundler/Source/Git.html#M000347","(options)","",2],["new","Bundler::Source::Path","classes/Bundler/Source/Path.html#M000328","(options)","",2],["new","Bundler::Source::Path::Installer","classes/Bundler/Source/Path/Installer.html#M000340","(spec, options = {})","",2],["new","Bundler::Source::Rubygems","classes/Bundler/Source/Rubygems.html#M000290","(options = {})","",2],["new","Bundler::SpecSet","classes/Bundler/SpecSet.html#M000288","(specs)","",2],["new","Bundler::UI::RGProxy","classes/Bundler/UI/RGProxy.html#M000386","(ui)","",2],["new","Bundler::UI::Shell","classes/Bundler/UI/Shell.html#M000378","(shell)","",2],["new","Bundler::VersionConflict","classes/Bundler/VersionConflict.html#M000600","(conflicts, msg = nil)","",2],["new","Thor::Actions","classes/Thor/Actions.html#M000417","(args=[], options={}, config={})","Extends initializer to add more configuration options. ==== Configuration behavior<Symbol>:: The actions",2],["new","Thor::Base","classes/Thor/Base.html#M000427","(args=[], options={}, config={})","It receives arguments in an Array and two hashes, one for options and other for configuration. Notice",2],["new","Thor::DynamicTask","classes/Thor/DynamicTask.html#M000558","(name, options=nil)","",2],["new","Thor::Shell","classes/Thor/Shell.html#M000545","(args=[], options={}, config={})","Add shell to initialize config values. ==== Configuration shell<Object>:: An instance of the shell to",2],["new","Thor::Task","classes/Thor/Task.html#M000540","(name, description, long_description, usage, options=nil)","",2],["new_platform?","Bundler::Definition","classes/Bundler/Definition.html#M000012","()","",2],["new_specs","Bundler::Definition","classes/Bundler/Definition.html#M000010","()","",2],["no?","Thor::Shell::Basic","classes/Thor/Shell/Basic.html#M000511","(statement, color=nil)","Make a question the to user and returns true if the user replies \"n\" or \"no\". ",2],["no_sources?","Bundler::Definition","classes/Bundler/Definition.html#M000021","()","",2],["no_tasks","Thor::Base::ClassMethods","classes/Thor/Base/ClassMethods.html#M000453","()","All methods defined inside the given block are not added as tasks. So you can do: class MyScript < Thor",2],["nodes","Bundler::Graph","classes/Bundler/Graph.html#M000119","()","",2],["nondevelopment_dependencies","Gem::Specification","classes/Gem/Specification.html#M000186","()","",2],["none?","Gem::Requirement","classes/Gem/Requirement.html#M000199","()","Backport of performance enhancement added to Rubygems 1.4 ",2],["normalize_uri","Bundler::Source::Rubygems","classes/Bundler/Source/Rubygems.html#M000321","(uri)","",2],["not_debugging?","Thor::Task","classes/Thor/Task.html#M000551","(instance)","",2],["open","Bundler::CLI","classes/Bundler/CLI.html#M000042","(name)","",2],["options","Bundler::Source::Rubygems","classes/Bundler/Source/Rubygems.html#M000297","()","",2],["package","Bundler::CLI","classes/Bundler/CLI.html#M000035","()","",2],["padding=","Thor::Shell::Basic","classes/Thor/Shell/Basic.html#M000506","(value)","Sets the output padding, not allowing less than zero values. ",2],["parse_dependency","Bundler::LockfileParser","classes/Bundler/LockfileParser.html#M000156","(line)","",2],["parse_platform","Bundler::LockfileParser","classes/Bundler/LockfileParser.html#M000158","(line)","",2],["parse_source","Bundler::LockfileParser","classes/Bundler/LockfileParser.html#M000155","(line)","",2],["parse_spec","Bundler::LockfileParser","classes/Bundler/LockfileParser.html#M000157","(line)","",2],["path","Bundler::Dsl","classes/Bundler/Dsl.html#M000086","(path, options = {}, source_options = {}, &blk)","",2],["path","Bundler::RubygemsIntegration","classes/Bundler/RubygemsIntegration.html#M000216","(obj)","",2],["path","Bundler::Settings","classes/Bundler/Settings.html#M000276","()","@local_config[\"BUNDLE_PATH\"] should be prioritized over ENV[\"BUNDLE_PATH\"] ",2],["path","Bundler::Source::Git","classes/Bundler/Source/Git.html#M000354","()","",2],["perform_git_push","Bundler::GemHelper","classes/Bundler/GemHelper.html#M000106","(options = '')","",2],["platform","Bundler::Dsl","classes/Bundler/Dsl.html#M000091","(*platforms)","Alias for #platforms",2],["platforms","Bundler::Dsl","classes/Bundler/Dsl.html#M000090","(*platforms)","",2],["platforms","Bundler::RubygemsIntegration","classes/Bundler/RubygemsIntegration.html#M000217","()","",2],["populate","Bundler::Graph","classes/Bundler/Graph.html#M000134","()","",2],["prepend_file","Thor::Actions","classes/Thor/Actions.html#M000402","(path, *args, &block)","Alias for #prepend_to_file",2],["prepend_to_file","Thor::Actions","classes/Thor/Actions.html#M000401","(path, *args, &block)","Prepend text to a file. Since it depends on insert_into_file, it's reversible. ==== Parameters path<String>::",2],["preserve_paths","Bundler::RubygemsIntegration","classes/Bundler/RubygemsIntegration.html#M000233","()","",2],["preserve_paths","Bundler::RubygemsIntegration::AlmostModern","classes/Bundler/RubygemsIntegration/AlmostModern.html#M000261","()","Rubygems [>= 1.8.0, < 1.8.5] has a bug that changes Gem.dir whenever you call Gem::Installer#install",2],["pretty_dep","Bundler::Definition","classes/Bundler/Definition.html#M000030","(dep, source = false)","",2],["pretty_values_for","Bundler::Settings","classes/Bundler/Settings.html#M000273","(exposed_key)","",2],["print_options","Thor::Base::ClassMethods","classes/Thor/Base/ClassMethods.html#M000460","(shell, options, group_name=nil)","Receives a set of options and print them. ",2],["print_table","Thor::Shell::Basic","classes/Thor/Shell/Basic.html#M000512","(table, options={})","Prints a table. ==== Parameters Array[Array[String, String, ...]] ==== Options ident<Integer>:: Indent",2],["print_wrapped","Thor::Shell::Basic","classes/Thor/Shell/Basic.html#M000513","(message, options={})","Prints a long string, word-wrapping the text to the current width of the terminal display. Ideal for",2],["printable_tasks","Thor","classes/Thor.html#M000582","(all = true, subcommand = false)","Returns tasks ready to be printed. ",2],["printable_tasks","Thor::Group","classes/Thor/Group.html#M000492","(*)","Returns tasks ready to be printed. ",2],["prune_cache","Bundler::Runtime","classes/Bundler/Runtime.html#M000263","()","",2],["public_task","Thor::Base::ClassMethods","classes/Thor/Base/ClassMethods.html#M000456","(*names)","Allows to use private methods from parent in child classes as tasks. ==== Paremeters names<Array>:: Method",2],["rake_classes","Thor::RakeCompat","classes/Thor/RakeCompat.html#M000501","()","",2],["rbx?","Bundler::Dependency","classes/Bundler/Dependency.html#M000064","()","",2],["read_binary","Bundler::RubygemsIntegration","classes/Bundler/RubygemsIntegration.html#M000220","(path)","",2],["read_file","Bundler","classes/Bundler.html#M000627","(file)","",2],["register","Thor","classes/Thor.html#M000570","(klass, subcommand_name, usage, description, options={})","Registers another Thor subclass as a command. ==== Parameters klass<Class>:: Thor subclass to register",2],["relative_path","Bundler::Source::Path","classes/Bundler/Source/Path.html#M000345","()","",2],["relative_to_original_destination_root","Thor::Actions","classes/Thor/Actions.html#M000421","(path, remove_dot=true)","Returns the given path relative to the absolute root (ie, root where the script started). ",2],["release_gem","Bundler::GemHelper","classes/Bundler/GemHelper.html#M000102","()","",2],["remote!","Bundler::Source::Path","classes/Bundler/Source/Path.html#M000329","()","",2],["remote!","Bundler::Source::Rubygems","classes/Bundler/Source/Rubygems.html#M000291","()","",2],["remote_specs","Bundler::Source::Rubygems","classes/Bundler/Source/Rubygems.html#M000325","()","",2],["remove_argument","Thor::Base::ClassMethods","classes/Thor/Base/ClassMethods.html#M000447","(*names)","Removes a previous defined argument. If :undefine is given, undefine accessors as well. ==== Paremeters",2],["remove_class_option","Thor::Base::ClassMethods","classes/Thor/Base/ClassMethods.html#M000448","(*names)","Removes a previous defined class option. ==== Paremeters names<Array>:: Class options to be removed ====",2],["remove_dir","Thor::Actions","classes/Thor/Actions.html#M000410","(path, config={})","Alias for #remove_file",2],["remove_file","Thor::Actions","classes/Thor/Actions.html#M000409","(path, config={})","Removes a file at the given location. ==== Parameters path<String>:: path of the file to be changed config<Hash>::",2],["remove_invocation","Thor::Group","classes/Thor/Group.html#M000484","(*names)","Remove a previously added invocation. ==== Examples remove_invocation :test_framework ",2],["remove_task","Thor::Base::ClassMethods","classes/Thor/Base/ClassMethods.html#M000452","(*names)","Removes a given task from this Thor class. This is usually done if you are inheriting from another class",2],["removed_specs","Bundler::Definition","classes/Bundler/Definition.html#M000011","()","",2],["replace_bin_path","Bundler::RubygemsIntegration","classes/Bundler/RubygemsIntegration.html#M000246","(specs)","Used to make bin stubs that are not created by bundler work under bundler. The new Gem.bin_path only",2],["replace_entrypoints","Bundler::RubygemsIntegration","classes/Bundler/RubygemsIntegration.html#M000249","(specs)","Replace or hook into Rubygems to provide a bundlerized view of the world. ",2],["replace_gem","Bundler::RubygemsIntegration","classes/Bundler/RubygemsIntegration.html#M000242","(specs)","",2],["replace_refresh","Bundler::RubygemsIntegration","classes/Bundler/RubygemsIntegration.html#M000248","()","Because Bundler has a static view of what specs are available, we don't #reflesh, so stub it out. ",2],["requested_dependencies","Bundler::Definition","classes/Bundler/Definition.html#M000046","()","",2],["requested_specs","Bundler::Definition","classes/Bundler/Definition.html#M000014","()","",2],["requested_specs","Bundler::Environment","classes/Bundler/Environment.html#M000078","()","",2],["require","Bundler","classes/Bundler.html#M000606","(*groups)","",2],["require","Bundler::Runtime","classes/Bundler/Runtime.html#M000254","(*groups)","",2],["required_by","Gem::Dependency","classes/Gem/Dependency.html#M000166","()","",2],["required_by","Gem::Specification","classes/Gem/Specification.html#M000165","()","",2],["required_options","Thor::Task","classes/Thor/Task.html#M000552","()","",2],["requirement","Gem::Dependency","classes/Gem/Dependency.html#M000282","()","",2],["requires_sudo?","Bundler","classes/Bundler.html#M000624","()","",2],["resolve","Bundler::Definition","classes/Bundler/Definition.html#M000017","()","",2],["resolve","Bundler::Resolver","classes/Bundler/Resolver.html#M000197","(reqs, activated)","",2],["resolve","Bundler::Resolver","classes/Bundler/Resolver.html#M000187","(requirements, index, source_requirements = {}, base = [])","Figures out the best possible configuration of gems that satisfies the list of passed dependencies and",2],["resolve_remotely!","Bundler::Definition","classes/Bundler/Definition.html#M000008","()","",2],["resolve_requirement","Bundler::Resolver","classes/Bundler/Resolver.html#M000210","(spec_group, requirement, reqs, activated)","",2],["resolve_with_cache!","Bundler::Definition","classes/Bundler/Definition.html#M000007","()","",2],["respond_to?","Bundler::LazySpecification","classes/Bundler/LazySpecification.html#M000149","(*args)","",2],["reverse_rubygems_kernel_mixin","Bundler::RubygemsIntegration","classes/Bundler/RubygemsIntegration.html#M000241","()","",2],["revision","Bundler::Source::Git","classes/Bundler/Source/Git.html#M000370","()","",2],["rg_full_gem_path","Gem::Specification","classes/Gem/Specification.html#M000171","()","Alias for #full_gem_path",2],["rg_loaded_from","Gem::Specification","classes/Gem/Specification.html#M000174","()","Alias for #loaded_from",2],["root","Bundler","classes/Bundler.html#M000616","()","",2],["ruby?","Bundler::Dependency","classes/Bundler/Dependency.html#M000058","()","",2],["ruby_18?","Bundler::Dependency","classes/Bundler/Dependency.html#M000059","()","",2],["ruby_19?","Bundler::Dependency","classes/Bundler/Dependency.html#M000060","()","",2],["ruby_command","Thor::Util","classes/Thor/Util.html#M000575","()","Return the path to the ruby interpreter taking into account multiple installations and windows extensions.",2],["ruby_engine","Bundler::RubygemsIntegration","classes/Bundler/RubygemsIntegration.html#M000219","()","",2],["ruby_scope","Bundler","classes/Bundler.html#M000610","()","",2],["rubygem_push","Bundler::GemHelper","classes/Bundler/GemHelper.html#M000103","(path)","",2],["rubygems_index","Bundler::Definition","classes/Bundler/Definition.html#M000020","()","",2],["rubygems_source","Bundler::Dsl","classes/Bundler/Dsl.html#M000096","(source)","",2],["run","Bundler::Installer","classes/Bundler/Installer.html#M000142","(options)","",2],["run","Thor::Actions","classes/Thor/Actions.html#M000428","(command, config={})","Executes a command returning the contents of the command. ==== Parameters command<String>:: the command",2],["run","Thor::DynamicTask","classes/Thor/DynamicTask.html#M000559","(instance, args=[])","",2],["run","Thor::Task","classes/Thor/Task.html#M000543","(instance, args=[])","By default, a task invokes a method in the thor class. You can change this implementation to create custom",2],["run_ruby_script","Thor::Actions","classes/Thor/Actions.html#M000430","(command, config={})","Executes a ruby script (taking into account WIN32 platform quirks). ==== Parameters command<String>::",2],["same_version?","Bundler::Index","classes/Bundler/Index.html#M000136","(a, b)","",2],["same_version?","Bundler::Index","classes/Bundler/Index.html#M000138","(a, b)","",2],["satisfies?","Bundler::LazySpecification","classes/Bundler/LazySpecification.html#M000146","(dependency)","",2],["satisfies_locked_spec?","Bundler::Definition","classes/Bundler/Definition.html#M000039","(dep)","",2],["say","Bundler::UI::RGProxy","classes/Bundler/UI/RGProxy.html#M000387","(message)","",2],["say","Thor::Shell::Basic","classes/Thor/Shell/Basic.html#M000508","(message=\"\", color=nil, force_new_line=(message.to_s !~ /( |\\t)$/))","Say (print) something to the user. If the sentence ends with a whitespace or tab character, a new line",2],["say_status","Thor::Shell::Basic","classes/Thor/Shell/Basic.html#M000509","(status, message, log_status=true)","Say a status with the given color and appends the message. Since this method is used frequently by actions,",2],["search","Bundler::Index","classes/Bundler/Index.html#M000126","(query)","",2],["search","Bundler::Resolver","classes/Bundler/Resolver.html#M000212","(dep)","",2],["search_by_dependency","Bundler::Index","classes/Bundler/Index.html#M000140","(dependency)","",2],["search_by_spec","Bundler::Index","classes/Bundler/Index.html#M000135","(spec)","",2],["search_for_all_platforms","Bundler::Index","classes/Bundler/Index.html#M000127","(dependency, base = [])","",2],["set_color","Thor::Shell::Color","classes/Thor/Shell/Color.html#M000530","(string, color, bold=false)","Set color by using a string or one of the defined constants. If a third option is set to true, it also",2],["set_color","Thor::Shell::HTML","classes/Thor/Shell/HTML.html#M000531","(string, color, bold=false)","Set color by using a string or one of the defined constants. If a third option is set to true, it also",2],["set_global","Bundler::Settings","classes/Bundler/Settings.html#M000270","(key, value)","",2],["set_key","Bundler::Settings","classes/Bundler/Settings.html#M000279","(key, value, hash, file)","",2],["settings","Bundler","classes/Bundler.html#M000620","()","",2],["setup","Bundler","classes/Bundler.html#M000605","(*groups)","",2],["setup","Bundler::Runtime","classes/Bundler/Runtime.html#M000247","(*groups)","",2],["setup_environment","Bundler::Runtime","classes/Bundler/Runtime.html#M000265","()","",2],["sh","Bundler::GemHelper","classes/Bundler/GemHelper.html#M000115","(cmd, &block)","",2],["sh_with_code","Bundler::GemHelper","classes/Bundler/GemHelper.html#M000116","(cmd, &block)","",2],["shell","Thor::Base","classes/Thor/Base.html#M000539","()","Returns the shell used in all Thor classes. If you are in a Unix platform it will use a colored log,",2],["shell","Thor::Shell","classes/Thor/Shell.html#M000546","()","Holds the shell for the given Thor instance. If no shell is given, it gets a default shell from Thor::Base.shell.",2],["shell=","Thor::Base","classes/Thor/Base.html#M000544","(klass)","Sets the shell used in all Thor classes. ",2],["shell=","Thor::Shell","classes/Thor/Shell.html#M000547","(shell)","Sets the shell for this thor class. ",2],["shortref_for_display","Bundler::Source::Git","classes/Bundler/Source/Git.html#M000361","(ref)","",2],["shortref_for_path","Bundler::Source::Git","classes/Bundler/Source/Git.html#M000362","(ref)","",2],["should_include?","Bundler::Dependency","classes/Bundler/Dependency.html#M000054","()","",2],["show","Bundler::CLI","classes/Bundler/CLI.html#M000029","(gem_name = nil)","",2],["skip_during","Bundler::RubygemsIntegration::Deprecate","classes/Bundler/RubygemsIntegration/Deprecate.html#M000243","()","",2],["snake_case","Thor::Util","classes/Thor/Util.html#M000564","(str)","Receives a string and convert it to snake case. SnakeCase returns snake_case. ==== Parameters String",2],["sort!","Bundler::SpecSet","classes/Bundler/SpecSet.html#M000303","()","",2],["sorted","Bundler::SpecSet","classes/Bundler/SpecSet.html#M000312","()","",2],["sorted_sources","Bundler::Definition","classes/Bundler/Definition.html#M000043","()","",2],["source","Bundler::Dsl","classes/Bundler/Dsl.html#M000085","(source, options = {})","",2],["source","Bundler::Resolver::SpecGroup","classes/Bundler/Resolver/SpecGroup.html#M000181","()","",2],["source_paths","Thor::Actions","classes/Thor/Actions.html#M000422","()","Holds source paths in instance so they can be manipulated. ",2],["source_paths","Thor::Actions::ClassMethods","classes/Thor/Actions/ClassMethods.html#M000408","()","Hold source paths for one Thor instance. source_paths_for_search is the method responsible to gather",2],["source_paths_for_search","Thor::Actions::ClassMethods","classes/Thor/Actions/ClassMethods.html#M000414","()","Returns the source paths in the following order: 1) This class source paths 2) Source root 3) Parents",2],["source_root","Bundler::CLI","classes/Bundler/CLI.html#M000049","()","",2],["source_root","Thor::Actions::ClassMethods","classes/Thor/Actions/ClassMethods.html#M000413","(path=nil)","Stores and return the source root for this class ",2],["sources","Bundler::Index","classes/Bundler/Index.html#M000128","()","",2],["sources","Bundler::RubygemsIntegration","classes/Bundler/RubygemsIntegration.html#M000225","()","",2],["sources=","Bundler::RubygemsIntegration","classes/Bundler/RubygemsIntegration.html#M000222","(val)","",2],["spec_from_gem","Bundler::RubygemsIntegration","classes/Bundler/RubygemsIntegration.html#M000239","(path)","",2],["spec_satisfies_dependency?","Bundler::Index","classes/Bundler/Index.html#M000139","(spec, dep)","",2],["specs","Bundler::Definition","classes/Bundler/Definition.html#M000009","()","",2],["specs","Bundler::Environment","classes/Bundler/Environment.html#M000080","()","",2],["specs","Bundler::Source::Git","classes/Bundler/Source/Git.html#M000356","()","TODO: actually cache git specs ",2],["specs","Bundler::Source::Path","classes/Bundler/Source/Path.html#M000343","()","Alias for #local_specs",2],["specs","Bundler::Source::Rubygems","classes/Bundler/Source/Rubygems.html#M000308","()","",2],["specs_for","Bundler::Definition","classes/Bundler/Definition.html#M000016","(groups)","",2],["specs_path","Bundler","classes/Bundler.html#M000614","()","",2],["start","Bundler::Resolver","classes/Bundler/Resolver.html#M000193","(reqs)","",2],["start","Thor::Base::ClassMethods","classes/Thor/Base/ClassMethods.html#M000455","(given_args=ARGV, config={})","Parses the task and options from the given args, instantiate the class and invoke the task. This method",2],["status_code","Bundler::BundlerError","classes/Bundler/BundlerError.html#M000596","(code)","",2],["stderr","Thor::Shell::Basic","classes/Thor/Shell/Basic.html#M000519","()","",2],["stdin","Thor::Shell::Basic","classes/Thor/Shell/Basic.html#M000518","()","",2],["stdout","Thor::Shell::Basic","classes/Thor/Shell/Basic.html#M000517","()","",2],["stub_rubygems","Bundler::RubygemsIntegration::Legacy","classes/Bundler/RubygemsIntegration/Legacy.html#M000251","(specs)","",2],["stub_rubygems","Bundler::RubygemsIntegration::Modern","classes/Bundler/RubygemsIntegration/Modern.html#M000257","(specs)","",2],["stub_rubygems","Bundler::RubygemsIntegration::Transitional","classes/Bundler/RubygemsIntegration/Transitional.html#M000256","(specs)","",2],["stub_source_index137","Bundler::RubygemsIntegration","classes/Bundler/RubygemsIntegration.html#M000244","(specs)","",2],["stub_source_index170","Bundler::RubygemsIntegration","classes/Bundler/RubygemsIntegration.html#M000245","(specs)","",2],["subclass_files","Thor::Base","classes/Thor/Base.html#M000432","()","Returns the files where the subclasses are kept. ==== Returns Hash[path<String> => Class] ",2],["subclasses","Thor::Base","classes/Thor/Base.html#M000431","()","Returns the classes that inherits from Thor or Thor::Group. ==== Returns Array[Class] ",2],["subcommand","Thor","classes/Thor.html#M000584","(subcommand, subcommand_class)","",2],["subcommand_help","Thor","classes/Thor.html#M000598","(cmd)","",2],["subcommands","Thor","classes/Thor.html#M000583","()","",2],["successify","Bundler::Resolver","classes/Bundler/Resolver.html#M000192","(activated)","",2],["sudo","Bundler","classes/Bundler.html#M000626","(str)","",2],["sudo","Bundler::Source::Rubygems","classes/Bundler/Source/Rubygems.html#M000316","(str)","",2],["tag_version","Bundler::GemHelper","classes/Bundler/GemHelper.html#M000111","()","",2],["task_help","Thor","classes/Thor.html#M000580","(shell, task_name)","Prints help information for the given task. ==== Parameters shell<Thor::Shell> task_name<String> ",2],["tasks","Thor::Base::ClassMethods","classes/Thor/Base/ClassMethods.html#M000450","()","Returns the tasks for this Thor class. ==== Returns OrderedHash:: An ordered hash with tasks names as",2],["template","Thor::Actions","classes/Thor/Actions.html#M000399","(source, *args, &block)","Gets an ERB template at the relative source, executes it and makes a copy at the relative destination.",2],["terminal_width","Thor::Shell::Basic","classes/Thor/Shell/Basic.html#M000524","()","This code was copied from Rake, available under MIT-LICENSE Copyright (c) 2003, 2004 Jim Weirich ",2],["thor","Thor::Actions","classes/Thor/Actions.html#M000434","(task, *args)","Run a thor command. A hash of options can be given and it's converted to switches. ==== Parameters task<String>::",2],["thor_classes_in","Thor::Util","classes/Thor/Util.html#M000563","(klass)","Returns the thor classes declared inside the given class. ",2],["thor_root","Thor::Util","classes/Thor/Util.html#M000571","()","Returns the root where thor files are located, dependending on the OS. ",2],["thor_root_glob","Thor::Util","classes/Thor/Util.html#M000572","()","Returns the files in the thor root. On Windows thor_root will be something like this: C:\\Documents and",2],["tmp","Bundler","classes/Bundler.html#M000619","()","",2],["to_a","Bundler::SpecSet","classes/Bundler/SpecSet.html#M000304","()","",2],["to_ary","Bundler::LazySpecification","classes/Bundler/LazySpecification.html#M000151","()","",2],["to_definition","Bundler::Dsl","classes/Bundler/Dsl.html#M000088","(lockfile, unlock)","",2],["to_gemfile","Gem::Specification","classes/Gem/Specification.html#M000185","(path = nil)","",2],["to_hash","Bundler::SpecSet","classes/Bundler/SpecSet.html#M000305","()","",2],["to_lock","Bundler::Definition","classes/Bundler/Definition.html#M000024","()","",2],["to_lock","Bundler::Dependency","classes/Bundler/Dependency.html#M000057","()","",2],["to_lock","Bundler::LazySpecification","classes/Bundler/LazySpecification.html#M000147","()","",2],["to_lock","Bundler::Source::Git","classes/Bundler/Source/Git.html#M000349","()","",2],["to_lock","Bundler::Source::Path","classes/Bundler/Source/Path.html#M000332","()","",2],["to_lock","Bundler::Source::Rubygems","classes/Bundler/Source/Rubygems.html#M000299","()","",2],["to_lock","Gem::Dependency","classes/Gem/Dependency.html#M000196","()","",2],["to_s","Bundler::DepProxy","classes/Bundler/DepProxy.html#M000206","()","",2],["to_s","Bundler::LazySpecification","classes/Bundler/LazySpecification.html#M000150","()","",2],["to_s","Bundler::Resolver::SpecGroup","classes/Bundler/Resolver/SpecGroup.html#M000183","()","",2],["to_s","Bundler::Source::Git","classes/Bundler/Source/Git.html#M000352","()","",2],["to_s","Bundler::Source::Path","classes/Bundler/Source/Path.html#M000333","()","",2],["to_s","Bundler::Source::Rubygems","classes/Bundler/Source/Rubygems.html#M000300","()","",2],["to_specs","Bundler::Resolver::SpecGroup","classes/Bundler/Resolver/SpecGroup.html#M000169","()","",2],["to_yaml_properties","Gem::Dependency","classes/Gem/Dependency.html#M000195","()","",2],["truncate","Thor::Shell::Basic","classes/Thor/Shell/Basic.html#M000529","(string, width)","",2],["tsort_each_child","Bundler::SpecSet","classes/Bundler/SpecSet.html#M000315","(s)","",2],["tsort_each_node","Bundler::SpecSet","classes/Bundler/SpecSet.html#M000314","()","",2],["type","Bundler::DepProxy","classes/Bundler/DepProxy.html#M000205","()","",2],["ui","Bundler","classes/Bundler.html#M000602","()","",2],["ui=","Bundler::RubygemsIntegration","classes/Bundler/RubygemsIntegration.html#M000236","(obj)","",2],["unix?","Thor::Shell::Basic","classes/Thor/Shell/Basic.html#M000528","()","",2],["unlock","Bundler::CLI","classes/Bundler/CLI.html#M000028","()","",2],["unlock!","Bundler::Source::Git","classes/Bundler/Source/Git.html#M000355","()","",2],["update","Bundler::CLI","classes/Bundler/CLI.html#M000026","(*gems)","",2],["update","Bundler::Environment","classes/Bundler/Environment.html#M000084","(*gems)","",2],["upgrade_lockfile","Bundler","classes/Bundler.html#M000630","()","",2],["uri_escaped","Bundler::Source::Git","classes/Bundler/Source/Git.html#M000364","()","Escape the URI for git commands ",2],["uri_hash","Bundler::Source::Git","classes/Bundler/Source/Git.html#M000363","()","",2],["use","Bundler::Index","classes/Bundler/Index.html#M000132","(other, override_dupes = false)","",2],["user_bundle_path","Bundler","classes/Bundler.html#M000611","()","",2],["user_home","Bundler::RubygemsIntegration","classes/Bundler/RubygemsIntegration.html#M000228","()","",2],["user_home","Thor::Util","classes/Thor/Util.html#M000568","()","",2],["valid_for?","Bundler::SpecSet","classes/Bundler/SpecSet.html#M000295","(deps)","",2],["version","Bundler::CLI","classes/Bundler/CLI.html#M000045","()","",2],["version","Bundler::GemHelper","classes/Bundler/GemHelper.html#M000112","()","",2],["version","Bundler::Resolver::SpecGroup","classes/Bundler/Resolver/SpecGroup.html#M000180","()","",2],["version_conflict","Bundler::Resolver","classes/Bundler/Resolver.html#M000224","()","",2],["version_tag","Bundler::GemHelper","classes/Bundler/GemHelper.html#M000113","()","",2],["viz","Bundler::CLI","classes/Bundler/CLI.html#M000047","()","",2],["viz","Bundler::Graph","classes/Bundler/Graph.html#M000121","(output_file, show_gem_versions = false, show_dependency_requirements = false)","",2],["warn","Bundler::UI","classes/Bundler/UI.html#M000373","(message)","",2],["warn","Bundler::UI::Shell","classes/Bundler/UI/Shell.html#M000382","(msg)","",2],["with_build_args","Bundler::RubygemsIntegration","classes/Bundler/RubygemsIntegration.html#M000238","(args)","",2],["with_clean_env","Bundler","classes/Bundler.html#M000621","()","",2],["with_padding","Thor::Shell","classes/Thor/Shell.html#M000548","()","Yields the given block with padding. ",2],["without","Bundler::Settings","classes/Bundler/Settings.html#M000275","()","",2],["without=","Bundler::Settings","classes/Bundler/Settings.html#M000274","(array)","",2],["yes?","Thor::Shell::Basic","classes/Thor/Shell/Basic.html#M000510","(statement, color=nil)","Make a question the to user and returns true if the user replies \"y\" or \"yes\". ",2],["CHANGELOG.md","files/CHANGELOG_md.html","files/CHANGELOG_md.html","","## 1.0.22 (February 8, 2012)  Bugfixes:    - Tweaks to cache on Rubygems 1.3   - Fix for `gemspec` with",3],["LICENSE","files/LICENSE.html","files/LICENSE.html","","Portions copyright (c) 2010 Andre Arko Portions copyright (c) 2009 Engine Yard  MIT License  Permission",3],["README.md","files/README_md.html","files/README_md.html","","# Bundler: a gem to bundle gems  Bundler is a tool that manages gem dependencies for your ruby application.",3],["bundler.rb","files/lib/bundler_rb.html","files/lib/bundler_rb.html","","",3],["capistrano.rb","files/lib/bundler/capistrano_rb.html","files/lib/bundler/capistrano_rb.html","","Capistrano task for Bundler. Just add \"require 'bundler/capistrano'\" in your Capistrano deploy.rb, and",3],["cli.rb","files/lib/bundler/cli_rb.html","files/lib/bundler/cli_rb.html","","",3],["definition.rb","files/lib/bundler/definition_rb.html","files/lib/bundler/definition_rb.html","","",3],["dependency.rb","files/lib/bundler/dependency_rb.html","files/lib/bundler/dependency_rb.html","","",3],["deployment.rb","files/lib/bundler/deployment_rb.html","files/lib/bundler/deployment_rb.html","","",3],["dsl.rb","files/lib/bundler/dsl_rb.html","files/lib/bundler/dsl_rb.html","","",3],["environment.rb","files/lib/bundler/environment_rb.html","files/lib/bundler/environment_rb.html","","",3],["gem_helper.rb","files/lib/bundler/gem_helper_rb.html","files/lib/bundler/gem_helper_rb.html","","",3],["gem_installer.rb","files/lib/bundler/gem_installer_rb.html","files/lib/bundler/gem_installer_rb.html","","",3],["gem_tasks.rb","files/lib/bundler/gem_tasks_rb.html","files/lib/bundler/gem_tasks_rb.html","","",3],["graph.rb","files/lib/bundler/graph_rb.html","files/lib/bundler/graph_rb.html","","",3],["index.rb","files/lib/bundler/index_rb.html","files/lib/bundler/index_rb.html","","",3],["installer.rb","files/lib/bundler/installer_rb.html","files/lib/bundler/installer_rb.html","","",3],["lazy_specification.rb","files/lib/bundler/lazy_specification_rb.html","files/lib/bundler/lazy_specification_rb.html","","",3],["lockfile_parser.rb","files/lib/bundler/lockfile_parser_rb.html","files/lib/bundler/lockfile_parser_rb.html","","",3],["bundle","files/lib/bundler/man/bundle.html","files/lib/bundler/man/bundle.html","",".\\\" generated with Ronn/v0.7.3 .\\\" http://github.com/rtomayko/ronn/tree/0.7.3 . .TH \"BUNDLE\" \"1\" \"February",3],["bundle-config","files/lib/bundler/man/bundle-config.html","files/lib/bundler/man/bundle-config.html","",".\\\" generated with Ronn/v0.7.3 .\\\" http://github.com/rtomayko/ronn/tree/0.7.3 . .TH \"BUNDLE\\-CONFIG\"",3],["bundle-config.txt","files/lib/bundler/man/bundle-config_txt.html","files/lib/bundler/man/bundle-config_txt.html","","BUNDLE-CONFIG(1)\t\t\t\t\t      BUNDLE-CONFIG(1)    NAME        bundle-config - Set bundler configuration",3],["bundle-exec","files/lib/bundler/man/bundle-exec.html","files/lib/bundler/man/bundle-exec.html","",".\\\" generated with Ronn/v0.7.3 .\\\" http://github.com/rtomayko/ronn/tree/0.7.3 . .TH \"BUNDLE\\-EXEC\" \"1\"",3],["bundle-exec.txt","files/lib/bundler/man/bundle-exec_txt.html","files/lib/bundler/man/bundle-exec_txt.html","","BUNDLE-EXEC(1)\t\t\t\t\t\t\tBUNDLE-EXEC(1)    NAME        bundle-exec - Execute a command in the context of",3],["bundle-install","files/lib/bundler/man/bundle-install.html","files/lib/bundler/man/bundle-install.html","",".\\\" generated with Ronn/v0.7.3 .\\\" http://github.com/rtomayko/ronn/tree/0.7.3 . .TH \"BUNDLE\\-INSTALL\"",3],["bundle-install.txt","files/lib/bundler/man/bundle-install_txt.html","files/lib/bundler/man/bundle-install_txt.html","","BUNDLE-INSTALL(1)\t\t\t\t\t     BUNDLE-INSTALL(1)    NAME        bundle-install - Install the dependencies",3],["bundle-package","files/lib/bundler/man/bundle-package.html","files/lib/bundler/man/bundle-package.html","",".\\\" generated with Ronn/v0.7.3 .\\\" http://github.com/rtomayko/ronn/tree/0.7.3 . .TH \"BUNDLE\\-PACKAGE\"",3],["bundle-package.txt","files/lib/bundler/man/bundle-package_txt.html","files/lib/bundler/man/bundle-package_txt.html","","BUNDLE-PACKAGE(1)\t\t\t\t\t     BUNDLE-PACKAGE(1)    NAME        bundle-package - Package your needed .gem",3],["bundle-update","files/lib/bundler/man/bundle-update.html","files/lib/bundler/man/bundle-update.html","",".\\\" generated with Ronn/v0.7.3 .\\\" http://github.com/rtomayko/ronn/tree/0.7.3 . .TH \"BUNDLE\\-UPDATE\"",3],["bundle-update.txt","files/lib/bundler/man/bundle-update_txt.html","files/lib/bundler/man/bundle-update_txt.html","","BUNDLE-UPDATE(1)\t\t\t\t\t      BUNDLE-UPDATE(1)    NAME        bundle-update - Update your gems to the latest",3],["bundle.txt","files/lib/bundler/man/bundle_txt.html","files/lib/bundler/man/bundle_txt.html","","BUNDLE(1)\t\t\t\t\t\t\t     BUNDLE(1)    NAME        bundle - Ruby Dependency Management  SYNOPSIS        bundle",3],["gemfile.5","files/lib/bundler/man/gemfile_5.html","files/lib/bundler/man/gemfile_5.html","",".\\\" generated with Ronn/v0.7.3 .\\\" http://github.com/rtomayko/ronn/tree/0.7.3 . .TH \"GEMFILE\" \"5\" \"February",3],["gemfile.5.txt","files/lib/bundler/man/gemfile_5_txt.html","files/lib/bundler/man/gemfile_5_txt.html","","GEMFILE(5)\t\t\t\t\t\t\t    GEMFILE(5)    NAME        Gemfile - A format for describing gem dependencies for",3],["remote_specification.rb","files/lib/bundler/remote_specification_rb.html","files/lib/bundler/remote_specification_rb.html","","",3],["resolver.rb","files/lib/bundler/resolver_rb.html","files/lib/bundler/resolver_rb.html","","",3],["rubygems_ext.rb","files/lib/bundler/rubygems_ext_rb.html","files/lib/bundler/rubygems_ext_rb.html","","",3],["rubygems_integration.rb","files/lib/bundler/rubygems_integration_rb.html","files/lib/bundler/rubygems_integration_rb.html","","",3],["runtime.rb","files/lib/bundler/runtime_rb.html","files/lib/bundler/runtime_rb.html","","",3],["settings.rb","files/lib/bundler/settings_rb.html","files/lib/bundler/settings_rb.html","","",3],["setup.rb","files/lib/bundler/setup_rb.html","files/lib/bundler/setup_rb.html","","",3],["shared_helpers.rb","files/lib/bundler/shared_helpers_rb.html","files/lib/bundler/shared_helpers_rb.html","","",3],["source.rb","files/lib/bundler/source_rb.html","files/lib/bundler/source_rb.html","","",3],["spec_set.rb","files/lib/bundler/spec_set_rb.html","files/lib/bundler/spec_set_rb.html","","",3],["Executable","files/lib/bundler/templates/Executable.html","files/lib/bundler/templates/Executable.html","","#!/usr/bin/env <%= RbConfig::CONFIG['ruby_install_name'] %> # # This file was generated by Bundler. #",3],["Gemfile","files/lib/bundler/templates/Gemfile.html","files/lib/bundler/templates/Gemfile.html","","# A sample Gemfile source \"http://rubygems.org\"  # gem \"rails\" ",3],["Gemfile.tt","files/lib/bundler/templates/newgem/Gemfile_tt.html","files/lib/bundler/templates/newgem/Gemfile_tt.html","","source \"http://rubygems.org\"  # Specify your gem's dependencies in <%=config[:name]%>.gemspec gemspec",3],["Rakefile.tt","files/lib/bundler/templates/newgem/Rakefile_tt.html","files/lib/bundler/templates/newgem/Rakefile_tt.html","","require \"bundler/gem_tasks\" ",3],["newgem.tt","files/lib/bundler/templates/newgem/bin/newgem_tt.html","files/lib/bundler/templates/newgem/bin/newgem_tt.html","","#!/usr/bin/env ruby  require \"<%= config[:name] %>\" ",3],["gitignore.tt","files/lib/bundler/templates/newgem/gitignore_tt.html","files/lib/bundler/templates/newgem/gitignore_tt.html","","*.gem .bundle Gemfile.lock pkg/* ",3],["newgem.rb.tt","files/lib/bundler/templates/newgem/lib/newgem_rb_tt.html","files/lib/bundler/templates/newgem/lib/newgem_rb_tt.html","","require \"<%=config[:name]%>/version\"  <%- config[:constant_array].each_with_index do |c,i| -%> <%= '",3],["version.rb.tt","files/lib/bundler/templates/newgem/lib/newgem/version_rb_tt.html","files/lib/bundler/templates/newgem/lib/newgem/version_rb_tt.html","","<%- config[:constant_array].each_with_index do |c,i| -%> <%= '  '*i %>module <%= c %> <%- end -%> <%=",3],["newgem.gemspec.tt","files/lib/bundler/templates/newgem/newgem_gemspec_tt.html","files/lib/bundler/templates/newgem/newgem_gemspec_tt.html","","# -*- encoding: utf-8 -*- $:.push File.expand_path(\"../lib\", __FILE__) require \"<%=config[:name]%>/version\"",3],["ui.rb","files/lib/bundler/ui_rb.html","files/lib/bundler/ui_rb.html","","",3],["thor.rb","files/lib/bundler/vendor/thor_rb.html","files/lib/bundler/vendor/thor_rb.html","","",3],["actions.rb","files/lib/bundler/vendor/thor/actions_rb.html","files/lib/bundler/vendor/thor/actions_rb.html","","",3],["create_file.rb","files/lib/bundler/vendor/thor/actions/create_file_rb.html","files/lib/bundler/vendor/thor/actions/create_file_rb.html","","",3],["create_link.rb","files/lib/bundler/vendor/thor/actions/create_link_rb.html","files/lib/bundler/vendor/thor/actions/create_link_rb.html","","",3],["directory.rb","files/lib/bundler/vendor/thor/actions/directory_rb.html","files/lib/bundler/vendor/thor/actions/directory_rb.html","","",3],["empty_directory.rb","files/lib/bundler/vendor/thor/actions/empty_directory_rb.html","files/lib/bundler/vendor/thor/actions/empty_directory_rb.html","","",3],["file_manipulation.rb","files/lib/bundler/vendor/thor/actions/file_manipulation_rb.html","files/lib/bundler/vendor/thor/actions/file_manipulation_rb.html","","",3],["inject_into_file.rb","files/lib/bundler/vendor/thor/actions/inject_into_file_rb.html","files/lib/bundler/vendor/thor/actions/inject_into_file_rb.html","","",3],["base.rb","files/lib/bundler/vendor/thor/base_rb.html","files/lib/bundler/vendor/thor/base_rb.html","","",3],["file_binary_read.rb","files/lib/bundler/vendor/thor/core_ext/file_binary_read_rb.html","files/lib/bundler/vendor/thor/core_ext/file_binary_read_rb.html","","",3],["hash_with_indifferent_access.rb","files/lib/bundler/vendor/thor/core_ext/hash_with_indifferent_access_rb.html","files/lib/bundler/vendor/thor/core_ext/hash_with_indifferent_access_rb.html","","",3],["ordered_hash.rb","files/lib/bundler/vendor/thor/core_ext/ordered_hash_rb.html","files/lib/bundler/vendor/thor/core_ext/ordered_hash_rb.html","","",3],["error.rb","files/lib/bundler/vendor/thor/error_rb.html","files/lib/bundler/vendor/thor/error_rb.html","","",3],["group.rb","files/lib/bundler/vendor/thor/group_rb.html","files/lib/bundler/vendor/thor/group_rb.html","","",3],["invocation.rb","files/lib/bundler/vendor/thor/invocation_rb.html","files/lib/bundler/vendor/thor/invocation_rb.html","","",3],["parser.rb","files/lib/bundler/vendor/thor/parser_rb.html","files/lib/bundler/vendor/thor/parser_rb.html","","",3],["argument.rb","files/lib/bundler/vendor/thor/parser/argument_rb.html","files/lib/bundler/vendor/thor/parser/argument_rb.html","","",3],["arguments.rb","files/lib/bundler/vendor/thor/parser/arguments_rb.html","files/lib/bundler/vendor/thor/parser/arguments_rb.html","","",3],["option.rb","files/lib/bundler/vendor/thor/parser/option_rb.html","files/lib/bundler/vendor/thor/parser/option_rb.html","","",3],["options.rb","files/lib/bundler/vendor/thor/parser/options_rb.html","files/lib/bundler/vendor/thor/parser/options_rb.html","","",3],["rake_compat.rb","files/lib/bundler/vendor/thor/rake_compat_rb.html","files/lib/bundler/vendor/thor/rake_compat_rb.html","","",3],["runner.rb","files/lib/bundler/vendor/thor/runner_rb.html","files/lib/bundler/vendor/thor/runner_rb.html","","",3],["shell.rb","files/lib/bundler/vendor/thor/shell_rb.html","files/lib/bundler/vendor/thor/shell_rb.html","","",3],["basic.rb","files/lib/bundler/vendor/thor/shell/basic_rb.html","files/lib/bundler/vendor/thor/shell/basic_rb.html","","",3],["color.rb","files/lib/bundler/vendor/thor/shell/color_rb.html","files/lib/bundler/vendor/thor/shell/color_rb.html","","",3],["html.rb","files/lib/bundler/vendor/thor/shell/html_rb.html","files/lib/bundler/vendor/thor/shell/html_rb.html","","",3],["task.rb","files/lib/bundler/vendor/thor/task_rb.html","files/lib/bundler/vendor/thor/task_rb.html","","",3],["util.rb","files/lib/bundler/vendor/thor/util_rb.html","files/lib/bundler/vendor/thor/util_rb.html","","",3],["version.rb","files/lib/bundler/vendor/thor/version_rb.html","files/lib/bundler/vendor/thor/version_rb.html","","",3],["vendored_thor.rb","files/lib/bundler/vendored_thor_rb.html","files/lib/bundler/vendored_thor_rb.html","","",3],["version.rb","files/lib/bundler/version_rb.html","files/lib/bundler/version_rb.html","","",3],["vlad.rb","files/lib/bundler/vlad_rb.html","files/lib/bundler/vlad_rb.html","","Vlad task for Bundler. Just add \"require 'bundler/vlad'\" in your Vlad deploy.rb, and include the vlad:bundle:install",3]],"searchIndex":["bundler","bundlererror","cli","definition","depproxy","dependency","deployment","deprecatederror","dsl","dslerror","environment","gemhelper","gemhelpers","geminstaller","gemnotfound","gemfileerror","gemfilenotfound","gemspecerror","giterror","graph","graphnode","index","installerror","installer","invalidoption","invalidspecset","lazyspecification","lockfileparser","matchplatform","patherror","productionerror","remotespecification","resolver","specgroup","rubygemsintegration","almostmodern","ancient","deprecate","legacy","modern","transitional","runtime","settings","sharedhelpers","source","git","path","installer","rubygems","specset","ui","rgproxy","shell","versionconflict","gem","dependency","platform","requirement","specification","thor","actions","classmethods","base","classmethods","dynamictask","error","group","hiddentask","invocation","classmethods","invocationerror","malformattedargumenterror","rakecompat","requiredargumentmissingerror","shell","basic","color","html","task","undefinedtaskerror","unknownargumenterror","util","<<()","==()","==()","==()","==()","==()","[]()","[]()","[]()","[]=()","[]=()","__dependencies()","__materialize__()","__swap__()","_deprecated_options()","_normalize_hash()","_normalize_options()","_remote_specification()","activate_platform()","add_bundler_dependencies()","add_file()","add_link()","add_remote()","add_runtime_options!()","all()","all_specs()","all_specs()","all_tasks()","allow_git_ops?()","allow_sudo?()","app_cache()","app_config_path()","append_file()","append_to_file()","apply()","argument()","arguments()","ask()","ask()","backport_segment_generation()","banner()","banner()","base_name()","basename()","be_quiet!()","bin_path()","bin_path()","build()","build()","build_gem()","built_gem_path()","bundle_path()","cache()","cache()","cache()","cache()","cache()","cache()","cache_path()","cache_path()","cached!()","cached!()","cached?()","cached_gem()","cached_specs()","camel_case()","capture()","check()","check_executable_overwrite()","check_unknown_options!()","check_unknown_options!()","checkout()","chmod()","class_option()","class_options()","clean?()","clean_load_path()","clean_req()","clear_paths()","concat()","config()","configuration()","configure()","configure_gem_home_and_path()","confirm()","confirm()","console()","converge_dependencies()","converge_locked_specs()","converge_sources()","copy_file()","create_file()","create_link()","current_dependencies()","current_dependencies()","current_env?()","current_platform?()","debug()","debug()","debug()","debug!()","default_gemfile()","default_gemfile()","default_lockfile()","default_lockfile()","default_task()","define_task()","definition()","delete()","dependencies()","dependencies_for()","dependencies_to_gemfile()","deprecate()","desc()","desc()","destination_root()","destination_root=()","directory()","download_gem()","download_gem_from_uri()","dynamic_width()","dynamic_width_stty()","dynamic_width_tput()","each()","empty?()","empty_directory()","encode_with()","ensure_equivalent_gemfile_and_lockfile()","env()","environment()","eql?()","eql?()","eql?()","eql?()","error()","error()","error()","error_message()","evaluate()","exec()","exit_on_failure?()","expand_dependencies()","expanded_dependencies()","fetch()","fetch_all_remote_specs()","fetch_platform()","fetch_specs()","fetch_specs()","file_collision()","find_by_namespace()","find_class_and_task_by_namespace()","find_gemfile()","find_in_source_paths()","find_name()","find_name()","find_subcommand()","find_subcommand_possibilities()","fixup_dependency_types!()","for()","for?()","formatted_usage()","from_lock()","from_lock()","from_lock()","from_superclass()","full_gem_path()","full_name()","full_name()","gem()","gem()","gem_bindir()","gem_dir()","gem_dir()","gem_message()","gem_path()","gem_platforms()","gems_size()","gemspec()","generate_bin()","generate_bin()","generate_bundler_executable_stubs()","generic()","get()","git()","git()","git_push()","git_version()","global_config_file()","globs_for()","group()","group()","groups()","groups()","groups()","gsub_file()","guard_already_tagged()","guard_clean()","handle_argument_error?()","handle_no_method_error?()","has_revision_cached?()","hash()","hash()","hash()","hash()","have_groff?()","help()","help()","help()","help()","hidden?()","hidden?()","home()","in_bundle?()","in_cache()","in_locked_deps?()","in_root()","included()","index()","index()","inflate()","info()","info()","inherited()","init()","initialize_copy()","initialize_copy()","inject_into_class()","inject_into_file()","insert_into_file()","inside()","inspect()","install()","install()","install()","install()","install()","install()","install_gem()","install_gem_from_spec()","install_path()","install_tasks()","installed_specs()","invoke()","invoke()","invoke_from_option()","invoke_with_padding()","jruby?()","key_for()","link_file()","load()","load_gemspec()","load_paths()","load_spec_files()","load_spec_files()","load_thorfile()","loaded_from()","loaded_specs()","local_config_file()","local_specs()","locate_gem()","locations()","lock()","lock()","lock()","long_desc()","lookup()","maglev?()","map()","mark_loaded()","marshal_spec_dir()","match_platform()","matches_spec?()","materialize()","merge()","merge_remotes()","method_added()","method_missing()","method_missing()","method_missing()","method_option()","method_options()","mingw?()","mingw_18?()","mingw_19?()","missing_specs()","mkdir_p()","mri?()","mri_18?()","mri_19?()","mswin?()","mute()","mute?()","name()","name()","name()","name()","name()","namespace()","namespace_from_thor_class()","namespaces_in_content()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new_platform?()","new_specs()","no?()","no_sources?()","no_tasks()","nodes()","nondevelopment_dependencies()","none?()","normalize_uri()","not_debugging?()","open()","options()","package()","padding=()","parse_dependency()","parse_platform()","parse_source()","parse_spec()","path()","path()","path()","path()","perform_git_push()","platform()","platforms()","platforms()","populate()","prepend_file()","prepend_to_file()","preserve_paths()","preserve_paths()","pretty_dep()","pretty_values_for()","print_options()","print_table()","print_wrapped()","printable_tasks()","printable_tasks()","prune_cache()","public_task()","rake_classes()","rbx?()","read_binary()","read_file()","register()","relative_path()","relative_to_original_destination_root()","release_gem()","remote!()","remote!()","remote_specs()","remove_argument()","remove_class_option()","remove_dir()","remove_file()","remove_invocation()","remove_task()","removed_specs()","replace_bin_path()","replace_entrypoints()","replace_gem()","replace_refresh()","requested_dependencies()","requested_specs()","requested_specs()","require()","require()","required_by()","required_by()","required_options()","requirement()","requires_sudo?()","resolve()","resolve()","resolve()","resolve_remotely!()","resolve_requirement()","resolve_with_cache!()","respond_to?()","reverse_rubygems_kernel_mixin()","revision()","rg_full_gem_path()","rg_loaded_from()","root()","ruby?()","ruby_18?()","ruby_19?()","ruby_command()","ruby_engine()","ruby_scope()","rubygem_push()","rubygems_index()","rubygems_source()","run()","run()","run()","run()","run_ruby_script()","same_version?()","same_version?()","satisfies?()","satisfies_locked_spec?()","say()","say()","say_status()","search()","search()","search_by_dependency()","search_by_spec()","search_for_all_platforms()","set_color()","set_color()","set_global()","set_key()","settings()","setup()","setup()","setup_environment()","sh()","sh_with_code()","shell()","shell()","shell=()","shell=()","shortref_for_display()","shortref_for_path()","should_include?()","show()","skip_during()","snake_case()","sort!()","sorted()","sorted_sources()","source()","source()","source_paths()","source_paths()","source_paths_for_search()","source_root()","source_root()","sources()","sources()","sources=()","spec_from_gem()","spec_satisfies_dependency?()","specs()","specs()","specs()","specs()","specs()","specs_for()","specs_path()","start()","start()","status_code()","stderr()","stdin()","stdout()","stub_rubygems()","stub_rubygems()","stub_rubygems()","stub_source_index137()","stub_source_index170()","subclass_files()","subclasses()","subcommand()","subcommand_help()","subcommands()","successify()","sudo()","sudo()","tag_version()","task_help()","tasks()","template()","terminal_width()","thor()","thor_classes_in()","thor_root()","thor_root_glob()","tmp()","to_a()","to_ary()","to_definition()","to_gemfile()","to_hash()","to_lock()","to_lock()","to_lock()","to_lock()","to_lock()","to_lock()","to_lock()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_specs()","to_yaml_properties()","truncate()","tsort_each_child()","tsort_each_node()","type()","ui()","ui=()","unix?()","unlock()","unlock!()","update()","update()","upgrade_lockfile()","uri_escaped()","uri_hash()","use()","user_bundle_path()","user_home()","user_home()","valid_for?()","version()","version()","version()","version_conflict()","version_tag()","viz()","viz()","warn()","warn()","with_build_args()","with_clean_env()","with_padding()","without()","without=()","yes?()","changelog.md","license","readme.md","bundler.rb","capistrano.rb","cli.rb","definition.rb","dependency.rb","deployment.rb","dsl.rb","environment.rb","gem_helper.rb","gem_installer.rb","gem_tasks.rb","graph.rb","index.rb","installer.rb","lazy_specification.rb","lockfile_parser.rb","bundle","bundle-config","bundle-config.txt","bundle-exec","bundle-exec.txt","bundle-install","bundle-install.txt","bundle-package","bundle-package.txt","bundle-update","bundle-update.txt","bundle.txt","gemfile.5","gemfile.5.txt","remote_specification.rb","resolver.rb","rubygems_ext.rb","rubygems_integration.rb","runtime.rb","settings.rb","setup.rb","shared_helpers.rb","source.rb","spec_set.rb","executable","gemfile","gemfile.tt","rakefile.tt","newgem.tt","gitignore.tt","newgem.rb.tt","version.rb.tt","newgem.gemspec.tt","ui.rb","thor.rb","actions.rb","create_file.rb","create_link.rb","directory.rb","empty_directory.rb","file_manipulation.rb","inject_into_file.rb","base.rb","file_binary_read.rb","hash_with_indifferent_access.rb","ordered_hash.rb","error.rb","group.rb","invocation.rb","parser.rb","argument.rb","arguments.rb","option.rb","options.rb","rake_compat.rb","runner.rb","shell.rb","basic.rb","color.rb","html.rb","task.rb","util.rb","version.rb","vendored_thor.rb","version.rb","vlad.rb"]}}