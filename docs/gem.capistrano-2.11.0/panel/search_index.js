var search_data = {"index":{"longSearchIndex":["lib/capistrano/version.rb","capistrano","capistrano::cli","capistrano::cli::execute","capistrano::cli","capistrano::cli","capistrano::cli::options","capistrano::cli","capistrano::cli::ui","capistrano","capistrano","capistrano::command","capistrano::command::tree","capistrano::command::tree","capistrano::command::tree::conditionbranch","capistrano","capistrano::configuration","capistrano::configuration::actions","capistrano::configuration::actions","capistrano::configuration::actions","capistrano::configuration::actions::invocation","capistrano::configuration","capistrano::configuration","capistrano::configuration","capistrano::configuration","capistrano::configuration","capistrano::configuration::loading","capistrano::configuration","capistrano::configuration::namespaces","capistrano::configuration","capistrano::configuration","capistrano::configuration","capistrano","capistrano::deploy","capistrano::deploy","capistrano::deploy","capistrano::deploy","capistrano::deploy::scm","capistrano::deploy::scm::accurev","capistrano::deploy::scm","capistrano::deploy::scm::base","capistrano::deploy::scm","capistrano::deploy::scm","capistrano::deploy::scm","capistrano::deploy::scm","capistrano::deploy::scm","capistrano::deploy::scm","capistrano::deploy::scm","capistrano::deploy::scm","capistrano::deploy","capistrano::deploy::strategy","capistrano::deploy::strategy","capistrano::deploy::strategy","capistrano::deploy::strategy","capistrano::deploy::strategy","capistrano::deploy::strategy","capistrano","capistrano","capistrano::processable","capistrano","capistrano","capistrano::role","capistrano","capistrano","capistrano","capistrano","capistrano","capistrano","capistrano::transfer","capistrano","lib/capistrano/recipes/deploy.rb","lib/capistrano/ext/string.rb","capistrano::role","capistrano::serverdefinition","capistrano::deploy::scm::accurev::internalrevision","capistrano::serverdefinition","capistrano::configuration::variables","capistrano::transfer::sftptransferwrapper","capistrano::configuration::variables","capistrano::transfer::sftptransferwrapper","object","capistrano::transfer::sftptransferwrapper","capistrano::transfer","capistrano::transfer::sftptransferwrapper","capistrano::configuration::actions::invocation","capistrano::configuration::callbacks","capistrano::configuration::aliastask","capistrano::configuration::namespaces","capistrano::callback","capistrano::taskcallback","capistrano::deploy::scm::base","capistrano::deploy::scm::perforce","capistrano::deploy::scm::subversion","capistrano::configuration::callbacks","capistrano::command::tree","capistrano::taskdefinition","capistrano::deploy::strategy::copy","capistrano::configuration::servers","capistrano::proccallback","capistrano::taskcallback","capistrano::configuration::actions::inspect","capistrano::deploy::scm::accurev","capistrano::deploy::dependencies","capistrano::deploy::strategy::base","capistrano::deploy::strategy::copy","capistrano::deploy::strategy::remote","capistrano::deploy::strategy::remotecache","capistrano::deploy::scm::base","capistrano::deploy::scm::bzr","capistrano::deploy::scm::cvs","capistrano::deploy::scm::darcs","capistrano::deploy::scm::git","capistrano::deploy::scm::mercurial","capistrano::deploy::scm::none","capistrano::deploy::scm::perforce","capistrano::deploy::scm::subversion","capistrano::role","capistrano::deploy::scm::mercurial","capistrano::cli::options","capistrano::cli::options","capistrano::deploy::localdependency","capistrano::deploy::remotedependency","capistrano::deploy::scm::base","capistrano::deploy::scm::git","capistrano::deploy::strategy::checkout","capistrano::deploy::strategy::copy","capistrano::deploy::strategy::export","capistrano::deploy::strategy::remote","string","capistrano::deploy::strategy::copy","capistrano::deploy::strategy::copy","capistrano::ssh","capistrano::shell","capistrano::configuration::connections","capistrano::configuration::connections","capistrano::ssh","capistrano::configuration::actions::invocation","capistrano::configuration::actions::invocation","capistrano::taskdefinition","capistrano::deploy::strategy::copy","capistrano::deploy::strategy::copy","capistrano::deploy::strategy::copy","capistrano::deploy::strategy::remotecache","capistrano::deploy::strategy::remotecache","capistrano::deploy::strategy::copy","capistrano::configuration::loading::classmethods","capistrano::configuration::loading::classmethods","capistrano::configuration::execution","capistrano::deploy::scm::cvs","capistrano::deploy::scm::cvs","capistrano::deploy::scm::cvs","capistrano::deploy::remotedependency","capistrano::cli::ui::classmethods","capistrano::deploy::strategy::copy","capistrano::deploy::scm::base","capistrano::deploy::scm::base","capistrano::configuration::namespaces","capistrano::serverdefinition","capistrano::configuration::namespaces","object","capistrano::deploy::strategy::base","capistrano::deploy::strategy::copy","capistrano::deploy::strategy::remote","capistrano::deploy::strategy::remotecache","capistrano::deploy::scm::accurev","capistrano::configuration::namespaces","capistrano::taskdefinition","capistrano::deploy::strategy::copy","capistrano::deploy::scm::accurev","capistrano::deploy::scm::base","capistrano::deploy::scm::bzr","capistrano::deploy::scm::cvs","capistrano::deploy::scm::darcs","capistrano::deploy::scm::git","capistrano::deploy::scm::mercurial","capistrano::deploy::scm::perforce","capistrano::deploy::scm::subversion","capistrano::deploy::remotedependency","capistrano::deploy::strategy::copy","capistrano::configuration::actions::filetransfer","capistrano::role","capistrano::command::tree","capistrano::deploy::dependencies","capistrano::role","capistrano::command::tree","capistrano::role","capistrano::processable","capistrano::command","capistrano::serverdefinition","capistrano::configuration::connections","capistrano::configuration::connections","capistrano::shell","capistrano::shell","capistrano::shell","capistrano::cli::execute::classmethods","capistrano::cli::execute","capistrano::configuration::connections","capistrano::cli::execute","capistrano::cli::help","capistrano::configuration::execution","capistrano::configuration::variables","capistrano::deploy::scm::accurev","capistrano::deploy::scm::bzr","capistrano::deploy::scm::cvs","capistrano::deploy::scm::darcs","capistrano::deploy::scm::git","capistrano::deploy::scm::mercurial","capistrano::deploy::scm::none","capistrano::deploy::scm::perforce","capistrano::deploy::scm::subversion","capistrano::configuration::connections","capistrano::configuration::variables","capistrano::deploy::remotedependency","capistrano::deploy::strategy::copy","capistrano::configuration::servers","capistrano::configuration::execution","capistrano::configuration::loading","capistrano::deploy::localdependency","capistrano::configuration::servers","capistrano::configuration::servers","capistrano::configuration::namespaces","capistrano::configuration::namespaces","capistrano::taskdefinition","capistrano::deploy::remotedependency","capistrano::configuration::actions::filetransfer","capistrano::deploy::scm::base","capistrano::deploy::scm::cvs","capistrano::deploy::scm::git","capistrano::deploy::scm::mercurial","capistrano::deploy::scm::perforce","capistrano::deploy::scm::subversion","capistrano::transfer","capistrano::configuration::connections","capistrano::serverdefinition","capistrano::deploy::scm::accurev","capistrano::deploy::scm::base","capistrano::deploy::scm::bzr","capistrano::deploy::scm::cvs","capistrano::deploy::scm::darcs","capistrano::deploy::scm::git","capistrano::deploy::scm::mercurial","capistrano::deploy::scm::none","capistrano::deploy::scm::perforce","capistrano::deploy::scm::subversion","capistrano::shell","capistrano::command::tree::conditionbranch::evaluator","capistrano::role","capistrano::cli::options","capistrano::configuration::loading::classmethods","capistrano::configuration::loading::classmethods","capistrano::configuration::actions::invocation","capistrano::configuration::execution","capistrano::command::tree::branch","capistrano::configuration::loading","capistrano::configuration::loading","capistrano::deploy::dependencies","capistrano::deploy::scm::base","capistrano::deploy::scm::base","capistrano::deploy::scm::accurev","capistrano::deploy::scm::base","capistrano::deploy::scm::bzr","capistrano::deploy::scm::cvs","capistrano::deploy::scm::darcs","capistrano::deploy::scm::git","capistrano::deploy::scm::mercurial","capistrano::deploy::scm::perforce","capistrano::deploy::scm::subversion","capistrano::command","capistrano::deploy::scm::base","capistrano::deploy::strategy::base","capistrano::deploy::strategy::remote","capistrano::command::tree::branch","capistrano::command::tree::conditionbranch","capistrano::deploy::remotedependency","capistrano::deploy::remotedependency","capistrano::command::tree::conditionbranch::evaluator","capistrano::configuration::namespaces::namespace","capistrano::deploy::scm::base::localproxy","capistrano::deploy::strategy::base","capistrano::taskdefinition","capistrano::configuration::namespaces","capistrano::cli","capistrano::callback","capistrano::command","capistrano::command::tree","capistrano::command::tree::branch","capistrano::command::tree::conditionbranch","capistrano::command::tree::conditionbranch::evaluator","capistrano::configuration::namespaces::namespace","capistrano::deploy::dependencies","capistrano::deploy::localdependency","capistrano::deploy::remotedependency","capistrano::deploy::scm","capistrano::deploy::scm::accurev::internalrevision","capistrano::deploy::scm::base","capistrano::deploy::scm::base::localproxy","capistrano::deploy::strategy","capistrano::deploy::strategy::base","capistrano::role","capistrano::role::dynamicserverlist","capistrano::serverdefinition","capistrano::shell","capistrano::taskcallback","capistrano::taskdefinition","capistrano::transfer","capistrano::transfer::sftptransferwrapper","capistrano::configuration::namespaces","capistrano::deploy::scm::base","capistrano::deploy::scm::bzr","capistrano::deploy::scm::perforce","capistrano::deploy::scm::subversion","capistrano::transfer","capistrano::configuration::callbacks","capistrano::processable::sessionassociation","capistrano::configuration::execution","capistrano::deploy::localdependency","capistrano::command","capistrano::transfer","capistrano::deploy::localdependency","capistrano::deploy::remotedependency","capistrano::deploy::scm::git","capistrano::deploy::scm::perforce","capistrano::deploy::scm::perforce","capistrano::deploy::scm::perforce","capistrano::deploy::scm::perforce","capistrano::deploy::scm::perforce","capistrano::deploy::scm::perforce","capistrano::deploy::scm::perforce","capistrano::configuration::actions::invocation","capistrano::cli::options::classmethods","capistrano::deploy::scm::accurev::internalrevision","capistrano::deploy::dependencies","capistrano::deploy::localdependency","capistrano::deploy::remotedependency","capistrano::cli::ui::classmethods","capistrano","capistrano::configuration::execution","capistrano::deploy::scm::cvs","capistrano::transfer","capistrano::transfer","capistrano::transfer","capistrano::command","capistrano::transfer","capistrano::command","capistrano::transfer","capistrano::shell","capistrano::processable","capistrano::configuration::variables","capistrano::deploy::scm::accurev::internalrevision","capistrano::deploy::scm::mercurial","capistrano::role","capistrano::configuration::execution","capistrano::configuration::actions::filetransfer","capistrano::deploy::scm::accurev","capistrano::deploy::scm::base","capistrano::deploy::scm::bzr","capistrano::deploy::scm::cvs","capistrano::deploy::scm::darcs","capistrano::deploy::scm::git","capistrano::deploy::scm::mercurial","capistrano::deploy::scm::none","capistrano::deploy::scm::perforce","capistrano::deploy::scm::subversion","capistrano::shell","capistrano::shell","capistrano::shell","capistrano::configuration::loading::classmethods","capistrano::configuration::loading","capistrano::deploy::dependencies","capistrano::deploy::strategy::copy","capistrano::deploy::strategy::copy","capistrano","capistrano::command","capistrano::deploy::scm::base","capistrano::deploy::strategy::remotecache","capistrano::command","capistrano::configuration::variables","capistrano::role::dynamicserverlist","capistrano::configuration::namespaces::namespace","capistrano::command::tree::conditionbranch::evaluator","capistrano::deploy::scm::perforce","capistrano::deploy::strategy::base","capistrano::deploy::scm::cvs","capistrano::deploy::scm::bzr","capistrano::configuration::namespaces::namespace","capistrano::configuration::roles","capistrano::configuration::servers","capistrano::configuration::roles","capistrano::configuration::execution","capistrano::configuration::execution","capistrano::configuration::execution","capistrano::configuration::actions::invocation","capistrano::shell","capistrano::shell","object","capistrano::configuration::connections","capistrano::transfer","capistrano::transfer","capistrano::deploy::scm::base","capistrano::deploy::scm::mercurial","capistrano::deploy::scm::subversion","capistrano::deploy::scm::accurev","capistrano::deploy::strategy::remote","capistrano::configuration::namespaces","capistrano::configuration::roles","capistrano::configuration::servers","capistrano::role","capistrano::transfer","capistrano","capistrano::configuration::connections","capistrano::configuration::variables","capistrano::shell","capistrano::shell","capistrano::deploy::scm::accurev","capistrano::command::tree::branch","capistrano::command::tree::branch","capistrano::command","capistrano::configuration::actions::inspect","capistrano::deploy::scm::accurev","capistrano::deploy::scm::accurev","capistrano::configuration::actions::invocation","capistrano::configuration::actions::invocation","capistrano::deploy::scm::base","capistrano::deploy::scm::bzr","capistrano::deploy::scm::cvs","capistrano::deploy::scm::darcs","capistrano::deploy::scm::git","capistrano::deploy::scm::mercurial","capistrano::deploy::scm::perforce","capistrano::deploy::scm::subversion","capistrano::deploy::strategy::base","capistrano::configuration::namespaces","capistrano::configuration::execution","capistrano::configuration::namespaces","capistrano::configuration::connections","capistrano::role","capistrano::role::dynamicserverlist","capistrano::deploy::scm::darcs","capistrano::command::tree::branch","capistrano::command::tree::conditionbranch","capistrano::deploy::scm::accurev::internalrevision","capistrano::serverdefinition","capistrano::version","capistrano::configuration::namespaces","capistrano::configuration::execution","capistrano::configuration::execution","capistrano::configuration::actions::filetransfer","capistrano::configuration::callbacks","capistrano::deploy::remotedependency","object","object","capistrano::cli::ui::classmethods","capistrano::configuration::variables","capistrano::deploy::scm::mercurial","capistrano::deploy::strategy::remotecache","capistrano::configuration::actions::filetransfer","capistrano::deploy::scm::base","capistrano::deploy::scm::cvs","capistrano::deploy::scm::darcs","capistrano::deploy::scm::git","capistrano::deploy::scm::mercurial","capistrano::deploy::scm::subversion","capistrano::command::tree","capistrano::deploy::localdependency","object","capistrano::role","capistrano::role","capistrano::deploy::remotedependency","files/changelog.html","files/readme_mdown.html","files/lib/capistrano_rb.html","files/lib/capistrano/callback_rb.html","files/lib/capistrano/cli_rb.html","files/lib/capistrano/cli/execute_rb.html","files/lib/capistrano/cli/help_rb.html","files/lib/capistrano/cli/help_txt.html","files/lib/capistrano/cli/options_rb.html","files/lib/capistrano/cli/ui_rb.html","files/lib/capistrano/command_rb.html","files/lib/capistrano/configuration_rb.html","files/lib/capistrano/configuration/actions/file_transfer_rb.html","files/lib/capistrano/configuration/actions/inspect_rb.html","files/lib/capistrano/configuration/actions/invocation_rb.html","files/lib/capistrano/configuration/alias_task_rb.html","files/lib/capistrano/configuration/callbacks_rb.html","files/lib/capistrano/configuration/connections_rb.html","files/lib/capistrano/configuration/execution_rb.html","files/lib/capistrano/configuration/loading_rb.html","files/lib/capistrano/configuration/namespaces_rb.html","files/lib/capistrano/configuration/roles_rb.html","files/lib/capistrano/configuration/servers_rb.html","files/lib/capistrano/configuration/variables_rb.html","files/lib/capistrano/errors_rb.html","files/lib/capistrano/ext/multistage_rb.html","files/lib/capistrano/ext/string_rb.html","files/lib/capistrano/extensions_rb.html","files/lib/capistrano/fix_rake_deprecated_dsl_rb.html","files/lib/capistrano/logger_rb.html","files/lib/capistrano/processable_rb.html","files/lib/capistrano/recipes/compat_rb.html","files/lib/capistrano/recipes/deploy_rb.html","files/lib/capistrano/recipes/deploy/assets_rb.html","files/lib/capistrano/recipes/deploy/dependencies_rb.html","files/lib/capistrano/recipes/deploy/local_dependency_rb.html","files/lib/capistrano/recipes/deploy/remote_dependency_rb.html","files/lib/capistrano/recipes/deploy/scm_rb.html","files/lib/capistrano/recipes/deploy/scm/accurev_rb.html","files/lib/capistrano/recipes/deploy/scm/base_rb.html","files/lib/capistrano/recipes/deploy/scm/bzr_rb.html","files/lib/capistrano/recipes/deploy/scm/cvs_rb.html","files/lib/capistrano/recipes/deploy/scm/darcs_rb.html","files/lib/capistrano/recipes/deploy/scm/git_rb.html","files/lib/capistrano/recipes/deploy/scm/mercurial_rb.html","files/lib/capistrano/recipes/deploy/scm/none_rb.html","files/lib/capistrano/recipes/deploy/scm/perforce_rb.html","files/lib/capistrano/recipes/deploy/scm/subversion_rb.html","files/lib/capistrano/recipes/deploy/strategy_rb.html","files/lib/capistrano/recipes/deploy/strategy/base_rb.html","files/lib/capistrano/recipes/deploy/strategy/checkout_rb.html","files/lib/capistrano/recipes/deploy/strategy/copy_rb.html","files/lib/capistrano/recipes/deploy/strategy/export_rb.html","files/lib/capistrano/recipes/deploy/strategy/remote_rb.html","files/lib/capistrano/recipes/deploy/strategy/remote_cache_rb.html","files/lib/capistrano/recipes/deploy/templates/maintenance_rhtml.html","files/lib/capistrano/recipes/standard_rb.html","files/lib/capistrano/recipes/templates/maintenance_rhtml.html","files/lib/capistrano/role_rb.html","files/lib/capistrano/server_definition_rb.html","files/lib/capistrano/shell_rb.html","files/lib/capistrano/ssh_rb.html","files/lib/capistrano/task_definition_rb.html","files/lib/capistrano/transfer_rb.html","files/lib/capistrano/version_rb.html"],"info":[["Capistrano","lib/capistrano/callback.rb","classes/Capistrano.html"," < ","Notes: no global verbose flag for scm_verbose sync, checkout and export are just sync in p4 ",1],["CLI","Capistrano","classes/Capistrano/CLI.html"," < Object","The CLI class encapsulates the behavior of capistrano when it is invoked as a command-line utility. This",1],["Execute","Capistrano::CLI","classes/Capistrano/CLI/Execute.html"," < ","",1],["ClassMethods","Capistrano::CLI::Execute","classes/Capistrano/CLI/Execute/ClassMethods.html"," < ","",1],["Help","Capistrano::CLI","classes/Capistrano/CLI/Help.html"," < ","",1],["Options","Capistrano::CLI","classes/Capistrano/CLI/Options.html"," < ","",1],["ClassMethods","Capistrano::CLI::Options","classes/Capistrano/CLI/Options/ClassMethods.html"," < ","",1],["UI","Capistrano::CLI","classes/Capistrano/CLI/UI.html"," < ","",1],["ClassMethods","Capistrano::CLI::UI","classes/Capistrano/CLI/UI/ClassMethods.html"," < ","",1],["Callback","Capistrano","classes/Capistrano/Callback.html"," < Object","",1],["Command","Capistrano","classes/Capistrano/Command.html"," < Object","This class encapsulates a single command to be executed on a set of remote machines, in parallel. ",1],["Tree","Capistrano::Command","classes/Capistrano/Command/Tree.html"," < Object","",1],["Branch","Capistrano::Command::Tree","classes/Capistrano/Command/Tree/Branch.html"," < Object","",1],["ConditionBranch","Capistrano::Command::Tree","classes/Capistrano/Command/Tree/ConditionBranch.html"," < Branch","",1],["Evaluator","Capistrano::Command::Tree::ConditionBranch","classes/Capistrano/Command/Tree/ConditionBranch/Evaluator.html"," < Object","",1],["Configuration","Capistrano","classes/Capistrano/Configuration.html"," < Object","Represents a specific Capistrano configuration. A Configuration instance may be used to load multiple",1],["Actions","Capistrano::Configuration","classes/Capistrano/Configuration/Actions.html"," < ","",1],["FileTransfer","Capistrano::Configuration::Actions","classes/Capistrano/Configuration/Actions/FileTransfer.html"," < ","",1],["Inspect","Capistrano::Configuration::Actions","classes/Capistrano/Configuration/Actions/Inspect.html"," < ","",1],["Invocation","Capistrano::Configuration::Actions","classes/Capistrano/Configuration/Actions/Invocation.html"," < ","",1],["ClassMethods","Capistrano::Configuration::Actions::Invocation","classes/Capistrano/Configuration/Actions/Invocation/ClassMethods.html"," < ","",1],["AliasTask","Capistrano::Configuration","classes/Capistrano/Configuration/AliasTask.html"," < ","",1],["Callbacks","Capistrano::Configuration","classes/Capistrano/Configuration/Callbacks.html"," < ","",1],["Connections","Capistrano::Configuration","classes/Capistrano/Configuration/Connections.html"," < ","",1],["Execution","Capistrano::Configuration","classes/Capistrano/Configuration/Execution.html"," < ","",1],["Loading","Capistrano::Configuration","classes/Capistrano/Configuration/Loading.html"," < ","",1],["ClassMethods","Capistrano::Configuration::Loading","classes/Capistrano/Configuration/Loading/ClassMethods.html"," < ","",1],["Namespaces","Capistrano::Configuration","classes/Capistrano/Configuration/Namespaces.html"," < ","",1],["Namespace","Capistrano::Configuration::Namespaces","classes/Capistrano/Configuration/Namespaces/Namespace.html"," < Object","",1],["Roles","Capistrano::Configuration","classes/Capistrano/Configuration/Roles.html"," < ","",1],["Servers","Capistrano::Configuration","classes/Capistrano/Configuration/Servers.html"," < ","",1],["Variables","Capistrano::Configuration","classes/Capistrano/Configuration/Variables.html"," < ","",1],["Deploy","Capistrano","classes/Capistrano/Deploy.html"," < ","",1],["Dependencies","Capistrano::Deploy","classes/Capistrano/Deploy/Dependencies.html"," < Object","",1],["LocalDependency","Capistrano::Deploy","classes/Capistrano/Deploy/LocalDependency.html"," < Object","",1],["RemoteDependency","Capistrano::Deploy","classes/Capistrano/Deploy/RemoteDependency.html"," < Object","",1],["SCM","Capistrano::Deploy","classes/Capistrano/Deploy/SCM.html"," < ","",1],["Accurev","Capistrano::Deploy::SCM","classes/Capistrano/Deploy/SCM/Accurev.html"," < Base","Accurev bridge for use by Capistrano. This implementation does not implement all features of a Capistrano",1],["InternalRevision","Capistrano::Deploy::SCM::Accurev","classes/Capistrano/Deploy/SCM/Accurev/InternalRevision.html"," < Object","",1],["Base","Capistrano::Deploy::SCM","classes/Capistrano/Deploy/SCM/Base.html"," < Object","The ancestor class for all Capistrano SCM implementations. It provides minimal infrastructure for subclasses",1],["LocalProxy","Capistrano::Deploy::SCM::Base","classes/Capistrano/Deploy/SCM/Base/LocalProxy.html"," < Object","Wraps an SCM instance and forces all messages sent to it to be relayed to the underlying SCM instance,",1],["Bzr","Capistrano::Deploy::SCM","classes/Capistrano/Deploy/SCM/Bzr.html"," < Base","Implements the Capistrano SCM interface for the Bazaar-NG revision control system (http://bazaar-vcs.org/).",1],["Cvs","Capistrano::Deploy::SCM","classes/Capistrano/Deploy/SCM/Cvs.html"," < Base","Implements the Capistrano SCM interface for the CVS revision control system. ",1],["Darcs","Capistrano::Deploy::SCM","classes/Capistrano/Deploy/SCM/Darcs.html"," < Base","Implements the Capistrano SCM interface for the darcs revision control system (http://www.abridgegame.org/darcs/).",1],["Git","Capistrano::Deploy::SCM","classes/Capistrano/Deploy/SCM/Git.html"," < Base","An SCM module for using Git as your source control tool with Capistrano 2.0.  If you are using Capistrano",1],["Mercurial","Capistrano::Deploy::SCM","classes/Capistrano/Deploy/SCM/Mercurial.html"," < Base","Implements the Capistrano SCM interface for the Mercurial revision control system (http://www.selenic.com/mercurial/).",1],["None","Capistrano::Deploy::SCM","classes/Capistrano/Deploy/SCM/None.html"," < Base","A trivial SCM wrapper for representing the current working directory as a repository. Obviously, not",1],["Perforce","Capistrano::Deploy::SCM","classes/Capistrano/Deploy/SCM/Perforce.html"," < Base","Implements the Capistrano SCM interface for the Perforce revision control system (http://www.perforce.com).",1],["Subversion","Capistrano::Deploy::SCM","classes/Capistrano/Deploy/SCM/Subversion.html"," < Base","Implements the Capistrano SCM interface for the Subversion revision control system (http://subversion.tigris.org).",1],["Strategy","Capistrano::Deploy","classes/Capistrano/Deploy/Strategy.html"," < ","",1],["Base","Capistrano::Deploy::Strategy","classes/Capistrano/Deploy/Strategy/Base.html"," < Object","This class defines the abstract interface for all Capistrano deployment strategies. Subclasses must implement",1],["Checkout","Capistrano::Deploy::Strategy","classes/Capistrano/Deploy/Strategy/Checkout.html"," < Remote","Implements the deployment strategy which does an SCM checkout on each target host. This is the default",1],["Copy","Capistrano::Deploy::Strategy","classes/Capistrano/Deploy/Strategy/Copy.html"," < Base","This class implements the strategy for deployments which work by preparing the source code locally, compressing",1],["Export","Capistrano::Deploy::Strategy","classes/Capistrano/Deploy/Strategy/Export.html"," < Remote","Implements the deployment strategy which does an SCM export on each target host. ",1],["Remote","Capistrano::Deploy::Strategy","classes/Capistrano/Deploy/Strategy/Remote.html"," < Base","An abstract superclass, which forms the base for all deployment strategies which work by grabbing the",1],["RemoteCache","Capistrano::Deploy::Strategy","classes/Capistrano/Deploy/Strategy/RemoteCache.html"," < Remote","Implements the deployment strategy that keeps a cached checkout of the source code on each remote server.",1],["ProcCallback","Capistrano","classes/Capistrano/ProcCallback.html"," < Callback","",1],["Processable","Capistrano","classes/Capistrano/Processable.html"," < ","",1],["SessionAssociation","Capistrano::Processable","classes/Capistrano/Processable/SessionAssociation.html"," < ","",1],["RemoteError","Capistrano","classes/Capistrano/RemoteError.html"," < Error","",1],["Role","Capistrano","classes/Capistrano/Role.html"," < Object","",1],["DynamicServerList","Capistrano::Role","classes/Capistrano/Role/DynamicServerList.html"," < Object","This is the combination of a block, a hash of options, and a cached value. ",1],["SSH","Capistrano","classes/Capistrano/SSH.html"," < Object","A helper class for dealing with SSH connections. ",1],["ServerDefinition","Capistrano","classes/Capistrano/ServerDefinition.html"," < Object","",1],["Shell","Capistrano","classes/Capistrano/Shell.html"," < Object","The Capistrano::Shell class is the guts of the \"shell\" task. It implements an interactive REPL interface",1],["TaskCallback","Capistrano","classes/Capistrano/TaskCallback.html"," < Callback","",1],["TaskDefinition","Capistrano","classes/Capistrano/TaskDefinition.html"," < Object","",1],["Transfer","Capistrano","classes/Capistrano/Transfer.html"," < Object","",1],["SFTPTransferWrapper","Capistrano::Transfer","classes/Capistrano/Transfer/SFTPTransferWrapper.html"," < Object","",1],["Version","Capistrano","classes/Capistrano/Version.html"," < Object","",1],["Object","lib/capistrano/recipes/deploy.rb","classes/Object.html"," < Object","",1],["String","lib/capistrano/ext/string.rb","classes/String.html"," < Object","",1],["<<","Capistrano::Role","classes/Capistrano/Role.html#M000379","(*list)","Alias for #push",2],["<=>","Capistrano::ServerDefinition","classes/Capistrano/ServerDefinition.html#M000393","(server)","",2],["==","Capistrano::Deploy::SCM::Accurev::InternalRevision","classes/Capistrano/Deploy/SCM/Accurev/InternalRevision.html#M000220","(other)","",2],["==","Capistrano::ServerDefinition","classes/Capistrano/ServerDefinition.html#M000395","(server)","Alias for #eql?",2],["[]","Capistrano::Configuration::Variables","classes/Capistrano/Configuration/Variables.html#M000163","(variable)","",2],["[]","Capistrano::Transfer::SFTPTransferWrapper","classes/Capistrano/Transfer/SFTPTransferWrapper.html#M000434","(key)","",2],["[]=","Capistrano::Configuration::Variables","classes/Capistrano/Configuration/Variables.html#M000157","(variable, *args, &block)","Alias for #set",2],["[]=","Capistrano::Transfer::SFTPTransferWrapper","classes/Capistrano/Transfer/SFTPTransferWrapper.html#M000435","(key, value)","",2],["_cset","Object","classes/Object.html#M000370","(name, *args, &block)","",2],["abort!","Capistrano::Transfer::SFTPTransferWrapper","classes/Capistrano/Transfer/SFTPTransferWrapper.html#M000436","()","",2],["active?","Capistrano::Transfer","classes/Capistrano/Transfer.html#M000425","()","",2],["active?","Capistrano::Transfer::SFTPTransferWrapper","classes/Capistrano/Transfer/SFTPTransferWrapper.html#M000433","()","",2],["add_default_command_options","Capistrano::Configuration::Actions::Invocation","classes/Capistrano/Configuration/Actions/Invocation.html#M000088","(options)","Merges the various default command options into the options hash and returns the result. The default",2],["after","Capistrano::Configuration::Callbacks","classes/Capistrano/Configuration/Callbacks.html#M000083","(task_name, *args, &block)","Defines a callback to be invoked after the given task. You must specify the fully-qualified task name,",2],["alias_task","Capistrano::Configuration::AliasTask","classes/Capistrano/Configuration/AliasTask.html#M000073","(new_name, old_name)","Attempts to find the task at the given fully-qualified path, and alias it. If arguments don't have correct",2],["all_methods","Capistrano::Configuration::Namespaces","classes/Capistrano/Configuration/Namespaces.html#M000147","()","",2],["applies_to?","Capistrano::Callback","classes/Capistrano/Callback.html#M000001","(task)","",2],["applies_to?","Capistrano::TaskCallback","classes/Capistrano/TaskCallback.html#M000005","(task)","",2],["arguments","Capistrano::Deploy::SCM::Base","classes/Capistrano/Deploy/SCM/Base.html#M000250","(command = :all)","",2],["authentication","Capistrano::Deploy::SCM::Perforce","classes/Capistrano/Deploy/SCM/Perforce.html#M000318","()","Builds the set of authentication switches that perforce understands. ",2],["authentication","Capistrano::Deploy::SCM::Subversion","classes/Capistrano/Deploy/SCM/Subversion.html#M000329","()","If a username is configured for the SCM, return the command-line switches for that. Note that we don't",2],["before","Capistrano::Configuration::Callbacks","classes/Capistrano/Configuration/Callbacks.html#M000082","(task_name, *args, &block)","Defines a callback to be invoked before the given task. You must specify the fully-qualified task name,",2],["branches_for","Capistrano::Command::Tree","classes/Capistrano/Command/Tree.html#M000054","(server)","",2],["brief_description","Capistrano::TaskDefinition","classes/Capistrano/TaskDefinition.html#M000417","(max_length=nil)","Returns the first sentence of the full description. If +max_length+ is given, the result will be truncated",2],["build","Capistrano::Deploy::Strategy::Copy","classes/Capistrano/Deploy/Strategy/Copy.html#M000348","(directory)","",2],["build_list","Capistrano::Configuration::Servers","classes/Capistrano/Configuration/Servers.html#M000171","(list)","",2],["call","Capistrano::ProcCallback","classes/Capistrano/ProcCallback.html#M000002","()","",2],["call","Capistrano::TaskCallback","classes/Capistrano/TaskCallback.html#M000004","()","",2],["capture","Capistrano::Configuration::Actions::Inspect","classes/Capistrano/Configuration/Actions/Inspect.html#M000068","(command, options={})","Executes the given command on the first server targetted by the current task, collects it's stdout into",2],["change_or_create_stream","Capistrano::Deploy::SCM::Accurev","classes/Capistrano/Deploy/SCM/Accurev.html#M000213","(name, revision)","",2],["check","Capistrano::Deploy::Dependencies","classes/Capistrano/Deploy/Dependencies.html#M000184","()","",2],["check!","Capistrano::Deploy::Strategy::Base","classes/Capistrano/Deploy/Strategy/Base.html#M000335","()","Performs a check on the remote hosts to determine whether everything is setup such that a deploy could",2],["check!","Capistrano::Deploy::Strategy::Copy","classes/Capistrano/Deploy/Strategy/Copy.html#M000349","()","",2],["check!","Capistrano::Deploy::Strategy::Remote","classes/Capistrano/Deploy/Strategy/Remote.html#M000344","()","",2],["check!","Capistrano::Deploy::Strategy::RemoteCache","classes/Capistrano/Deploy/Strategy/RemoteCache.html#M000359","()","",2],["checkout","Capistrano::Deploy::SCM::Base","classes/Capistrano/Deploy/SCM/Base.html#M000233","(revision, destination)","Checkout a copy of the repository, at the given +revision+, to the given +destination+. The checkout",2],["checkout","Capistrano::Deploy::SCM::Bzr","classes/Capistrano/Deploy/SCM/Bzr.html#M000223","(revision, destination)","Returns the command that will check out the given revision to the given destination. ",2],["checkout","Capistrano::Deploy::SCM::Cvs","classes/Capistrano/Deploy/SCM/Cvs.html#M000252","(revision, destination)","Returns the command that will check out the given revision to the given destination. ",2],["checkout","Capistrano::Deploy::SCM::Darcs","classes/Capistrano/Deploy/SCM/Darcs.html#M000260","(revision, destination)","Returns the command that will check out the given revision to the given destination. The 'revision' parameter",2],["checkout","Capistrano::Deploy::SCM::Git","classes/Capistrano/Deploy/SCM/Git.html#M000284","(revision, destination)","Performs a clone on the remote machine, then checkout on the branch you want to deploy. ",2],["checkout","Capistrano::Deploy::SCM::Mercurial","classes/Capistrano/Deploy/SCM/Mercurial.html#M000275","(changeset, destination)","Clone the repository and update to the specified changeset. ",2],["checkout","Capistrano::Deploy::SCM::None","classes/Capistrano/Deploy/SCM/None.html#M000299","(revision, destination)","Simply does a copy from the :repository directory to the :destination directory. ",2],["checkout","Capistrano::Deploy::SCM::Perforce","classes/Capistrano/Deploy/SCM/Perforce.html#M000303","(revision, destination)","Returns the command that will sync the given revision to the given destination directory. The perforce",2],["checkout","Capistrano::Deploy::SCM::Subversion","classes/Capistrano/Deploy/SCM/Subversion.html#M000305","(revision, destination)","Returns the command that will check out the given revision to the given destination. ",2],["clear","Capistrano::Role","classes/Capistrano/Role.html#M000383","()","",2],["clone","Capistrano::Deploy::SCM::Mercurial","classes/Capistrano/Deploy/SCM/Mercurial.html#M000286","(destination)","Fine grained mercurial commands ",2],["coerce_variable","Capistrano::CLI::Options","classes/Capistrano/CLI/Options.html#M000037","(value)","",2],["coerce_variable_types!","Capistrano::CLI::Options","classes/Capistrano/CLI/Options.html#M000036","()","",2],["command","Capistrano::Deploy::LocalDependency","classes/Capistrano/Deploy/LocalDependency.html#M000181","(command)","",2],["command","Capistrano::Deploy::RemoteDependency","classes/Capistrano/Deploy/RemoteDependency.html#M000199","(command, options={})","",2],["command","Capistrano::Deploy::SCM::Base","classes/Capistrano/Deploy/SCM/Base.html#M000244","()","Returns the name of the command-line utility for this SCM. It first looks at the :scm_command variable,",2],["command","Capistrano::Deploy::SCM::Git","classes/Capistrano/Deploy/SCM/Git.html#M000295","()","",2],["command","Capistrano::Deploy::Strategy::Checkout","classes/Capistrano/Deploy/Strategy/Checkout.html#M000338","()","Returns the SCM's checkout command for the revision to deploy. ",2],["command","Capistrano::Deploy::Strategy::Copy","classes/Capistrano/Deploy/Strategy/Copy.html#M000354","()","Should return the command(s) necessary to obtain the source code locally. ",2],["command","Capistrano::Deploy::Strategy::Export","classes/Capistrano/Deploy/Strategy/Export.html#M000341","()","Returns the SCM's export command for the revision to deploy. ",2],["command","Capistrano::Deploy::Strategy::Remote","classes/Capistrano/Deploy/Strategy/Remote.html#M000346","()","An abstract method which must be overridden in subclasses, to return the actual SCM command(s) which",2],["compact","String","classes/String.html#M000173","()","",2],["compress","Capistrano::Deploy::Strategy::Copy","classes/Capistrano/Deploy/Strategy/Copy.html#M000366","(directory, file)","Returns the command necessary to compress the given directory into the given file. ",2],["compression","Capistrano::Deploy::Strategy::Copy","classes/Capistrano/Deploy/Strategy/Copy.html#M000363","()","The compression method to use, defaults to :gzip. ",2],["connect","Capistrano::SSH","classes/Capistrano/SSH.html#M000398","(server, options={})","An abstraction to make it possible to connect to the server via public key without prompting for the",2],["connect","Capistrano::Shell","classes/Capistrano/Shell.html#M000406","(task)","Determine which servers the given task requires a connection to, and establish connections to them if",2],["connect!","Capistrano::Configuration::Connections","classes/Capistrano/Configuration/Connections.html#M000109","(options={})","Used to force connections to be made to the current task's servers. Connections are normally made lazily",2],["connection_factory","Capistrano::Configuration::Connections","classes/Capistrano/Configuration/Connections.html#M000113","()","Returns the object responsible for establishing new SSH connections. The factory will respond to #connect_to,",2],["connection_strategy","Capistrano::SSH","classes/Capistrano/SSH.html#M000399","(server, options={}, &block)","Abstracts the logic for establishing an SSH connection (which includes testing for connection failures",2],["continue_execution","Capistrano::Configuration::Actions::Invocation","classes/Capistrano/Configuration/Actions/Invocation.html#M000090","(tree)","",2],["continue_execution_for_branch","Capistrano::Configuration::Actions::Invocation","classes/Capistrano/Configuration/Actions/Invocation.html#M000091","(branch)","",2],["continue_on_error?","Capistrano::TaskDefinition","classes/Capistrano/TaskDefinition.html#M000418","()","Indicates whether the task wants to continue, even if a server has failed previously ",2],["copy_cache","Capistrano::Deploy::Strategy::Copy","classes/Capistrano/Deploy/Strategy/Copy.html#M000350","()","Returns the location of the local copy cache, if the strategy should use a local cache + copy instead",2],["copy_dir","Capistrano::Deploy::Strategy::Copy","classes/Capistrano/Deploy/Strategy/Copy.html#M000356","()","The directory to which the copy should be checked out ",2],["copy_exclude","Capistrano::Deploy::Strategy::Copy","classes/Capistrano/Deploy/Strategy/Copy.html#M000351","()","Specify patterns to exclude from the copy. This is only valid when using a local cache. ",2],["copy_exclude","Capistrano::Deploy::Strategy::RemoteCache","classes/Capistrano/Deploy/Strategy/RemoteCache.html#M000365","()","",2],["copy_repository_cache","Capistrano::Deploy::Strategy::RemoteCache","classes/Capistrano/Deploy/Strategy/RemoteCache.html#M000364","()","",2],["copy_strategy","Capistrano::Deploy::Strategy::Copy","classes/Capistrano/Deploy/Strategy/Copy.html#M000353","()","Returns the value of the :copy_strategy variable, defaulting to :checkout if it has not been set. ",2],["current_feature","Capistrano::Configuration::Loading::ClassMethods","classes/Capistrano/Configuration/Loading/ClassMethods.html#M000123","()","Used internally to determine what the current \"feature\" being required is. This is used to track which",2],["current_feature=","Capistrano::Configuration::Loading::ClassMethods","classes/Capistrano/Configuration/Loading/ClassMethods.html#M000124","(feature)","Used internally to specify the current file being required, so that any recipes loaded by that file can",2],["current_task","Capistrano::Configuration::Execution","classes/Capistrano/Configuration/Execution.html#M000101","()","Returns the TaskDefinition object for the currently executing task. It returns nil if there is no task",2],["cvs_destination","Capistrano::Deploy::SCM::Cvs","classes/Capistrano/Deploy/SCM/Cvs.html#M000266","(destination)","Constructs the destination dir command-line option ",2],["cvs_revision","Capistrano::Deploy::SCM::Cvs","classes/Capistrano/Deploy/SCM/Cvs.html#M000270","(rev)","constructs the appropriate command-line switch for specifying a \"revision\" in CVS.  This could be a tag,",2],["cvs_root","Capistrano::Deploy::SCM::Cvs","classes/Capistrano/Deploy/SCM/Cvs.html#M000265","()","Constructs the CVSROOT command-line option ",2],["deb","Capistrano::Deploy::RemoteDependency","classes/Capistrano/Deploy/RemoteDependency.html#M000201","(name, version, options={})","",2],["debug_prompt","Capistrano::CLI::UI::ClassMethods","classes/Capistrano/CLI/UI/ClassMethods.html#M000027","(cmd)","Debug mode prompt ",2],["decompress","Capistrano::Deploy::Strategy::Copy","classes/Capistrano/Deploy/Strategy/Copy.html#M000367","(file)","Returns the command necessary to decompress the given file, relative to the current working directory.",2],["default_command","Capistrano::Deploy::SCM::Base","classes/Capistrano/Deploy/SCM/Base.html#M000248","()","A helper for accessing the default command name for this SCM. It simply delegates to the class' +default_command+",2],["default_command","Capistrano::Deploy::SCM::Base","classes/Capistrano/Deploy/SCM/Base.html#M000221","(value=nil)","If no parameters are given, it returns the current configured name of the command-line utility of this",2],["default_task","Capistrano::Configuration::Namespaces","classes/Capistrano/Configuration/Namespaces.html#M000144","()","Returns the default task for this namespace. This will be +nil+ if the namespace is at the top-level,",2],["default_user","Capistrano::ServerDefinition","classes/Capistrano/ServerDefinition.html#M000391","()","The default user name to use when a user name is not explicitly provided ",2],["define_task","Capistrano::Configuration::Namespaces","classes/Capistrano/Configuration/Namespaces.html#M000139","(task)","",2],["depend","Object","classes/Object.html#M000371","(location, type, *args)","Auxiliary helper method for the `deploy:check' task. Lets you set up your own dependencies. ",2],["deploy!","Capistrano::Deploy::Strategy::Base","classes/Capistrano/Deploy/Strategy/Base.html#M000334","()","Executes the necessary commands to deploy the revision of the source code identified by the +revision+",2],["deploy!","Capistrano::Deploy::Strategy::Copy","classes/Capistrano/Deploy/Strategy/Copy.html#M000342","()","Obtains a copy of the source code locally (via the #command method), compresses it to a single file,",2],["deploy!","Capistrano::Deploy::Strategy::Remote","classes/Capistrano/Deploy/Strategy/Remote.html#M000343","()","Executes the SCM command for this strategy and writes the REVISION mark file to each host. ",2],["deploy!","Capistrano::Deploy::Strategy::RemoteCache","classes/Capistrano/Deploy/Strategy/RemoteCache.html#M000358","()","Executes the SCM command for this strategy and writes the REVISION mark file to each host. ",2],["depot","Capistrano::Deploy::SCM::Accurev","classes/Capistrano/Deploy/SCM/Accurev.html#M000210","()","",2],["desc","Capistrano::Configuration::Namespaces","classes/Capistrano/Configuration/Namespaces.html#M000135","(text)","Describe the next task to be defined. The given text will be attached to the next task that is defined",2],["description","Capistrano::TaskDefinition","classes/Capistrano/TaskDefinition.html#M000413","(rebuild=false)","Returns the description for this task, with newlines collapsed and whitespace stripped. Returns the empty",2],["destination","Capistrano::Deploy::Strategy::Copy","classes/Capistrano/Deploy/Strategy/Copy.html#M000352","()","Returns the basename of the release_path, which will be used to name the local copy and archive file.",2],["diff","Capistrano::Deploy::SCM::Accurev","classes/Capistrano/Deploy/SCM/Accurev.html#M000206","(from, to=head)","Returns the command needed to show the diff between what is deployed and what is  pending. Because Accurev",2],["diff","Capistrano::Deploy::SCM::Base","classes/Capistrano/Deploy/SCM/Base.html#M000237","(from, to=nil)","Compute the difference between the two revisions, +from+ and +to+. ",2],["diff","Capistrano::Deploy::SCM::Bzr","classes/Capistrano/Deploy/SCM/Bzr.html#M000229","(from, to=nil)","The bzr \"diff\" command doesn't accept a repository argument, so it must be run from within a working",2],["diff","Capistrano::Deploy::SCM::Cvs","classes/Capistrano/Deploy/SCM/Cvs.html#M000255","(from, to=nil)","Returns the command that will do an \"cvs diff\" for the two revisions. ",2],["diff","Capistrano::Deploy::SCM::Darcs","classes/Capistrano/Deploy/SCM/Darcs.html#M000264","(from, to=nil)","Returns the command that will do a \"darcs diff\" for the two revisions. Each revision must be the 'hash'",2],["diff","Capistrano::Deploy::SCM::Git","classes/Capistrano/Deploy/SCM/Git.html#M000292","(from, to=nil)","Returns a string of diffs between two revisions ",2],["diff","Capistrano::Deploy::SCM::Mercurial","classes/Capistrano/Deploy/SCM/Mercurial.html#M000278","(from, to=nil)","Compute the difference between the two changesets +from+ and +to+ as a unified diff. ",2],["diff","Capistrano::Deploy::SCM::Perforce","classes/Capistrano/Deploy/SCM/Perforce.html#M000309","(from, to=head)","Returns the command that will do an \"p4 diff2\" for the two revisions. ",2],["diff","Capistrano::Deploy::SCM::Subversion","classes/Capistrano/Deploy/SCM/Subversion.html#M000314","(from, to=nil)","Returns the command that will do an \"svn diff\" for the two revisions. ",2],["directory","Capistrano::Deploy::RemoteDependency","classes/Capistrano/Deploy/RemoteDependency.html#M000195","(path, options={})","",2],["distribute!","Capistrano::Deploy::Strategy::Copy","classes/Capistrano/Deploy/Strategy/Copy.html#M000368","()","Distributes the file to the remote servers ",2],["download","Capistrano::Configuration::Actions::FileTransfer","classes/Capistrano/Configuration/Actions/FileTransfer.html#M000062","(from, to, options={}, &block)","",2],["dynamic_servers","Capistrano::Role","classes/Capistrano/Role.html#M000388","()","Attribute reader for the cached results of executing the blocks in turn ",2],["each","Capistrano::Command::Tree","classes/Capistrano/Command/Tree.html#M000055","()","",2],["each","Capistrano::Deploy::Dependencies","classes/Capistrano/Deploy/Dependencies.html#M000190","()","",2],["each","Capistrano::Role","classes/Capistrano/Role.html#M000377","(&block)","",2],["else","Capistrano::Command::Tree","classes/Capistrano/Command/Tree.html#M000053","(command, &block)","",2],["empty?","Capistrano::Role","classes/Capistrano/Role.html#M000382","()","",2],["ensure_each_session","Capistrano::Processable","classes/Capistrano/Processable.html#M000179","()","",2],["environment","Capistrano::Command","classes/Capistrano/Command.html#M000071","()","prepare a space-separated sequence of variables assignments intended to be prepended to a command, so",2],["eql?","Capistrano::ServerDefinition","classes/Capistrano/ServerDefinition.html#M000394","(server)","Redefined, so that Array#uniq will work to remove duplicate server definitions, based solely on their",2],["establish_connection_to","Capistrano::Configuration::Connections","classes/Capistrano/Configuration/Connections.html#M000119","(server, failures=nil)","We establish the connection by creating a thread in a new method--this prevents problems with the thread's",2],["establish_connections_to","Capistrano::Configuration::Connections","classes/Capistrano/Configuration/Connections.html#M000114","(servers)","Ensures that there are active sessions for each server in the list. ",2],["exec","Capistrano::Shell","classes/Capistrano/Shell.html#M000407","(command)","Execute the given command. If the command is prefixed by an exclamation mark, it is assumed to refer",2],["exec_command","Capistrano::Shell","classes/Capistrano/Shell.html#M000410","(command, servers)","Execute a command on the given list of servers. ",2],["exec_tasks","Capistrano::Shell","classes/Capistrano/Shell.html#M000409","(list)","Given an array of task names, invoke them in sequence. ",2],["execute","Capistrano::CLI::Execute::ClassMethods","classes/Capistrano/CLI/Execute/ClassMethods.html#M000007","()","Invoke capistrano using the ARGV array as the option parameters. This is what the command-line capistrano",2],["execute!","Capistrano::CLI::Execute","classes/Capistrano/CLI/Execute.html#M000008","()","Using the options build when the command-line was parsed, instantiate a new Capistrano configuration,",2],["execute_on_servers","Capistrano::Configuration::Connections","classes/Capistrano/Configuration/Connections.html#M000116","(options={})","Determines the set of servers within the current task's scope and establishes connections to them, and",2],["execute_requested_actions","Capistrano::CLI::Execute","classes/Capistrano/CLI/Execute.html#M000009","(config)","",2],["execute_requested_actions_with_help","Capistrano::CLI::Help","classes/Capistrano/CLI/Help.html#M000013","(config)","",2],["execute_task","Capistrano::Configuration::Execution","classes/Capistrano/Configuration/Execution.html#M000102","(task)","Executes the task with the given name, without invoking any associated callbacks. ",2],["exists?","Capistrano::Configuration::Variables","classes/Capistrano/Configuration/Variables.html#M000160","(variable)","Returns true if the variable has been defined, and false otherwise. ",2],["export","Capistrano::Deploy::SCM::Accurev","classes/Capistrano/Deploy/SCM/Accurev.html#M000202","(revision_id, destination)","Pops a copy of the code for the specified Accurev revision identifier.  The revision identifier is represented",2],["export","Capistrano::Deploy::SCM::Bzr","classes/Capistrano/Deploy/SCM/Bzr.html#M000228","(revision, destination)","The bzr 'export' does an export similar to other SCM systems ",2],["export","Capistrano::Deploy::SCM::Cvs","classes/Capistrano/Deploy/SCM/Cvs.html#M000254","(revision, destination)","Returns the command that will do an \"cvs export\" of the given revision to the given destination. ",2],["export","Capistrano::Deploy::SCM::Darcs","classes/Capistrano/Deploy/SCM/Darcs.html#M000263","(revision, destination)","Darcs does not have a real 'export' option; there is 'darcs dist', but that presupposes a utility that",2],["export","Capistrano::Deploy::SCM::Git","classes/Capistrano/Deploy/SCM/Git.html#M000285","(revision, destination)","An expensive export. Performs a checkout as above, then removes the repo. ",2],["export","Capistrano::Deploy::SCM::Mercurial","classes/Capistrano/Deploy/SCM/Mercurial.html#M000277","(revision, destination)","One day we will have hg archive, although i think its not needed ",2],["export","Capistrano::Deploy::SCM::None","classes/Capistrano/Deploy/SCM/None.html#M000300","(revision, destination)","Alias for #checkout",2],["export","Capistrano::Deploy::SCM::Perforce","classes/Capistrano/Deploy/SCM/Perforce.html#M000308","(revision, destination)","Returns the command that will sync the given revision to the given destination directory. The perforce",2],["export","Capistrano::Deploy::SCM::Subversion","classes/Capistrano/Deploy/SCM/Subversion.html#M000310","(revision, destination)","Returns the command that will do an \"svn export\" of the given revision to the given destination. ",2],["failed!","Capistrano::Configuration::Connections","classes/Capistrano/Configuration/Connections.html#M000107","(server)","Indicate that the given server could not be connected to. ",2],["fetch","Capistrano::Configuration::Variables","classes/Capistrano/Configuration/Variables.html#M000162","(variable, *args)","Access a named variable. If the value of the variable responds_to? :call, #call will be invoked (without",2],["file","Capistrano::Deploy::RemoteDependency","classes/Capistrano/Deploy/RemoteDependency.html#M000196","(path, options={})","",2],["filename","Capistrano::Deploy::Strategy::Copy","classes/Capistrano/Deploy/Strategy/Copy.html#M000355","()","Returns the name of the file that the source code will be compressed to. ",2],["filter_server_list","Capistrano::Configuration::Servers","classes/Capistrano/Configuration/Servers.html#M000165","(servers)","",2],["find_and_execute_task","Capistrano::Configuration::Execution","classes/Capistrano/Configuration/Execution.html#M000103","(path, hooks={})","Attempts to locate the task at the given fully-qualified path, and execute it. If no such task exists,",2],["find_file_in_load_path","Capistrano::Configuration::Loading","classes/Capistrano/Configuration/Loading.html#M000130","(file)","",2],["find_in_path","Capistrano::Deploy::LocalDependency","classes/Capistrano/Deploy/LocalDependency.html#M000188","(utility)","Searches the path, looking for the given utility. If an executable file is found that matches the parameter,",2],["find_servers","Capistrano::Configuration::Servers","classes/Capistrano/Configuration/Servers.html#M000159","(options={})","Attempts to find all defined servers that match the given criteria. The options hash may include a :hosts",2],["find_servers_for_task","Capistrano::Configuration::Servers","classes/Capistrano/Configuration/Servers.html#M000156","(task, options={})","Identifies all servers that the given task should be executed on. The options hash accepts the same arguments",2],["find_task","Capistrano::Configuration::Namespaces","classes/Capistrano/Configuration/Namespaces.html#M000140","(name)","Find the task with the given name, where name is the fully-qualified name of the task. This will search",2],["fully_qualified_name","Capistrano::Configuration::Namespaces","classes/Capistrano/Configuration/Namespaces.html#M000134","()","Returns the fully-qualified name of this namespace, or nil if the namespace is at the top-level. ",2],["fully_qualified_name","Capistrano::TaskDefinition","classes/Capistrano/TaskDefinition.html#M000411","()","Returns the task's fully-qualified name, including the namespace ",2],["gem","Capistrano::Deploy::RemoteDependency","classes/Capistrano/Deploy/RemoteDependency.html#M000200","(name, version, options={})","",2],["get","Capistrano::Configuration::Actions::FileTransfer","classes/Capistrano/Configuration/Actions/FileTransfer.html#M000059","(remote_path, path, options={}, &block)","Get file remote_path from FIRST server targeted by the current task and transfer it to local machine",2],["handle_data","Capistrano::Deploy::SCM::Base","classes/Capistrano/Deploy/SCM/Base.html#M000243","(state, stream, text)","Should analyze the given text and determine whether or not a response is expected, and if so, return",2],["handle_data","Capistrano::Deploy::SCM::Cvs","classes/Capistrano/Deploy/SCM/Cvs.html#M000261","(state, stream, text)","Determines what the response should be for a particular bit of text from the SCM. Password prompts, connection",2],["handle_data","Capistrano::Deploy::SCM::Git","classes/Capistrano/Deploy/SCM/Git.html#M000296","(state, stream, text)","Determines what the response should be for a particular bit of text from the SCM. Password prompts, connection",2],["handle_data","Capistrano::Deploy::SCM::Mercurial","classes/Capistrano/Deploy/SCM/Mercurial.html#M000281","(state, stream, text)","Determine response for SCM prompts user/pass can come from ssh and http distribution methods yes/no is",2],["handle_data","Capistrano::Deploy::SCM::Perforce","classes/Capistrano/Deploy/SCM/Perforce.html#M000316","(state, stream, text)","Determines what the response should be for a particular bit of text from the SCM. Password prompts, connection",2],["handle_data","Capistrano::Deploy::SCM::Subversion","classes/Capistrano/Deploy/SCM/Subversion.html#M000320","(state, stream, text)","Determines what the response should be for a particular bit of text from the SCM. Password prompts, connection",2],["handle_error","Capistrano::Transfer","classes/Capistrano/Transfer.html#M000439","(error)","",2],["has_failed?","Capistrano::Configuration::Connections","classes/Capistrano/Configuration/Connections.html#M000108","(server)","Query whether previous connection attempts to the given server have failed. ",2],["hash","Capistrano::ServerDefinition","classes/Capistrano/ServerDefinition.html#M000396","()","Redefined, so that Array#uniq will work to remove duplicate server definitions, based on their connection",2],["head","Capistrano::Deploy::SCM::Accurev","classes/Capistrano/Deploy/SCM/Accurev.html#M000193","()","Defines pseudo-revision value for the most recent changes to be deployed. ",2],["head","Capistrano::Deploy::SCM::Base","classes/Capistrano/Deploy/SCM/Base.html#M000232","()","Returns the string used to identify the latest revision in the repository. This will be passed as the",2],["head","Capistrano::Deploy::SCM::Bzr","classes/Capistrano/Deploy/SCM/Bzr.html#M000222","()","Bazaar-NG doesn't support any pseudo-id's, so we'll use the convention in this adapter that the :head",2],["head","Capistrano::Deploy::SCM::Cvs","classes/Capistrano/Deploy/SCM/Cvs.html#M000251","()","CVS understands 'HEAD' to refer to the latest revision in the repository. ",2],["head","Capistrano::Deploy::SCM::Darcs","classes/Capistrano/Deploy/SCM/Darcs.html#M000258","()","Because darcs does not have any support for pseudo-ids, we'll just return something here that we can",2],["head","Capistrano::Deploy::SCM::Git","classes/Capistrano/Deploy/SCM/Git.html#M000282","()","When referencing \"head\", use the branch we want to deploy or, by default, Git's reference of HEAD (the",2],["head","Capistrano::Deploy::SCM::Mercurial","classes/Capistrano/Deploy/SCM/Mercurial.html#M000274","()","For mercurial HEAD == tip except that it bases this assumption on what tip is in the current repository",2],["head","Capistrano::Deploy::SCM::None","classes/Capistrano/Deploy/SCM/None.html#M000297","()","No versioning, thus, no head. Returns the empty string. ",2],["head","Capistrano::Deploy::SCM::Perforce","classes/Capistrano/Deploy/SCM/Perforce.html#M000302","()","Perforce understands '#head' to refer to the latest revision in the depot. ",2],["head","Capistrano::Deploy::SCM::Subversion","classes/Capistrano/Deploy/SCM/Subversion.html#M000304","()","Subversion understands 'HEAD' to refer to the latest revision in the repository. ",2],["help","Capistrano::Shell","classes/Capistrano/Shell.html#M000405","()","Display a verbose help message. ",2],["in?","Capistrano::Command::Tree::ConditionBranch::Evaluator","classes/Capistrano/Command/Tree/ConditionBranch/Evaluator.html#M000045","(role)","",2],["include?","Capistrano::Role","classes/Capistrano/Role.html#M000384","(server)","",2],["included","Capistrano::CLI::Options","classes/Capistrano/CLI/Options.html#M000022","(base)","",2],["instance","Capistrano::Configuration::Loading::ClassMethods","classes/Capistrano/Configuration/Loading/ClassMethods.html#M000118","(require_config=false)","Used by third-party task bundles to identify the capistrano configuration that is loading them. Its return",2],["instance=","Capistrano::Configuration::Loading::ClassMethods","classes/Capistrano/Configuration/Loading/ClassMethods.html#M000121","(config)","Used internally by Capistrano to specify the current configuration before loading a third-party task",2],["invoke_command","Capistrano::Configuration::Actions::Invocation","classes/Capistrano/Configuration/Actions/Invocation.html#M000076","(cmd, options={}, &block)","Invokes the given command. If a +via+ key is given, it will be used to determine what method to use to",2],["invoke_task_directly","Capistrano::Configuration::Execution","classes/Capistrano/Configuration/Execution.html#M000112","(task)","Invokes the task's body directly, without setting up the call frame. ",2],["last?","Capistrano::Command::Tree::Branch","classes/Capistrano/Command/Tree/Branch.html#M000039","()","",2],["load","Capistrano::Configuration::Loading","classes/Capistrano/Configuration/Loading.html#M000126","(*args, &block)","Load a configuration file or string into this configuration. Usage: load(\"recipe\"): Look for and load",2],["load_from_file","Capistrano::Configuration::Loading","classes/Capistrano/Configuration/Loading.html#M000128","(file, name=nil)","Load a recipe from the named file. If +name+ is given, the file will be reported using that name. ",2],["local","Capistrano::Deploy::Dependencies","classes/Capistrano/Deploy/Dependencies.html#M000186","()","",2],["local","Capistrano::Deploy::SCM::Base","classes/Capistrano/Deploy/SCM/Base.html#M000230","()","Returns a proxy that wraps the SCM instance and forces it to operate in \"local\" mode, which changes how",2],["local?","Capistrano::Deploy::SCM::Base","classes/Capistrano/Deploy/SCM/Base.html#M000231","()","Returns true if running in \"local\" mode. See #local. ",2],["log","Capistrano::Deploy::SCM::Accurev","classes/Capistrano/Deploy/SCM/Accurev.html#M000204","(from, to=head)","Returns the command needed to show the changes that exist between the two revisions. ",2],["log","Capistrano::Deploy::SCM::Base","classes/Capistrano/Deploy/SCM/Base.html#M000238","(from, to=nil)","Return a log of all changes between the two specified revisions, +from+ and +to+, inclusive. ",2],["log","Capistrano::Deploy::SCM::Bzr","classes/Capistrano/Deploy/SCM/Bzr.html#M000234","(from, to=nil)","Returns a log of changes between the two revisions (inclusive). ",2],["log","Capistrano::Deploy::SCM::Cvs","classes/Capistrano/Deploy/SCM/Cvs.html#M000256","(from, to=nil)","Returns an \"cvs log\" command for the two revisions. ",2],["log","Capistrano::Deploy::SCM::Darcs","classes/Capistrano/Deploy/SCM/Darcs.html#M000268","(from, to=nil)","Returns the log of changes between the two revisions. Each revision must be the 'hash' identifier of",2],["log","Capistrano::Deploy::SCM::Git","classes/Capistrano/Deploy/SCM/Git.html#M000293","(from, to=nil)","Returns a log of changes between the two revisions (inclusive). ",2],["log","Capistrano::Deploy::SCM::Mercurial","classes/Capistrano/Deploy/SCM/Mercurial.html#M000279","(from, to=nil)","Return a log of all changes between the two specified changesets, +from+ and +to+, inclusive or the log",2],["log","Capistrano::Deploy::SCM::Perforce","classes/Capistrano/Deploy/SCM/Perforce.html#M000311","(from=1, to=head)","Returns a \"p4 changes\" command for the two revisions. ",2],["log","Capistrano::Deploy::SCM::Subversion","classes/Capistrano/Deploy/SCM/Subversion.html#M000315","(from, to=nil)","Returns an \"svn log\" command for the two revisions. ",2],["logger","Capistrano::Command","classes/Capistrano/Command.html#M000065","()","",2],["logger","Capistrano::Deploy::SCM::Base","classes/Capistrano/Deploy/SCM/Base.html#M000247","()","A reference to a Logger instance that the SCM can use to log activity. ",2],["logger","Capistrano::Deploy::Strategy::Base","classes/Capistrano/Deploy/Strategy/Base.html#M000339","()","",2],["mark","Capistrano::Deploy::Strategy::Remote","classes/Capistrano/Deploy/Strategy/Remote.html#M000347","()","Returns the command which will write the identifier of the revision being deployed to the REVISION file",2],["match","Capistrano::Command::Tree::Branch","classes/Capistrano/Command/Tree/Branch.html#M000042","(server)","",2],["match","Capistrano::Command::Tree::ConditionBranch","classes/Capistrano/Command/Tree/ConditionBranch.html#M000049","(server)","",2],["match","Capistrano::Deploy::RemoteDependency","classes/Capistrano/Deploy/RemoteDependency.html#M000203","(command, expect, options={})","",2],["message","Capistrano::Deploy::RemoteDependency","classes/Capistrano/Deploy/RemoteDependency.html#M000208","()","",2],["method_missing","Capistrano::Command::Tree::ConditionBranch::Evaluator","classes/Capistrano/Command/Tree/ConditionBranch/Evaluator.html#M000047","(sym, *args, &block)","",2],["method_missing","Capistrano::Configuration::Namespaces::Namespace","classes/Capistrano/Configuration/Namespaces/Namespace.html#M000152","(sym, *args, &block)","",2],["method_missing","Capistrano::Deploy::SCM::Base::LocalProxy","classes/Capistrano/Deploy/SCM/Base/LocalProxy.html#M000225","(sym, *args, &block)","",2],["method_missing","Capistrano::Deploy::Strategy::Base","classes/Capistrano/Deploy/Strategy/Base.html#M000336","(sym, *args, &block)","This is to allow helper methods like \"run\" and \"put\" to be more easily accessible to strategy implementations.",2],["name=","Capistrano::TaskDefinition","classes/Capistrano/TaskDefinition.html#M000412","(value)","",2],["namespace","Capistrano::Configuration::Namespaces","classes/Capistrano/Configuration/Namespaces.html#M000137","(name, &block)","Open a namespace in which to define new tasks. If the namespace was defined previously, it will be reopened,",2],["new","Capistrano::CLI","classes/Capistrano/CLI.html#M000028","(args)","Create a new CLI instance using the given array of command-line parameters to initialize it. By default,",2],["new","Capistrano::Callback","classes/Capistrano/Callback.html#M000000","(source, options={})","",2],["new","Capistrano::Command","classes/Capistrano/Command.html#M000057","(tree, sessions, options={}, &block)","Instantiates a new command object. The +command+ must be a string containing the command to execute.",2],["new","Capistrano::Command::Tree","classes/Capistrano/Command/Tree.html#M000051","(config)","",2],["new","Capistrano::Command::Tree::Branch","classes/Capistrano/Command/Tree/Branch.html#M000038","(command, options, callback)","",2],["new","Capistrano::Command::Tree::ConditionBranch","classes/Capistrano/Command/Tree/ConditionBranch.html#M000048","(configuration, condition, command, options, callback)","",2],["new","Capistrano::Command::Tree::ConditionBranch::Evaluator","classes/Capistrano/Command/Tree/ConditionBranch/Evaluator.html#M000044","(config, condition, server)","",2],["new","Capistrano::Configuration::Namespaces::Namespace","classes/Capistrano/Configuration/Namespaces/Namespace.html#M000148","(name, parent)","",2],["new","Capistrano::Deploy::Dependencies","classes/Capistrano/Deploy/Dependencies.html#M000183","(configuration)","",2],["new","Capistrano::Deploy::LocalDependency","classes/Capistrano/Deploy/LocalDependency.html#M000180","(configuration)","",2],["new","Capistrano::Deploy::RemoteDependency","classes/Capistrano/Deploy/RemoteDependency.html#M000194","(configuration)","",2],["new","Capistrano::Deploy::SCM","classes/Capistrano/Deploy/SCM.html#M000332","(scm, config={})","",2],["new","Capistrano::Deploy::SCM::Accurev::InternalRevision","classes/Capistrano/Deploy/SCM/Accurev/InternalRevision.html#M000217","(stream, transaction_id)","",2],["new","Capistrano::Deploy::SCM::Base","classes/Capistrano/Deploy/SCM/Base.html#M000226","(configuration={})","Creates a new SCM instance with the given configuration options. ",2],["new","Capistrano::Deploy::SCM::Base::LocalProxy","classes/Capistrano/Deploy/SCM/Base/LocalProxy.html#M000224","(scm)","",2],["new","Capistrano::Deploy::Strategy","classes/Capistrano/Deploy/Strategy.html#M000369","(strategy, config={})","",2],["new","Capistrano::Deploy::Strategy::Base","classes/Capistrano/Deploy/Strategy/Base.html#M000333","(config={})","Instantiates a strategy with a reference to the given configuration. ",2],["new","Capistrano::Role","classes/Capistrano/Role.html#M000376","(*list)","",2],["new","Capistrano::Role::DynamicServerList","classes/Capistrano/Role/DynamicServerList.html#M000385","(block, options)","",2],["new","Capistrano::ServerDefinition","classes/Capistrano/ServerDefinition.html#M000392","(string, options={})","",2],["new","Capistrano::Shell","classes/Capistrano/Shell.html#M000401","(config)","Instantiate a new shell ",2],["new","Capistrano::TaskCallback","classes/Capistrano/TaskCallback.html#M000003","(config, source, options={})","",2],["new","Capistrano::TaskDefinition","classes/Capistrano/TaskDefinition.html#M000408","(name, namespace, options={}, &block)","",2],["new","Capistrano::Transfer","classes/Capistrano/Transfer.html#M000423","(direction, from, to, sessions, options={}, &block)","",2],["new","Capistrano::Transfer::SFTPTransferWrapper","classes/Capistrano/Transfer/SFTPTransferWrapper.html#M000432","(session, &callback)","",2],["next_description","Capistrano::Configuration::Namespaces","classes/Capistrano/Configuration/Namespaces.html#M000136","(reset=false)","Returns the value set by the last, pending \"desc\" call. If +reset+ is not false, the value will be reset",2],["next_revision","Capistrano::Deploy::SCM::Base","classes/Capistrano/Deploy/SCM/Base.html#M000242","(revision)","Returns the revision number immediately following revision, if at all possible. A block should always",2],["next_revision","Capistrano::Deploy::SCM::Bzr","classes/Capistrano/Deploy/SCM/Bzr.html#M000239","(revision)","Increments the given revision number and returns it. ",2],["next_revision","Capistrano::Deploy::SCM::Perforce","classes/Capistrano/Deploy/SCM/Perforce.html#M000313","(revision)","Increments the given revision number and returns it. ",2],["next_revision","Capistrano::Deploy::SCM::Subversion","classes/Capistrano/Deploy/SCM/Subversion.html#M000319","(revision)","Increments the given revision number and returns it. ",2],["normalize","Capistrano::Transfer","classes/Capistrano/Transfer.html#M000438","(argument, session)","",2],["on","Capistrano::Configuration::Callbacks","classes/Capistrano/Configuration/Callbacks.html#M000085","(event, *args, &block)","Defines one or more callbacks to be invoked in response to some event. Capistrano currently understands",2],["on","Capistrano::Processable::SessionAssociation","classes/Capistrano/Processable/SessionAssociation.html#M000177","(exception, session)","",2],["on_rollback","Capistrano::Configuration::Execution","classes/Capistrano/Configuration/Execution.html#M000100","(&block)","Specifies an on_rollback hook for the currently executing task. If this or any subsequent task then fails,",2],["on_windows?","Capistrano::Deploy::LocalDependency","classes/Capistrano/Deploy/LocalDependency.html#M000189","()","",2],["open_channels","Capistrano::Command","classes/Capistrano/Command.html#M000066","()","",2],["operation","Capistrano::Transfer","classes/Capistrano/Transfer.html#M000426","()","",2],["or","Capistrano::Deploy::LocalDependency","classes/Capistrano/Deploy/LocalDependency.html#M000182","(message)","",2],["or","Capistrano::Deploy::RemoteDependency","classes/Capistrano/Deploy/RemoteDependency.html#M000205","(message)","",2],["origin","Capistrano::Deploy::SCM::Git","classes/Capistrano/Deploy/SCM/Git.html#M000283","()","",2],["p4_sync","Capistrano::Deploy::SCM::Perforce","classes/Capistrano/Deploy/SCM/Perforce.html#M000321","(revision, destination, options=\"\")","Returns the command that will sync the given revision to the given destination directory with specific",2],["p4client","Capistrano::Deploy::SCM::Perforce","classes/Capistrano/Deploy/SCM/Perforce.html#M000322","()","",2],["p4client_root","Capistrano::Deploy::SCM::Perforce","classes/Capistrano/Deploy/SCM/Perforce.html#M000327","()","",2],["p4passwd","Capistrano::Deploy::SCM::Perforce","classes/Capistrano/Deploy/SCM/Perforce.html#M000325","()","",2],["p4port","Capistrano::Deploy::SCM::Perforce","classes/Capistrano/Deploy/SCM/Perforce.html#M000323","()","",2],["p4sync_flags","Capistrano::Deploy::SCM::Perforce","classes/Capistrano/Deploy/SCM/Perforce.html#M000326","()","",2],["p4user","Capistrano::Deploy::SCM::Perforce","classes/Capistrano/Deploy/SCM/Perforce.html#M000324","()","",2],["parallel","Capistrano::Configuration::Actions::Invocation","classes/Capistrano/Configuration/Actions/Invocation.html#M000075","(options={})","Executes different commands in parallel. This is useful for commands that need to be different on different",2],["parse","Capistrano::CLI::Options::ClassMethods","classes/Capistrano/CLI/Options/ClassMethods.html#M000023","(args)","Return a new CLI instance with the given arguments pre-parsed and ready for execution. ",2],["parse","Capistrano::Deploy::SCM::Accurev::InternalRevision","classes/Capistrano/Deploy/SCM/Accurev/InternalRevision.html#M000216","(string)","",2],["pass?","Capistrano::Deploy::Dependencies","classes/Capistrano/Deploy/Dependencies.html#M000191","()","",2],["pass?","Capistrano::Deploy::LocalDependency","classes/Capistrano/Deploy/LocalDependency.html#M000187","()","",2],["pass?","Capistrano::Deploy::RemoteDependency","classes/Capistrano/Deploy/RemoteDependency.html#M000207","()","",2],["password_prompt","Capistrano::CLI::UI::ClassMethods","classes/Capistrano/CLI/UI/ClassMethods.html#M000026","(prompt=\"Password: \")","Prompt for a password using echo suppression. ",2],["plugin","Capistrano","classes/Capistrano.html#M000174","(name, mod)","Register the given module as a plugin with the given name. It will henceforth be available via a proxy",2],["pop_task_call_frame","Capistrano::Configuration::Execution","classes/Capistrano/Configuration/Execution.html#M000111","()","",2],["prep_destination","Capistrano::Deploy::SCM::Cvs","classes/Capistrano/Deploy/SCM/Cvs.html#M000273","(destination)","",2],["prepare_scp_transfer","Capistrano::Transfer","classes/Capistrano/Transfer.html#M000431","(from, to, session)","",2],["prepare_sftp_transfer","Capistrano::Transfer","classes/Capistrano/Transfer.html#M000437","(from, to, session)","",2],["prepare_transfers","Capistrano::Transfer","classes/Capistrano/Transfer.html#M000430","()","",2],["process","Capistrano::Command","classes/Capistrano/Command.html#M000056","(tree, sessions, options={})","",2],["process","Capistrano::Transfer","classes/Capistrano/Transfer.html#M000422","(direction, from, to, sessions, options={}, &block)","",2],["process!","Capistrano::Command","classes/Capistrano/Command.html#M000061","()","Processes the command in parallel on all specified hosts. If the command fails (non-zero return code)",2],["process!","Capistrano::Transfer","classes/Capistrano/Transfer.html#M000424","()","",2],["process_command","Capistrano::Shell","classes/Capistrano/Shell.html#M000419","(scope_type, scope_value, command)","Process a command. Interprets the scope_type (must be nil, \"with\", or \"on\") and the command. If no command",2],["process_iteration","Capistrano::Processable","classes/Capistrano/Processable.html#M000178","(wait=nil, &block)","",2],["protect","Capistrano::Configuration::Variables","classes/Capistrano/Configuration/Variables.html#M000166","(variable)","",2],["psuedo_revision?","Capistrano::Deploy::SCM::Accurev::InternalRevision","classes/Capistrano/Deploy/SCM/Accurev/InternalRevision.html#M000218","()","",2],["pull","Capistrano::Deploy::SCM::Mercurial","classes/Capistrano/Deploy/SCM/Mercurial.html#M000287","(destination)","",2],["push","Capistrano::Role","classes/Capistrano/Role.html#M000378","(*list)","",2],["push_task_call_frame","Capistrano::Configuration::Execution","classes/Capistrano/Configuration/Execution.html#M000110","(task)","",2],["put","Capistrano::Configuration::Actions::FileTransfer","classes/Capistrano/Configuration/Actions/FileTransfer.html#M000058","(data, path, options={})","Store the given data at the given location on all servers targetted by the current task. If <tt>:mode</tt>",2],["query_revision","Capistrano::Deploy::SCM::Accurev","classes/Capistrano/Deploy/SCM/Accurev.html#M000198","(revision)","Given an Accurev revision identifier, this method returns an identifier that can be used for later SCM",2],["query_revision","Capistrano::Deploy::SCM::Base","classes/Capistrano/Deploy/SCM/Base.html#M000241","(revision)","If the given revision represents a \"real\" revision, this should simply return the revision value. If",2],["query_revision","Capistrano::Deploy::SCM::Bzr","classes/Capistrano/Deploy/SCM/Bzr.html#M000235","(revision)","Attempts to translate the given revision identifier to a \"real\" revision. If the identifier is :head,",2],["query_revision","Capistrano::Deploy::SCM::Cvs","classes/Capistrano/Deploy/SCM/Cvs.html#M000257","(revision)","Unfortunately, cvs doesn't support the concept of a revision number like  subversion and other SCM's",2],["query_revision","Capistrano::Deploy::SCM::Darcs","classes/Capistrano/Deploy/SCM/Darcs.html#M000269","(revision)","Attempts to translate the given revision identifier to a \"real\" revision. If the identifier is a symbol,",2],["query_revision","Capistrano::Deploy::SCM::Git","classes/Capistrano/Deploy/SCM/Git.html#M000294","(revision)","Getting the actual commit id, in case we were passed a tag or partial sha or something - it will return",2],["query_revision","Capistrano::Deploy::SCM::Mercurial","classes/Capistrano/Deploy/SCM/Mercurial.html#M000280","(changeset)","Translates a tag to a changeset if needed or just returns changeset. ",2],["query_revision","Capistrano::Deploy::SCM::None","classes/Capistrano/Deploy/SCM/None.html#M000301","(revision)","No versioning, so this just returns the argument, with no modification. ",2],["query_revision","Capistrano::Deploy::SCM::Perforce","classes/Capistrano/Deploy/SCM/Perforce.html#M000312","(revision)","",2],["query_revision","Capistrano::Deploy::SCM::Subversion","classes/Capistrano/Deploy/SCM/Subversion.html#M000317","(revision)","Attempts to translate the given revision identifier to a \"real\" revision. If the identifier is an integer,",2],["read_and_execute","Capistrano::Shell","classes/Capistrano/Shell.html#M000403","()","",2],["read_line","Capistrano::Shell","classes/Capistrano/Shell.html#M000404","()","Present the prompt and read a single line from the console. It also detects ^D and returns \"exit\" in",2],["reader","Capistrano::Shell","classes/Capistrano/Shell.html#M000414","()","Return the object that will be used to query input from the console. The returned object will quack (more",2],["recipes_per_feature","Capistrano::Configuration::Loading::ClassMethods","classes/Capistrano/Configuration/Loading/ClassMethods.html#M000122","()","Used internally by Capistrano to track which recipes have been loaded via require, so that they may be",2],["remember_load","Capistrano::Configuration::Loading","classes/Capistrano/Configuration/Loading.html#M000131","(options)","If a file is being required, the options associated with loading a recipe are remembered in the recipes_per_feature",2],["remote","Capistrano::Deploy::Dependencies","classes/Capistrano/Deploy/Dependencies.html#M000185","()","",2],["remote_dir","Capistrano::Deploy::Strategy::Copy","classes/Capistrano/Deploy/Strategy/Copy.html#M000357","()","The directory on the remote server to which the archive should be copied ",2],["remote_filename","Capistrano::Deploy::Strategy::Copy","classes/Capistrano/Deploy/Strategy/Copy.html#M000362","()","The location on the remote server where the file should be temporarily stored. ",2],["remove_plugin","Capistrano","classes/Capistrano.html#M000175","(name)","Unregister the plugin with the given name. ",2],["replace_placeholders","Capistrano::Command","classes/Capistrano/Command.html#M000070","(command, channel)","",2],["repository","Capistrano::Deploy::SCM::Base","classes/Capistrano/Deploy/SCM/Base.html#M000249","()","A convenience method for accessing the declared repository value. ",2],["repository_cache","Capistrano::Deploy::Strategy::RemoteCache","classes/Capistrano/Deploy/Strategy/RemoteCache.html#M000360","()","",2],["request_pty_if_necessary","Capistrano::Command","classes/Capistrano/Command.html#M000069","(channel)","",2],["reset!","Capistrano::Configuration::Variables","classes/Capistrano/Configuration/Variables.html#M000161","(variable)","If the variable was originally a proc value, it will be reset to it's original proc value. Otherwise,",2],["reset!","Capistrano::Role::DynamicServerList","classes/Capistrano/Role/DynamicServerList.html#M000387","()","Clear the cached value ",2],["respond_to?","Capistrano::Configuration::Namespaces::Namespace","classes/Capistrano/Configuration/Namespaces/Namespace.html#M000151","(sym, include_priv=false)","",2],["result","Capistrano::Command::Tree::ConditionBranch::Evaluator","classes/Capistrano/Command/Tree/ConditionBranch/Evaluator.html#M000046","()","",2],["rev_no","Capistrano::Deploy::SCM::Perforce","classes/Capistrano/Deploy/SCM/Perforce.html#M000328","(revision)","",2],["revision","Capistrano::Deploy::Strategy::Base","classes/Capistrano/Deploy/Strategy/Base.html#M000340","()","The revision to deploy. Must return a real revision identifier, and not a pseudo-id. ",2],["revision_type","Capistrano::Deploy::SCM::Cvs","classes/Capistrano/Deploy/SCM/Cvs.html#M000267","(rev)","attempts to guess what type of revision we're working with ",2],["revswitch","Capistrano::Deploy::SCM::Bzr","classes/Capistrano/Deploy/SCM/Bzr.html#M000240","(revision)","",2],["role","Capistrano::Configuration::Namespaces::Namespace","classes/Capistrano/Configuration/Namespaces/Namespace.html#M000149","(*args)","",2],["role","Capistrano::Configuration::Roles","classes/Capistrano/Configuration/Roles.html#M000146","(which, *args, &block)","Define a new role and its associated servers. You must specify at least one host for each role. Also,",2],["role_list_from","Capistrano::Configuration::Servers","classes/Capistrano/Configuration/Servers.html#M000170","(roles)","",2],["role_names_for_host","Capistrano::Configuration::Roles","classes/Capistrano/Configuration/Roles.html#M000153","(host)","",2],["rollback!","Capistrano::Configuration::Execution","classes/Capistrano/Configuration/Execution.html#M000106","()","",2],["rollback_requests","Capistrano::Configuration::Execution","classes/Capistrano/Configuration/Execution.html#M000097","()","The stack of tasks that have registered rollback handlers within the current transaction. If this is",2],["rollback_requests=","Capistrano::Configuration::Execution","classes/Capistrano/Configuration/Execution.html#M000098","(rollback_requests)","",2],["run","Capistrano::Configuration::Actions::Invocation","classes/Capistrano/Configuration/Actions/Invocation.html#M000077","(cmd, options={}, &block)","Execute the given command on all servers that are the target of the current task. If a block is given,",2],["run","Capistrano::Shell","classes/Capistrano/Shell.html#M000400","(config)","Instantiate a new shell and begin executing it immediately. ",2],["run!","Capistrano::Shell","classes/Capistrano/Shell.html#M000402","()","Start the shell running. This method will block until the shell terminates. ",2],["run_locally","Object","classes/Object.html#M000373","(cmd)","logs the command then executes it locally. returns the command output as a string ",2],["safely_establish_connection_to","Capistrano::Configuration::Connections","classes/Capistrano/Configuration/Connections.html#M000120","(server, thread, failures=nil)","",2],["sanitized_from","Capistrano::Transfer","classes/Capistrano/Transfer.html#M000427","()","",2],["sanitized_to","Capistrano::Transfer","classes/Capistrano/Transfer.html#M000428","()","",2],["scm","Capistrano::Deploy::SCM::Base","classes/Capistrano/Deploy/SCM/Base.html#M000245","(*args)","A helper method that can be used to define SCM commands naturally. It returns a single string with all",2],["scm_password_or_prompt","Capistrano::Deploy::SCM::Mercurial","classes/Capistrano/Deploy/SCM/Mercurial.html#M000291","()","honor Cap 2.1+'s :scm_prefer_prompt if present ",2],["scm_password_prompt","Capistrano::Deploy::SCM::Subversion","classes/Capistrano/Deploy/SCM/Subversion.html#M000331","()","",2],["scm_quiet","Capistrano::Deploy::SCM::Accurev","classes/Capistrano/Deploy/SCM/Accurev.html#M000215","(*args)","",2],["scm_run","Capistrano::Deploy::Strategy::Remote","classes/Capistrano/Deploy/Strategy/Remote.html#M000345","(command)","Runs the given command, filtering output back through the #handle_data filter of the SCM implementation.",2],["search_task","Capistrano::Configuration::Namespaces","classes/Capistrano/Configuration/Namespaces.html#M000141","(name)","Given a task name, this will search the current namespace, and all parent namespaces, looking for a task",2],["server","Capistrano::Configuration::Roles","classes/Capistrano/Configuration/Roles.html#M000150","(host, *roles)","An alternative way to associate servers with roles. If you have a server that participates in multiple",2],["server_list_from","Capistrano::Configuration::Servers","classes/Capistrano/Configuration/Servers.html#M000169","(hosts)","",2],["servers","Capistrano::Role","classes/Capistrano/Role.html#M000380","()","",2],["session_map","Capistrano::Transfer","classes/Capistrano/Transfer.html#M000429","()","",2],["sessions","Capistrano","classes/Capistrano.html#M000420","()","All open sessions, needed to satisfy the Command::Processable include ",2],["sessions","Capistrano::Configuration::Connections","classes/Capistrano/Configuration/Connections.html#M000104","()","A hash of the SSH sessions that are currently open and available. Because sessions are constructed lazily,",2],["set","Capistrano::Configuration::Variables","classes/Capistrano/Configuration/Variables.html#M000155","(variable, *args, &block)","Set a variable to the given value. ",2],["set_option","Capistrano::Shell","classes/Capistrano/Shell.html#M000416","(opt, value)","Set the given option to +value+. ",2],["setup","Capistrano::Shell","classes/Capistrano/Shell.html#M000415","()","Prepare every little thing for the shell. Starts the background thread and generally gets things ready",2],["show_streams_for","Capistrano::Deploy::SCM::Accurev","classes/Capistrano/Deploy/SCM/Accurev.html#M000214","(stream)","",2],["skip!","Capistrano::Command::Tree::Branch","classes/Capistrano/Command/Tree/Branch.html#M000041","()","",2],["skip?","Capistrano::Command::Tree::Branch","classes/Capistrano/Command/Tree/Branch.html#M000040","()","",2],["stop!","Capistrano::Command","classes/Capistrano/Command.html#M000064","()","Force the command to stop processing, by closing all open channels associated with this command. ",2],["stream","Capistrano::Configuration::Actions::Inspect","classes/Capistrano/Configuration/Actions/Inspect.html#M000067","(command, options={})","Streams the result of the command from all servers that are the target of the current task. All these",2],["stream","Capistrano::Deploy::SCM::Accurev","classes/Capistrano/Deploy/SCM/Accurev.html#M000211","()","",2],["subdir","Capistrano::Deploy::SCM::Accurev","classes/Capistrano/Deploy/SCM/Accurev.html#M000212","()","",2],["sudo","Capistrano::Configuration::Actions::Invocation","classes/Capistrano/Configuration/Actions/Invocation.html#M000084","(*parameters, &block)","Returns the command string used by capistrano to invoke a comamnd via sudo. run \"#{sudo :as => 'bob'}",2],["sudo_prompt","Capistrano::Configuration::Actions::Invocation","classes/Capistrano/Configuration/Actions/Invocation.html#M000089","()","Returns the prompt text to use with sudo ",2],["sync","Capistrano::Deploy::SCM::Base","classes/Capistrano/Deploy/SCM/Base.html#M000236","(revision, destination)","Resynchronize the working copy in +destination+ to the specified +revision+. ",2],["sync","Capistrano::Deploy::SCM::Bzr","classes/Capistrano/Deploy/SCM/Bzr.html#M000227","(revision, destination)","The bzr 'update' command does not support updating to a specific revision, so this just does update,",2],["sync","Capistrano::Deploy::SCM::Cvs","classes/Capistrano/Deploy/SCM/Cvs.html#M000253","(revision, destination)","Returns the command that will do an \"cvs update\" to the given revision, for the working copy at the given",2],["sync","Capistrano::Deploy::SCM::Darcs","classes/Capistrano/Deploy/SCM/Darcs.html#M000262","(revision, destination)","Tries to update the destination repository in-place, to bring it up to the given revision. Note that",2],["sync","Capistrano::Deploy::SCM::Git","classes/Capistrano/Deploy/SCM/Git.html#M000289","(revision, destination)","Merges the changes to 'head' since the last fetch, for remote_cache deployment strategy ",2],["sync","Capistrano::Deploy::SCM::Mercurial","classes/Capistrano/Deploy/SCM/Mercurial.html#M000276","(changeset, destination)","Pull from the repository and update to the specified changeset. ",2],["sync","Capistrano::Deploy::SCM::Perforce","classes/Capistrano/Deploy/SCM/Perforce.html#M000307","(revision, destination)","Returns the command that will sync the given revision to the given destination directory. The perforce",2],["sync","Capistrano::Deploy::SCM::Subversion","classes/Capistrano/Deploy/SCM/Subversion.html#M000306","(revision, destination)","Returns the command that will do an \"svn update\" to the given revision, for the working copy at the given",2],["system","Capistrano::Deploy::Strategy::Base","classes/Capistrano/Deploy/Strategy/Base.html#M000337","(*args)","A wrapper for Kernel#system that logs the command being executed. ",2],["task","Capistrano::Configuration::Namespaces","classes/Capistrano/Configuration/Namespaces.html#M000138","(name, options={}, &block)","Describe a new task. If a description is active (see #desc), it is added to the options under the <tt>:desc</tt>",2],["task_call_frames","Capistrano::Configuration::Execution","classes/Capistrano/Configuration/Execution.html#M000096","()","The call stack of the tasks. The currently executing task may inspect this to see who its caller was.",2],["task_list","Capistrano::Configuration::Namespaces","classes/Capistrano/Configuration/Namespaces.html#M000145","(all=false)","Returns the tasks in this namespace as an array of TaskDefinition objects. If a non-false parameter is",2],["teardown_connections_to","Capistrano::Configuration::Connections","classes/Capistrano/Configuration/Connections.html#M000115","(servers)","Destroys sessions for each server in the list. ",2],["to_ary","Capistrano::Role","classes/Capistrano/Role.html#M000381","()","Alias for #servers",2],["to_ary","Capistrano::Role::DynamicServerList","classes/Capistrano/Role/DynamicServerList.html#M000386","()","Convert to a list of ServerDefinitions ",2],["to_match","Capistrano::Deploy::SCM::Darcs","classes/Capistrano/Deploy/SCM/Darcs.html#M000259","(revision)","",2],["to_s","Capistrano::Command::Tree::Branch","classes/Capistrano/Command/Tree/Branch.html#M000043","()","",2],["to_s","Capistrano::Command::Tree::ConditionBranch","classes/Capistrano/Command/Tree/ConditionBranch.html#M000050","()","",2],["to_s","Capistrano::Deploy::SCM::Accurev::InternalRevision","classes/Capistrano/Deploy/SCM/Accurev/InternalRevision.html#M000219","()","",2],["to_s","Capistrano::ServerDefinition","classes/Capistrano/ServerDefinition.html#M000397","()","",2],["to_s","Capistrano::Version","classes/Capistrano/Version.html#M000421","()","",2],["top","Capistrano::Configuration::Namespaces","classes/Capistrano/Configuration/Namespaces.html#M000133","()","Returns the top-level namespace (the one with no parent). ",2],["transaction","Capistrano::Configuration::Execution","classes/Capistrano/Configuration/Execution.html#M000099","()","Invoke a set of tasks in a transaction. If any task fails (raises an exception), all tasks executed within",2],["transaction?","Capistrano::Configuration::Execution","classes/Capistrano/Configuration/Execution.html#M000095","()","Returns true if there is a transaction currently active. ",2],["transfer","Capistrano::Configuration::Actions::FileTransfer","classes/Capistrano/Configuration/Actions/FileTransfer.html#M000063","(direction, from, to, options={}, &block)","",2],["trigger","Capistrano::Configuration::Callbacks","classes/Capistrano/Configuration/Callbacks.html#M000087","(event, task=nil)","Trigger the named event for the named task. All associated callbacks will be fired, in the order they",2],["try","Capistrano::Deploy::RemoteDependency","classes/Capistrano/Deploy/RemoteDependency.html#M000209","(command, options)","",2],["try_runner","Object","classes/Object.html#M000375","(*args)","Same as sudo, but tries sudo with :as set to the value of the :runner variable (which defaults to \"app\").",2],["try_sudo","Object","classes/Object.html#M000374","(*args)","If a command is given, this will try to execute the given command, as described below. Otherwise, it",2],["ui","Capistrano::CLI::UI::ClassMethods","classes/Capistrano/CLI/UI/ClassMethods.html#M000025","()","Return the object that provides UI-specific methods, such as prompts and more. ",2],["unset","Capistrano::Configuration::Variables","classes/Capistrano/Configuration/Variables.html#M000158","(variable)","Removes any trace of the given variable. ",2],["update","Capistrano::Deploy::SCM::Mercurial","classes/Capistrano/Deploy/SCM/Mercurial.html#M000288","(changeset, destination)","",2],["update_repository_cache","Capistrano::Deploy::Strategy::RemoteCache","classes/Capistrano/Deploy/Strategy/RemoteCache.html#M000361","()","",2],["upload","Capistrano::Configuration::Actions::FileTransfer","classes/Capistrano/Configuration/Actions/FileTransfer.html#M000060","(from, to, options={}, &block)","",2],["variable","Capistrano::Deploy::SCM::Base","classes/Capistrano/Deploy/SCM/Base.html#M000246","(name, default = nil)","A helper for accessing variable values, which takes into consideration the current mode (\"normal\" vs.",2],["verbose","Capistrano::Deploy::SCM::Cvs","classes/Capistrano/Deploy/SCM/Cvs.html#M000272","()","If verbose output is requested, return nil, otherwise return the command-line switch for \"quiet\" (\"-Q\").",2],["verbose","Capistrano::Deploy::SCM::Darcs","classes/Capistrano/Deploy/SCM/Darcs.html#M000271","()","",2],["verbose","Capistrano::Deploy::SCM::Git","classes/Capistrano/Deploy/SCM/Git.html#M000298","()","If verbose output is requested, return nil, otherwise return the command-line switch for \"quiet\" (\"-q\").",2],["verbose","Capistrano::Deploy::SCM::Mercurial","classes/Capistrano/Deploy/SCM/Mercurial.html#M000290","()","verbosity configuration grokking :) ",2],["verbose","Capistrano::Deploy::SCM::Subversion","classes/Capistrano/Deploy/SCM/Subversion.html#M000330","()","If verbose output is requested, return nil, otherwise return the command-line switch for \"quiet\" (\"-q\").",2],["when","Capistrano::Command::Tree","classes/Capistrano/Command/Tree.html#M000052","(condition, command, options={}, &block)","",2],["windows_executable_extensions","Capistrano::Deploy::LocalDependency","classes/Capistrano/Deploy/LocalDependency.html#M000192","()","",2],["with_env","Object","classes/Object.html#M000372","(name, value)","Temporarily sets an environment variable, yields to a block, and restores the value when it is done.",2],["wrap_list","Capistrano::Role","classes/Capistrano/Role.html#M000390","(*list)","Turns a list, or something resembling a list, into a properly-formatted ServerDefinition list. Keep an",2],["wrap_server","Capistrano::Role","classes/Capistrano/Role.html#M000389","(item, options)","Wraps a string in a ServerDefinition, if it isn't already. This and wrap_list should probably go in ServerDefinition",2],["writable","Capistrano::Deploy::RemoteDependency","classes/Capistrano/Deploy/RemoteDependency.html#M000197","(path, options={})","",2],["CHANGELOG","files/CHANGELOG.html","files/CHANGELOG.html","","## 2.11.0 / Febuary 20 2012  This release replaces and fixes a broken 2.10.0 release (see below for information)",3],["README.mdown","files/README_mdown.html","files/README_mdown.html","","## Capistrano  [![Build Status](https://secure.travis-ci.org/capistrano/capistrano.png)](http://travis-ci.org/capistrano/capistrano)",3],["capistrano.rb","files/lib/capistrano_rb.html","files/lib/capistrano_rb.html","","",3],["callback.rb","files/lib/capistrano/callback_rb.html","files/lib/capistrano/callback_rb.html","","",3],["cli.rb","files/lib/capistrano/cli_rb.html","files/lib/capistrano/cli_rb.html","","",3],["execute.rb","files/lib/capistrano/cli/execute_rb.html","files/lib/capistrano/cli/execute_rb.html","","",3],["help.rb","files/lib/capistrano/cli/help_rb.html","files/lib/capistrano/cli/help_rb.html","","",3],["help.txt","files/lib/capistrano/cli/help_txt.html","files/lib/capistrano/cli/help_txt.html","","----------------------------- <%= color('Capistrano', :bold) %> -----------------------------  Capistrano",3],["options.rb","files/lib/capistrano/cli/options_rb.html","files/lib/capistrano/cli/options_rb.html","","",3],["ui.rb","files/lib/capistrano/cli/ui_rb.html","files/lib/capistrano/cli/ui_rb.html","","",3],["command.rb","files/lib/capistrano/command_rb.html","files/lib/capistrano/command_rb.html","","",3],["configuration.rb","files/lib/capistrano/configuration_rb.html","files/lib/capistrano/configuration_rb.html","","",3],["file_transfer.rb","files/lib/capistrano/configuration/actions/file_transfer_rb.html","files/lib/capistrano/configuration/actions/file_transfer_rb.html","","",3],["inspect.rb","files/lib/capistrano/configuration/actions/inspect_rb.html","files/lib/capistrano/configuration/actions/inspect_rb.html","","",3],["invocation.rb","files/lib/capistrano/configuration/actions/invocation_rb.html","files/lib/capistrano/configuration/actions/invocation_rb.html","","",3],["alias_task.rb","files/lib/capistrano/configuration/alias_task_rb.html","files/lib/capistrano/configuration/alias_task_rb.html","","",3],["callbacks.rb","files/lib/capistrano/configuration/callbacks_rb.html","files/lib/capistrano/configuration/callbacks_rb.html","","",3],["connections.rb","files/lib/capistrano/configuration/connections_rb.html","files/lib/capistrano/configuration/connections_rb.html","","",3],["execution.rb","files/lib/capistrano/configuration/execution_rb.html","files/lib/capistrano/configuration/execution_rb.html","","",3],["loading.rb","files/lib/capistrano/configuration/loading_rb.html","files/lib/capistrano/configuration/loading_rb.html","","",3],["namespaces.rb","files/lib/capistrano/configuration/namespaces_rb.html","files/lib/capistrano/configuration/namespaces_rb.html","","",3],["roles.rb","files/lib/capistrano/configuration/roles_rb.html","files/lib/capistrano/configuration/roles_rb.html","","",3],["servers.rb","files/lib/capistrano/configuration/servers_rb.html","files/lib/capistrano/configuration/servers_rb.html","","",3],["variables.rb","files/lib/capistrano/configuration/variables_rb.html","files/lib/capistrano/configuration/variables_rb.html","","",3],["errors.rb","files/lib/capistrano/errors_rb.html","files/lib/capistrano/errors_rb.html","","",3],["multistage.rb","files/lib/capistrano/ext/multistage_rb.html","files/lib/capistrano/ext/multistage_rb.html","","",3],["string.rb","files/lib/capistrano/ext/string_rb.html","files/lib/capistrano/ext/string_rb.html","","",3],["extensions.rb","files/lib/capistrano/extensions_rb.html","files/lib/capistrano/extensions_rb.html","","",3],["fix_rake_deprecated_dsl.rb","files/lib/capistrano/fix_rake_deprecated_dsl_rb.html","files/lib/capistrano/fix_rake_deprecated_dsl_rb.html","","See https://github.com/jimweirich/rake/issues/81 ",3],["logger.rb","files/lib/capistrano/logger_rb.html","files/lib/capistrano/logger_rb.html","","",3],["processable.rb","files/lib/capistrano/processable_rb.html","files/lib/capistrano/processable_rb.html","","",3],["compat.rb","files/lib/capistrano/recipes/compat_rb.html","files/lib/capistrano/recipes/compat_rb.html","","A collection of compatibility scripts, to ease the transition between Capistrano 1.x and Capistrano 2.x.",3],["deploy.rb","files/lib/capistrano/recipes/deploy_rb.html","files/lib/capistrano/recipes/deploy_rb.html","","",3],["assets.rb","files/lib/capistrano/recipes/deploy/assets_rb.html","files/lib/capistrano/recipes/deploy/assets_rb.html","","",3],["dependencies.rb","files/lib/capistrano/recipes/deploy/dependencies_rb.html","files/lib/capistrano/recipes/deploy/dependencies_rb.html","","",3],["local_dependency.rb","files/lib/capistrano/recipes/deploy/local_dependency_rb.html","files/lib/capistrano/recipes/deploy/local_dependency_rb.html","","",3],["remote_dependency.rb","files/lib/capistrano/recipes/deploy/remote_dependency_rb.html","files/lib/capistrano/recipes/deploy/remote_dependency_rb.html","","",3],["scm.rb","files/lib/capistrano/recipes/deploy/scm_rb.html","files/lib/capistrano/recipes/deploy/scm_rb.html","","",3],["accurev.rb","files/lib/capistrano/recipes/deploy/scm/accurev_rb.html","files/lib/capistrano/recipes/deploy/scm/accurev_rb.html","","",3],["base.rb","files/lib/capistrano/recipes/deploy/scm/base_rb.html","files/lib/capistrano/recipes/deploy/scm/base_rb.html","","",3],["bzr.rb","files/lib/capistrano/recipes/deploy/scm/bzr_rb.html","files/lib/capistrano/recipes/deploy/scm/bzr_rb.html","","",3],["cvs.rb","files/lib/capistrano/recipes/deploy/scm/cvs_rb.html","files/lib/capistrano/recipes/deploy/scm/cvs_rb.html","","",3],["darcs.rb","files/lib/capistrano/recipes/deploy/scm/darcs_rb.html","files/lib/capistrano/recipes/deploy/scm/darcs_rb.html","","",3],["git.rb","files/lib/capistrano/recipes/deploy/scm/git_rb.html","files/lib/capistrano/recipes/deploy/scm/git_rb.html","","",3],["mercurial.rb","files/lib/capistrano/recipes/deploy/scm/mercurial_rb.html","files/lib/capistrano/recipes/deploy/scm/mercurial_rb.html","","Copyright 2007 Matthew Elder <sseses@gmail.com> based on work by Tobias Luetke ",3],["none.rb","files/lib/capistrano/recipes/deploy/scm/none_rb.html","files/lib/capistrano/recipes/deploy/scm/none_rb.html","","",3],["perforce.rb","files/lib/capistrano/recipes/deploy/scm/perforce_rb.html","files/lib/capistrano/recipes/deploy/scm/perforce_rb.html","","",3],["subversion.rb","files/lib/capistrano/recipes/deploy/scm/subversion_rb.html","files/lib/capistrano/recipes/deploy/scm/subversion_rb.html","","",3],["strategy.rb","files/lib/capistrano/recipes/deploy/strategy_rb.html","files/lib/capistrano/recipes/deploy/strategy_rb.html","","",3],["base.rb","files/lib/capistrano/recipes/deploy/strategy/base_rb.html","files/lib/capistrano/recipes/deploy/strategy/base_rb.html","","",3],["checkout.rb","files/lib/capistrano/recipes/deploy/strategy/checkout_rb.html","files/lib/capistrano/recipes/deploy/strategy/checkout_rb.html","","",3],["copy.rb","files/lib/capistrano/recipes/deploy/strategy/copy_rb.html","files/lib/capistrano/recipes/deploy/strategy/copy_rb.html","","",3],["export.rb","files/lib/capistrano/recipes/deploy/strategy/export_rb.html","files/lib/capistrano/recipes/deploy/strategy/export_rb.html","","",3],["remote.rb","files/lib/capistrano/recipes/deploy/strategy/remote_rb.html","files/lib/capistrano/recipes/deploy/strategy/remote_rb.html","","",3],["remote_cache.rb","files/lib/capistrano/recipes/deploy/strategy/remote_cache_rb.html","files/lib/capistrano/recipes/deploy/strategy/remote_cache_rb.html","","",3],["maintenance.rhtml","files/lib/capistrano/recipes/deploy/templates/maintenance_rhtml.html","files/lib/capistrano/recipes/deploy/templates/maintenance_rhtml.html",""," <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"        \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">",3],["standard.rb","files/lib/capistrano/recipes/standard_rb.html","files/lib/capistrano/recipes/standard_rb.html","","",3],["maintenance.rhtml","files/lib/capistrano/recipes/templates/maintenance_rhtml.html","files/lib/capistrano/recipes/templates/maintenance_rhtml.html",""," <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"        \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">",3],["role.rb","files/lib/capistrano/role_rb.html","files/lib/capistrano/role_rb.html","","",3],["server_definition.rb","files/lib/capistrano/server_definition_rb.html","files/lib/capistrano/server_definition_rb.html","","",3],["shell.rb","files/lib/capistrano/shell_rb.html","files/lib/capistrano/shell_rb.html","","",3],["ssh.rb","files/lib/capistrano/ssh_rb.html","files/lib/capistrano/ssh_rb.html","","",3],["task_definition.rb","files/lib/capistrano/task_definition_rb.html","files/lib/capistrano/task_definition_rb.html","","",3],["transfer.rb","files/lib/capistrano/transfer_rb.html","files/lib/capistrano/transfer_rb.html","","",3],["version.rb","files/lib/capistrano/version_rb.html","files/lib/capistrano/version_rb.html","","",3]],"searchIndex":["capistrano","cli","execute","classmethods","help","options","classmethods","ui","classmethods","callback","command","tree","branch","conditionbranch","evaluator","configuration","actions","filetransfer","inspect","invocation","classmethods","aliastask","callbacks","connections","execution","loading","classmethods","namespaces","namespace","roles","servers","variables","deploy","dependencies","localdependency","remotedependency","scm","accurev","internalrevision","base","localproxy","bzr","cvs","darcs","git","mercurial","none","perforce","subversion","strategy","base","checkout","copy","export","remote","remotecache","proccallback","processable","sessionassociation","remoteerror","role","dynamicserverlist","ssh","serverdefinition","shell","taskcallback","taskdefinition","transfer","sftptransferwrapper","version","object","string","<<()","<=>()","==()","==()","[]()","[]()","[]=()","[]=()","_cset()","abort!()","active?()","active?()","add_default_command_options()","after()","alias_task()","all_methods()","applies_to?()","applies_to?()","arguments()","authentication()","authentication()","before()","branches_for()","brief_description()","build()","build_list()","call()","call()","capture()","change_or_create_stream()","check()","check!()","check!()","check!()","check!()","checkout()","checkout()","checkout()","checkout()","checkout()","checkout()","checkout()","checkout()","checkout()","clear()","clone()","coerce_variable()","coerce_variable_types!()","command()","command()","command()","command()","command()","command()","command()","command()","compact()","compress()","compression()","connect()","connect()","connect!()","connection_factory()","connection_strategy()","continue_execution()","continue_execution_for_branch()","continue_on_error?()","copy_cache()","copy_dir()","copy_exclude()","copy_exclude()","copy_repository_cache()","copy_strategy()","current_feature()","current_feature=()","current_task()","cvs_destination()","cvs_revision()","cvs_root()","deb()","debug_prompt()","decompress()","default_command()","default_command()","default_task()","default_user()","define_task()","depend()","deploy!()","deploy!()","deploy!()","deploy!()","depot()","desc()","description()","destination()","diff()","diff()","diff()","diff()","diff()","diff()","diff()","diff()","diff()","directory()","distribute!()","download()","dynamic_servers()","each()","each()","each()","else()","empty?()","ensure_each_session()","environment()","eql?()","establish_connection_to()","establish_connections_to()","exec()","exec_command()","exec_tasks()","execute()","execute!()","execute_on_servers()","execute_requested_actions()","execute_requested_actions_with_help()","execute_task()","exists?()","export()","export()","export()","export()","export()","export()","export()","export()","export()","failed!()","fetch()","file()","filename()","filter_server_list()","find_and_execute_task()","find_file_in_load_path()","find_in_path()","find_servers()","find_servers_for_task()","find_task()","fully_qualified_name()","fully_qualified_name()","gem()","get()","handle_data()","handle_data()","handle_data()","handle_data()","handle_data()","handle_data()","handle_error()","has_failed?()","hash()","head()","head()","head()","head()","head()","head()","head()","head()","head()","head()","help()","in?()","include?()","included()","instance()","instance=()","invoke_command()","invoke_task_directly()","last?()","load()","load_from_file()","local()","local()","local?()","log()","log()","log()","log()","log()","log()","log()","log()","log()","logger()","logger()","logger()","mark()","match()","match()","match()","message()","method_missing()","method_missing()","method_missing()","method_missing()","name=()","namespace()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","next_description()","next_revision()","next_revision()","next_revision()","next_revision()","normalize()","on()","on()","on_rollback()","on_windows?()","open_channels()","operation()","or()","or()","origin()","p4_sync()","p4client()","p4client_root()","p4passwd()","p4port()","p4sync_flags()","p4user()","parallel()","parse()","parse()","pass?()","pass?()","pass?()","password_prompt()","plugin()","pop_task_call_frame()","prep_destination()","prepare_scp_transfer()","prepare_sftp_transfer()","prepare_transfers()","process()","process()","process!()","process!()","process_command()","process_iteration()","protect()","psuedo_revision?()","pull()","push()","push_task_call_frame()","put()","query_revision()","query_revision()","query_revision()","query_revision()","query_revision()","query_revision()","query_revision()","query_revision()","query_revision()","query_revision()","read_and_execute()","read_line()","reader()","recipes_per_feature()","remember_load()","remote()","remote_dir()","remote_filename()","remove_plugin()","replace_placeholders()","repository()","repository_cache()","request_pty_if_necessary()","reset!()","reset!()","respond_to?()","result()","rev_no()","revision()","revision_type()","revswitch()","role()","role()","role_list_from()","role_names_for_host()","rollback!()","rollback_requests()","rollback_requests=()","run()","run()","run!()","run_locally()","safely_establish_connection_to()","sanitized_from()","sanitized_to()","scm()","scm_password_or_prompt()","scm_password_prompt()","scm_quiet()","scm_run()","search_task()","server()","server_list_from()","servers()","session_map()","sessions()","sessions()","set()","set_option()","setup()","show_streams_for()","skip!()","skip?()","stop!()","stream()","stream()","subdir()","sudo()","sudo_prompt()","sync()","sync()","sync()","sync()","sync()","sync()","sync()","sync()","system()","task()","task_call_frames()","task_list()","teardown_connections_to()","to_ary()","to_ary()","to_match()","to_s()","to_s()","to_s()","to_s()","to_s()","top()","transaction()","transaction?()","transfer()","trigger()","try()","try_runner()","try_sudo()","ui()","unset()","update()","update_repository_cache()","upload()","variable()","verbose()","verbose()","verbose()","verbose()","verbose()","when()","windows_executable_extensions()","with_env()","wrap_list()","wrap_server()","writable()","changelog","readme.mdown","capistrano.rb","callback.rb","cli.rb","execute.rb","help.rb","help.txt","options.rb","ui.rb","command.rb","configuration.rb","file_transfer.rb","inspect.rb","invocation.rb","alias_task.rb","callbacks.rb","connections.rb","execution.rb","loading.rb","namespaces.rb","roles.rb","servers.rb","variables.rb","errors.rb","multistage.rb","string.rb","extensions.rb","fix_rake_deprecated_dsl.rb","logger.rb","processable.rb","compat.rb","deploy.rb","assets.rb","dependencies.rb","local_dependency.rb","remote_dependency.rb","scm.rb","accurev.rb","base.rb","bzr.rb","cvs.rb","darcs.rb","git.rb","mercurial.rb","none.rb","perforce.rb","subversion.rb","strategy.rb","base.rb","checkout.rb","copy.rb","export.rb","remote.rb","remote_cache.rb","maintenance.rhtml","standard.rb","maintenance.rhtml","role.rb","server_definition.rb","shell.rb","ssh.rb","task_definition.rb","transfer.rb","version.rb"]}}