var search_data = {"index":{"longSearchIndex":["lib/text/format.rb","text","text::format","text::format","text::format","text::format","text::format","text::format::alpha","text::format::number","text::format::roman","text::format","text::format","text::format","text::format","text::format","text::format","text::format","text::format","text::format","text::format","text::format","text::format::alpha","text::format::number","text::format::roman","text::format::splitword","text::format","text::format","text::format","text::format","text::format","files/changelog.html","files/install.html","files/readme.html","files/todo.html","files/lib/text/format_rb.html","files/lib/text/format/alpha_rb.html","files/lib/text/format/number_rb.html","files/lib/text/format/roman_rb.html"],"info":[["Text","lib/text/format.rb","classes/Text.html"," < ","",1],["Format","Text","classes/Text/Format.html"," < Object","= Introduction Text::Format provides the ability to nicely format fixed-width text with knowledge of",1],["Alpha","Text::Format","classes/Text/Format/Alpha.html"," < Object","Provides a numbering object that will produce letters. Accepts four options for numbering that will control",1],["Number","Text::Format","classes/Text/Format/Number.html"," < Object","Provides a numbering object that will produce numbers. Accepts three parameters for numbering that will",1],["Roman","Text::Format","classes/Text/Format/Roman.html"," < Object","Provides a numbering object that will produce numbers. Accepts three parameters for numbering that will",1],["SplitWord","Text::Format","classes/Text/Format/SplitWord.html"," < Object","Words forcibly split by Text::Format will be stored as split words. This class represents a word forcibly",1],["==","Text::Format","classes/Text/Format.html#M000008","(o)","Compares the formatting rules, excepting #hyphenator, of two Text::Format objects. Generated results",2],["[]","Text::Format::Alpha","classes/Text/Format/Alpha.html#M000002","(index)","",2],["[]","Text::Format::Number","classes/Text/Format/Number.html#M000000","(index)","",2],["[]","Text::Format::Roman","classes/Text/Format/Roman.html#M000004","(index)","",2],["__add_extra_space?","Text::Format","classes/Text/Format.html#M000030","(word)","Return +true+ if the word may have an extra space added after it. This will only be the case if #extra_space",2],["__sentence_end_re","Text::Format","classes/Text/Format.html#M000007","()","This method returns the regular expression used to detect the end of a sentence under the current definition",2],["__wrap_line","Text::Format","classes/Text/Format.html#M000033","(line, next_word)","The line must be broken. Typically, this is done by moving the last word on the current line to the next",2],["center","Text::Format","classes/Text/Format.html#M000027","(to_center = nil)","Centers the text, preserving empty lines and tabs. ",2],["expand","Text::Format","classes/Text/Format.html#M000028","(to_expand = nil)","Replaces all tab characters in the text with #tabstop spaces. ",2],["format","Text::Format","classes/Text/Format.html#M000025","(text = nil)","Alias for #format_one_paragraph",2],["format_one_paragraph","Text::Format","classes/Text/Format.html#M000024","(text = nil)","Formats text into a nice paragraph format. The text is separated into words and then reassembled a word",2],["hyphenate_to","Text::Format","classes/Text/Format.html#M000022","(word, size)","The formatting object itself can be used as a #hyphenator, where the default implementation of #hyphenate_to",2],["justify?","Text::Format","classes/Text/Format.html#M000021","()","Indicates that the format style is full justification. *Default*::       +false+ <b>Used in</b>::  #format,",2],["left_align?","Text::Format","classes/Text/Format.html#M000018","()","Indicates that the format style is left alignment. *Default*::       +true+ <b>Used in</b>::  #format,",2],["new","Text::Format","classes/Text/Format.html#M000034","(options = {})","Create a Text::Format object. Accepts an optional hash of construction options (this will be changed",2],["new","Text::Format::Alpha","classes/Text/Format/Alpha.html#M000003","(options = {})","",2],["new","Text::Format::Number","classes/Text/Format/Number.html#M000001","(options = {})","",2],["new","Text::Format::Roman","classes/Text/Format/Roman.html#M000005","(options = {})","",2],["new","Text::Format::SplitWord","classes/Text/Format/SplitWord.html#M000006","(word, first, rest)","",2],["paragraphs","Text::Format","classes/Text/Format.html#M000026","(to_wrap = nil, split_on = /(#{$/}){2}/o)","Considers each element of text (provided or internal) as a paragraph. If #first_indent is the same as",2],["right_align?","Text::Format","classes/Text/Format.html#M000019","()","Indicates that the format style is right alignment. *Default*::       +false+ <b>Used in</b>::  #format,",2],["right_fill?","Text::Format","classes/Text/Format.html#M000020","()","Indicates that the format style is right fill. *Default*::       +false+ <b>Used in</b>::  #format, #paragraphs",2],["split_word_to","Text::Format","classes/Text/Format.html#M000023","(word, size)","Splits the provided word so that it is in two parts, <tt>word[0 .. (size - 1)]</tt> and <tt>word[size",2],["unexpand","Text::Format","classes/Text/Format.html#M000029","(to_unexpand = nil)","Replaces all occurrences of #tabstop consecutive spaces with a tab character. ",2],["Changelog","files/Changelog.html","files/Changelog.html","","== Text::Format 1.0.0 * Changed installer: added a .gem package. * Changed installer: moving to a variant",3],["Install","files/Install.html","files/Install.html","","Installing this package is as simple as:  % ruby setup.rb  Alternatively, you can use the RubyGem version",3],["README","files/README.html","files/README.html","","Text::Format 1.0.0 ================== Text::Format is provides the ability to nicely format fixed-width",3],["ToDo","files/ToDo.html","files/ToDo.html","","Text::Format To Do ================== * Margin markers: the ability to place markers in the margin when",3],["format.rb","files/lib/text/format_rb.html","files/lib/text/format_rb.html",""," ",3],["alpha.rb","files/lib/text/format/alpha_rb.html","files/lib/text/format/alpha_rb.html","","Provides a numbering object that will produce letters. Accepts four options for numbering that will control",3],["number.rb","files/lib/text/format/number_rb.html","files/lib/text/format/number_rb.html","","Provides a numbering object that will produce numbers. Accepts three parameters for numbering that will",3],["roman.rb","files/lib/text/format/roman_rb.html","files/lib/text/format/roman_rb.html","","Provides a numbering object that will produce numbers. Accepts three parameters for numbering that will",3]],"searchIndex":["text","format","alpha","number","roman","splitword","==()","[]()","[]()","[]()","__add_extra_space?()","__sentence_end_re()","__wrap_line()","center()","expand()","format()","format_one_paragraph()","hyphenate_to()","justify?()","left_align?()","new()","new()","new()","new()","new()","paragraphs()","right_align?()","right_fill?()","split_word_to()","unexpand()","changelog","install","readme","todo","format.rb","alpha.rb","number.rb","roman.rb"]}}