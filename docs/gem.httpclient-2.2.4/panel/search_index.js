var search_data = {"index":{"info":[["HTTP","lib/httpclient/http.rb","classes/HTTP.html"," < ","A namespace module for HTTP Message definitions used by HTTPClient. ",1],["Message","HTTP","classes/HTTP/Message.html"," < Object","Represents a HTTP message.  A message is for a request or a response. Request message is generated from",1],["Body","HTTP::Message","classes/HTTP/Message/Body.html"," < Object","Represents HTTP message body. ",1],["Parts","HTTP::Message::Body","classes/HTTP/Message/Body/Parts.html"," < Object","",1],["Headers","HTTP::Message","classes/HTTP/Message/Headers.html"," < Object","Represents HTTP message header. ",1],["Status","HTTP","classes/HTTP/Status.html"," < ","Represents HTTP response status code.  Defines constants for HTTP response and some conditional methods.",1],["HTTPAccess2","lib/http-access2.rb","classes/HTTPAccess2.html"," < ","",1],["Client","HTTPAccess2","classes/HTTPAccess2/Client.html"," < ::HTTPClient","",1],["RetryableResponse","HTTPAccess2::Client","classes/HTTPAccess2/Client/RetryableResponse.html"," < StandardError","",1],["Session","HTTPAccess2","classes/HTTPAccess2/Session.html"," < ::HTTPClient::Session","",1],["BadResponse","HTTPAccess2::Session","classes/HTTPAccess2/Session/BadResponse.html"," < Error","",1],["Error","HTTPAccess2::Session","classes/HTTPAccess2/Session/Error.html"," < StandardError","",1],["InvalidState","HTTPAccess2::Session","classes/HTTPAccess2/Session/InvalidState.html"," < Error","",1],["KeepAliveDisconnected","HTTPAccess2::Session","classes/HTTPAccess2/Session/KeepAliveDisconnected.html"," < Error","",1],["HTTPClient","lib/httpclient/auth.rb","classes/HTTPClient.html"," < Object","The HTTPClient class provides several methods for accessing Web resources via HTTP. HTTPClient instance",1],["AuthFilterBase","HTTPClient","classes/HTTPClient/AuthFilterBase.html"," < Object","Common abstract class for authentication filter. There are 2 authentication filters. WWWAuth:: Authentication",1],["BadResponseError","HTTPClient","classes/HTTPClient/BadResponseError.html"," < RuntimeError","Raised for indicating HTTP response error. ",1],["BasicAuth","HTTPClient","classes/HTTPClient/BasicAuth.html"," < Object","Authentication filter for handling BasicAuth negotiation. Used in WWWAuth and ProxyAuth. ",1],["ConfigurationError","HTTPClient","classes/HTTPClient/ConfigurationError.html"," < StandardError","Raised for indicating running environment configuration error for example accessing via SSL under the",1],["ConnectTimeoutError","HTTPClient","classes/HTTPClient/ConnectTimeoutError.html"," < TimeoutError","Raised for indicating a connection timeout error. You can configure connection timeout via HTTPClient#connect_timeout=.",1],["Connection","HTTPClient","classes/HTTPClient/Connection.html"," < Object","Represents a HTTP response to an asynchronous request.  Async methods of HTTPClient such as get_async,",1],["DebugSocket","HTTPClient","classes/HTTPClient/DebugSocket.html"," < ","Module for intercepting Socket methods and dumps in/out to given debugging device.  debug_dev must respond",1],["DigestAuth","HTTPClient","classes/HTTPClient/DigestAuth.html"," < Object","Authentication filter for handling DigestAuth negotiation. Used in WWWAuth. ",1],["LoopBackSocket","HTTPClient","classes/HTTPClient/LoopBackSocket.html"," < Object","Dummy Socket for emulating loopback test. ",1],["NegotiateAuth","HTTPClient","classes/HTTPClient/NegotiateAuth.html"," < Object","Authentication filter for handling Negotiate/NTLM negotiation. Used in WWWAuth and ProxyAuth. NegotiateAuth",1],["OAuth","HTTPClient","classes/HTTPClient/OAuth.html"," < Object","Authentication filter for handling OAuth negotiation. Used in WWWAuth. CAUTION: This impl only support",1],["Config","HTTPClient::OAuth","classes/HTTPClient/OAuth/Config.html"," < Object","",1],["ProxyAuth","HTTPClient","classes/HTTPClient/ProxyAuth.html"," < AuthFilterBase","Authentication filter for handling authentication negotiation between Proxy server.  Parses 'Proxy-Authentication'",1],["ReceiveTimeoutError","HTTPClient","classes/HTTPClient/ReceiveTimeoutError.html"," < TimeoutError","Raised for indicating a response receiving timeout error. You can configure response receiving timeout",1],["SSLConfig","HTTPClient","classes/HTTPClient/SSLConfig.html"," < Object","Represents SSL configuration for HTTPClient instance. The implementation depends on OpenSSL. == Trust",1],["SSLSocketWrap","HTTPClient","classes/HTTPClient/SSLSocketWrap.html"," < Object","Wraps up OpenSSL::SSL::SSLSocket and offers debugging features. ",1],["SSPINegotiateAuth","HTTPClient","classes/HTTPClient/SSPINegotiateAuth.html"," < Object","Authentication filter for handling Negotiate/NTLM negotiation. Used in ProxyAuth. SSPINegotiateAuth depends",1],["SendTimeoutError","HTTPClient","classes/HTTPClient/SendTimeoutError.html"," < TimeoutError","Raised for indicating a request sending timeout error. You can configure request sending timeout via",1],["Session","HTTPClient","classes/HTTPClient/Session.html"," < Object","Deprecated.  just for backward compatibility ",1],["SessionManager","HTTPClient","classes/HTTPClient/SessionManager.html"," < Object","Manages sessions for a HTTPClient instance. ",1],["Site","HTTPClient","classes/HTTPClient/Site.html"," < Object","Represents a Site: protocol scheme, host String and port Number. ",1],["SocketWrap","HTTPClient","classes/HTTPClient/SocketWrap.html"," < ","Wraps up a Socket for method interception. ",1],["Timeout","HTTPClient","classes/HTTPClient/Timeout.html"," < ","",1],["TimeoutError","HTTPClient","classes/HTTPClient/TimeoutError.html"," < RuntimeError","Raised for indicating a timeout error. ",1],["TimeoutScheduler","HTTPClient","classes/HTTPClient/TimeoutScheduler.html"," < Object","",1],["Period","HTTPClient::TimeoutScheduler","classes/HTTPClient/TimeoutScheduler/Period.html"," < Object","Represents timeout period. ",1],["Util","HTTPClient","classes/HTTPClient/Util.html"," < ","A module for common function. ",1],["WWWAuth","HTTPClient","classes/HTTPClient/WWWAuth.html"," < AuthFilterBase","Authentication filter for handling authentication negotiation between Web server.  Parses 'WWW-Authentication'",1],["HexDump","lib/hexdump.rb","classes/HexDump.html"," < ","This was written by Arai-san and published at http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-list/31987",1],["OAuthClient","lib/oauthclient.rb","classes/OAuthClient.html"," < HTTPClient","OAuthClient provides OAuth related methods in addition to HTTPClient. See sample/ dir how to use OAuthClient.",1],["String","lib/httpclient/util.rb","classes/String.html"," < Object","",1],["WebAgent","lib/httpclient/cookie.rb","classes/WebAgent.html"," < Object","",1],["Cookie","WebAgent","classes/WebAgent/Cookie.html"," < Object","",1],["CookieManager","WebAgent","classes/WebAgent/CookieManager.html"," < Object","",1],["Error","WebAgent::CookieManager","classes/WebAgent/CookieManager/Error.html"," < StandardError","errors ",1],["ErrorOverrideOK","WebAgent::CookieManager","classes/WebAgent/CookieManager/ErrorOverrideOK.html"," < Error","",1],["SpecialError","WebAgent::CookieManager","classes/WebAgent/CookieManager/SpecialError.html"," < Error","",1],["CookieUtils","WebAgent","classes/WebAgent/CookieUtils.html"," < ","",1],["<<","HTTPClient::DebugSocket","classes/HTTPClient/DebugSocket.html#M000229","(str)","",2],["<<","HTTPClient::LoopBackSocket","classes/HTTPClient/LoopBackSocket.html#M000240","(str)","",2],["<<","HTTPClient::SSLSocketWrap","classes/HTTPClient/SSLSocketWrap.html#M000189","(str)","",2],["<<","HTTPClient::SocketWrap","classes/HTTPClient/SocketWrap.html#M000208","(str)","",2],["==","HTTPClient::Site","classes/HTTPClient/Site.html#M000137","(rhs)","Returns true is scheme, host and port are '==' ",2],["[]","HTTP::Message::Headers","classes/HTTP/Message/Headers.html#M000115","(key)","Returns an Array of header values for the given key. ",2],["[]=","HTTP::Message::Headers","classes/HTTP/Message/Headers.html#M000113","(key, value)","Adds a header.  See set. ",2],["add","HTTP::Message::Body::Parts","classes/HTTP/Message/Body/Parts.html#M000148","(part)","",2],["add","HTTP::Message::Headers","classes/HTTP/Message/Headers.html#M000108","(key, value)","Adds a header.  Addition order is preserved. ",2],["add","WebAgent::CookieManager","classes/WebAgent/CookieManager.html#M000093","(cookie)","",2],["add_cached_session","HTTPClient::SessionManager","classes/HTTPClient/SessionManager.html#M000171","(sess)","",2],["add_crl","HTTPClient::SSLConfig","classes/HTTPClient/SSLConfig.html#M000266","(crl)","Adds CRL for verification. crl:: a OpenSSL::X509::CRL or a filename of a PEM/DER formatted OpenSSL::X509::CRL.",2],["add_trust_ca","HTTPClient::SSLConfig","classes/HTTPClient/SSLConfig.html#M000262","(trust_ca_file_or_hashed_dir)","Sets trust anchor certificate(s) for verification. trust_ca_file_or_hashed_dir:: a filename of a PEM/DER",2],["add_trust_ca_to_store","HTTPClient::SSLConfig","classes/HTTPClient/SSLConfig.html#M000264","(cert_store, trust_ca_file_or_hashed_dir)","",2],["addr","HTTPClient::Site","classes/HTTPClient/Site.html#M000136","()","Returns address String. ",2],["all","HTTP::Message::Headers","classes/HTTP/Message/Headers.html#M000111","()","Returns an Array of all headers. ",2],["argument_to_hash","HTTPClient::Util","classes/HTTPClient/Util.html#M000291","(args, *field)","Keyword argument to hash helper. args:: given arguments. *field:: a list of arguments to be extracted.",2],["attr_proxy","HTTPClient","classes/HTTPClient.html#M000311","(symbol, assignable = false)","",2],["body","HTTP::Message","classes/HTTP/Message.html#M000237","()","Alias for #content",2],["body","HTTPClient","classes/HTTPClient.html#M000314","()","",2],["body=","HTTP::Message","classes/HTTP/Message.html#M000211","(body)","Alias for #http_body=",2],["body_encoding","HTTP::Message","classes/HTTP/Message.html#M000235","()","Returns content encoding ",2],["body_size=","HTTP::Message::Headers","classes/HTTP/Message/Headers.html#M000105","(body_size)","Sets byte size of message body. body_size == nil means that the body is_a? IO ",2],["build_query_multipart_str","HTTP::Message::Body","classes/HTTP/Message/Body.html#M000151","(query, boundary)","",2],["calc_cred","HTTPClient::DigestAuth","classes/HTTPClient/DigestAuth.html#M000025","(req, user, passwd, param)","this method is implemented by sromano and posted to http://tools.assembla.com/breakout/wiki/DigestForSoap",2],["calc_cred","HTTPClient::OAuth","classes/HTTPClient/OAuth.html#M000051","(req, config)","",2],["cancel","HTTPClient::TimeoutScheduler","classes/HTTPClient/TimeoutScheduler.html#M000297","(period)","Cancels the given period. ",2],["cancel","HTTPClient::TimeoutScheduler::Period","classes/HTTPClient/TimeoutScheduler/Period.html#M000292","()","Cancel this Period.  Mutex is needed to avoid too-late exception. ",2],["cert_store=","HTTPClient::SSLConfig","classes/HTTPClient/SSLConfig.html#M000261","(cert_store)","Sets new certificate store (OpenSSL::X509::Store). don't use if you don't know what it is. Calling this",2],["challenge","HTTPClient::BasicAuth","classes/HTTPClient/BasicAuth.html#M000018","(uri, param_str = nil)","Challenge handler: remember URL for response. ",2],["challenge","HTTPClient::DigestAuth","classes/HTTPClient/DigestAuth.html#M000024","(uri, param_str)","Challenge handler: remember URL and challenge token for response. ",2],["challenge","HTTPClient::NegotiateAuth","classes/HTTPClient/NegotiateAuth.html#M000033","(uri, param_str)","Challenge handler: remember URL and challenge token for response. ",2],["challenge","HTTPClient::OAuth","classes/HTTPClient/OAuth.html#M000050","(uri, param_str = nil)","Challenge handler: remember URL for response. ",2],["challenge","HTTPClient::SSPINegotiateAuth","classes/HTTPClient/SSPINegotiateAuth.html#M000039","(uri, param_str)","Challenge handler: remember URL and challenge token for response. ",2],["change_notify","HTTPClient::SSLConfig","classes/HTTPClient/SSLConfig.html#M000286","()","",2],["charset_label","HTTP::Message::Headers","classes/HTTP/Message/Headers.html#M000124","()","",2],["check_cookie_accept_domain","WebAgent::CookieManager","classes/WebAgent/CookieManager.html#M000114","(domain)","",2],["check_expired_cookies","WebAgent::CookieManager","classes/WebAgent/CookieManager.html#M000086","()","",2],["check_mask","HTTPClient::SSLSocketWrap","classes/HTTPClient/SSLSocketWrap.html#M000195","(value, mask)","",2],["ciphers=","HTTPClient::SSLConfig","classes/HTTPClient/SSLConfig.html#M000275","(ciphers)","Sets cipher configuration.  New value must be a String. Calling this method resets all existing sessions.",2],["clear_cert_store","HTTPClient::SSLConfig","classes/HTTPClient/SSLConfig.html#M000258","()","Drops current certificate store (OpenSSL::X509::Store) for SSL and create new one for the next session.",2],["client_cert=","HTTPClient::SSLConfig","classes/HTTPClient/SSLConfig.html#M000255","(client_cert)","Sets certificate (OpenSSL::X509::Certificate) for SSL client authentication. client_key and client_cert",2],["client_key=","HTTPClient::SSLConfig","classes/HTTPClient/SSLConfig.html#M000256","(client_key)","Sets private key (OpenSSL::PKey::PKey) for SSL client authentication. client_key and client_cert must",2],["close","HTTPClient::DebugSocket","classes/HTTPClient/DebugSocket.html#M000219","()","",2],["close","HTTPClient::SSLSocketWrap","classes/HTTPClient/SSLSocketWrap.html#M000181","()","",2],["close","HTTPClient::Session","classes/HTTPClient/Session.html#M000244","()","",2],["close","HTTPClient::SessionManager","classes/HTTPClient/SessionManager.html#M000163","(dest)","This method might not work as you expected... ",2],["close","HTTPClient::SocketWrap","classes/HTTPClient/SocketWrap.html#M000200","()","",2],["close_all","HTTPClient::SessionManager","classes/HTTPClient/SessionManager.html#M000161","()","",2],["closed?","HTTPClient::SSLSocketWrap","classes/HTTPClient/SSLSocketWrap.html#M000182","()","",2],["closed?","HTTPClient::Session","classes/HTTPClient/Session.html#M000245","()","",2],["closed?","HTTPClient::SocketWrap","classes/HTTPClient/SocketWrap.html#M000201","()","",2],["code","HTTP::Message","classes/HTTP/Message.html#M000223","()","Alias for #status",2],["connect","HTTPClient::Session","classes/HTTPClient/Session.html#M000252","()","Connect to the server ",2],["connect_ssl_proxy","HTTPClient::Session","classes/HTTPClient/Session.html#M000260","(socket, uri)","",2],["content","HTTP::Message","classes/HTTP/Message.html#M000236","()","Returns a content of message body.  A String or an IO. ",2],["content","HTTP::Message::Body","classes/HTTP/Message/Body.html#M000130","()","Returns a message body itself. ",2],["content_type","HTTP::Message","classes/HTTP/Message.html#M000231","()","Returns 'Content-Type' header value. ",2],["content_type","HTTP::Message::Headers","classes/HTTP/Message/Headers.html#M000099","()","Returns 'Content-Type' header value. ",2],["content_type=","HTTP::Message","classes/HTTP/Message.html#M000232","(content_type)","Sets 'Content-Type' header value.  Overrides if already exists. ",2],["content_type=","HTTP::Message::Headers","classes/HTTP/Message/Headers.html#M000100","(content_type)","Sets 'Content-Type' header value.  Overrides if already exists. ",2],["contenttype","HTTP::Message","classes/HTTP/Message.html#M000233","()","Alias for #content_type",2],["contenttype","HTTP::Message::Headers","classes/HTTP/Message/Headers.html#M000101","()","Alias for #content_type",2],["contenttype=","HTTP::Message","classes/HTTP/Message.html#M000234","(content_type)","Alias for #content_type=",2],["contenttype=","HTTP::Message::Headers","classes/HTTP/Message/Headers.html#M000102","(content_type)","Alias for #content_type=",2],["cookie_error","WebAgent::CookieManager","classes/WebAgent/CookieManager.html#M000092","(err, override)","not tested well; used only netscape_rule = true. ",2],["cookies","HTTP::Message","classes/HTTP/Message.html#M000241","()","Extracts cookies from 'Set-Cookie' header. Supports 'Set-Cookie' in response header only. Do we need",2],["cookies","HTTPClient","classes/HTTPClient.html#M000327","()","Returns stored cookies. ",2],["cookies=","WebAgent::CookieManager","classes/WebAgent/CookieManager.html#M000082","(cookies)","",2],["create_base_string","HTTPClient::OAuth","classes/HTTPClient/OAuth.html#M000056","(config, header, req)","",2],["create_boundary","HTTPClient","classes/HTTPClient.html#M000362","()","",2],["create_openssl_socket","HTTPClient::SSLSocketWrap","classes/HTTPClient/SSLSocketWrap.html#M000196","(socket)","",2],["create_query_part","HTTP::Message::Headers","classes/HTTP/Message/Headers.html#M000118","()","",2],["create_query_uri","HTTP::Message::Headers","classes/HTTP/Message/Headers.html#M000117","()","",2],["create_request","HTTPClient","classes/HTTPClient.html#M000361","(method, uri, query, body, header)","",2],["create_socket","HTTPClient::Session","classes/HTTPClient/Session.html#M000254","(site)","",2],["create_ssl_socket","HTTPClient::Session","classes/HTTPClient/Session.html#M000259","(raw_socket)","wrap socket with OpenSSL. ",2],["debug","HTTPClient::DebugSocket","classes/HTTPClient/DebugSocket.html#M000230","(str)","",2],["debug","HTTPClient::SSLSocketWrap","classes/HTTPClient/SSLSocketWrap.html#M000198","(str)","",2],["debug_dev","HTTPClient","classes/HTTPClient.html#M000316","()","Returns debug device if exists.  See debug_dev=. ",2],["debug_dev=","HTTPClient","classes/HTTPClient.html#M000317","(dev)","Sets debug device.  Once debug device is set, all HTTP requests and responses are dumped to given device.",2],["debug_dev=","HTTPClient::DebugSocket","classes/HTTPClient/DebugSocket.html#M000218","(debug_dev)","",2],["default_redirect_uri_callback","HTTPClient","classes/HTTPClient.html#M000332","(uri, res)","A default method for redirect uri callback.  This method is used by HTTPClient instance by default. This",2],["default_verify_callback","HTTPClient::SSLConfig","classes/HTTPClient/SSLConfig.html#M000281","(is_ok, ctx)","Default callback for verification: only dumps error. ",2],["delete","HTTP::Message::Headers","classes/HTTP/Message/Headers.html#M000112","(key)","Deletes headers of the given key. ",2],["delete","HTTPClient","classes/HTTPClient.html#M000337","(uri, *args, &block)","Sends DELETE request to the specified URL.  See request for arguments. ",2],["delete_async","HTTPClient","classes/HTTPClient.html#M000347","(uri, *args)","Sends DELETE request in async style.  See request_async for arguments. It immediately returns a HTTPClient::Connection",2],["discard?","WebAgent::Cookie","classes/WebAgent/Cookie.html#M000068","()","",2],["do_get_block","HTTPClient","classes/HTTPClient.html#M000366","(req, proxy, conn, &block)","!! CAUTION !! Method 'do_get*' runs under MT conditon. Be careful to change. ",2],["do_get_header","HTTPClient","classes/HTTPClient.html#M000368","(req, res, sess)","",2],["do_get_stream","HTTPClient","classes/HTTPClient.html#M000367","(req, proxy, conn)","",2],["do_request","HTTPClient","classes/HTTPClient.html#M000355","(method, uri, query, body, header, &block)","",2],["do_request_async","HTTPClient","classes/HTTPClient.html#M000356","(method, uri, query, body, header)","",2],["domain_match","WebAgent::CookieUtils","classes/WebAgent/CookieUtils.html#M000065","(host, domain)","",2],["domain_orig?","WebAgent::Cookie","classes/WebAgent/Cookie.html#M000072","()","",2],["dump","HTTP::Message","classes/HTTP/Message.html#M000203","(dev = '')","Dumps message (header and body) to given dev. dev needs to respond to <<. ",2],["dump","HTTP::Message::Body","classes/HTTP/Message/Body.html#M000128","(header = '', dev = '')","Dumps message body to given dev. dev needs to respond to <<. Message header must be given as the first",2],["dump","HTTP::Message::Headers","classes/HTTP/Message/Headers.html#M000106","()","Dumps message header part and returns a dumped String. ",2],["dump_chunk","HTTP::Message::Body","classes/HTTP/Message/Body.html#M000141","(str)","",2],["dump_chunk_size","HTTP::Message::Body","classes/HTTP/Message/Body.html#M000143","(size)","",2],["dump_chunked","HTTP::Message::Body","classes/HTTP/Message/Body.html#M000129","(header = '', dev = '')","Dumps message body with chunked encoding to given dev. dev needs to respond to <<. Message header must",2],["dump_chunks","HTTP::Message::Body","classes/HTTP/Message/Body.html#M000140","(io, dev)","",2],["dump_dummy_request_response","HTTPClient","classes/HTTPClient.html#M000369","(req, res)","",2],["dump_file","HTTP::Message::Body","classes/HTTP/Message/Body.html#M000135","(io, dev)","",2],["dump_last_chunk","HTTP::Message::Body","classes/HTTP/Message/Body.html#M000142","()","",2],["encode","HexDump","classes/HexDump.html#M000000","(str)","",2],["encode","HexDump","classes/HexDump.html#M000000","(str)","",2],["encode_header","HTTPClient::OAuth","classes/HTTPClient/OAuth.html#M000053","(k, v)","",2],["encode_param","HTTPClient::OAuth","classes/HTTPClient/OAuth.html#M000054","(params)","",2],["eof?","HTTPClient::SSLSocketWrap","classes/HTTPClient/SSLSocketWrap.html#M000183","()","",2],["eof?","HTTPClient::Session","classes/HTTPClient/Session.html#M000249","()","",2],["eof?","HTTPClient::SocketWrap","classes/HTTPClient/SocketWrap.html#M000204","()","",2],["eql?","HTTPClient::Site","classes/HTTPClient/Site.html#M000138","(rhs)","Same as ==. ",2],["escape","HTTPClient::OAuth","classes/HTTPClient/OAuth.html#M000042","(str)","",2],["file?","HTTP::Message","classes/HTTP/Message.html#M000178","(obj)","Returns true if the given object is a File.  In HTTPClient, a file is; * must respond to :read for retrieving",2],["file_in_form_data?","HTTPClient","classes/HTTPClient.html#M000363","(body)","",2],["filter_request","HTTPClient::ProxyAuth","classes/HTTPClient/ProxyAuth.html#M000011","(req)","Filter API implementation.  Traps HTTP request and insert 'Proxy-Authorization' header if needed. ",2],["filter_request","HTTPClient::WWWAuth","classes/HTTPClient/WWWAuth.html#M000006","(req)","Filter API implementation.  Traps HTTP request and insert 'Authorization' header if needed. ",2],["filter_response","HTTPClient::ProxyAuth","classes/HTTPClient/ProxyAuth.html#M000012","(req, res)","Filter API implementation.  Traps HTTP response and parses 'Proxy-Authenticate' header. ",2],["filter_response","HTTPClient::WWWAuth","classes/HTTPClient/WWWAuth.html#M000007","(req, res)","Filter API implementation.  Traps HTTP response and parses 'WWW-Authenticate' header. ",2],["filter_response","OAuthClient","classes/OAuthClient.html#M000309","(res)","",2],["find","WebAgent::CookieManager","classes/WebAgent/CookieManager.html#M000090","(url)","",2],["find_cookie_info","WebAgent::CookieManager","classes/WebAgent/CookieManager.html#M000091","(domain, path, name)","",2],["finished?","HTTPClient::Connection","classes/HTTPClient/Connection.html#M000059","()","Checks if the asynchronous invocation has been finished or not. ",2],["flag","WebAgent::Cookie","classes/WebAgent/Cookie.html#M000075","()","",2],["flush","HTTPClient::SSLSocketWrap","classes/HTTPClient/SSLSocketWrap.html#M000192","()","",2],["flush","HTTPClient::SocketWrap","classes/HTTPClient/SocketWrap.html#M000209","()","",2],["follow_redirect","HTTPClient","classes/HTTPClient.html#M000359","(method, uri, query, body, header, &block)","",2],["generate_cnonce","HTTPClient::DigestAuth","classes/HTTPClient/DigestAuth.html#M000026","()","cf. WEBrick::HTTPAuth::DigestAuth#generate_next_nonce(aTime) ",2],["generate_nonce","HTTPClient::OAuth","classes/HTTPClient/OAuth.html#M000052","()","",2],["get","HTTP::Message::Headers","classes/HTTP/Message/Headers.html#M000110","(key = nil)","Returns an Array of headers for the given key.  Each element is a pair of key and value.  It returns",2],["get","HTTPClient","classes/HTTPClient.html#M000334","(uri, *args, &block)","Sends GET request to the specified URL.  See request for arguments. ",2],["get","HTTPClient::BasicAuth","classes/HTTPClient/BasicAuth.html#M000017","(req)","Response handler: returns credential. It sends cred only when a given uri is; * child page of challengeable(got",2],["get","HTTPClient::DigestAuth","classes/HTTPClient/DigestAuth.html#M000023","(req)","Response handler: returns credential. It sends cred only when a given uri is; * child page of challengeable(got",2],["get","HTTPClient::NegotiateAuth","classes/HTTPClient/NegotiateAuth.html#M000032","(req)","Response handler: returns credential. See ruby/ntlm for negotiation state transition. ",2],["get","HTTPClient::OAuth","classes/HTTPClient/OAuth.html#M000049","(req)","Response handler: returns credential. It sends cred only when a given uri is; * child page of challengeable(got",2],["get","HTTPClient::SSPINegotiateAuth","classes/HTTPClient/SSPINegotiateAuth.html#M000038","(req)","Response handler: returns credential. See win32/sspi for negotiation state transition. ",2],["get_access_token","OAuthClient","classes/OAuthClient.html#M000306","(uri, request_token, request_token_secret, verifier = nil)","Get access token. uri:: URI for request token. request_token:: a request token String. See get_access_token.",2],["get_async","HTTPClient","classes/HTTPClient.html#M000344","(uri, *args)","Sends GET request in async style.  See request_async for arguments. It immediately returns a HTTPClient::Connection",2],["get_body","HTTPClient::Session","classes/HTTPClient/Session.html#M000250","(&block)","",2],["get_cached_session","HTTPClient::SessionManager","classes/HTTPClient/SessionManager.html#M000164","(site)","",2],["get_config","HTTPClient::OAuth","classes/HTTPClient/OAuth.html#M000048","(uri = nil)","Get authentication credential. ",2],["get_content","HTTPClient","classes/HTTPClient.html#M000329","(uri, *args, &block)","Retrieves a web resource. uri:: a String or an URI object which represents an URL of web resource. query::",2],["get_header","HTTPClient::Session","classes/HTTPClient/Session.html#M000248","()","",2],["get_oauth_response","OAuthClient","classes/OAuthClient.html#M000307","(res)","Parse response and returns a Hash. ",2],["get_request_token","OAuthClient","classes/OAuthClient.html#M000305","(uri, callback = nil, param = nil)","Get request token. uri:: URI for request token. callback:: callback String. This can be nil for OAuth",2],["getenv","HTTPClient","classes/HTTPClient.html#M000358","(name)","",2],["gets","HTTPClient::DebugSocket","classes/HTTPClient/DebugSocket.html#M000220","(*args)","",2],["gets","HTTPClient::SSLSocketWrap","classes/HTTPClient/SSLSocketWrap.html#M000186","(*args)","",2],["gets","HTTPClient::SocketWrap","classes/HTTPClient/SocketWrap.html#M000205","(*args)","",2],["hash_find_value","HTTPClient::Util","classes/HTTPClient/Util.html#M000300","(hash, &block)","Finds a value of a Hash. ",2],["hash_find_value","HTTPClient::Util","classes/HTTPClient/Util.html#M000300","(hash, &block)","Finds a value of a Hash. ",2],["head","HTTPClient","classes/HTTPClient.html#M000333","(uri, *args)","Sends HEAD request to the specified URL.  See request for arguments. ",2],["head_async","HTTPClient","classes/HTTPClient.html#M000343","(uri, *args)","Sends HEAD request in async style.  See request_async for arguments. It immediately returns a HTTPClient::Connection",2],["head_match?","WebAgent::CookieUtils","classes/WebAgent/CookieUtils.html#M000063","(str1, str2)","",2],["headers","HTTP::Message","classes/HTTP/Message.html#M000238","()","Returns Hash of header. key and value are both String. Each key has a single value so you can't extract",2],["http_body=","HTTP::Message","classes/HTTP/Message.html#M000210","(body)","Sets a new body.  header.body_size is updated with new body.size. ",2],["http_only?","WebAgent::Cookie","classes/WebAgent/Cookie.html#M000071","()","",2],["http_version","HTTP::Message","classes/HTTP/Message.html#M000212","()","Returns HTTP version in a HTTP header.  String. ",2],["http_version=","HTTP::Message","classes/HTTP/Message.html#M000213","(http_version)","Sets HTTP version in a HTTP header.  String. ",2],["https?","HTTPClient::Util","classes/HTTPClient/Util.html#M000301","(uri)","Checks if the given URI is https. ",2],["init_connect_request","HTTP::Message::Headers","classes/HTTP/Message/Headers.html#M000095","(uri)","Initialize this instance as a CONNECT request. ",2],["init_request","HTTP::Message::Body","classes/HTTP/Message/Body.html#M000126","(body = nil, boundary = nil)","Initialize this instance as a request. ",2],["init_request","HTTP::Message::Headers","classes/HTTP/Message/Headers.html#M000096","(method, uri, query = nil)","Initialize this instance as a general request. ",2],["init_response","HTTP::Message::Body","classes/HTTP/Message/Body.html#M000127","(body = nil)","Initialize this instance as a response. ",2],["init_response","HTTP::Message::Headers","classes/HTTP/Message/Headers.html#M000097","(status_code)","Initialize this instance as a response. ",2],["internal_mime_type","HTTP::Message","classes/HTTP/Message.html#M000173","(path)","Default MIME type handler. See mime_type_handler=. ",2],["invalidate","HTTPClient::Session","classes/HTTPClient/Session.html#M000246","()","",2],["invalidate","HTTPClient::SessionManager","classes/HTTPClient/SessionManager.html#M000157","(site)","",2],["invalidated?","HTTPClient::Session","classes/HTTPClient/Session.html#M000247","()","",2],["join","HTTPClient::Connection","classes/HTTPClient/Connection.html#M000062","()","Waits the completion of the asynchronous invocation. ",2],["join_quotedstr","WebAgent::Cookie","classes/WebAgent/Cookie.html#M000078","(array, sep)","",2],["keep","HTTPClient::SessionManager","classes/HTTPClient/SessionManager.html#M000156","(sess)","assert: sess.last_used must not be nil ",2],["keep_alive_enabled?","HTTP::Message","classes/HTTP/Message.html#M000174","(version)","Returns true if the given HTTP version allows keep alive connection. version:: String ",2],["keep_webmock_compat","HTTPClient","classes/HTTPClient.html#M000313","()","webmock 1.6.2 depends on HTTP::Message#body.content to work. let's keep it work iif webmock is loaded",2],["keyword_argument","HTTPClient::Util","classes/HTTPClient/Util.html#M000290","(args, *field)","Keyword argument helper. args:: given arguments. *field:: a list of arguments to be extracted. You can",2],["load_cacerts","HTTPClient::SSLConfig","classes/HTTPClient/SSLConfig.html#M000287","(cert_store)","",2],["load_cookies","WebAgent::CookieManager","classes/WebAgent/CookieManager.html#M000107","()","",2],["load_environment","HTTPClient","classes/HTTPClient.html#M000357","()","",2],["load_trust_ca","HTTPClient::SSLConfig","classes/HTTPClient/SSLConfig.html#M000265","()","Loads default trust anchors. Calling this method resets all existing sessions. ",2],["make_cookie_str","WebAgent::CookieManager","classes/WebAgent/CookieManager.html#M000089","(cookie_list)","",2],["match","HTTPClient::Site","classes/HTTPClient/Site.html#M000145","(uri)","Returns true if scheme, host and port of the given URI matches with this. ",2],["match?","WebAgent::Cookie","classes/WebAgent/Cookie.html#M000077","(url)","",2],["mime_type_handler","HTTP::Message","classes/HTTP/Message.html#M000168","()","Returns MIME type handler. ",2],["mime_type_handler=","HTTP::Message","classes/HTTP/Message.html#M000167","(handler)","Sets MIME type handler. handler must respond to :call with a single argument :path and returns a MIME",2],["multiparam_query?","HTTP::Message","classes/HTTP/Message.html#M000175","(query)","Returns true if the given query (or body) has a multiple parameter. ",2],["new","HTTP::Message::Body","classes/HTTP/Message/Body.html#M000125","()","Creates a Message::Body.  Use init_request or init_response for acutual initialize. ",2],["new","HTTP::Message::Body::Parts","classes/HTTP/Message/Body/Parts.html#M000147","()","",2],["new","HTTP::Message::Headers","classes/HTTP/Message/Headers.html#M000094","()","Creates a Message::Headers.  Use init_request, init_response, or init_connect_request for acutual initialize.",2],["new","HTTPClient","classes/HTTPClient.html#M000312","(*args)","Creates a HTTPClient instance which manages sessions, cookies, etc. HTTPClient.new takes 3 optional arguments",2],["new","HTTPClient::BasicAuth","classes/HTTPClient/BasicAuth.html#M000013","()","Creates new BasicAuth filter. ",2],["new","HTTPClient::DigestAuth","classes/HTTPClient/DigestAuth.html#M000019","()","Creates new DigestAuth filter. ",2],["new","HTTPClient::LoopBackSocket","classes/HTTPClient/LoopBackSocket.html#M000239","(host, port, response)","",2],["new","HTTPClient::NegotiateAuth","classes/HTTPClient/NegotiateAuth.html#M000028","(scheme = \"Negotiate\")","Creates new NegotiateAuth filter. ",2],["new","HTTPClient::OAuth","classes/HTTPClient/OAuth.html#M000043","()","Creates new DigestAuth filter. ",2],["new","HTTPClient::OAuth::Config","classes/HTTPClient/OAuth/Config.html#M000040","(*args)","",2],["new","HTTPClient::ProxyAuth","classes/HTTPClient/ProxyAuth.html#M000008","()","Creates new ProxyAuth. ",2],["new","HTTPClient::SSLConfig","classes/HTTPClient/SSLConfig.html#M000253","(client)","Creates a SSLConfig. ",2],["new","HTTPClient::SSLSocketWrap","classes/HTTPClient/SSLSocketWrap.html#M000172","(socket, context, debug_dev = nil)","",2],["new","HTTPClient::SSPINegotiateAuth","classes/HTTPClient/SSPINegotiateAuth.html#M000034","()","Creates new SSPINegotiateAuth filter. ",2],["new","HTTPClient::Session","classes/HTTPClient/Session.html#M000242","(client, dest, agent_name, from)","",2],["new","HTTPClient::SessionManager","classes/HTTPClient/SessionManager.html#M000149","(client)","",2],["new","HTTPClient::Site","classes/HTTPClient/Site.html#M000132","(uri = nil)","Creates a new Site based on the given URI. ",2],["new","HTTPClient::SocketWrap","classes/HTTPClient/SocketWrap.html#M000199","(socket, *args)","",2],["new","HTTPClient::TimeoutScheduler","classes/HTTPClient/TimeoutScheduler.html#M000293","()","Creates new TimeoutScheduler. ",2],["new","HTTPClient::TimeoutScheduler::Period","classes/HTTPClient/TimeoutScheduler/Period.html#M000288","(thread, time, ex)","Creates new Period. ",2],["new","HTTPClient::WWWAuth","classes/HTTPClient/WWWAuth.html#M000003","()","Creates new WWWAuth. ",2],["new","OAuthClient","classes/OAuthClient.html#M000304","(*arg)","Creates a OAuthClient instance which provides OAuth related methods in addition to HTTPClient. Method",2],["new","WebAgent::Cookie","classes/WebAgent/Cookie.html#M000067","()","",2],["new","WebAgent::CookieManager","classes/WebAgent/CookieManager.html#M000081","(file=nil)","",2],["new_connect_request","HTTP::Message","classes/HTTP/Message.html#M000160","(uri)","Creates a Message instance of 'CONNECT' request. 'CONNECT' request does not have Body. uri:: an URI that",2],["new_request","HTTP::Message","classes/HTTP/Message.html#M000162","(method, uri, query = nil, body = nil, boundary = nil)","Creates a Message instance of general request. method:: HTTP method String. uri:: an URI object which",2],["new_response","HTTP::Message","classes/HTTP/Message.html#M000165","(body)","Creates a Message instance of response. body:: a String or an IO of response message body. ",2],["no_message_body?","HTTPClient::Session","classes/HTTPClient/Session.html#M000279","(status)","",2],["no_proxy","HTTPClient","classes/HTTPClient.html#M000320","()","Returns NO_PROXY setting String if given. ",2],["no_proxy=","HTTPClient","classes/HTTPClient.html#M000321","(no_proxy)","Sets NO_PROXY setting String.  no_proxy must be a comma separated String. Each entry must be 'host' or",2],["no_proxy?","HTTPClient","classes/HTTPClient.html#M000365","(uri)","",2],["normalize_cookie_value","WebAgent::Cookie","classes/WebAgent/Cookie.html#M000080","(value)","",2],["open","HTTPClient::SessionManager","classes/HTTPClient/SessionManager.html#M000158","(uri, via_proxy = false)","",2],["options","HTTPClient","classes/HTTPClient.html#M000338","(uri, *args, &block)","Sends OPTIONS request to the specified URL.  See request for arguments. ",2],["options=","HTTPClient::SSLConfig","classes/HTTPClient/SSLConfig.html#M000274","(options)","Sets SSL options.  New value must be a combination of # constants OpenSSL::SSL::OP_* Calling this method",2],["options_async","HTTPClient","classes/HTTPClient.html#M000348","(uri, *args)","Sends OPTIONS request in async style.  See request_async for arguments. It immediately returns a HTTPClient::Connection",2],["override?","WebAgent::Cookie","classes/WebAgent/Cookie.html#M000074","()","",2],["override_header","HTTPClient","classes/HTTPClient.html#M000364","(header, key, value)","",2],["params_from_file","HTTP::Message::Body","classes/HTTP/Message/Body.html#M000159","(value)","",2],["parse","HTTP::Message","classes/HTTP/Message.html#M000191","(query)","from CGI.parse ",2],["parse","WebAgent::Cookie","classes/WebAgent/Cookie.html#M000079","(str, url)","",2],["parse","WebAgent::CookieManager","classes/WebAgent/CookieManager.html#M000088","(str, url)","",2],["parse_authentication_header","HTTPClient::AuthFilterBase","classes/HTTPClient/AuthFilterBase.html#M000001","(res, tag)","",2],["parse_challenge_header","HTTPClient::AuthFilterBase","classes/HTTPClient/AuthFilterBase.html#M000002","(challenge)","",2],["parse_challenge_param","HTTPClient::DigestAuth","classes/HTTPClient/DigestAuth.html#M000027","(param_str)","",2],["parse_header","HTTPClient::Session","classes/HTTPClient/Session.html#M000272","()","",2],["parse_keepalive_header","HTTPClient::Session","classes/HTTPClient/Session.html#M000280","(key, value)","",2],["parts","HTTP::Message::Body::Parts","classes/HTTP/Message/Body/Parts.html#M000150","()","",2],["path_orig?","WebAgent::Cookie","classes/WebAgent/Cookie.html#M000073","()","",2],["peer_cert","HTTPClient::SSLSocketWrap","classes/HTTPClient/SSLSocketWrap.html#M000180","()","",2],["pop","HTTPClient::Connection","classes/HTTPClient/Connection.html#M000060","()","Retrieves a HTTP::Message instance of HTTP response.  Do not invoke this method twice for now.  The second",2],["post","HTTPClient","classes/HTTPClient.html#M000335","(uri, *args, &block)","Sends POST request to the specified URL.  See request for arguments. ",2],["post_async","HTTPClient","classes/HTTPClient.html#M000345","(uri, *args)","Sends POST request in async style.  See request_async for arguments. It immediately returns a HTTPClient::Connection",2],["post_connection_check","HTTPClient::SSLSocketWrap","classes/HTTPClient/SSLSocketWrap.html#M000177","(host)","",2],["post_content","HTTPClient","classes/HTTPClient.html#M000330","(uri, *args, &block)","Posts a content. uri:: a String or an URI object which represents an URL of web resource. body:: a Hash",2],["propfind","HTTPClient","classes/HTTPClient.html#M000339","(uri, *args, &block)","Sends PROPFIND request to the specified URL.  See request for arguments. ",2],["propfind_async","HTTPClient","classes/HTTPClient.html#M000349","(uri, *args)","Sends PROPFIND request in async style.  See request_async for arguments. It immediately returns a HTTPClient::Connection",2],["proppatch","HTTPClient","classes/HTTPClient.html#M000340","(uri, *args, &block)","Sends PROPPATCH request to the specified URL.  See request for arguments. ",2],["proppatch_async","HTTPClient","classes/HTTPClient.html#M000350","(uri, *args)","Sends PROPPATCH request in async style.  See request_async for arguments. It immediately returns a HTTPClient::Connection",2],["protect_keep_alive_disconnected","HTTPClient","classes/HTTPClient.html#M000360","()","",2],["proxy","HTTPClient","classes/HTTPClient.html#M000318","()","Returns URI object of HTTP proxy if exists. ",2],["proxy=","HTTPClient","classes/HTTPClient.html#M000319","(proxy)","Sets HTTP proxy used for HTTP connection.  Given proxy can be an URI, a String or nil.  You can set user/password",2],["proxy=","HTTPClient::SessionManager","classes/HTTPClient/SessionManager.html#M000152","(proxy)","",2],["put","HTTPClient","classes/HTTPClient.html#M000336","(uri, *args, &block)","Sends PUT request to the specified URL.  See request for arguments. ",2],["put_async","HTTPClient","classes/HTTPClient.html#M000346","(uri, *args)","Sends PUT request in async style.  See request_async for arguments. It immediately returns a HTTPClient::Connection",2],["query","HTTPClient::Session","classes/HTTPClient/Session.html#M000243","(req)","Send a request to the server ",2],["query","HTTPClient::SessionManager","classes/HTTPClient/SessionManager.html#M000153","(req, via_proxy)","",2],["raise","HTTPClient::TimeoutScheduler::Period","classes/HTTPClient/TimeoutScheduler/Period.html#M000289","(message)","Raises if thread exists and alive. ",2],["read","HTTPClient::DebugSocket","classes/HTTPClient/DebugSocket.html#M000221","(*args)","",2],["read","HTTPClient::SSLSocketWrap","classes/HTTPClient/SSLSocketWrap.html#M000187","(*args)","",2],["read","HTTPClient::SocketWrap","classes/HTTPClient/SocketWrap.html#M000206","(*args)","",2],["read_body_chunked","HTTPClient::Session","classes/HTTPClient/Session.html#M000284","(&block)","",2],["read_body_length","HTTPClient::Session","classes/HTTPClient/Session.html#M000283","(&block)","",2],["read_body_rest","HTTPClient::Session","classes/HTTPClient/Session.html#M000285","()","",2],["read_header","HTTPClient::Session","classes/HTTPClient/Session.html#M000267","()","Read status block. ",2],["readpartial","HTTPClient::DebugSocket","classes/HTTPClient/DebugSocket.html#M000228","(*args)","",2],["readpartial","HTTPClient::SSLSocketWrap","classes/HTTPClient/SSLSocketWrap.html#M000188","(*args)","",2],["readpartial","HTTPClient::SocketWrap","classes/HTTPClient/SocketWrap.html#M000207","(*args)","",2],["reason","HTTP::Message","classes/HTTP/Message.html#M000226","()","Returns  HTTP status reason phrase in response.  String. ",2],["reason=","HTTP::Message","classes/HTTP/Message.html#M000227","(reason)","Sets  HTTP status reason phrase of response.  String. ",2],["redirect?","HTTP::Status","classes/HTTP/Status.html#M000087","(status)","Returns true if the given status is thought to be redirect. See also REDIRECT_STATUS. ",2],["redirect_uri_callback=","HTTPClient","classes/HTTPClient.html#M000328","(redirect_uri_callback)","Sets callback proc when HTTP redirect status is returned for get_content and post_content.  default_redirect_uri_callback",2],["register","HTTPClient::TimeoutScheduler","classes/HTTPClient/TimeoutScheduler.html#M000294","(thread, sec, ex)","Registers new timeout period. ",2],["remember_pos","HTTP::Message::Body","classes/HTTP/Message/Body.html#M000133","(io)","",2],["request","HTTPClient","classes/HTTPClient.html#M000342","(method, uri, *args, &block)","Sends a request to the specified URL. method:: HTTP method to be sent.  method.to_s.upcase is used. uri::",2],["request_async","HTTPClient","classes/HTTPClient.html#M000352","(method, uri, query = nil, body = nil, header = {})","Sends a request in async style.  request method creates new Thread for HTTP connection and returns a",2],["request_line","HTTP::Message::Headers","classes/HTTP/Message/Headers.html#M000119","()","",2],["reset","HTTPClient","classes/HTTPClient.html#M000353","(uri)","Resets internal session for the given URL.  Keep-alive connection for the site (host-port pair) is disconnected",2],["reset","HTTPClient::SessionManager","classes/HTTPClient/SessionManager.html#M000154","(uri)","",2],["reset_all","HTTPClient","classes/HTTPClient.html#M000354","()","Resets all of internal sessions.  Keep-alive connections are disconnected. ",2],["reset_all","HTTPClient::SessionManager","classes/HTTPClient/SessionManager.html#M000155","()","",2],["reset_challenge","HTTPClient::BasicAuth","classes/HTTPClient/BasicAuth.html#M000014","()","Resets challenge state.  Do not send '*Authorization' header until the server sends '*Authentication'",2],["reset_challenge","HTTPClient::DigestAuth","classes/HTTPClient/DigestAuth.html#M000020","()","Resets challenge state.  Do not send '*Authorization' header until the server sends '*Authentication'",2],["reset_challenge","HTTPClient::NegotiateAuth","classes/HTTPClient/NegotiateAuth.html#M000029","()","Resets challenge state.  Do not send '*Authorization' header until the server sends '*Authentication'",2],["reset_challenge","HTTPClient::OAuth","classes/HTTPClient/OAuth.html#M000044","()","Resets challenge state.  Do not send '*Authorization' header until the server sends '*Authentication'",2],["reset_challenge","HTTPClient::ProxyAuth","classes/HTTPClient/ProxyAuth.html#M000009","()","Resets challenge state.  See sub filters for more details. ",2],["reset_challenge","HTTPClient::SSPINegotiateAuth","classes/HTTPClient/SSPINegotiateAuth.html#M000035","()","Resets challenge state.  Do not send '*Authorization' header until the server sends '*Authentication'",2],["reset_challenge","HTTPClient::WWWAuth","classes/HTTPClient/WWWAuth.html#M000004","()","Resets challenge state.  See sub filters for more details. ",2],["reset_pos","HTTP::Message::Body","classes/HTTP/Message/Body.html#M000134","(io)","",2],["response_status_line","HTTP::Message::Headers","classes/HTTP/Message/Headers.html#M000120","()","",2],["sample_verify_callback","HTTPClient::SSLConfig","classes/HTTPClient/SSLConfig.html#M000282","(is_ok, ctx)","Sample callback method:  CAUTION: does not check CRL/ARL. ",2],["save_all_cookies","WebAgent::CookieManager","classes/WebAgent/CookieManager.html#M000083","(force = nil, save_unused = true, save_discarded = true)","",2],["save_cookie_store","HTTPClient","classes/HTTPClient.html#M000326","()","Try to save Cookies to the file specified in set_cookie_store.  Unexpected error will be raised if you",2],["save_cookies","WebAgent::CookieManager","classes/WebAgent/CookieManager.html#M000085","(force = nil)","",2],["scrub_cached_session","HTTPClient::SessionManager","classes/HTTPClient/SessionManager.html#M000166","(now)","",2],["secure?","WebAgent::Cookie","classes/WebAgent/Cookie.html#M000070","()","",2],["set","HTTP::Message::Headers","classes/HTTP/Message/Headers.html#M000109","(key, value)","Sets a header. ",2],["set","HTTPClient::BasicAuth","classes/HTTPClient/BasicAuth.html#M000015","(uri, user, passwd)","Set authentication credential. uri == nil for generic purpose (allow to use user/password for any URL).",2],["set","HTTPClient::DigestAuth","classes/HTTPClient/DigestAuth.html#M000021","(uri, user, passwd)","Set authentication credential. uri == nil is ignored. ",2],["set","HTTPClient::NegotiateAuth","classes/HTTPClient/NegotiateAuth.html#M000030","(uri, user, passwd)","Set authentication credential. uri == nil for generic purpose (allow to use user/password for any URL).",2],["set","HTTPClient::OAuth","classes/HTTPClient/OAuth.html#M000045","(*args)","Set authentication credential. You cannot set OAuth config via WWWAuth#set_auth. Use OAuth#config= ",2],["set","HTTPClient::SSPINegotiateAuth","classes/HTTPClient/SSPINegotiateAuth.html#M000036","(*args)","Set authentication credential. NOT SUPPORTED: username and necessary data is retrieved by win32/sspi.",2],["set?","HTTPClient::BasicAuth","classes/HTTPClient/BasicAuth.html#M000016","()","have we marked this as set - ie that it's valid to use in this context? ",2],["set?","HTTPClient::DigestAuth","classes/HTTPClient/DigestAuth.html#M000022","()","have we marked this as set - ie that it's valid to use in this context? ",2],["set?","HTTPClient::NegotiateAuth","classes/HTTPClient/NegotiateAuth.html#M000031","()","have we marked this as set - ie that it's valid to use in this context? ",2],["set?","HTTPClient::OAuth","classes/HTTPClient/OAuth.html#M000046","()","have we marked this as set - ie that it's valid to use in this context? ",2],["set?","HTTPClient::SSPINegotiateAuth","classes/HTTPClient/SSPINegotiateAuth.html#M000037","()","have we marked this as set - ie that it's valid to use in this context? ",2],["set_auth","HTTPClient","classes/HTTPClient.html#M000322","(domain, user, passwd)","Sets credential for Web server authentication. domain:: a String or an URI to specify where HTTPClient",2],["set_auth","HTTPClient::ProxyAuth","classes/HTTPClient/ProxyAuth.html#M000010","(user, passwd)","Set authentication credential.  See sub filters for more details. ",2],["set_auth","HTTPClient::WWWAuth","classes/HTTPClient/WWWAuth.html#M000005","(uri, user, passwd)","Set authentication credential.  See sub filters for more details. ",2],["set_basic_auth","HTTPClient","classes/HTTPClient.html#M000323","(domain, user, passwd)","Deprecated.  Use set_auth instead. ",2],["set_body_encoding","HTTP::Message::Headers","classes/HTTP/Message/Headers.html#M000103","()","",2],["set_body_encoding","HTTP::Message::Headers","classes/HTTP/Message/Headers.html#M000104","()","",2],["set_client_cert_file","HTTPClient::SSLConfig","classes/HTTPClient/SSLConfig.html#M000257","(cert_file, key_file)","Sets certificate and private key for SSL client authentication. cert_file:: must be a filename of PEM/DER",2],["set_config","HTTPClient::OAuth","classes/HTTPClient/OAuth.html#M000047","(uri, config)","Set authentication credential. ",2],["set_content","HTTP::Message::Body","classes/HTTP/Message/Body.html#M000131","(body, boundary = nil)","",2],["set_cookie_store","HTTPClient","classes/HTTPClient.html#M000325","(filename)","Sets the filename where non-volatile Cookies be saved by calling save_cookie_store. This method tries",2],["set_crl","HTTPClient::SSLConfig","classes/HTTPClient/SSLConfig.html#M000268","(crl)","Alias for #add_crl",2],["set_encoding","HTTPClient","classes/HTTPClient.html#M000370","(str, encoding)","",2],["set_flag","WebAgent::Cookie","classes/WebAgent/Cookie.html#M000076","(flag)","",2],["set_header","HTTP::Message::Headers","classes/HTTP/Message/Headers.html#M000121","()","",2],["set_header","HTTPClient::Session","classes/HTTPClient/Session.html#M000251","(req)","",2],["set_headers","HTTP::Message::Headers","classes/HTTP/Message/Headers.html#M000116","(headers)","",2],["set_proxy_auth","HTTPClient","classes/HTTPClient.html#M000324","(user, passwd)","Sets credential for Proxy authentication. user:: username String. passwd:: password String. Calling this",2],["set_request_header","HTTP::Message::Headers","classes/HTTP/Message/Headers.html#M000122","()","",2],["set_response_header","HTTP::Message::Headers","classes/HTTP/Message/Headers.html#M000123","()","",2],["set_trust_ca","HTTPClient::SSLConfig","classes/HTTPClient/SSLConfig.html#M000263","(trust_ca_file_or_hashed_dir)","Alias for #add_trust_ca",2],["sign","HTTPClient::OAuth","classes/HTTPClient/OAuth.html#M000055","(config, header, req)","",2],["sign_hmac_sha1","HTTPClient::OAuth","classes/HTTPClient/OAuth.html#M000057","(config, base_string)","",2],["ssl_connect","HTTPClient::SSLSocketWrap","classes/HTTPClient/SSLSocketWrap.html#M000176","(hostname = nil)","",2],["start_timer_thread","HTTPClient::TimeoutScheduler","classes/HTTPClient/TimeoutScheduler.html#M000298","()","",2],["status","HTTP::Message","classes/HTTP/Message.html#M000222","()","Returns HTTP status code in response.  Integer. ",2],["status=","HTTP::Message","classes/HTTP/Message.html#M000225","(status)","Sets HTTP status code of response.  Integer. Reason phrase is updated, too. ",2],["status_code","HTTP::Message","classes/HTTP/Message.html#M000224","()","Alias for #status",2],["status_code=","HTTP::Message::Headers","classes/HTTP/Message/Headers.html#M000098","(status_code)","Sets status code and reason phrase. ",2],["strict_redirect_uri_callback","HTTPClient","classes/HTTPClient.html#M000331","(uri, res)","A method for redirect uri callback.  How to use: clnt.redirect_uri_callback = clnt.method(:strict_redirect_uri_callback)",2],["successful?","HTTP::Status","classes/HTTP/Status.html#M000084","(status)","Returns true if the given status represents successful HTTP response. See also SUCCESSFUL_STATUS. ",2],["sync","HTTPClient::SSLSocketWrap","classes/HTTPClient/SSLSocketWrap.html#M000193","()","",2],["sync","HTTPClient::SocketWrap","classes/HTTPClient/SocketWrap.html#M000216","()","",2],["sync=","HTTPClient::SSLSocketWrap","classes/HTTPClient/SSLSocketWrap.html#M000194","(sync)","",2],["sync=","HTTPClient::SocketWrap","classes/HTTPClient/SocketWrap.html#M000217","(sync)","",2],["tail_match?","WebAgent::CookieUtils","classes/WebAgent/CookieUtils.html#M000064","(str1, str2)","",2],["timeout","HTTPClient::Timeout","classes/HTTPClient/Timeout.html#M000303","(sec, ex = nil, &block)","",2],["timeout=","HTTPClient::SSLConfig","classes/HTTPClient/SSLConfig.html#M000273","(timeout)","Sets SSL timeout in sec. Calling this method resets all existing sessions. ",2],["timeout_scheduler","HTTPClient","classes/HTTPClient.html#M000302","()","CAUTION: caller must aware of race condition. ",2],["total_dot_num","WebAgent::CookieUtils","classes/WebAgent/CookieUtils.html#M000066","(string)","",2],["trace","HTTPClient","classes/HTTPClient.html#M000341","(uri, *args, &block)","Sends TRACE request to the specified URL.  See request for arguments. ",2],["trace_async","HTTPClient","classes/HTTPClient.html#M000351","(uri, *args)","Sends TRACE request in async style.  See request_async for arguments. It immediately returns a HTTPClient::Connection",2],["unescape","HTTP::Message","classes/HTTP/Message.html#M000197","(string)","from CGI.unescape ",2],["unescape","OAuthClient","classes/OAuthClient.html#M000308","(escaped)","",2],["uri_dirname","HTTPClient::Util","classes/HTTPClient/Util.html#M000299","(uri)","Returns parent directory URI of the given URI. ",2],["uri_dirname","HTTPClient::Util","classes/HTTPClient/Util.html#M000299","(uri)","Returns parent directory URI of the given URI. ",2],["uri_part_of","HTTPClient::Util","classes/HTTPClient/Util.html#M000296","(uri, part)","Returns true if the given 2 URIs have a part_of relationship. * the same scheme * the same host String",2],["uri_part_of","HTTPClient::Util","classes/HTTPClient/Util.html#M000296","(uri, part)","Returns true if the given 2 URIs have a part_of relationship. * the same scheme * the same host String",2],["urify","HTTPClient::Util","classes/HTTPClient/Util.html#M000295","(uri)","Gets an URI instance. ",2],["use?","WebAgent::Cookie","classes/WebAgent/Cookie.html#M000069","()","",2],["valid_session?","HTTPClient::SessionManager","classes/HTTPClient/SessionManager.html#M000170","(sess, now)","",2],["verify_callback=","HTTPClient::SSLConfig","classes/HTTPClient/SSLConfig.html#M000271","(verify_callback)","Sets callback handler for custom certificate verification. See verify_callback. Calling this method resets",2],["verify_depth=","HTTPClient::SSLConfig","classes/HTTPClient/SSLConfig.html#M000270","(verify_depth)","Sets verify depth.  New value must be a number. Calling this method resets all existing sessions. ",2],["verify_mode=","HTTPClient::SSLConfig","classes/HTTPClient/SSLConfig.html#M000269","(verify_mode)","Sets verify mode of OpenSSL.  New value must be a combination of constants OpenSSL::SSL::VERIFY_* Calling",2],["version","HTTP::Message","classes/HTTP/Message.html#M000214","()","",2],["version=","HTTP::Message","classes/HTTP/Message.html#M000215","(version)","",2],["hexdump.rb","files/lib/hexdump_rb.html","files/lib/hexdump_rb.html","","This was written by Arai-san and published at http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-list/31987",3],["http-access2.rb","files/lib/http-access2_rb.html","files/lib/http-access2_rb.html","","HTTPAccess2 - HTTP accessing library. Copyright (C) 2000-2007  NAKAMURA, Hiroshi  <nakahiro@sarion.co.jp>.",3],["cookie.rb","files/lib/http-access2/cookie_rb.html","files/lib/http-access2/cookie_rb.html","","",3],["http.rb","files/lib/http-access2/http_rb.html","files/lib/http-access2/http_rb.html","","",3],["httpclient.rb","files/lib/httpclient_rb.html","files/lib/httpclient_rb.html","","HTTPClient - HTTP client library. Copyright (C) 2000-2009  NAKAMURA, Hiroshi  <nahi@ruby-lang.org>. This",3],["auth.rb","files/lib/httpclient/auth_rb.html","files/lib/httpclient/auth_rb.html","","HTTPClient - HTTP client library. Copyright (C) 2000-2009  NAKAMURA, Hiroshi  <nahi@ruby-lang.org>. This",3],["cacert.p7s","files/lib/httpclient/cacert_p7s.html","files/lib/httpclient/cacert_p7s.html","","MIME-Version: 1.0 Content-Type: multipart/signed; protocol=\"application/pkcs7-signature\"; micalg=\"sha1\";",3],["cacert_sha1.p7s","files/lib/httpclient/cacert_sha1_p7s.html","files/lib/httpclient/cacert_sha1_p7s.html","","MIME-Version: 1.0 Content-Type: multipart/signed; protocol=\"application/pkcs7-signature\"; micalg=\"sha1\";",3],["connection.rb","files/lib/httpclient/connection_rb.html","files/lib/httpclient/connection_rb.html","","HTTPClient - HTTP client library. Copyright (C) 2000-2009  NAKAMURA, Hiroshi  <nahi@ruby-lang.org>. This",3],["cookie.rb","files/lib/httpclient/cookie_rb.html","files/lib/httpclient/cookie_rb.html","","cookie.rb is redistributed file which is originally included in Webagent version 0.6.2 by TAKAHASHI `Maki'",3],["http.rb","files/lib/httpclient/http_rb.html","files/lib/httpclient/http_rb.html","","HTTPClient - HTTP client library. Copyright (C) 2000-2009  NAKAMURA, Hiroshi  <nahi@ruby-lang.org>. This",3],["session.rb","files/lib/httpclient/session_rb.html","files/lib/httpclient/session_rb.html","","HTTPClient - HTTP client library. Copyright (C) 2000-2009  NAKAMURA, Hiroshi  <nahi@ruby-lang.org>. This",3],["ssl_config.rb","files/lib/httpclient/ssl_config_rb.html","files/lib/httpclient/ssl_config_rb.html","","HTTPClient - HTTP client library. Copyright (C) 2000-2009  NAKAMURA, Hiroshi  <nahi@ruby-lang.org>. This",3],["timeout.rb","files/lib/httpclient/timeout_rb.html","files/lib/httpclient/timeout_rb.html","","HTTPClient - HTTP client library. Copyright (C) 2000-2009  NAKAMURA, Hiroshi  <nahi@ruby-lang.org>. This",3],["util.rb","files/lib/httpclient/util_rb.html","files/lib/httpclient/util_rb.html","","HTTPClient - HTTP client library. Copyright (C) 2000-2009  NAKAMURA, Hiroshi  <nahi@ruby-lang.org>. This",3],["version.rb","files/lib/httpclient/version_rb.html","files/lib/httpclient/version_rb.html","","",3],["oauthclient.rb","files/lib/oauthclient_rb.html","files/lib/oauthclient_rb.html","","HTTPClient - HTTP client library. Copyright (C) 2000-2009  NAKAMURA, Hiroshi  <nahi@ruby-lang.org>. This",3]],"searchIndex":["http","message","body","parts","headers","status","httpaccess2","client","retryableresponse","session","badresponse","error","invalidstate","keepalivedisconnected","httpclient","authfilterbase","badresponseerror","basicauth","configurationerror","connecttimeouterror","connection","debugsocket","digestauth","loopbacksocket","negotiateauth","oauth","config","proxyauth","receivetimeouterror","sslconfig","sslsocketwrap","sspinegotiateauth","sendtimeouterror","session","sessionmanager","site","socketwrap","timeout","timeouterror","timeoutscheduler","period","util","wwwauth","hexdump","oauthclient","string","webagent","cookie","cookiemanager","error","erroroverrideok","specialerror","cookieutils","<<()","<<()","<<()","<<()","==()","[]()","[]=()","add()","add()","add()","add_cached_session()","add_crl()","add_trust_ca()","add_trust_ca_to_store()","addr()","all()","argument_to_hash()","attr_proxy()","body()","body()","body=()","body_encoding()","body_size=()","build_query_multipart_str()","calc_cred()","calc_cred()","cancel()","cancel()","cert_store=()","challenge()","challenge()","challenge()","challenge()","challenge()","change_notify()","charset_label()","check_cookie_accept_domain()","check_expired_cookies()","check_mask()","ciphers=()","clear_cert_store()","client_cert=()","client_key=()","close()","close()","close()","close()","close()","close_all()","closed?()","closed?()","closed?()","code()","connect()","connect_ssl_proxy()","content()","content()","content_type()","content_type()","content_type=()","content_type=()","contenttype()","contenttype()","contenttype=()","contenttype=()","cookie_error()","cookies()","cookies()","cookies=()","create_base_string()","create_boundary()","create_openssl_socket()","create_query_part()","create_query_uri()","create_request()","create_socket()","create_ssl_socket()","debug()","debug()","debug_dev()","debug_dev=()","debug_dev=()","default_redirect_uri_callback()","default_verify_callback()","delete()","delete()","delete_async()","discard?()","do_get_block()","do_get_header()","do_get_stream()","do_request()","do_request_async()","domain_match()","domain_orig?()","dump()","dump()","dump()","dump_chunk()","dump_chunk_size()","dump_chunked()","dump_chunks()","dump_dummy_request_response()","dump_file()","dump_last_chunk()","encode()","encode()","encode_header()","encode_param()","eof?()","eof?()","eof?()","eql?()","escape()","file?()","file_in_form_data?()","filter_request()","filter_request()","filter_response()","filter_response()","filter_response()","find()","find_cookie_info()","finished?()","flag()","flush()","flush()","follow_redirect()","generate_cnonce()","generate_nonce()","get()","get()","get()","get()","get()","get()","get()","get_access_token()","get_async()","get_body()","get_cached_session()","get_config()","get_content()","get_header()","get_oauth_response()","get_request_token()","getenv()","gets()","gets()","gets()","hash_find_value()","hash_find_value()","head()","head_async()","head_match?()","headers()","http_body=()","http_only?()","http_version()","http_version=()","https?()","init_connect_request()","init_request()","init_request()","init_response()","init_response()","internal_mime_type()","invalidate()","invalidate()","invalidated?()","join()","join_quotedstr()","keep()","keep_alive_enabled?()","keep_webmock_compat()","keyword_argument()","load_cacerts()","load_cookies()","load_environment()","load_trust_ca()","make_cookie_str()","match()","match?()","mime_type_handler()","mime_type_handler=()","multiparam_query?()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new_connect_request()","new_request()","new_response()","no_message_body?()","no_proxy()","no_proxy=()","no_proxy?()","normalize_cookie_value()","open()","options()","options=()","options_async()","override?()","override_header()","params_from_file()","parse()","parse()","parse()","parse_authentication_header()","parse_challenge_header()","parse_challenge_param()","parse_header()","parse_keepalive_header()","parts()","path_orig?()","peer_cert()","pop()","post()","post_async()","post_connection_check()","post_content()","propfind()","propfind_async()","proppatch()","proppatch_async()","protect_keep_alive_disconnected()","proxy()","proxy=()","proxy=()","put()","put_async()","query()","query()","raise()","read()","read()","read()","read_body_chunked()","read_body_length()","read_body_rest()","read_header()","readpartial()","readpartial()","readpartial()","reason()","reason=()","redirect?()","redirect_uri_callback=()","register()","remember_pos()","request()","request_async()","request_line()","reset()","reset()","reset_all()","reset_all()","reset_challenge()","reset_challenge()","reset_challenge()","reset_challenge()","reset_challenge()","reset_challenge()","reset_challenge()","reset_pos()","response_status_line()","sample_verify_callback()","save_all_cookies()","save_cookie_store()","save_cookies()","scrub_cached_session()","secure?()","set()","set()","set()","set()","set()","set()","set?()","set?()","set?()","set?()","set?()","set_auth()","set_auth()","set_auth()","set_basic_auth()","set_body_encoding()","set_body_encoding()","set_client_cert_file()","set_config()","set_content()","set_cookie_store()","set_crl()","set_encoding()","set_flag()","set_header()","set_header()","set_headers()","set_proxy_auth()","set_request_header()","set_response_header()","set_trust_ca()","sign()","sign_hmac_sha1()","ssl_connect()","start_timer_thread()","status()","status=()","status_code()","status_code=()","strict_redirect_uri_callback()","successful?()","sync()","sync()","sync=()","sync=()","tail_match?()","timeout()","timeout=()","timeout_scheduler()","total_dot_num()","trace()","trace_async()","unescape()","unescape()","uri_dirname()","uri_dirname()","uri_part_of()","uri_part_of()","urify()","use?()","valid_session?()","verify_callback=()","verify_depth=()","verify_mode=()","version()","version=()","hexdump.rb","http-access2.rb","cookie.rb","http.rb","httpclient.rb","auth.rb","cacert.p7s","cacert_sha1.p7s","connection.rb","cookie.rb","http.rb","session.rb","ssl_config.rb","timeout.rb","util.rb","version.rb","oauthclient.rb"],"longSearchIndex":["lib/oauthclient.rb","http","http::message","http::message::body","http::message","http","lib/http-access2.rb","httpaccess2","httpaccess2::client","httpaccess2","httpaccess2::session","httpaccess2::session","httpaccess2::session","httpaccess2::session","lib/httpclient.rb","httpclient","httpclient","httpclient","httpclient","httpclient","httpclient","httpclient","httpclient","httpclient","httpclient","httpclient","httpclient::oauth","httpclient","httpclient","httpclient","httpclient","httpclient","httpclient","httpclient","httpclient","httpclient","httpclient","httpclient","httpclient","httpclient","httpclient::timeoutscheduler","httpclient","httpclient","lib/hexdump.rb","lib/oauthclient.rb","lib/httpclient/util.rb","lib/httpclient/cookie.rb","webagent","webagent","webagent::cookiemanager","webagent::cookiemanager","webagent::cookiemanager","webagent","httpclient::debugsocket","httpclient::loopbacksocket","httpclient::sslsocketwrap","httpclient::socketwrap","httpclient::site","http::message::headers","http::message::headers","http::message::body::parts","http::message::headers","webagent::cookiemanager","httpclient::sessionmanager","httpclient::sslconfig","httpclient::sslconfig","httpclient::sslconfig","httpclient::site","http::message::headers","httpclient::util","httpclient","http::message","httpclient","http::message","http::message","http::message::headers","http::message::body","httpclient::digestauth","httpclient::oauth","httpclient::timeoutscheduler","httpclient::timeoutscheduler::period","httpclient::sslconfig","httpclient::basicauth","httpclient::digestauth","httpclient::negotiateauth","httpclient::oauth","httpclient::sspinegotiateauth","httpclient::sslconfig","http::message::headers","webagent::cookiemanager","webagent::cookiemanager","httpclient::sslsocketwrap","httpclient::sslconfig","httpclient::sslconfig","httpclient::sslconfig","httpclient::sslconfig","httpclient::debugsocket","httpclient::sslsocketwrap","httpclient::session","httpclient::sessionmanager","httpclient::socketwrap","httpclient::sessionmanager","httpclient::sslsocketwrap","httpclient::session","httpclient::socketwrap","http::message","httpclient::session","httpclient::session","http::message","http::message::body","http::message","http::message::headers","http::message","http::message::headers","http::message","http::message::headers","http::message","http::message::headers","webagent::cookiemanager","http::message","httpclient","webagent::cookiemanager","httpclient::oauth","httpclient","httpclient::sslsocketwrap","http::message::headers","http::message::headers","httpclient","httpclient::session","httpclient::session","httpclient::debugsocket","httpclient::sslsocketwrap","httpclient","httpclient","httpclient::debugsocket","httpclient","httpclient::sslconfig","http::message::headers","httpclient","httpclient","webagent::cookie","httpclient","httpclient","httpclient","httpclient","httpclient","webagent::cookieutils","webagent::cookie","http::message","http::message::body","http::message::headers","http::message::body","http::message::body","http::message::body","http::message::body","httpclient","http::message::body","http::message::body","hexdump","hexdump","httpclient::oauth","httpclient::oauth","httpclient::sslsocketwrap","httpclient::session","httpclient::socketwrap","httpclient::site","httpclient::oauth","http::message","httpclient","httpclient::proxyauth","httpclient::wwwauth","httpclient::proxyauth","httpclient::wwwauth","oauthclient","webagent::cookiemanager","webagent::cookiemanager","httpclient::connection","webagent::cookie","httpclient::sslsocketwrap","httpclient::socketwrap","httpclient","httpclient::digestauth","httpclient::oauth","http::message::headers","httpclient","httpclient::basicauth","httpclient::digestauth","httpclient::negotiateauth","httpclient::oauth","httpclient::sspinegotiateauth","oauthclient","httpclient","httpclient::session","httpclient::sessionmanager","httpclient::oauth","httpclient","httpclient::session","oauthclient","oauthclient","httpclient","httpclient::debugsocket","httpclient::sslsocketwrap","httpclient::socketwrap","httpclient::util","httpclient::util","httpclient","httpclient","webagent::cookieutils","http::message","http::message","webagent::cookie","http::message","http::message","httpclient::util","http::message::headers","http::message::body","http::message::headers","http::message::body","http::message::headers","http::message","httpclient::session","httpclient::sessionmanager","httpclient::session","httpclient::connection","webagent::cookie","httpclient::sessionmanager","http::message","httpclient","httpclient::util","httpclient::sslconfig","webagent::cookiemanager","httpclient","httpclient::sslconfig","webagent::cookiemanager","httpclient::site","webagent::cookie","http::message","http::message","http::message","http::message::body","http::message::body::parts","http::message::headers","httpclient","httpclient::basicauth","httpclient::digestauth","httpclient::loopbacksocket","httpclient::negotiateauth","httpclient::oauth","httpclient::oauth::config","httpclient::proxyauth","httpclient::sslconfig","httpclient::sslsocketwrap","httpclient::sspinegotiateauth","httpclient::session","httpclient::sessionmanager","httpclient::site","httpclient::socketwrap","httpclient::timeoutscheduler","httpclient::timeoutscheduler::period","httpclient::wwwauth","oauthclient","webagent::cookie","webagent::cookiemanager","http::message","http::message","http::message","httpclient::session","httpclient","httpclient","httpclient","webagent::cookie","httpclient::sessionmanager","httpclient","httpclient::sslconfig","httpclient","webagent::cookie","httpclient","http::message::body","http::message","webagent::cookie","webagent::cookiemanager","httpclient::authfilterbase","httpclient::authfilterbase","httpclient::digestauth","httpclient::session","httpclient::session","http::message::body::parts","webagent::cookie","httpclient::sslsocketwrap","httpclient::connection","httpclient","httpclient","httpclient::sslsocketwrap","httpclient","httpclient","httpclient","httpclient","httpclient","httpclient","httpclient","httpclient","httpclient::sessionmanager","httpclient","httpclient","httpclient::session","httpclient::sessionmanager","httpclient::timeoutscheduler::period","httpclient::debugsocket","httpclient::sslsocketwrap","httpclient::socketwrap","httpclient::session","httpclient::session","httpclient::session","httpclient::session","httpclient::debugsocket","httpclient::sslsocketwrap","httpclient::socketwrap","http::message","http::message","http::status","httpclient","httpclient::timeoutscheduler","http::message::body","httpclient","httpclient","http::message::headers","httpclient","httpclient::sessionmanager","httpclient","httpclient::sessionmanager","httpclient::basicauth","httpclient::digestauth","httpclient::negotiateauth","httpclient::oauth","httpclient::proxyauth","httpclient::sspinegotiateauth","httpclient::wwwauth","http::message::body","http::message::headers","httpclient::sslconfig","webagent::cookiemanager","httpclient","webagent::cookiemanager","httpclient::sessionmanager","webagent::cookie","http::message::headers","httpclient::basicauth","httpclient::digestauth","httpclient::negotiateauth","httpclient::oauth","httpclient::sspinegotiateauth","httpclient::basicauth","httpclient::digestauth","httpclient::negotiateauth","httpclient::oauth","httpclient::sspinegotiateauth","httpclient","httpclient::proxyauth","httpclient::wwwauth","httpclient","http::message::headers","http::message::headers","httpclient::sslconfig","httpclient::oauth","http::message::body","httpclient","httpclient::sslconfig","httpclient","webagent::cookie","http::message::headers","httpclient::session","http::message::headers","httpclient","http::message::headers","http::message::headers","httpclient::sslconfig","httpclient::oauth","httpclient::oauth","httpclient::sslsocketwrap","httpclient::timeoutscheduler","http::message","http::message","http::message","http::message::headers","httpclient","http::status","httpclient::sslsocketwrap","httpclient::socketwrap","httpclient::sslsocketwrap","httpclient::socketwrap","webagent::cookieutils","httpclient::timeout","httpclient::sslconfig","httpclient","webagent::cookieutils","httpclient","httpclient","http::message","oauthclient","httpclient::util","httpclient::util","httpclient::util","httpclient::util","httpclient::util","webagent::cookie","httpclient::sessionmanager","httpclient::sslconfig","httpclient::sslconfig","httpclient::sslconfig","http::message","http::message","files/lib/hexdump_rb.html","files/lib/http-access2_rb.html","files/lib/http-access2/cookie_rb.html","files/lib/http-access2/http_rb.html","files/lib/httpclient_rb.html","files/lib/httpclient/auth_rb.html","files/lib/httpclient/cacert_p7s.html","files/lib/httpclient/cacert_sha1_p7s.html","files/lib/httpclient/connection_rb.html","files/lib/httpclient/cookie_rb.html","files/lib/httpclient/http_rb.html","files/lib/httpclient/session_rb.html","files/lib/httpclient/ssl_config_rb.html","files/lib/httpclient/timeout_rb.html","files/lib/httpclient/util_rb.html","files/lib/httpclient/version_rb.html","files/lib/oauthclient_rb.html"]}}