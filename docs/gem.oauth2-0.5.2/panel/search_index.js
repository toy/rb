var search_data = {"index":{"longSearchIndex":["lib/oauth2/version.rb","oauth2","oauth2","oauth2","oauth2","oauth2","oauth2::strategy","oauth2::strategy","oauth2::strategy","oauth2::accesstoken","oauth2::client","oauth2::strategy::authcode","oauth2::client","oauth2::strategy::authcode","oauth2::strategy::password","oauth2::response","oauth2::strategy::base","oauth2::client","oauth2::response","oauth2::accesstoken","oauth2::accesstoken","oauth2::accesstoken","oauth2::accesstoken","oauth2::accesstoken","oauth2::accesstoken","oauth2::client","oauth2::strategy::authcode","oauth2::strategy::password","oauth2::response","oauth2::accesstoken","oauth2::client","oauth2::error","oauth2::response","oauth2::strategy::base","oauth2::response","oauth2::response","oauth2::client","oauth2::accesstoken","oauth2::accesstoken","oauth2::accesstoken","oauth2::response","oauth2::accesstoken","oauth2::client","oauth2::accesstoken","oauth2::client","oauth2::response","oauth2::client","files/license_md.html","files/readme_md.html","files/lib/oauth2_rb.html","files/lib/oauth2/access_token_rb.html","files/lib/oauth2/client_rb.html","files/lib/oauth2/error_rb.html","files/lib/oauth2/response_rb.html","files/lib/oauth2/strategy/auth_code_rb.html","files/lib/oauth2/strategy/base_rb.html","files/lib/oauth2/strategy/password_rb.html","files/lib/oauth2/version_rb.html"],"info":[["OAuth2","lib/oauth2/client.rb","classes/OAuth2.html"," < ","",1],["AccessToken","OAuth2","classes/OAuth2/AccessToken.html"," < Object","",1],["Client","OAuth2","classes/OAuth2/Client.html"," < Object","The OAuth2::Client class ",1],["Error","OAuth2","classes/OAuth2/Error.html"," < StandardError","",1],["Response","OAuth2","classes/OAuth2/Response.html"," < Object","OAuth2::Response class ",1],["Strategy","OAuth2","classes/OAuth2/Strategy.html"," < ","",1],["AuthCode","OAuth2::Strategy","classes/OAuth2/Strategy/AuthCode.html"," < Base","The Authorization Code Strategy @see http://tools.ietf.org/html/draft-ietf-oauth-v2-15#section-4.1 ",1],["Base","OAuth2::Strategy","classes/OAuth2/Strategy/Base.html"," < Object","",1],["Password","OAuth2::Strategy","classes/OAuth2/Strategy/Password.html"," < Base","The Resource Owner Password Credentials Authorization Strategy @see http://tools.ietf.org/html/draft-ietf-oauth-v2-15#section-4.3",1],["[]","OAuth2::AccessToken","classes/OAuth2/AccessToken.html#M000009","(key)","Indexer to additional params present in token response @param [String] key entry key to Hash ",2],["auth_code","OAuth2::Client","classes/OAuth2/Client.html#M000020","()","The Authorization Code strategy @see http://tools.ietf.org/html/draft-ietf-oauth-v2-15#section-4.1 ",2],["authorize_params","OAuth2::Strategy::AuthCode","classes/OAuth2/Strategy/AuthCode.html#M000031","(params={})","The required query parameters for the authorize URL @param [Hash] params additional query parameters",2],["authorize_url","OAuth2::Client","classes/OAuth2/Client.html#M000006","(params=nil)","The authorize endpoint URL of the OAuth2 provider @param [Hash] params additional query parameters ",2],["authorize_url","OAuth2::Strategy::AuthCode","classes/OAuth2/Strategy/AuthCode.html#M000032","(params={})","The authorization URL endpoint of the provider @param [Hash] params additional query parameters for the",2],["authorize_url","OAuth2::Strategy::Password","classes/OAuth2/Strategy/Password.html#M000036","()","Not used for this strategy @raise [NotImplementedError] ",2],["body","OAuth2::Response","classes/OAuth2/Response.html#M000027","()","The HTTP resposne body ",2],["client_params","OAuth2::Strategy::Base","classes/OAuth2/Strategy/Base.html#M000035","()","The OAuth client_id and client_secret @return [Hash] ",2],["connection","OAuth2::Client","classes/OAuth2/Client.html#M000005","()","The Faraday connection object ",2],["content_type","OAuth2::Response","classes/OAuth2/Response.html#M000029","()","Attempts to determine the content type of the response. ",2],["delete","OAuth2::AccessToken","classes/OAuth2/AccessToken.html#M000018","(path, opts={}, &block)","Make a DELETE request with the Access Token @see AccessToken#request ",2],["expired?","OAuth2::AccessToken","classes/OAuth2/AccessToken.html#M000011","()","Whether or not the token is expired @return [Boolean] ",2],["expires?","OAuth2::AccessToken","classes/OAuth2/AccessToken.html#M000010","()","Whether or not the token expires @return [Boolean] ",2],["from_hash","OAuth2::AccessToken","classes/OAuth2/AccessToken.html#M000001","(client, hash)","Initializes an AccessToken from a Hash @param [Client] the OAuth2::Client instance @param [Hash] a hash",2],["from_kvform","OAuth2::AccessToken","classes/OAuth2/AccessToken.html#M000002","(client, kvform)","Initializes an AccessToken from a key/value application/x-www-form-urlencoded string @param [Client]",2],["get","OAuth2::AccessToken","classes/OAuth2/AccessToken.html#M000014","(path, opts={}, &block)","Make a GET request with the Access Token @see AccessToken#request ",2],["get_token","OAuth2::Client","classes/OAuth2/Client.html#M000017","(params, access_token_opts={})","Initializes an AccessToken by making a request to the token endpoint @param [Hash] params a Hash of params",2],["get_token","OAuth2::Strategy::AuthCode","classes/OAuth2/Strategy/AuthCode.html#M000033","(code, params={}, opts={})","Retrieve an access token given the specified validation code. @param [String] code The Authorization",2],["get_token","OAuth2::Strategy::Password","classes/OAuth2/Strategy/Password.html#M000037","(username, password, params={}, opts={})","Retrieve an access token given the specified End User username and password. @param [String] username",2],["headers","OAuth2::Response","classes/OAuth2/Response.html#M000025","()","The HTTP response headers ",2],["new","OAuth2::AccessToken","classes/OAuth2/AccessToken.html#M000003","(client, token, opts={})","Initalize an AccessToken @param [Client] client the OAuth2::Client instance @param [String] token the",2],["new","OAuth2::Client","classes/OAuth2/Client.html#M000000","(client_id, client_secret, opts={}, &block)","Instantiate a new OAuth 2.0 client using the Client ID and Client Secret registered to your application.",2],["new","OAuth2::Error","classes/OAuth2/Error.html#M000023","(response)","standard error values include: :invalid_request, :invalid_client, :invalid_token, :invalid_grant, :unsupported_grant_type,",2],["new","OAuth2::Response","classes/OAuth2/Response.html#M000024","(response, opts={})","Initializes a Response instance @param [Faraday::Response] response The Faraday response instance @param",2],["new","OAuth2::Strategy::Base","classes/OAuth2/Strategy/Base.html#M000034","(client)","",2],["parsed","OAuth2::Response","classes/OAuth2/Response.html#M000028","()","The parsed response body. Will attempt to parse application/x-www-form-urlencoded and application/json",2],["parser","OAuth2::Response","classes/OAuth2/Response.html#M000030","()","Determines the parser that will be used to supply the content of #parsed ",2],["password","OAuth2::Client","classes/OAuth2/Client.html#M000021","()","The Resource Owner Password Credentials strategy @see http://tools.ietf.org/html/draft-ietf-oauth-v2-15#section-4.3",2],["post","OAuth2::AccessToken","classes/OAuth2/AccessToken.html#M000015","(path, opts={}, &block)","Make a POST request with the Access Token @see AccessToken#request ",2],["put","OAuth2::AccessToken","classes/OAuth2/AccessToken.html#M000016","(path, opts={}, &block)","Make a PUT request with the Access Token @see AccessToken#request ",2],["refresh!","OAuth2::AccessToken","classes/OAuth2/AccessToken.html#M000012","(params={})","Refreshes the current Access Token @return [AccessToken] a new AccessToken @note options should be carried",2],["register_parser","OAuth2::Response","classes/OAuth2/Response.html#M000022","(key, mime_types, &block)","Adds a new content type parser. @param [Symbol] key A descriptive symbol key such as :json or :query.",2],["request","OAuth2::AccessToken","classes/OAuth2/AccessToken.html#M000013","(verb, path, opts={}, &block)","Make a request with the Access Token @param [Symbol] verb the HTTP request method @param [String] path",2],["request","OAuth2::Client","classes/OAuth2/Client.html#M000008","(verb, url, opts={})","Makes a request relative to the specified site root. @param [Symbol] verb one of :get, :post, :put, :delete",2],["set_token","OAuth2::AccessToken","classes/OAuth2/AccessToken.html#M000019","(opts)","",2],["site=","OAuth2::Client","classes/OAuth2/Client.html#M000004","(value)","Set the site host @param [String] the OAuth2 provider site host ",2],["status","OAuth2::Response","classes/OAuth2/Response.html#M000026","()","The HTTP response status code ",2],["token_url","OAuth2::Client","classes/OAuth2/Client.html#M000007","(params=nil)","The token endpoint URL of the OAuth2 provider @param [Hash] params additional query parameters ",2],["LICENSE.md","files/LICENSE_md.html","files/LICENSE_md.html","","Copyright (c) 2011 Intridea, Inc. and Michael Bleigh  Permission is hereby granted, free of charge, to",3],["README.md","files/README_md.html","files/README_md.html","","# OAuth2 [![Build Status](https://secure.travis-ci.org/intridea/oauth2.png?branch=master)][travis] [![Dependency",3],["oauth2.rb","files/lib/oauth2_rb.html","files/lib/oauth2_rb.html","","",3],["access_token.rb","files/lib/oauth2/access_token_rb.html","files/lib/oauth2/access_token_rb.html","","",3],["client.rb","files/lib/oauth2/client_rb.html","files/lib/oauth2/client_rb.html","","",3],["error.rb","files/lib/oauth2/error_rb.html","files/lib/oauth2/error_rb.html","","",3],["response.rb","files/lib/oauth2/response_rb.html","files/lib/oauth2/response_rb.html","","",3],["auth_code.rb","files/lib/oauth2/strategy/auth_code_rb.html","files/lib/oauth2/strategy/auth_code_rb.html","","",3],["base.rb","files/lib/oauth2/strategy/base_rb.html","files/lib/oauth2/strategy/base_rb.html","","",3],["password.rb","files/lib/oauth2/strategy/password_rb.html","files/lib/oauth2/strategy/password_rb.html","","",3],["version.rb","files/lib/oauth2/version_rb.html","files/lib/oauth2/version_rb.html","","",3]],"searchIndex":["oauth2","accesstoken","client","error","response","strategy","authcode","base","password","[]()","auth_code()","authorize_params()","authorize_url()","authorize_url()","authorize_url()","body()","client_params()","connection()","content_type()","delete()","expired?()","expires?()","from_hash()","from_kvform()","get()","get_token()","get_token()","get_token()","headers()","new()","new()","new()","new()","new()","parsed()","parser()","password()","post()","put()","refresh!()","register_parser()","request()","request()","set_token()","site=()","status()","token_url()","license.md","readme.md","oauth2.rb","access_token.rb","client.rb","error.rb","response.rb","auth_code.rb","base.rb","password.rb","version.rb"]}}