var search_data = {"index":{"info":[["ChunkyPNG","lib/chunky_png/canvas/adam7_interlacing.rb","classes/ChunkyPNG.html"," < ","ChunkyPNG - the pure ruby library to access PNG files. The ChunkyPNG module defines some constants that",1],["CRCMismatch","ChunkyPNG","classes/ChunkyPNG/CRCMismatch.html"," < ChunkyPNG::Exception","Exception that is raised if the CRC check for a block fails ",1],["Canvas","ChunkyPNG","classes/ChunkyPNG/Canvas.html"," < Object","The ChunkyPNG::Canvas class represents a raster image as a matrix of pixels. This class supports loading",1],["Adam7Interlacing","ChunkyPNG::Canvas","classes/ChunkyPNG/Canvas/Adam7Interlacing.html"," < ","Methods for decoding and encoding Adam7 interlacing. Adam7 interlacing extracts 7 pass images out of",1],["DataUrlExporting","ChunkyPNG::Canvas","classes/ChunkyPNG/Canvas/DataUrlExporting.html"," < ","Methods to export a canvas to a PNG data URL. ",1],["DataUrlImporting","ChunkyPNG::Canvas","classes/ChunkyPNG/Canvas/DataUrlImporting.html"," < ","Methods to import a canvas from a PNG data URL. ",1],["Drawing","ChunkyPNG::Canvas","classes/ChunkyPNG/Canvas/Drawing.html"," < ","Module that adds some primitive drawing methods to {ChunkyPNG::Canvas}. All of these methods change the",1],["Masking","ChunkyPNG::Canvas","classes/ChunkyPNG/Canvas/Masking.html"," < ","The ChunkyPNG::Canvas::Masking module defines methods to perform masking and theming operations on a",1],["Operations","ChunkyPNG::Canvas","classes/ChunkyPNG/Canvas/Operations.html"," < ","The ChunkyPNG::Canvas::Operations module defines methods to perform operations on a {ChunkyPNG::Canvas}.",1],["PNGDecoding","ChunkyPNG::Canvas","classes/ChunkyPNG/Canvas/PNGDecoding.html"," < ","The PNGDecoding contains methods for decoding PNG datastreams to create a  Canvas object. The datastream",1],["PNGEncoding","ChunkyPNG::Canvas","classes/ChunkyPNG/Canvas/PNGEncoding.html"," < ","Methods for encoding a Canvas instance into a PNG datastream. Overview of the encoding process: * The",1],["Resampling","ChunkyPNG::Canvas","classes/ChunkyPNG/Canvas/Resampling.html"," < ","The ChunkyPNG::Canvas::Resampling module defines methods to perform image resampling to  a {ChunkyPNG::Canvas}.",1],["StreamExporting","ChunkyPNG::Canvas","classes/ChunkyPNG/Canvas/StreamExporting.html"," < ","Methods to save load a canvas from to stream, encoded in RGB, RGBA, BGR or ABGR format. ",1],["StreamImporting","ChunkyPNG::Canvas","classes/ChunkyPNG/Canvas/StreamImporting.html"," < ","Methods to quickly load a canvas from a stream, encoded in RGB, RGBA, BGR or ABGR format. ",1],["Chunk","ChunkyPNG","classes/ChunkyPNG/Chunk.html"," < ","A PNG datastream consists of multiple chunks. This module, and the classes contained within, help with",1],["Base","ChunkyPNG::Chunk","classes/ChunkyPNG/Chunk/Base.html"," < Object","The base chunk class is the superclass for every chunk type. It contains methods to write the chunk to",1],["CompressedText","ChunkyPNG::Chunk","classes/ChunkyPNG/Chunk/CompressedText.html"," < Base","The CompressedText (zTXt) chunk contains keyword/value metadata about  the PNG stream. In this chunk,",1],["End","ChunkyPNG::Chunk","classes/ChunkyPNG/Chunk/End.html"," < Base","The End (IEND) chunk indicates the last chunk of a PNG stream. It does not contain any data. ",1],["Generic","ChunkyPNG::Chunk","classes/ChunkyPNG/Chunk/Generic.html"," < Base","The Generic chunk type will read the content from the chunk as it,  and will write it back as it was",1],["Header","ChunkyPNG::Chunk","classes/ChunkyPNG/Chunk/Header.html"," < Base","The header (IHDR) chunk is the first chunk of every PNG image, and  contains information about the image:",1],["ImageData","ChunkyPNG::Chunk","classes/ChunkyPNG/Chunk/ImageData.html"," < Generic","",1],["InternationalText","ChunkyPNG::Chunk","classes/ChunkyPNG/Chunk/InternationalText.html"," < Generic","The Text (iTXt) chunk contains keyword/value metadata about the PNG stream. The metadata in this chunk",1],["Palette","ChunkyPNG::Chunk","classes/ChunkyPNG/Chunk/Palette.html"," < Generic","The Palette (PLTE) chunk contains the image's palette, i.e. the 8-bit RGB colors this image is using.",1],["Text","ChunkyPNG::Chunk","classes/ChunkyPNG/Chunk/Text.html"," < Base","The Text (tEXt) chunk contains keyword/value metadata about the PNG stream. In this chunk, the value",1],["Transparency","ChunkyPNG::Chunk","classes/ChunkyPNG/Chunk/Transparency.html"," < Generic","A transparency (tRNS) chunk defines the transparency for an image. * For indexed images, it contains",1],["Color","ChunkyPNG","classes/ChunkyPNG/Color.html"," < ","The Color module defines methods for handling colors. Within the ChunkyPNG library, the concepts of pixels",1],["Datastream","ChunkyPNG","classes/ChunkyPNG/Datastream.html"," < Object","The Datastream class represents a PNG formatted datastream. It supports both reading from and writing",1],["Dimension","ChunkyPNG","classes/ChunkyPNG/Dimension.html"," < Object","Class that represents the dimension of something, e.g. a {ChunkyPNG::Canvas}. This class contains some",1],["Exception","ChunkyPNG","classes/ChunkyPNG/Exception.html"," < ::StandardError","Default exception class for ChunkyPNG ",1],["ExpectationFailed","ChunkyPNG","classes/ChunkyPNG/ExpectationFailed.html"," < ChunkyPNG::Exception","Exception that is raised if an expectation fails. ",1],["Image","ChunkyPNG","classes/ChunkyPNG/Image.html"," < Canvas","ChunkyPNG::Image is an extension of the {ChunkyPNG::Canvas} class, that also includes support for metadata.",1],["NotSupported","ChunkyPNG","classes/ChunkyPNG/NotSupported.html"," < ChunkyPNG::Exception","Exception that is raised for an unsupported PNG image. ",1],["OutOfBounds","ChunkyPNG","classes/ChunkyPNG/OutOfBounds.html"," < ChunkyPNG::ExpectationFailed","Exception that is raised if an expectation fails. ",1],["Palette","ChunkyPNG","classes/ChunkyPNG/Palette.html"," < SortedSet","A palette describes the set of colors that is being used for an image. A PNG image can contain an explicit",1],["Point","ChunkyPNG","classes/ChunkyPNG/Point.html"," < Object","Simple class that represents a point on a canvas using an x and y coordinate. This class implements some",1],["RMagick","ChunkyPNG","classes/ChunkyPNG/RMagick.html"," < ","Methods for importing and exporting RMagick image objects. By default, this module is disabled because",1],["SignatureMismatch","ChunkyPNG","classes/ChunkyPNG/SignatureMismatch.html"," < ChunkyPNG::Exception","Exception that is raised if the PNG signature is not encountered at the  beginning of the file. ",1],["Vector","ChunkyPNG","classes/ChunkyPNG/Vector.html"," < Object","Class that represents a vector of points, i.e. a list of {ChunkyPNG::Point} instances. Vectors can be",1],["String","lib/chunky_png/compatibility.rb","classes/String.html"," < Object","Define the byte-operators on a string if they're not defined (Ruby 1.8) ",1],["Enumerable","String","classes/String/Enumerable.html"," < ","",1],["<=>","ChunkyPNG::Dimension","classes/ChunkyPNG/Dimension.html#M000245","(other)","Compares the size of 2 dimensions. @param [ChunkyPNG::Dimension] The dimension to compare with. @return",2],["<=>","ChunkyPNG::Point","classes/ChunkyPNG/Point.html#M000280","(other)","Compares 2 points. It will first compare the y coordinate, and it only takes the x-coordinate into account",2],["==","ChunkyPNG::Canvas","classes/ChunkyPNG/Canvas.html#M000160","(other)","Alias for #eql?",2],["==","ChunkyPNG::Dimension","classes/ChunkyPNG/Dimension.html#M000244","(other)","Alias for #eql?",2],["==","ChunkyPNG::Point","classes/ChunkyPNG/Point.html#M000279","(other)","Alias for #eql?",2],["==","ChunkyPNG::Vector","classes/ChunkyPNG/Vector.html#M000294","(other)","Alias for #eql?",2],["Color","ChunkyPNG","classes/ChunkyPNG.html#M000188","(*args)","Factory method to return a color value, based on the arguments given. @overload Color(r, g, b, a) @param",2],["Dimension","ChunkyPNG","classes/ChunkyPNG.html#M000232","(*args)","Creates a {ChunkyPNG::Dimension} instance using arguments that can be interpreted  as width and height.",2],["Point","ChunkyPNG","classes/ChunkyPNG.html#M000274","(*args)","Factory method to create {ChunkyPNG::Point} instances. This method tries to be as flexible as possible",2],["Vector","ChunkyPNG","classes/ChunkyPNG.html#M000286","(*args)","Factory method for {ChunkyPNG::Vector} instances. @overload Vector(x0, y0, x1, y1, x2, y2, ...) Creates",2],["[]","ChunkyPNG::Canvas","classes/ChunkyPNG/Canvas.html#M000139","(x, y)","Returns a single pixel's color value from this canvas. @param [Integer] x The x-coordinate of the pixel",2],["[]","ChunkyPNG::Palette","classes/ChunkyPNG/Palette.html#M000270","(index)","Returns a color, given the position in the original palette chunk. @param [Integer] index The 0-based",2],["[]","ChunkyPNG::Vector","classes/ChunkyPNG/Vector.html#M000289","(index)","Returns the point with the given indexof this vector. @param [Integer] index The 0-based index of the",2],["[]=","ChunkyPNG::Canvas","classes/ChunkyPNG/Canvas.html#M000136","(x, y, color)","Replaces a single pixel in this canvas. @param [Integer] x The x-coordinate of the pixel (column) @param",2],["a","ChunkyPNG::Color","classes/ChunkyPNG/Color.html#M000200","(value)","Returns the alpha channel value for the color value. @param [Integer] value The color value. @return",2],["adam7_extract_pass","ChunkyPNG::Canvas::Adam7Interlacing","classes/ChunkyPNG/Canvas/Adam7Interlacing.html#M000004","(pass, canvas)","Extracts a pass from a complete image @param [Integer] pass The pass number, should be in 0..6. @param",2],["adam7_merge_pass","ChunkyPNG::Canvas::Adam7Interlacing","classes/ChunkyPNG/Canvas/Adam7Interlacing.html#M000003","(pass, canvas, subcanvas)","Merges a pass image into a total image that is being constructed. @param [Integer] pass The pass number,",2],["adam7_multiplier_offset","ChunkyPNG::Canvas::Adam7Interlacing","classes/ChunkyPNG/Canvas/Adam7Interlacing.html#M000000","(pass)","Returns an array with the x-shift, x-offset, y-shift and y-offset for the requested pass. @param [Integer]",2],["adam7_pass_size","ChunkyPNG::Canvas::Adam7Interlacing","classes/ChunkyPNG/Canvas/Adam7Interlacing.html#M000001","(pass, original_width, original_height)","Returns the pixel dimensions of the requested pass. @param [Integer] pass The pass number, should be",2],["adam7_pass_sizes","ChunkyPNG::Canvas::Adam7Interlacing","classes/ChunkyPNG/Canvas/Adam7Interlacing.html#M000002","(original_width, original_height)","Returns an array of the dimension of all the pass images. @param [Integer] original_width The width of",2],["alpha_decomposable?","ChunkyPNG::Color","classes/ChunkyPNG/Color.html#M000230","(color, mask, bg, tolerance = 1)","Checks whether an alpha channel value can successfully be composed given the resulting color, the mask",2],["area","ChunkyPNG::Canvas","classes/ChunkyPNG/Canvas.html#M000135","()","Returns the area of this canvas in number of pixels. @return [Integer] The number of pixels in this canvas",2],["area","ChunkyPNG::Dimension","classes/ChunkyPNG/Dimension.html#M000238","()","Returns the area of this dimension. @return [Integer] The area in number of pixels. ",2],["assert_height!","ChunkyPNG::Canvas","classes/ChunkyPNG/Canvas.html#M000167","(vector_length)","Throws an exception if the vector_length does not match this canvas' height. ",2],["assert_size!","ChunkyPNG::Canvas","classes/ChunkyPNG/Canvas.html#M000170","(matrix_width, matrix_height)","Throws an exception if the matrix width and height does not match this canvas' dimensions. ",2],["assert_width!","ChunkyPNG::Canvas","classes/ChunkyPNG/Canvas.html#M000168","(vector_length)","Throws an exception if the vector_length does not match this canvas' width. ",2],["assert_x!","ChunkyPNG::Canvas","classes/ChunkyPNG/Canvas.html#M000164","(x)","Throws an exception if the x-coordinate is out of bounds. ",2],["assert_xy!","ChunkyPNG::Canvas","classes/ChunkyPNG/Canvas.html#M000166","(x, y)","Throws an exception if the x- or y-coordinate is out of bounds. ",2],["assert_y!","ChunkyPNG::Canvas","classes/ChunkyPNG/Canvas.html#M000165","(y)","Throws an exception if the y-coordinate is out of bounds. ",2],["b","ChunkyPNG::Color","classes/ChunkyPNG/Color.html#M000199","(value)","Returns the blue-component from the color value. @param [Integer] value The color value. @return [Integer]",2],["best_color_settings","ChunkyPNG::Palette","classes/ChunkyPNG/Palette.html#M000275","()","Determines the most suitable colormode for this palette. @return [Integer] The colormode which would",2],["bezier_curve","ChunkyPNG::Canvas::Drawing","classes/ChunkyPNG/Canvas/Drawing.html#M000009","(points, stroke_color = ChunkyPNG::Color::BLACK)","Draws a Bezier curve @param [Array, Point] A collection of control points @return [Chunky:PNG::Canvas]",2],["binomial_coefficient","ChunkyPNG::Canvas::Drawing","classes/ChunkyPNG/Canvas/Drawing.html#M000023","(n, k)","Calculates the binomial coefficient for n over k. @param [Integer] n first parameter in coeffient (the",2],["black_and_white?","ChunkyPNG::Palette","classes/ChunkyPNG/Palette.html#M000266","()","Check whether this palette only contains bacl and white. @return [true, false] True if all colors in",2],["blend","ChunkyPNG::Color","classes/ChunkyPNG/Color.html#M000221","(fg, bg)","Blends the foreground and background color by taking the average of  the components. @param [Integer]",2],["can_decode?","ChunkyPNG::Palette","classes/ChunkyPNG/Palette.html#M000268","()","Checks whether this palette is suitable for decoding an image from a datastream. This requires that the",2],["can_encode?","ChunkyPNG::Palette","classes/ChunkyPNG/Palette.html#M000269","()","Checks whether this palette is suitable for encoding an image from to datastream. This requires that",2],["change_mask_color!","ChunkyPNG::Canvas::Masking","classes/ChunkyPNG/Canvas/Masking.html#M000013","(new_color)","Changes the color of a mask image. This method works on a canvas extracted out of another image using",2],["change_theme_color!","ChunkyPNG::Canvas::Masking","classes/ChunkyPNG/Canvas/Masking.html#M000011","(old_theme_color, new_theme_color, bg_color = ChunkyPNG::Color::WHITE, tolerance = 5)","Creates a new image, based on the current image but with a new theme color. This method will replace",2],["check_size_constraints!","ChunkyPNG::Canvas::Operations","classes/ChunkyPNG/Canvas/Operations.html#M000045","(other, offset_x, offset_y)","Checks whether another image has the correct dimension to be used for an operation on the current image,",2],["chunks","ChunkyPNG::Datastream","classes/ChunkyPNG/Datastream.html#M000213","()","Returns an enumerator instance for this datastream's chunks. @return [Enumerable::Enumerator] An enumerator",2],["circle","ChunkyPNG::Canvas::Drawing","classes/ChunkyPNG/Canvas/Drawing.html#M000017","(x0, y0, radius, stroke_color = ChunkyPNG::Color::BLACK, fill_color = ChunkyPNG::Color::TRANSPARENT)","Draws a circle on the canvas. @param [Integer] x0 The x-coordinate of the center of the circle. @param",2],["column","ChunkyPNG::Canvas","classes/ChunkyPNG/Canvas.html#M000144","(x)","Returns an extracted column as vector of pixels. @param [Integer] x The 0-based column index. @return",2],["combine_chunks","ChunkyPNG::Chunk::ImageData","classes/ChunkyPNG/Chunk/ImageData.html#M000179","(data_chunks)","",2],["compose","ChunkyPNG::Canvas::Operations","classes/ChunkyPNG/Canvas/Operations.html#M000021","(other, offset_x = 0, offset_y = 0)","Composes another image onto this image using alpha blending. This will return a new canvas and leave",2],["compose","ChunkyPNG::Color","classes/ChunkyPNG/Color.html#M000220","(fg, bg)","Alias for #compose_quick",2],["compose!","ChunkyPNG::Canvas::Operations","classes/ChunkyPNG/Canvas/Operations.html#M000020","(other, offset_x = 0, offset_y = 0)","Composes another image onto this image using alpha blending. This will modify the current canvas. If",2],["compose_pixel","ChunkyPNG::Canvas::Drawing","classes/ChunkyPNG/Canvas/Drawing.html#M000007","(x, y, color)","Composes a pixel on the canvas by alpha blending a color with its background color. @param [Integer]",2],["compose_pixel_unsafe","ChunkyPNG::Canvas::Drawing","classes/ChunkyPNG/Canvas/Drawing.html#M000008","(x, y, color)","Composes a pixel on the canvas by alpha blending a color with its background color, without bounds checking.",2],["compose_precise","ChunkyPNG::Color","classes/ChunkyPNG/Color.html#M000216","(fg, bg)","Composes two colors with an alpha channel using floating point math. This method uses more precise floating",2],["compose_quick","ChunkyPNG::Color","classes/ChunkyPNG/Color.html#M000211","(fg, bg)","Composes two colors with an alpha channel using integer math. This version is faster than the version",2],["content","ChunkyPNG::Chunk::CompressedText","classes/ChunkyPNG/Chunk/CompressedText.html#M000186","()","Creates the content to write to the stream, by concatenating the keyword with the deflated value, joined",2],["content","ChunkyPNG::Chunk::End","classes/ChunkyPNG/Chunk/End.html#M000174","()","Returns an empty string, because this chunk should always be empty. @return [\"\"] An empty string. ",2],["content","ChunkyPNG::Chunk::Header","classes/ChunkyPNG/Chunk/Header.html#M000171","()","Returns the content for this chunk when it gets written to a file, by packing the image information variables",2],["content","ChunkyPNG::Chunk::Text","classes/ChunkyPNG/Chunk/Text.html#M000183","()","Creates the content to write to the stream, by concatenating the keyword with the value, joined by a",2],["crop","ChunkyPNG::Canvas::Operations","classes/ChunkyPNG/Canvas/Operations.html#M000025","(x, y, crop_width, crop_height)","Crops an image, given the coordinates and size of the image that needs to be cut out. This will leave",2],["crop!","ChunkyPNG::Canvas::Operations","classes/ChunkyPNG/Canvas/Operations.html#M000026","(x, y, crop_width, crop_height)","Crops an image, given the coordinates and size of the image that needs to be cut out. This will change",2],["decode_png_extract_1bit_value","ChunkyPNG::Canvas::PNGDecoding","classes/ChunkyPNG/Canvas/PNGDecoding.html#M000063","(byte, index)","Extract a bit from a byte on a given index. @param [Integer] byte The byte (0..255) value to extract",2],["decode_png_extract_2bit_value","ChunkyPNG::Canvas::PNGDecoding","classes/ChunkyPNG/Canvas/PNGDecoding.html#M000062","(byte, index)","Extract 2 consecutive bits from a byte. @param [Integer] byte The byte (0..255) value to extract a 2",2],["decode_png_extract_4bit_value","ChunkyPNG::Canvas::PNGDecoding","classes/ChunkyPNG/Canvas/PNGDecoding.html#M000061","(byte, index)","Extract 4 consecutive bits from a byte. @param [Integer] byte The byte (0..255) value to extract a 4",2],["decode_png_image_pass","ChunkyPNG::Canvas::PNGDecoding","classes/ChunkyPNG/Canvas/PNGDecoding.html#M000094","(stream, width, height, color_mode, depth, start_pos)","Decodes a single PNG image pass width a given width, height and color  mode, to a Canvas, starting at",2],["decode_png_pixels_from_scanline_grayscale_16bit","ChunkyPNG::Canvas::PNGDecoding","classes/ChunkyPNG/Canvas/PNGDecoding.html#M000090","(stream, pos, width)","Decodes a scanline of a 16-bit, grayscale image into a row of pixels. @params (see #decode_png_pixels_from_scanline_indexed_1bit)",2],["decode_png_pixels_from_scanline_grayscale_1bit","ChunkyPNG::Canvas::PNGDecoding","classes/ChunkyPNG/Canvas/PNGDecoding.html#M000084","(stream, pos, width)","Decodes a scanline of a 1-bit, grayscale image into a row of pixels. @params (see #decode_png_pixels_from_scanline_indexed_1bit)",2],["decode_png_pixels_from_scanline_grayscale_2bit","ChunkyPNG::Canvas::PNGDecoding","classes/ChunkyPNG/Canvas/PNGDecoding.html#M000085","(stream, pos, width)","Decodes a scanline of a 2-bit, grayscale image into a row of pixels. @params (see #decode_png_pixels_from_scanline_indexed_1bit)",2],["decode_png_pixels_from_scanline_grayscale_4bit","ChunkyPNG::Canvas::PNGDecoding","classes/ChunkyPNG/Canvas/PNGDecoding.html#M000086","(stream, pos, width)","Decodes a scanline of a 4-bit, grayscale image into a row of pixels. @params (see #decode_png_pixels_from_scanline_indexed_1bit)",2],["decode_png_pixels_from_scanline_grayscale_8bit","ChunkyPNG::Canvas::PNGDecoding","classes/ChunkyPNG/Canvas/PNGDecoding.html#M000089","(stream, pos, width)","Decodes a scanline of an 8-bit, grayscale image into a row of pixels. @params (see #decode_png_pixels_from_scanline_indexed_1bit)",2],["decode_png_pixels_from_scanline_grayscale_alpha_16bit","ChunkyPNG::Canvas::PNGDecoding","classes/ChunkyPNG/Canvas/PNGDecoding.html#M000083","(stream, pos, width)","Decodes a scanline of a 16-bit, grayscale image with transparency into a row of pixels. @params (see",2],["decode_png_pixels_from_scanline_grayscale_alpha_8bit","ChunkyPNG::Canvas::PNGDecoding","classes/ChunkyPNG/Canvas/PNGDecoding.html#M000081","(stream, pos, width)","Decodes a scanline of an 8-bit, grayscale image with transparency into a row of pixels. @params (see",2],["decode_png_pixels_from_scanline_indexed_1bit","ChunkyPNG::Canvas::PNGDecoding","classes/ChunkyPNG/Canvas/PNGDecoding.html#M000070","(stream, pos, width)","Decodes a scanline of a 1-bit, indexed image into a row of pixels. @param [String] stream The stream",2],["decode_png_pixels_from_scanline_indexed_2bit","ChunkyPNG::Canvas::PNGDecoding","classes/ChunkyPNG/Canvas/PNGDecoding.html#M000071","(stream, pos, width)","Decodes a scanline of a 2-bit, indexed image into a row of pixels. @params (see #decode_png_pixels_from_scanline_indexed_1bit)",2],["decode_png_pixels_from_scanline_indexed_4bit","ChunkyPNG::Canvas::PNGDecoding","classes/ChunkyPNG/Canvas/PNGDecoding.html#M000072","(stream, pos, width)","Decodes a scanline of a 4-bit, indexed image into a row of pixels. @params (see #decode_png_pixels_from_scanline_indexed_1bit)",2],["decode_png_pixels_from_scanline_indexed_8bit","ChunkyPNG::Canvas::PNGDecoding","classes/ChunkyPNG/Canvas/PNGDecoding.html#M000074","(stream, pos, width)","Decodes a scanline of a 8-bit, indexed image into a row of pixels. @params (see #decode_png_pixels_from_scanline_indexed_1bit)",2],["decode_png_pixels_from_scanline_method","ChunkyPNG::Canvas::PNGDecoding","classes/ChunkyPNG/Canvas/PNGDecoding.html#M000092","(color_mode, depth)","Returns the method name to use to decode scanlines into pixels. @param [Integer] color_mode The color",2],["decode_png_pixels_from_scanline_truecolor_16bit","ChunkyPNG::Canvas::PNGDecoding","classes/ChunkyPNG/Canvas/PNGDecoding.html#M000080","(stream, pos, width)","Decodes a scanline of a 16-bit, true color image into a row of pixels. @params (see #decode_png_pixels_from_scanline_indexed_1bit)",2],["decode_png_pixels_from_scanline_truecolor_8bit","ChunkyPNG::Canvas::PNGDecoding","classes/ChunkyPNG/Canvas/PNGDecoding.html#M000077","(stream, pos, width)","Decodes a scanline of an 8-bit, true color image into a row of pixels. @params (see #decode_png_pixels_from_scanline_indexed_1bit)",2],["decode_png_pixels_from_scanline_truecolor_alpha_16bit","ChunkyPNG::Canvas::PNGDecoding","classes/ChunkyPNG/Canvas/PNGDecoding.html#M000076","(stream, pos, width)","Decodes a scanline of a 16-bit, true color image with transparency into a row of pixels. @params (see",2],["decode_png_pixels_from_scanline_truecolor_alpha_8bit","ChunkyPNG::Canvas::PNGDecoding","classes/ChunkyPNG/Canvas/PNGDecoding.html#M000075","(stream, pos, width)","Decodes a scanline of an 8-bit, true color image with transparency into a row of pixels. @params (see",2],["decode_png_pixelstream","ChunkyPNG::Canvas::PNGDecoding","classes/ChunkyPNG/Canvas/PNGDecoding.html#M000052","(stream, width, height, color_mode, depth, interlace)","Decodes a canvas from a PNG encoded pixelstream, using a given width, height,  color mode and interlacing",2],["decode_png_resample_16bit_value","ChunkyPNG::Canvas::PNGDecoding","classes/ChunkyPNG/Canvas/PNGDecoding.html#M000064","(value)","Resamples a 16 bit value to an 8 bit value. This will discard some color information. @param [Integer]",2],["decode_png_resample_1bit_value","ChunkyPNG::Canvas::PNGDecoding","classes/ChunkyPNG/Canvas/PNGDecoding.html#M000069","(value)","Resamples a 1 bit value to an 8 bit value. @param [Integer] value The 1 bit value to resample. @return",2],["decode_png_resample_2bit_value","ChunkyPNG::Canvas::PNGDecoding","classes/ChunkyPNG/Canvas/PNGDecoding.html#M000068","(value)","Resamples a 2 bit value to an 8 bit value. @param [Integer] value The 2 bit value to resample. @return",2],["decode_png_resample_4bit_value","ChunkyPNG::Canvas::PNGDecoding","classes/ChunkyPNG/Canvas/PNGDecoding.html#M000066","(value)","Resamples a 4 bit value to an 8 bit value. @param [Integer] value The 4 bit value to resample. @return",2],["decode_png_resample_8bit_value","ChunkyPNG::Canvas::PNGDecoding","classes/ChunkyPNG/Canvas/PNGDecoding.html#M000065","(value)","No-op - available for completeness sake only @param [Integer] value The 8 bit value to resample. @return",2],["decode_png_str_scanline","ChunkyPNG::Canvas::PNGDecoding","classes/ChunkyPNG/Canvas/PNGDecoding.html#M000098","(stream, pos, prev_pos, line_length, pixel_size)","Decodes a scanline if it was encoded using filtering.  It will extract the filtering method from the",2],["decode_png_str_scanline_average","ChunkyPNG::Canvas::PNGDecoding","classes/ChunkyPNG/Canvas/PNGDecoding.html#M000104","(stream, pos, prev_pos, line_length, pixel_size)","Decodes a scanline in a pixelstream that was encoded using AVERAGE filtering. This will change the pixelstream",2],["decode_png_str_scanline_paeth","ChunkyPNG::Canvas::PNGDecoding","classes/ChunkyPNG/Canvas/PNGDecoding.html#M000108","(stream, pos, prev_pos, line_length, pixel_size)","Decodes a scanline in a pixelstream that was encoded using PAETH filtering. This will change the pixelstream",2],["decode_png_str_scanline_sub","ChunkyPNG::Canvas::PNGDecoding","classes/ChunkyPNG/Canvas/PNGDecoding.html#M000100","(stream, pos, prev_pos, line_length, pixel_size)","Decodes a scanline in a pixelstream that was encoded using SUB filtering. This will change the pixelstream",2],["decode_png_str_scanline_sub_none","ChunkyPNG::Canvas::PNGDecoding","classes/ChunkyPNG/Canvas/PNGDecoding.html#M000099","(stream, pos, prev_pos, line_length, pixel_size)","Decodes a scanline that wasn't encoded using filtering. This is a no-op. @params (see #decode_png_str_scanline)",2],["decode_png_str_scanline_up","ChunkyPNG::Canvas::PNGDecoding","classes/ChunkyPNG/Canvas/PNGDecoding.html#M000102","(stream, pos, prev_pos, line_length, pixel_size)","Decodes a scanline in a pixelstream that was encoded using UP filtering. This will change the pixelstream",2],["decode_png_with_adam7_interlacing","ChunkyPNG::Canvas::PNGDecoding","classes/ChunkyPNG/Canvas/PNGDecoding.html#M000056","(stream, width, height, color_mode, depth)","Decodes a canvas from a Adam 7 interlaced PNG encoded pixelstream, using a  given width, height and color",2],["decode_png_without_interlacing","ChunkyPNG::Canvas::PNGDecoding","classes/ChunkyPNG/Canvas/PNGDecoding.html#M000053","(stream, width, height, color_mode, depth)","Decodes a canvas from a non-interlaced PNG encoded pixelstream, using a  given width, height and color",2],["decompose_alpha","ChunkyPNG::Color","classes/ChunkyPNG/Color.html#M000231","(color, mask, bg)","Decomposes the alpha channel value given the resulting color, the mask color  and a background color,",2],["decompose_alpha_component","ChunkyPNG::Color","classes/ChunkyPNG/Color.html#M000233","(channel, color, mask, bg)","Decomposes an alpha channel for either the r, g or b color channel. @param [:r, :g, :b] channel The channel",2],["decompose_alpha_components","ChunkyPNG::Color","classes/ChunkyPNG/Color.html#M000234","(color, mask, bg)","Decomposes the alpha channels for the r, g and b color channel. @param [Integer] color The color that",2],["decompose_color","ChunkyPNG::Color","classes/ChunkyPNG/Color.html#M000229","(color, mask, bg, tolerance = 1)","Decomposes a color, given a color, a mask color and a background color. The returned color will be a",2],["determine_bit_depth","ChunkyPNG::Palette","classes/ChunkyPNG/Palette.html#M000276","()","Determines the minimal bit depth required for an indexed image @return [Integer] Number of bits per pixel,",2],["determine_png_encoding","ChunkyPNG::Canvas::PNGEncoding","classes/ChunkyPNG/Canvas/PNGEncoding.html#M000067","(constraints = {})","Determines the best possible PNG encoding variables for this image, by analyzing  the colors used for",2],["dimension","ChunkyPNG::Canvas","classes/ChunkyPNG/Canvas.html#M000134","()","Returns the dimension (width x height) for this canvas. @return [ChunkyPNG::Dimension] A dimension instance",2],["dimension","ChunkyPNG::Vector","classes/ChunkyPNG/Vector.html#M000304","()","Returns the dimension of the minimal bounding rectangle of the points in this vector. @return [ChunkyPNG::Dimension]",2],["each","ChunkyPNG::Vector","classes/ChunkyPNG/Vector.html#M000292","(&block)","Iterates over all the points in this vector @yield [ChunkyPNG::Point] The points in the correct order.",2],["each_chunk","ChunkyPNG::Datastream","classes/ChunkyPNG/Datastream.html#M000212","()","Enumerates the chunks in this datastream. This will iterate over the chunks using the order in which",2],["each_edge","ChunkyPNG::Vector","classes/ChunkyPNG/Vector.html#M000288","(close = true)","Iterates over all the edges in this vector. An edge is a combination of two subsequent points in the",2],["edges","ChunkyPNG::Vector","classes/ChunkyPNG/Vector.html#M000290","(close = true)","Returns an enumerator that will iterate over all the edges in this vector. @param (see #each_edge) @return",2],["empty_bytearray","ChunkyPNG::Datastream","classes/ChunkyPNG/Datastream.html#M000217","()","Returns an empty stream using binary encoding that can be used as stream to encode to. @return [String]",2],["encode_png_image_pass_to_stream","ChunkyPNG::Canvas::PNGEncoding","classes/ChunkyPNG/Canvas/PNGEncoding.html#M000082","(stream, color_mode, bit_depth, filtering)","Encodes the canvas to a stream, in a given color mode. @param [String] stream The stream to write to.",2],["encode_png_image_with_interlacing","ChunkyPNG::Canvas::PNGEncoding","classes/ChunkyPNG/Canvas/PNGEncoding.html#M000079","(color_mode, bit_depth = 8, filtering = ChunkyPNG::FILTER_NONE)","Encodes the canvas according to the PNG format specification with a given color  mode and Adam7 interlacing.",2],["encode_png_image_without_interlacing","ChunkyPNG::Canvas::PNGEncoding","classes/ChunkyPNG/Canvas/PNGEncoding.html#M000078","(color_mode, bit_depth = 8, filtering = ChunkyPNG::FILTER_NONE)","Encodes the canvas according to the PNG format specification with a given color mode. @param [Integer]",2],["encode_png_pixels_to_scanline_grayscale_1bit","ChunkyPNG::Canvas::PNGEncoding","classes/ChunkyPNG/Canvas/PNGEncoding.html#M000097","(pixels)","Encodes a line of pixels using 1-bit grayscale mode. @param [Array<Integer>] pixels A row of pixels of",2],["encode_png_pixels_to_scanline_grayscale_2bit","ChunkyPNG::Canvas::PNGEncoding","classes/ChunkyPNG/Canvas/PNGEncoding.html#M000101","(pixels)","Encodes a line of pixels using 2-bit grayscale mode. @param [Array<Integer>] pixels A row of pixels of",2],["encode_png_pixels_to_scanline_grayscale_4bit","ChunkyPNG::Canvas::PNGEncoding","classes/ChunkyPNG/Canvas/PNGEncoding.html#M000103","(pixels)","Encodes a line of pixels using 2-bit grayscale mode. @param [Array<Integer>] pixels A row of pixels of",2],["encode_png_pixels_to_scanline_grayscale_8bit","ChunkyPNG::Canvas::PNGEncoding","classes/ChunkyPNG/Canvas/PNGEncoding.html#M000105","(pixels)","Encodes a line of pixels using 8-bit grayscale mode. @param [Array<Integer>] pixels A row of pixels of",2],["encode_png_pixels_to_scanline_grayscale_alpha_8bit","ChunkyPNG::Canvas::PNGEncoding","classes/ChunkyPNG/Canvas/PNGEncoding.html#M000106","(pixels)","Encodes a line of pixels using 8-bit grayscale alpha mode. @param [Array<Integer>] pixels A row of pixels",2],["encode_png_pixels_to_scanline_indexed_1bit","ChunkyPNG::Canvas::PNGEncoding","classes/ChunkyPNG/Canvas/PNGEncoding.html#M000091","(pixels)","Encodes a line of pixels using 1-bit indexed mode. @param [Array<Integer>] pixels A row of pixels of",2],["encode_png_pixels_to_scanline_indexed_2bit","ChunkyPNG::Canvas::PNGEncoding","classes/ChunkyPNG/Canvas/PNGEncoding.html#M000093","(pixels)","Encodes a line of pixels using 2-bit indexed mode. @param [Array<Integer>] pixels A row of pixels of",2],["encode_png_pixels_to_scanline_indexed_4bit","ChunkyPNG::Canvas::PNGEncoding","classes/ChunkyPNG/Canvas/PNGEncoding.html#M000095","(pixels)","Encodes a line of pixels using 4-bit indexed mode. @param [Array<Integer>] pixels A row of pixels of",2],["encode_png_pixels_to_scanline_indexed_8bit","ChunkyPNG::Canvas::PNGEncoding","classes/ChunkyPNG/Canvas/PNGEncoding.html#M000096","(pixels)","Encodes a line of pixels using 8-bit indexed mode. @param [Array<Integer>] pixels A row of pixels of",2],["encode_png_pixels_to_scanline_method","ChunkyPNG::Canvas::PNGEncoding","classes/ChunkyPNG/Canvas/PNGEncoding.html#M000107","(color_mode, depth)","Returns the method name to use to decode scanlines into pixels. @param [Integer] color_mode The color",2],["encode_png_pixels_to_scanline_truecolor_8bit","ChunkyPNG::Canvas::PNGEncoding","classes/ChunkyPNG/Canvas/PNGEncoding.html#M000087","(pixels)","Encodes a line of pixels using 8-bit truecolor mode. @param [Array<Integer>] pixels A row of pixels of",2],["encode_png_pixels_to_scanline_truecolor_alpha_8bit","ChunkyPNG::Canvas::PNGEncoding","classes/ChunkyPNG/Canvas/PNGEncoding.html#M000088","(pixels)","Encodes a line of pixels using 8-bit truecolor alpha mode. @param [Array<Integer>] pixels A row of pixels",2],["encode_png_pixelstream","ChunkyPNG::Canvas::PNGEncoding","classes/ChunkyPNG/Canvas/PNGEncoding.html#M000073","(color_mode = ChunkyPNG::COLOR_TRUECOLOR, bit_depth = 8, interlace = ChunkyPNG::INTERLACING_NONE, filtering = ChunkyPNG::FILTER_NONE)","Encodes the canvas according to the PNG format specification with a given color  mode, possibly with",2],["encode_png_str_scanline_average","ChunkyPNG::Canvas::PNGEncoding","classes/ChunkyPNG/Canvas/PNGEncoding.html#M000112","(stream, pos, prev_pos, line_width, pixel_size)","Encodes a scanline of a pixelstream using AVERAGE filtering. This will modify the stream. @param (see",2],["encode_png_str_scanline_none","ChunkyPNG::Canvas::PNGEncoding","classes/ChunkyPNG/Canvas/PNGEncoding.html#M000109","(stream, pos, prev_pos, line_width, pixel_size)","Encodes a scanline of a pixelstream without filtering. This is a no-op. @param [String] stream The pixelstream",2],["encode_png_str_scanline_paeth","ChunkyPNG::Canvas::PNGEncoding","classes/ChunkyPNG/Canvas/PNGEncoding.html#M000113","(stream, pos, prev_pos, line_width, pixel_size)","Encodes a scanline of a pixelstream using PAETH filtering. This will modify the stream. @param (see #encode_png_str_scanline_none)",2],["encode_png_str_scanline_sub","ChunkyPNG::Canvas::PNGEncoding","classes/ChunkyPNG/Canvas/PNGEncoding.html#M000110","(stream, pos, prev_pos, line_width, pixel_size)","Encodes a scanline of a pixelstream using SUB filtering. This will modify the stream. @param (see #encode_png_str_scanline_none)",2],["encode_png_str_scanline_up","ChunkyPNG::Canvas::PNGEncoding","classes/ChunkyPNG/Canvas/PNGEncoding.html#M000111","(stream, pos, prev_pos, line_width, pixel_size)","Encodes a scanline of a pixelstream using UP filtering. This will modify the stream. @param (see #encode_png_str_scanline_none)",2],["eql?","ChunkyPNG::Canvas","classes/ChunkyPNG/Canvas.html#M000158","(other)","Equality check to compare this canvas with other matrices. @param other The object to compare this Matrix",2],["eql?","ChunkyPNG::Dimension","classes/ChunkyPNG/Dimension.html#M000243","(other)","Checks whether 2 dimensions are identical. @param [ChunkyPNG::Dimension] The dimension to compare with.",2],["eql?","ChunkyPNG::Point","classes/ChunkyPNG/Point.html#M000278","(other)","Checks whether 2 points are identical. @return [true, false] <tt>true</tt> iff the x and y coordinates",2],["eql?","ChunkyPNG::Vector","classes/ChunkyPNG/Vector.html#M000293","(other)","Comparison between two vectors for quality. @param [ChunkyPNG::Vector] other The vector to compare with.",2],["export","ChunkyPNG::RMagick","classes/ChunkyPNG/RMagick.html#M000285","(canvas)","Exports a Canvas as RMagick image instance. @param [ChunkyPNG::Canvas] canvas The canvas to export. @return",2],["extract_mask","ChunkyPNG::Canvas::Masking","classes/ChunkyPNG/Canvas/Masking.html#M000012","(mask_color, bg_color = ChunkyPNG::Color::WHITE, tolerance = 5)","Creates a base image and a mask image from an original image that has a particular theme color. This",2],["fade","ChunkyPNG::Color","classes/ChunkyPNG/Color.html#M000228","(color, factor)","Lowers the intensity of a color, by lowering its alpha by a given factor. @param [Integer] color The",2],["flip","ChunkyPNG::Canvas::Operations","classes/ChunkyPNG/Canvas/Operations.html#M000030","()","Alias for #flip_horizontally",2],["flip!","ChunkyPNG::Canvas::Operations","classes/ChunkyPNG/Canvas/Operations.html#M000029","()","Alias for #flip_horizontally!",2],["flip_horizontally","ChunkyPNG::Canvas::Operations","classes/ChunkyPNG/Canvas/Operations.html#M000027","()","Flips the image horizontally, leaving the original intact. This will flip the image on its horizontal",2],["flip_horizontally!","ChunkyPNG::Canvas::Operations","classes/ChunkyPNG/Canvas/Operations.html#M000028","()","Flips the image horizontally in place. This will flip the image on its horizontal axis, e.g. pixels on",2],["flip_vertically","ChunkyPNG::Canvas::Operations","classes/ChunkyPNG/Canvas/Operations.html#M000031","()","Flips the image vertically, leaving the original intact. This will flip the image on its vertical axis,",2],["flip_vertically!","ChunkyPNG::Canvas::Operations","classes/ChunkyPNG/Canvas/Operations.html#M000032","()","Flips the image vertically in place. This will flip the image on its vertical axis, e.g. pixels on the",2],["from_abgr_stream","ChunkyPNG::Canvas::StreamImporting","classes/ChunkyPNG/Canvas/StreamImporting.html#M000130","(width, height, stream)","Creates a canvas by reading pixels from an ARGB formatted stream with a provided with and height. Every",2],["from_bgr_stream","ChunkyPNG::Canvas::StreamImporting","classes/ChunkyPNG/Canvas/StreamImporting.html#M000129","(width, height, stream)","Creates a canvas by reading pixels from an BGR formatted stream with a provided with and height. Every",2],["from_blob","ChunkyPNG::Canvas::PNGDecoding","classes/ChunkyPNG/Canvas/PNGDecoding.html#M000046","(str)","Decodes a Canvas from a PNG encoded string. @param [String] str The string to read from. @return [ChunkyPNG::Canvas]",2],["from_blob","ChunkyPNG::Datastream","classes/ChunkyPNG/Datastream.html#M000202","(str)","Reads a PNG datastream from a string. @param [String] str The PNG encoded string to load from. @return",2],["from_canvas","ChunkyPNG::Canvas","classes/ChunkyPNG/Canvas.html#M000133","(canvas)","Creates a new canvas instance by duplicating another instance. @param [ChunkyPNG::Canvas] canvas The",2],["from_canvas","ChunkyPNG::Palette","classes/ChunkyPNG/Palette.html#M000260","(canvas)","Builds a palette instance from a given canvas. @param [ChunkyPNG::Canvas] canvas The canvas to create",2],["from_chunks","ChunkyPNG::Palette","classes/ChunkyPNG/Palette.html#M000257","(palette_chunk, transparency_chunk = nil)","Builds a palette instance from a PLTE chunk and optionally a tRNS chunk from a PNG datastream. This method",2],["from_data_url","ChunkyPNG::Canvas::DataUrlImporting","classes/ChunkyPNG/Canvas/DataUrlImporting.html#M000006","(string)","Imports a canvas from a PNG data URL. @param [String] string The data URL string to load from. @return",2],["from_datastream","ChunkyPNG::Canvas::PNGDecoding","classes/ChunkyPNG/Canvas/PNGDecoding.html#M000051","(ds)","Decodes the Canvas from a PNG datastream instance. @param [ChunkyPNG::Datastream] ds The datastream to",2],["from_datastream","ChunkyPNG::Image","classes/ChunkyPNG/Image.html#M000252","(ds)","Reads a ChunkyPNG::Image instance from a data stream. Besides decoding the canvas, this will also read",2],["from_file","ChunkyPNG::Canvas::PNGDecoding","classes/ChunkyPNG/Canvas/PNGDecoding.html#M000048","(filename)","Decodes a Canvas from a PNG encoded file. @param [String] filename The file to read from. @return [ChunkyPNG::Canvas]",2],["from_file","ChunkyPNG::Datastream","classes/ChunkyPNG/Datastream.html#M000203","(filename)","Reads a PNG datastream from a file. @param [String] filename The path of the file to load from. @return",2],["from_hex","ChunkyPNG::Color","classes/ChunkyPNG/Color.html#M000196","(hex_value, opacity = nil)","Creates a color by converting it from a string in hex notation.  It supports colors with (#rrggbbaa)",2],["from_io","ChunkyPNG::Canvas::PNGDecoding","classes/ChunkyPNG/Canvas/PNGDecoding.html#M000049","(io)","Decodes a Canvas from a PNG encoded stream. @param [IO, #read] io The stream to read from. @return [ChunkyPNG::Canvas]",2],["from_io","ChunkyPNG::Datastream","classes/ChunkyPNG/Datastream.html#M000208","(io)","Reads a PNG datastream from an input stream @param [IO] io The stream to read from. @return [ChunkyPNG::Datastream]",2],["from_pixels","ChunkyPNG::Palette","classes/ChunkyPNG/Palette.html#M000261","(pixels)","Builds a palette instance from a given set of pixels. @param [Enumerable<Integer>] pixels An enumeration",2],["from_rgb_stream","ChunkyPNG::Canvas::StreamImporting","classes/ChunkyPNG/Canvas/StreamImporting.html#M000127","(width, height, stream)","Creates a canvas by reading pixels from an RGB formatted stream with a provided with and height. Every",2],["from_rgb_stream","ChunkyPNG::Color","classes/ChunkyPNG/Color.html#M000194","(stream, pos = 0)","Creates a color by unpacking an rgb triple from a string. @param [String] stream The string to load the",2],["from_rgba_stream","ChunkyPNG::Canvas::StreamImporting","classes/ChunkyPNG/Canvas/StreamImporting.html#M000128","(width, height, stream)","Creates a canvas by reading pixels from an RGBA formatted stream with a provided with and height. Every",2],["from_rgba_stream","ChunkyPNG::Color","classes/ChunkyPNG/Color.html#M000195","(stream, pos = 0)","Creates a color by unpacking an rgba triple from a string @param [String] stream The string to load the",2],["from_stream","ChunkyPNG::Canvas::PNGDecoding","classes/ChunkyPNG/Canvas/PNGDecoding.html#M000050","(io)","Alias for #from_io",2],["from_string","ChunkyPNG::Canvas::PNGDecoding","classes/ChunkyPNG/Canvas/PNGDecoding.html#M000047","(str)","Alias for #from_blob",2],["fully_transparent?","ChunkyPNG::Color","classes/ChunkyPNG/Color.html#M000207","(value)","Returns true if this color is fully transparent. @param [Integer] value The color to test. @return [true,",2],["g","ChunkyPNG::Color","classes/ChunkyPNG/Color.html#M000198","(value)","Returns the green-component from the color value. @param [Integer] value The color value. @return [Integer]",2],["get_pixel","ChunkyPNG::Canvas","classes/ChunkyPNG/Canvas.html#M000140","(x, y)","Returns a single pixel from this canvas, without checking bounds. The return value for this method is",2],["grayscale","ChunkyPNG::Canvas::Operations","classes/ChunkyPNG/Canvas/Operations.html#M000019","()","Converts the canvas to grascale, returning a new canvas. This method will not modify the canvas. To modift",2],["grayscale","ChunkyPNG::Color","classes/ChunkyPNG/Color.html#M000192","(teint)","Creates a new color using a grayscale teint. @param [Integer] teint The grayscale teint (0-255), will",2],["grayscale!","ChunkyPNG::Canvas::Operations","classes/ChunkyPNG/Canvas/Operations.html#M000018","()","Converts the canvas to grascale. This method will modify the canvas. The obtain a new canvas and leave",2],["grayscale?","ChunkyPNG::Color","classes/ChunkyPNG/Color.html#M000206","(value)","Returns true if this color is fully transparent. @param [Integer] value The color to test. @return [true,",2],["grayscale?","ChunkyPNG::Palette","classes/ChunkyPNG/Palette.html#M000265","()","Check whether this palette only contains grayscale colors. @return [true, false] True if all colors in",2],["grayscale_alpha","ChunkyPNG::Color","classes/ChunkyPNG/Color.html#M000193","(teint, a)","Creates a new color using a grayscale teint and alpha value. @param [Integer] teint The grayscale teint",2],["grayscale_entry","ChunkyPNG::Chunk::Transparency","classes/ChunkyPNG/Chunk/Transparency.html#M000177","(bit_depth)","Returns the grayscale entry to be replaced by transparent pixels. This method should only be used for",2],["grayscale_teint","ChunkyPNG::Color","classes/ChunkyPNG/Color.html#M000226","(color)","Calculates the grayscale teint of an RGB color. @param [Integer] color The color to convert.     @return",2],["height","ChunkyPNG::Vector","classes/ChunkyPNG/Vector.html#M000303","()","Returns the height of the minimal bounding box of all the points in this vector. @return [Integer] The",2],["html_color","ChunkyPNG::Color","classes/ChunkyPNG/Color.html#M000253","(color_name, opacity = nil)","Gets a color value based on a HTML color name. The color name is flexible. E.g. <tt>'yellowgreen'</tt>,",2],["imagedata","ChunkyPNG::Datastream","classes/ChunkyPNG/Datastream.html#M000215","()","Returns the uncompressed image data, combined from all the IDAT chunks @return [String] The uncompressed",2],["import","ChunkyPNG::RMagick","classes/ChunkyPNG/RMagick.html#M000284","(image)","Imports an RMagick image as Canvas object. @param [Magick::Image] image The image to import @return [ChunkyPNG::Canvas]",2],["include?","ChunkyPNG::Canvas","classes/ChunkyPNG/Canvas.html#M000149","(*point_like)","Alias for #include_point?",2],["include?","ChunkyPNG::Dimension","classes/ChunkyPNG/Dimension.html#M000239","(*point_like)","Checks whether a point is within bounds of this dimension. @param [ChunkyPNG::Point, ...] A point-like",2],["include_point?","ChunkyPNG::Canvas","classes/ChunkyPNG/Canvas.html#M000148","(*point_like)","Checks whether the given coordinates are in the range of the canvas @param [ChunkyPNG::Point, Array,",2],["include_x?","ChunkyPNG::Canvas","classes/ChunkyPNG/Canvas.html#M000154","(x)","Checks whether the given x-coordinate is in the range of the canvas @param [Integer] x The y-coordinate",2],["include_xy?","ChunkyPNG::Canvas","classes/ChunkyPNG/Canvas.html#M000150","(x, y)","Checks whether the given x- and y-coordinate are in the range of the canvas @param [Integer] x The x-coordinate",2],["include_y?","ChunkyPNG::Canvas","classes/ChunkyPNG/Canvas.html#M000153","(y)","Checks whether the given y-coordinate is in the range of the canvas @param [Integer] y The y-coordinate",2],["index","ChunkyPNG::Palette","classes/ChunkyPNG/Palette.html#M000271","(color)","Returns the position of a color in the palette @param [ChunkyPNG::Color] color The color for which to",2],["indexable?","ChunkyPNG::Palette","classes/ChunkyPNG/Palette.html#M000262","()","Checks whether the size of this palette is suitable for indexed storage. @return [true, false] True if",2],["initialize_copy","ChunkyPNG::Canvas","classes/ChunkyPNG/Canvas.html#M000132","(other)","Initializes a new Canvas instances when being cloned. @param [ChunkyPNG::Canvas] other The canvas to",2],["initialize_copy","ChunkyPNG::Image","classes/ChunkyPNG/Image.html#M000249","(other)","Initializes a copy of another ChunkyPNG::Image instance. @param [ChunkyPNG::Image] other The other image",2],["inspect","ChunkyPNG::Canvas","classes/ChunkyPNG/Canvas.html#M000162","()","Alternative implementation of the inspect method. @return [String] A nicely formatted string representation",2],["int8_mult","ChunkyPNG::Color","classes/ChunkyPNG/Color.html#M000210","(a, b)","Multiplies two fractions using integer math, where the fractions are stored using an integer between",2],["interpolate_quick","ChunkyPNG::Color","classes/ChunkyPNG/Color.html#M000225","(fg, bg, alpha)","Interpolates the foreground and background colors by the given alpha value. This also blends the alpha",2],["length","ChunkyPNG::Vector","classes/ChunkyPNG/Vector.html#M000291","()","Returns the number of points in this vector. @return [Integer] The length of the points array. ",2],["line","ChunkyPNG::Canvas::Drawing","classes/ChunkyPNG/Canvas/Drawing.html#M000014","(x0, y0, x1, y1, stroke_color, inclusive = true)","Alias for #line_xiaolin_wu",2],["line_xiaolin_wu","ChunkyPNG::Canvas::Drawing","classes/ChunkyPNG/Canvas/Drawing.html#M000010","(x0, y0, x1, y1, stroke_color, inclusive = true)","Draws an anti-aliased line using Xiaolin Wu's algorithm. @param [Integer] x0 The x-coordinate of the",2],["max_x","ChunkyPNG::Vector","classes/ChunkyPNG/Vector.html#M000298","()","Finds the highest x-coordinate in this vector. @return [Integer] The highest x-coordinate of all the",2],["max_y","ChunkyPNG::Vector","classes/ChunkyPNG/Vector.html#M000300","()","Finds the highest y-coordinate in this vector. @return [Integer] The highest y-coordinate of all the",2],["metadata","ChunkyPNG::Datastream","classes/ChunkyPNG/Datastream.html#M000214","()","Returns all the textual metadata key/value pairs as hash. @return [Hash] A hash containing metadata fields",2],["metadata_chunks","ChunkyPNG::Image","classes/ChunkyPNG/Image.html#M000250","()","Returns the metadata for this image as PNG chunks. Chunks will either be of the {ChunkyPNG::Chunk::Text}",2],["min_x","ChunkyPNG::Vector","classes/ChunkyPNG/Vector.html#M000297","()","Finds the lowest x-coordinate in this vector. @return [Integer] The lowest x-coordinate of all the points",2],["min_y","ChunkyPNG::Vector","classes/ChunkyPNG/Vector.html#M000299","()","Finds the lowest y-coordinate in this vector. @return [Integer] The lowest y-coordinate of all the points",2],["minmax","String::Enumerable","classes/String/Enumerable.html#M000187","()","",2],["mirror","ChunkyPNG::Canvas::Operations","classes/ChunkyPNG/Canvas/Operations.html#M000034","()","Alias for #flip_vertically",2],["mirror!","ChunkyPNG::Canvas::Operations","classes/ChunkyPNG/Canvas/Operations.html#M000033","()","Alias for #flip_vertically!",2],["multiple_from_array","ChunkyPNG::Vector","classes/ChunkyPNG/Vector.html#M000305","(source)","@return [Array<ChunkyPNG::Point>] The list of points interpreted from the input array. ",2],["multiple_from_string","ChunkyPNG::Vector","classes/ChunkyPNG/Vector.html#M000306","(source_str)","@return [Array<ChunkyPNG::Point>] The list of points parsed from the string. ",2],["new","ChunkyPNG::Canvas","classes/ChunkyPNG/Canvas.html#M000131","(width, height, initial = ChunkyPNG::Color::TRANSPARENT)","Initializes a new Canvas instance. @overload initialize(width, height, background_color) @param [Integer]",2],["new","ChunkyPNG::Chunk::Base","classes/ChunkyPNG/Chunk/Base.html#M000147","(type, attributes = {})","Initializes the chunk instance. @param [String] type The four character chunk type indicator. @param",2],["new","ChunkyPNG::Chunk::CompressedText","classes/ChunkyPNG/Chunk/CompressedText.html#M000184","(keyword, value)","",2],["new","ChunkyPNG::Chunk::End","classes/ChunkyPNG/Chunk/End.html#M000172","()","",2],["new","ChunkyPNG::Chunk::Generic","classes/ChunkyPNG/Chunk/Generic.html#M000156","(type, content = '')","",2],["new","ChunkyPNG::Chunk::Header","classes/ChunkyPNG/Chunk/Header.html#M000159","(attrs = {})","",2],["new","ChunkyPNG::Chunk::Text","classes/ChunkyPNG/Chunk/Text.html#M000181","(keyword, value)","",2],["new","ChunkyPNG::Datastream","classes/ChunkyPNG/Datastream.html#M000201","()","Initializes a new Datastream instance. ",2],["new","ChunkyPNG::Dimension","classes/ChunkyPNG/Dimension.html#M000237","(width, height)","Initializes a new dimension instance. @param [Integer] width The width-component of the new dimension.",2],["new","ChunkyPNG::Image","classes/ChunkyPNG/Image.html#M000248","(width, height, bg_color = ChunkyPNG::Color::TRANSPARENT, metadata = {})","Initializes a new ChunkyPNG::Image instance. @param [Integer] width The width of the new image. @param",2],["new","ChunkyPNG::Palette","classes/ChunkyPNG/Palette.html#M000254","(enum, decoding_map = nil)","Builds a new palette given a set (Enumerable instance) of colors. @param [Enumerable<Integer>] enum The",2],["new","ChunkyPNG::Point","classes/ChunkyPNG/Point.html#M000277","(x, y)","Initializes a new point instance. @param [Integer, :to_i] x The x-coordinate. @param [Integer, :to_i]",2],["new","ChunkyPNG::Vector","classes/ChunkyPNG/Vector.html#M000287","(points = [])","Initializes a vector based on a list of Point instances. You usually do not want to use this method directly,",2],["offset","ChunkyPNG::Vector","classes/ChunkyPNG/Vector.html#M000301","()","Returns the offset from (0,0) of the minimal bounding box of all the points in this vector @return [ChunkyPNG::Point]",2],["opaque!","ChunkyPNG::Color","classes/ChunkyPNG/Color.html#M000205","(value)","Returns the opaque value of this color by removing the alpha channel. @param [Integer] value The color",2],["opaque?","ChunkyPNG::Color","classes/ChunkyPNG/Color.html#M000204","(value)","Returns true if this color is fully opaque. @param [Integer] value The color to test. @return [true,",2],["opaque?","ChunkyPNG::Palette","classes/ChunkyPNG/Palette.html#M000264","()","Check whether this palette only contains opaque colors. @return [true, false] True if all colors in this",2],["opaque_palette","ChunkyPNG::Palette","classes/ChunkyPNG/Palette.html#M000267","()","Returns a palette with all the opaque variants of the colors in this palette. @return [ChunkyPNG::Palette]",2],["palette","ChunkyPNG::Canvas","classes/ChunkyPNG/Canvas.html#M000155","()","Returns the palette used for this canvas. @return [ChunkyPNG::Palette] A palette which contains all the",2],["palette_alpha_channel","ChunkyPNG::Chunk::Transparency","classes/ChunkyPNG/Chunk/Transparency.html#M000175","()","Returns the alpha channel for the palette of an indexed image. This method should only be used for images",2],["parse","ChunkyPNG::Color","classes/ChunkyPNG/Color.html#M000189","(source)","Parses a color value given a numeric or string argument. It supports color numbers, colors in hex notation",2],["pass_bytesize","ChunkyPNG::Color","classes/ChunkyPNG/Color.html#M000263","(color_mode, depth, width, height)","Returns the number of bytes used for an image pass @param [Integer] color_mode The color mode in which",2],["pixel_bitsize","ChunkyPNG::Color","classes/ChunkyPNG/Color.html#M000258","(color_mode, depth = 8)","Returns the size in bits of a pixel when it is stored using a given color mode. @param [Integer] color_mode",2],["pixel_bytesize","ChunkyPNG::Color","classes/ChunkyPNG/Color.html#M000256","(color_mode, depth = 8)","Returns the size in bytes of a pixel when it is stored using a given color mode. @param [Integer] color_mode",2],["polygon","ChunkyPNG::Canvas::Drawing","classes/ChunkyPNG/Canvas/Drawing.html#M000015","(path, stroke_color = ChunkyPNG::Color::BLACK, fill_color = ChunkyPNG::Color::TRANSPARENT)","Draws a polygon on the canvas using the stroke_color, filled using the fill_color if any. @param [Array,",2],["r","ChunkyPNG::Color","classes/ChunkyPNG/Color.html#M000197","(value)","Returns the red-component from the color value. @param [Integer] value The color value. @return [Integer]",2],["read","ChunkyPNG::Chunk","classes/ChunkyPNG/Chunk.html#M000142","(io)","Reads a chunk from an IO stream. @param [IO, #read] io The IO stream to read from. @return [ChunkyPNG::Chung::Base]",2],["read","ChunkyPNG::Chunk::CompressedText","classes/ChunkyPNG/Chunk/CompressedText.html#M000185","(type, content)","",2],["read","ChunkyPNG::Chunk::End","classes/ChunkyPNG/Chunk/End.html#M000173","(type, content)","Reads the END chunk. It will check if the content is empty. @param [String] type The four character chunk",2],["read","ChunkyPNG::Chunk::Generic","classes/ChunkyPNG/Chunk/Generic.html#M000157","(type, content)","Creates an instance, given the chunk's type and content. @param [String] type The four character chunk",2],["read","ChunkyPNG::Chunk::Header","classes/ChunkyPNG/Chunk/Header.html#M000169","(type, content)","Reads the 13 bytes of content from the header chunk to set the image attributes. @param [String] type",2],["read","ChunkyPNG::Chunk::ImageData","classes/ChunkyPNG/Chunk/ImageData.html#M000178","(type, content)","",2],["read","ChunkyPNG::Chunk::Text","classes/ChunkyPNG/Chunk/Text.html#M000182","(type, content)","",2],["rect","ChunkyPNG::Canvas::Drawing","classes/ChunkyPNG/Canvas/Drawing.html#M000016","(x0, y0, x1, y1, stroke_color = ChunkyPNG::Color::BLACK, fill_color = ChunkyPNG::Color::TRANSPARENT)","Draws a rectangle on the canvas, using two control points. @param [Integer] x0 The x-coordinate of the",2],["replace","ChunkyPNG::Canvas::Operations","classes/ChunkyPNG/Canvas/Operations.html#M000024","(other, offset_x = 0, offset_y = 0)","Replaces pixels on this image by pixels from another pixels, on a given offset. This method will modify",2],["replace!","ChunkyPNG::Canvas::Operations","classes/ChunkyPNG/Canvas/Operations.html#M000022","(other, offset_x = 0, offset_y = 0)","Replaces pixels on this image by pixels from another pixels, on a given offset. This method will modify",2],["replace_canvas!","ChunkyPNG::Canvas","classes/ChunkyPNG/Canvas.html#M000163","(new_width, new_height, new_pixels)","Replaces the image, given a new width, new height, and a new pixel array. ",2],["replace_column!","ChunkyPNG::Canvas","classes/ChunkyPNG/Canvas.html#M000146","(x, vector)","Replaces a column of pixels on this canvas. @param [Integer] x The 0-based column index. @param [Array<Integer>]",2],["replace_row!","ChunkyPNG::Canvas","classes/ChunkyPNG/Canvas.html#M000145","(y, vector)","Replaces a row of pixels on this canvas. @param [Integer] y The 0-based row index. @param [Array<Integer>]",2],["resample","ChunkyPNG::Canvas::Resampling","classes/ChunkyPNG/Canvas/Resampling.html#M000125","(new_width, new_height)","Alias for #resample_nearest_neighbor",2],["resample_bilinear","ChunkyPNG::Canvas::Resampling","classes/ChunkyPNG/Canvas/Resampling.html#M000124","(new_width, new_height)","",2],["resample_bilinear!","ChunkyPNG::Canvas::Resampling","classes/ChunkyPNG/Canvas/Resampling.html#M000120","(new_width, new_height)","Resamples the canvas with bilinear interpolation. @param [Integer] new_width The width of the resampled",2],["resample_nearest_neighbor","ChunkyPNG::Canvas::Resampling","classes/ChunkyPNG/Canvas/Resampling.html#M000119","(new_width, new_height)","",2],["resample_nearest_neighbor!","ChunkyPNG::Canvas::Resampling","classes/ChunkyPNG/Canvas/Resampling.html#M000116","(new_width, new_height)","Resamples the canvas using nearest neighbor interpolation. @param [Integer] new_width The width of the",2],["resize","ChunkyPNG::Canvas::Resampling","classes/ChunkyPNG/Canvas/Resampling.html#M000126","(new_width, new_height)","Alias for #resample",2],["rgb","ChunkyPNG::Color","classes/ChunkyPNG/Color.html#M000191","(r, g, b)","Creates a new color using an r, g, b triple. @param [Integer] r The r-component (0-255) @param [Integer]",2],["rgba","ChunkyPNG::Color","classes/ChunkyPNG/Color.html#M000190","(r, g, b, a)","Creates a new color using an r, g, b triple and an alpha value. @param [Integer] r The r-component (0-255)",2],["rotate_180","ChunkyPNG::Canvas::Operations","classes/ChunkyPNG/Canvas/Operations.html#M000043","()","Rotates the image 180 degrees. This method will leave the original object intact and return a new canvas.",2],["rotate_180!","ChunkyPNG::Canvas::Operations","classes/ChunkyPNG/Canvas/Operations.html#M000044","()","Rotates the image 180 degrees in place. @return [ChunkyPNG::Canvas] Itself, but rotated 180 degrees.",2],["rotate_clockwise","ChunkyPNG::Canvas::Operations","classes/ChunkyPNG/Canvas/Operations.html#M000037","()","Alias for #rotate_right",2],["rotate_clockwise!","ChunkyPNG::Canvas::Operations","classes/ChunkyPNG/Canvas/Operations.html#M000038","()","Alias for #rotate_right!",2],["rotate_counter_clockwise","ChunkyPNG::Canvas::Operations","classes/ChunkyPNG/Canvas/Operations.html#M000041","()","Alias for #rotate_left",2],["rotate_counter_clockwise!","ChunkyPNG::Canvas::Operations","classes/ChunkyPNG/Canvas/Operations.html#M000042","()","Alias for #rotate_left!",2],["rotate_left","ChunkyPNG::Canvas::Operations","classes/ChunkyPNG/Canvas/Operations.html#M000039","()","Returns an image that is rotated 90 degrees counter-clockwise. This method will leave the original object",2],["rotate_left!","ChunkyPNG::Canvas::Operations","classes/ChunkyPNG/Canvas/Operations.html#M000040","()","Rotates the image 90 degrees counter-clockwise in place. This method will change the original canvas.",2],["rotate_right","ChunkyPNG::Canvas::Operations","classes/ChunkyPNG/Canvas/Operations.html#M000035","()","Returns a new canvas instance that is rotated 90 degrees clockwise. This method will return a new canvas",2],["rotate_right!","ChunkyPNG::Canvas::Operations","classes/ChunkyPNG/Canvas/Operations.html#M000036","()","Rotates the image 90 degrees clockwise in place. This method will change the current canvas. See {#rotate_right}",2],["row","ChunkyPNG::Canvas","classes/ChunkyPNG/Canvas.html#M000141","(y)","Returns an extracted row as vector of pixels @param [Integer] y The 0-based row index @return [Array<Integer>]",2],["samples_per_pixel","ChunkyPNG::Color","classes/ChunkyPNG/Color.html#M000255","(color_mode)","Returns the number of sample values per pixel. @param [Integer] color_mode The color mode being used.",2],["save","ChunkyPNG::Canvas::PNGEncoding","classes/ChunkyPNG/Canvas/PNGEncoding.html#M000055","(filename, constraints = {})","Writes the canvas to a file, encoded as a PNG image. @param [String] filename The file to save the PNG",2],["save","ChunkyPNG::Datastream","classes/ChunkyPNG/Datastream.html#M000219","(filename)","Saves this datastream as a PNG file. @param [String] filename The filename to use. ",2],["scanline_bytesize","ChunkyPNG::Color","classes/ChunkyPNG/Color.html#M000259","(color_mode, depth, width)","Returns the number of bytes used per scanline. @param [Integer] color_mode The color mode in which the",2],["set_pixel","ChunkyPNG::Canvas","classes/ChunkyPNG/Canvas.html#M000137","(x, y, color)","Replaces a single pixel in this canvas, without bounds checking. This method return value and effects",2],["set_pixel_if_within_bounds","ChunkyPNG::Canvas","classes/ChunkyPNG/Canvas.html#M000138","(x, y, color)","Replaces a single pixel in this canvas, with bounds checking. It will do noting if the provided coordinates",2],["split_in_chunks","ChunkyPNG::Chunk::ImageData","classes/ChunkyPNG/Chunk/ImageData.html#M000180","(data, level = Zlib::DEFAULT_COMPRESSION, chunk_size = 2147483647)","",2],["steps","ChunkyPNG::Canvas::Resampling","classes/ChunkyPNG/Canvas/Resampling.html#M000114","(width, new_width)","Integer Interpolation between two values Used for generating indicies for interpolation (eg, nearest",2],["steps_residues","ChunkyPNG::Canvas::Resampling","classes/ChunkyPNG/Canvas/Resampling.html#M000115","(width, new_width)","Fractional Interpolation between two values Used for generating values for interpolation (eg, bilinear).",2],["to_a","ChunkyPNG::Dimension","classes/ChunkyPNG/Dimension.html#M000246","()","Casts this dimension into an array. @return [Array<Integer>] <tt>[width, height]</tt> for this dimension.",2],["to_a","ChunkyPNG::Point","classes/ChunkyPNG/Point.html#M000281","()","Converts the point instance to an array. @return [Array] A 2-element array, i.e. <tt>[x, y]</tt>. ",2],["to_abgr_stream","ChunkyPNG::Canvas::StreamExporting","classes/ChunkyPNG/Canvas/StreamExporting.html#M000123","()","Creates an ABGR-formatted pixelstream with the pixel data from this canvas. Note that this format is",2],["to_alpha_channel_stream","ChunkyPNG::Canvas::StreamExporting","classes/ChunkyPNG/Canvas/StreamExporting.html#M000121","()","Creates a stream of the alpha channel of this canvas. @return [String] The 0-255 alpha values of all",2],["to_ary","ChunkyPNG::Dimension","classes/ChunkyPNG/Dimension.html#M000247","()","Alias for #to_a",2],["to_ary","ChunkyPNG::Point","classes/ChunkyPNG/Point.html#M000282","()","Alias for #to_a",2],["to_blob","ChunkyPNG::Canvas::PNGEncoding","classes/ChunkyPNG/Canvas/PNGEncoding.html#M000057","(constraints = {})","Encoded the canvas to a PNG formatted string. @param constraints (see ChunkyPNG::Canvas::PNGEncoding#to_datastream)",2],["to_blob","ChunkyPNG::Datastream","classes/ChunkyPNG/Datastream.html#M000222","()","Encodes this datastream into a string. @return [String] The encoded PNG datastream. ",2],["to_data_url","ChunkyPNG::Canvas::DataUrlExporting","classes/ChunkyPNG/Canvas/DataUrlExporting.html#M000005","()","Exports the canvas as a data url (e.g. data:image/png;base64,<data>) that can easily be used inline in",2],["to_datastream","ChunkyPNG::Canvas::PNGEncoding","classes/ChunkyPNG/Canvas/PNGEncoding.html#M000060","(constraints = {})","Converts this Canvas to a datastream, so that it can be saved as a PNG image. @param [Hash, Symbol] constraints",2],["to_datastream","ChunkyPNG::Image","classes/ChunkyPNG/Image.html#M000251","(constraints = {})","Encodes the image to a PNG datastream for saving to disk or writing to an IO stream. Besides encoding",2],["to_grayscale","ChunkyPNG::Color","classes/ChunkyPNG/Color.html#M000227","(color)","Converts a color to a fiting grayscale value. It will conserve the alpha channel. This method will return",2],["to_grayscale_alpha_bytes","ChunkyPNG::Color","classes/ChunkyPNG/Color.html#M000242","(color)","Returns an array with the grayscale teint and alpha channel values for this color. This method expects",2],["to_grayscale_bytes","ChunkyPNG::Color","classes/ChunkyPNG/Color.html#M000241","(color)","Returns an array with the grayscale teint value for this color. This method expects the r,g and b value",2],["to_grayscale_stream","ChunkyPNG::Canvas::StreamExporting","classes/ChunkyPNG/Canvas/StreamExporting.html#M000122","()","Creates a grayscale stream of this canvas. This method assume sthat this image is fully grayscale, i.e.",2],["to_hex","ChunkyPNG::Color","classes/ChunkyPNG/Color.html#M000235","(color, include_alpha = true)","Returns a string representing this color using hex notation (i.e. #rrggbbaa). @param [Integer] value",2],["to_image","ChunkyPNG::Canvas","classes/ChunkyPNG/Canvas.html#M000161","()","Creates an ChunkyPNG::Image object from this canvas. @return [ChunkyPNG::Image] This canvas wrapped in",2],["to_plte_chunk","ChunkyPNG::Palette","classes/ChunkyPNG/Palette.html#M000273","()","Creates a PLTE chunk that corresponds with this palette to store the r, g and b channels of all colors.",2],["to_rgb_stream","ChunkyPNG::Canvas::StreamExporting","classes/ChunkyPNG/Canvas/StreamExporting.html#M000118","()","Creates an RGB-formatted pixelstream with the pixel data from this canvas. Note that this format is fast",2],["to_rgba_stream","ChunkyPNG::Canvas::StreamExporting","classes/ChunkyPNG/Canvas/StreamExporting.html#M000117","()","Creates an RGB-formatted pixelstream with the pixel data from this canvas. Note that this format is fast",2],["to_s","ChunkyPNG::Canvas::PNGEncoding","classes/ChunkyPNG/Canvas/PNGEncoding.html#M000059","(constraints = {})","Alias for #to_blob",2],["to_s","ChunkyPNG::Datastream","classes/ChunkyPNG/Datastream.html#M000224","()","Alias for #to_blob",2],["to_string","ChunkyPNG::Canvas::PNGEncoding","classes/ChunkyPNG/Canvas/PNGEncoding.html#M000058","(constraints = {})","Alias for #to_blob",2],["to_string","ChunkyPNG::Datastream","classes/ChunkyPNG/Datastream.html#M000223","()","Alias for #to_blob",2],["to_trns_chunk","ChunkyPNG::Palette","classes/ChunkyPNG/Palette.html#M000272","()","Creates a tRNS chunk that corresponds with this palette to store the alpha channel of all colors. Note",2],["to_truecolor_alpha_bytes","ChunkyPNG::Color","classes/ChunkyPNG/Color.html#M000236","(color)","Returns an array with the separate RGBA values for this color. @param [Integer] color The color to convert.",2],["to_truecolor_bytes","ChunkyPNG::Color","classes/ChunkyPNG/Color.html#M000240","(color)","Returns an array with the separate RGB values for this color. The alpha channel will be discarded. @param",2],["truecolor_entry","ChunkyPNG::Chunk::Transparency","classes/ChunkyPNG/Chunk/Transparency.html#M000176","(bit_depth)","Returns the truecolor entry to be replaced by transparent pixels, This method should only be used for",2],["verify_crc!","ChunkyPNG::Chunk","classes/ChunkyPNG/Chunk.html#M000143","(type, content, found_crc)","Verifies the CRC of a chunk. @param [String] type The chunk's type. @param [String] content The chunk's",2],["verify_signature!","ChunkyPNG::Datastream","classes/ChunkyPNG/Datastream.html#M000209","(io)","Verifies that the current stream is a PNG datastream by checking its signature. This method reads the",2],["width","ChunkyPNG::Vector","classes/ChunkyPNG/Vector.html#M000302","()","Returns the width of the minimal bounding box of all the points in this vector. @return [Integer] The",2],["within_bounds?","ChunkyPNG::Point","classes/ChunkyPNG/Point.html#M000283","(*dimension_like)","Checks whether the point falls into a dimension @param [ChunkyPNG::Dimension, ...] dimension_like The",2],["write","ChunkyPNG::Canvas::PNGEncoding","classes/ChunkyPNG/Canvas/PNGEncoding.html#M000054","(io, constraints = {})","Writes the canvas to an IO stream, encoded as a PNG image. @param [IO] io The output stream to write",2],["write","ChunkyPNG::Chunk::Base","classes/ChunkyPNG/Chunk/Base.html#M000152","(io)","Writes the chunk to the IO stream. It will call the +content+ method to get the content for this chunk,",2],["write","ChunkyPNG::Datastream","classes/ChunkyPNG/Datastream.html#M000218","(io)","Writes the datastream to the given output stream. @param [IO] io The output stream to write to. ",2],["write_with_crc","ChunkyPNG::Chunk::Base","classes/ChunkyPNG/Chunk/Base.html#M000151","(io, content)","Writes the chunk to the IO stream, using the provided content. The checksum will be calculated and appended",2],["x_range","ChunkyPNG::Vector","classes/ChunkyPNG/Vector.html#M000295","()","Returns the range in x-coordinates for all the points in this vector. @return [Range] The (inclusive)",2],["y_range","ChunkyPNG::Vector","classes/ChunkyPNG/Vector.html#M000296","()","Returns the range in y-coordinates for all the points in this vector. @return [Range] The (inclusive)",2],["BENCHMARKS.rdoc","files/BENCHMARKS_rdoc.html","files/BENCHMARKS_rdoc.html","","= ChunkyPNG benchmark suite  This small benchmark suite is intended to test the speed of PNG decoding",3],["LICENSE","files/LICENSE.html","files/LICENSE.html","","Copyright (c) 2010 Willem van Bergen  Permission is hereby granted, free of charge, to any person obtaining",3],["README.rdoc","files/README_rdoc.html","files/README_rdoc.html","","= Chunky PNG  This library can read and write PNG files. It is written in pure Ruby for maximum portability.",3],["chunky_png.rb","files/lib/chunky_png_rb.html","files/lib/chunky_png_rb.html","","Basic requirements from standard library ",3],["canvas.rb","files/lib/chunky_png/canvas_rb.html","files/lib/chunky_png/canvas_rb.html","","",3],["adam7_interlacing.rb","files/lib/chunky_png/canvas/adam7_interlacing_rb.html","files/lib/chunky_png/canvas/adam7_interlacing_rb.html","","",3],["data_url_exporting.rb","files/lib/chunky_png/canvas/data_url_exporting_rb.html","files/lib/chunky_png/canvas/data_url_exporting_rb.html","","",3],["data_url_importing.rb","files/lib/chunky_png/canvas/data_url_importing_rb.html","files/lib/chunky_png/canvas/data_url_importing_rb.html","","",3],["drawing.rb","files/lib/chunky_png/canvas/drawing_rb.html","files/lib/chunky_png/canvas/drawing_rb.html","","",3],["masking.rb","files/lib/chunky_png/canvas/masking_rb.html","files/lib/chunky_png/canvas/masking_rb.html","","",3],["operations.rb","files/lib/chunky_png/canvas/operations_rb.html","files/lib/chunky_png/canvas/operations_rb.html","","",3],["png_decoding.rb","files/lib/chunky_png/canvas/png_decoding_rb.html","files/lib/chunky_png/canvas/png_decoding_rb.html","","",3],["png_encoding.rb","files/lib/chunky_png/canvas/png_encoding_rb.html","files/lib/chunky_png/canvas/png_encoding_rb.html","","",3],["resampling.rb","files/lib/chunky_png/canvas/resampling_rb.html","files/lib/chunky_png/canvas/resampling_rb.html","","",3],["stream_exporting.rb","files/lib/chunky_png/canvas/stream_exporting_rb.html","files/lib/chunky_png/canvas/stream_exporting_rb.html","","",3],["stream_importing.rb","files/lib/chunky_png/canvas/stream_importing_rb.html","files/lib/chunky_png/canvas/stream_importing_rb.html","","",3],["chunk.rb","files/lib/chunky_png/chunk_rb.html","files/lib/chunky_png/chunk_rb.html","","",3],["color.rb","files/lib/chunky_png/color_rb.html","files/lib/chunky_png/color_rb.html","","",3],["compatibility.rb","files/lib/chunky_png/compatibility_rb.html","files/lib/chunky_png/compatibility_rb.html","","Define the byte-operators on a string if they're not defined (Ruby 1.8) ",3],["datastream.rb","files/lib/chunky_png/datastream_rb.html","files/lib/chunky_png/datastream_rb.html","","",3],["dimension.rb","files/lib/chunky_png/dimension_rb.html","files/lib/chunky_png/dimension_rb.html","","",3],["image.rb","files/lib/chunky_png/image_rb.html","files/lib/chunky_png/image_rb.html","","",3],["palette.rb","files/lib/chunky_png/palette_rb.html","files/lib/chunky_png/palette_rb.html","","",3],["point.rb","files/lib/chunky_png/point_rb.html","files/lib/chunky_png/point_rb.html","","",3],["rmagick.rb","files/lib/chunky_png/rmagick_rb.html","files/lib/chunky_png/rmagick_rb.html","","",3],["vector.rb","files/lib/chunky_png/vector_rb.html","files/lib/chunky_png/vector_rb.html","","",3]],"searchIndex":["chunkypng","crcmismatch","canvas","adam7interlacing","dataurlexporting","dataurlimporting","drawing","masking","operations","pngdecoding","pngencoding","resampling","streamexporting","streamimporting","chunk","base","compressedtext","end","generic","header","imagedata","internationaltext","palette","text","transparency","color","datastream","dimension","exception","expectationfailed","image","notsupported","outofbounds","palette","point","rmagick","signaturemismatch","vector","string","enumerable","<=>()","<=>()","==()","==()","==()","==()","color()","dimension()","point()","vector()","[]()","[]()","[]()","[]=()","a()","adam7_extract_pass()","adam7_merge_pass()","adam7_multiplier_offset()","adam7_pass_size()","adam7_pass_sizes()","alpha_decomposable?()","area()","area()","assert_height!()","assert_size!()","assert_width!()","assert_x!()","assert_xy!()","assert_y!()","b()","best_color_settings()","bezier_curve()","binomial_coefficient()","black_and_white?()","blend()","can_decode?()","can_encode?()","change_mask_color!()","change_theme_color!()","check_size_constraints!()","chunks()","circle()","column()","combine_chunks()","compose()","compose()","compose!()","compose_pixel()","compose_pixel_unsafe()","compose_precise()","compose_quick()","content()","content()","content()","content()","crop()","crop!()","decode_png_extract_1bit_value()","decode_png_extract_2bit_value()","decode_png_extract_4bit_value()","decode_png_image_pass()","decode_png_pixels_from_scanline_grayscale_16bit()","decode_png_pixels_from_scanline_grayscale_1bit()","decode_png_pixels_from_scanline_grayscale_2bit()","decode_png_pixels_from_scanline_grayscale_4bit()","decode_png_pixels_from_scanline_grayscale_8bit()","decode_png_pixels_from_scanline_grayscale_alpha_16bit()","decode_png_pixels_from_scanline_grayscale_alpha_8bit()","decode_png_pixels_from_scanline_indexed_1bit()","decode_png_pixels_from_scanline_indexed_2bit()","decode_png_pixels_from_scanline_indexed_4bit()","decode_png_pixels_from_scanline_indexed_8bit()","decode_png_pixels_from_scanline_method()","decode_png_pixels_from_scanline_truecolor_16bit()","decode_png_pixels_from_scanline_truecolor_8bit()","decode_png_pixels_from_scanline_truecolor_alpha_16bit()","decode_png_pixels_from_scanline_truecolor_alpha_8bit()","decode_png_pixelstream()","decode_png_resample_16bit_value()","decode_png_resample_1bit_value()","decode_png_resample_2bit_value()","decode_png_resample_4bit_value()","decode_png_resample_8bit_value()","decode_png_str_scanline()","decode_png_str_scanline_average()","decode_png_str_scanline_paeth()","decode_png_str_scanline_sub()","decode_png_str_scanline_sub_none()","decode_png_str_scanline_up()","decode_png_with_adam7_interlacing()","decode_png_without_interlacing()","decompose_alpha()","decompose_alpha_component()","decompose_alpha_components()","decompose_color()","determine_bit_depth()","determine_png_encoding()","dimension()","dimension()","each()","each_chunk()","each_edge()","edges()","empty_bytearray()","encode_png_image_pass_to_stream()","encode_png_image_with_interlacing()","encode_png_image_without_interlacing()","encode_png_pixels_to_scanline_grayscale_1bit()","encode_png_pixels_to_scanline_grayscale_2bit()","encode_png_pixels_to_scanline_grayscale_4bit()","encode_png_pixels_to_scanline_grayscale_8bit()","encode_png_pixels_to_scanline_grayscale_alpha_8bit()","encode_png_pixels_to_scanline_indexed_1bit()","encode_png_pixels_to_scanline_indexed_2bit()","encode_png_pixels_to_scanline_indexed_4bit()","encode_png_pixels_to_scanline_indexed_8bit()","encode_png_pixels_to_scanline_method()","encode_png_pixels_to_scanline_truecolor_8bit()","encode_png_pixels_to_scanline_truecolor_alpha_8bit()","encode_png_pixelstream()","encode_png_str_scanline_average()","encode_png_str_scanline_none()","encode_png_str_scanline_paeth()","encode_png_str_scanline_sub()","encode_png_str_scanline_up()","eql?()","eql?()","eql?()","eql?()","export()","extract_mask()","fade()","flip()","flip!()","flip_horizontally()","flip_horizontally!()","flip_vertically()","flip_vertically!()","from_abgr_stream()","from_bgr_stream()","from_blob()","from_blob()","from_canvas()","from_canvas()","from_chunks()","from_data_url()","from_datastream()","from_datastream()","from_file()","from_file()","from_hex()","from_io()","from_io()","from_pixels()","from_rgb_stream()","from_rgb_stream()","from_rgba_stream()","from_rgba_stream()","from_stream()","from_string()","fully_transparent?()","g()","get_pixel()","grayscale()","grayscale()","grayscale!()","grayscale?()","grayscale?()","grayscale_alpha()","grayscale_entry()","grayscale_teint()","height()","html_color()","imagedata()","import()","include?()","include?()","include_point?()","include_x?()","include_xy?()","include_y?()","index()","indexable?()","initialize_copy()","initialize_copy()","inspect()","int8_mult()","interpolate_quick()","length()","line()","line_xiaolin_wu()","max_x()","max_y()","metadata()","metadata_chunks()","min_x()","min_y()","minmax()","mirror()","mirror!()","multiple_from_array()","multiple_from_string()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","offset()","opaque!()","opaque?()","opaque?()","opaque_palette()","palette()","palette_alpha_channel()","parse()","pass_bytesize()","pixel_bitsize()","pixel_bytesize()","polygon()","r()","read()","read()","read()","read()","read()","read()","read()","rect()","replace()","replace!()","replace_canvas!()","replace_column!()","replace_row!()","resample()","resample_bilinear()","resample_bilinear!()","resample_nearest_neighbor()","resample_nearest_neighbor!()","resize()","rgb()","rgba()","rotate_180()","rotate_180!()","rotate_clockwise()","rotate_clockwise!()","rotate_counter_clockwise()","rotate_counter_clockwise!()","rotate_left()","rotate_left!()","rotate_right()","rotate_right!()","row()","samples_per_pixel()","save()","save()","scanline_bytesize()","set_pixel()","set_pixel_if_within_bounds()","split_in_chunks()","steps()","steps_residues()","to_a()","to_a()","to_abgr_stream()","to_alpha_channel_stream()","to_ary()","to_ary()","to_blob()","to_blob()","to_data_url()","to_datastream()","to_datastream()","to_grayscale()","to_grayscale_alpha_bytes()","to_grayscale_bytes()","to_grayscale_stream()","to_hex()","to_image()","to_plte_chunk()","to_rgb_stream()","to_rgba_stream()","to_s()","to_s()","to_string()","to_string()","to_trns_chunk()","to_truecolor_alpha_bytes()","to_truecolor_bytes()","truecolor_entry()","verify_crc!()","verify_signature!()","width()","within_bounds?()","write()","write()","write()","write_with_crc()","x_range()","y_range()","benchmarks.rdoc","license","readme.rdoc","chunky_png.rb","canvas.rb","adam7_interlacing.rb","data_url_exporting.rb","data_url_importing.rb","drawing.rb","masking.rb","operations.rb","png_decoding.rb","png_encoding.rb","resampling.rb","stream_exporting.rb","stream_importing.rb","chunk.rb","color.rb","compatibility.rb","datastream.rb","dimension.rb","image.rb","palette.rb","point.rb","rmagick.rb","vector.rb"],"longSearchIndex":["lib/chunky_png.rb","chunkypng","chunkypng","chunkypng::canvas","chunkypng::canvas","chunkypng::canvas","chunkypng::canvas","chunkypng::canvas","chunkypng::canvas","chunkypng::canvas","chunkypng::canvas","chunkypng::canvas","chunkypng::canvas","chunkypng::canvas","chunkypng","chunkypng::chunk","chunkypng::chunk","chunkypng::chunk","chunkypng::chunk","chunkypng::chunk","chunkypng::chunk","chunkypng::chunk","chunkypng::chunk","chunkypng::chunk","chunkypng::chunk","chunkypng","chunkypng","chunkypng","chunkypng","chunkypng","chunkypng","chunkypng","chunkypng","chunkypng","chunkypng","chunkypng","chunkypng","chunkypng","lib/chunky_png/compatibility.rb","string","chunkypng::dimension","chunkypng::point","chunkypng::canvas","chunkypng::dimension","chunkypng::point","chunkypng::vector","chunkypng","chunkypng","chunkypng","chunkypng","chunkypng::canvas","chunkypng::palette","chunkypng::vector","chunkypng::canvas","chunkypng::color","chunkypng::canvas::adam7interlacing","chunkypng::canvas::adam7interlacing","chunkypng::canvas::adam7interlacing","chunkypng::canvas::adam7interlacing","chunkypng::canvas::adam7interlacing","chunkypng::color","chunkypng::canvas","chunkypng::dimension","chunkypng::canvas","chunkypng::canvas","chunkypng::canvas","chunkypng::canvas","chunkypng::canvas","chunkypng::canvas","chunkypng::color","chunkypng::palette","chunkypng::canvas::drawing","chunkypng::canvas::drawing","chunkypng::palette","chunkypng::color","chunkypng::palette","chunkypng::palette","chunkypng::canvas::masking","chunkypng::canvas::masking","chunkypng::canvas::operations","chunkypng::datastream","chunkypng::canvas::drawing","chunkypng::canvas","chunkypng::chunk::imagedata","chunkypng::canvas::operations","chunkypng::color","chunkypng::canvas::operations","chunkypng::canvas::drawing","chunkypng::canvas::drawing","chunkypng::color","chunkypng::color","chunkypng::chunk::compressedtext","chunkypng::chunk::end","chunkypng::chunk::header","chunkypng::chunk::text","chunkypng::canvas::operations","chunkypng::canvas::operations","chunkypng::canvas::pngdecoding","chunkypng::canvas::pngdecoding","chunkypng::canvas::pngdecoding","chunkypng::canvas::pngdecoding","chunkypng::canvas::pngdecoding","chunkypng::canvas::pngdecoding","chunkypng::canvas::pngdecoding","chunkypng::canvas::pngdecoding","chunkypng::canvas::pngdecoding","chunkypng::canvas::pngdecoding","chunkypng::canvas::pngdecoding","chunkypng::canvas::pngdecoding","chunkypng::canvas::pngdecoding","chunkypng::canvas::pngdecoding","chunkypng::canvas::pngdecoding","chunkypng::canvas::pngdecoding","chunkypng::canvas::pngdecoding","chunkypng::canvas::pngdecoding","chunkypng::canvas::pngdecoding","chunkypng::canvas::pngdecoding","chunkypng::canvas::pngdecoding","chunkypng::canvas::pngdecoding","chunkypng::canvas::pngdecoding","chunkypng::canvas::pngdecoding","chunkypng::canvas::pngdecoding","chunkypng::canvas::pngdecoding","chunkypng::canvas::pngdecoding","chunkypng::canvas::pngdecoding","chunkypng::canvas::pngdecoding","chunkypng::canvas::pngdecoding","chunkypng::canvas::pngdecoding","chunkypng::canvas::pngdecoding","chunkypng::canvas::pngdecoding","chunkypng::canvas::pngdecoding","chunkypng::color","chunkypng::color","chunkypng::color","chunkypng::color","chunkypng::palette","chunkypng::canvas::pngencoding","chunkypng::canvas","chunkypng::vector","chunkypng::vector","chunkypng::datastream","chunkypng::vector","chunkypng::vector","chunkypng::datastream","chunkypng::canvas::pngencoding","chunkypng::canvas::pngencoding","chunkypng::canvas::pngencoding","chunkypng::canvas::pngencoding","chunkypng::canvas::pngencoding","chunkypng::canvas::pngencoding","chunkypng::canvas::pngencoding","chunkypng::canvas::pngencoding","chunkypng::canvas::pngencoding","chunkypng::canvas::pngencoding","chunkypng::canvas::pngencoding","chunkypng::canvas::pngencoding","chunkypng::canvas::pngencoding","chunkypng::canvas::pngencoding","chunkypng::canvas::pngencoding","chunkypng::canvas::pngencoding","chunkypng::canvas::pngencoding","chunkypng::canvas::pngencoding","chunkypng::canvas::pngencoding","chunkypng::canvas::pngencoding","chunkypng::canvas::pngencoding","chunkypng::canvas","chunkypng::dimension","chunkypng::point","chunkypng::vector","chunkypng::rmagick","chunkypng::canvas::masking","chunkypng::color","chunkypng::canvas::operations","chunkypng::canvas::operations","chunkypng::canvas::operations","chunkypng::canvas::operations","chunkypng::canvas::operations","chunkypng::canvas::operations","chunkypng::canvas::streamimporting","chunkypng::canvas::streamimporting","chunkypng::canvas::pngdecoding","chunkypng::datastream","chunkypng::canvas","chunkypng::palette","chunkypng::palette","chunkypng::canvas::dataurlimporting","chunkypng::canvas::pngdecoding","chunkypng::image","chunkypng::canvas::pngdecoding","chunkypng::datastream","chunkypng::color","chunkypng::canvas::pngdecoding","chunkypng::datastream","chunkypng::palette","chunkypng::canvas::streamimporting","chunkypng::color","chunkypng::canvas::streamimporting","chunkypng::color","chunkypng::canvas::pngdecoding","chunkypng::canvas::pngdecoding","chunkypng::color","chunkypng::color","chunkypng::canvas","chunkypng::canvas::operations","chunkypng::color","chunkypng::canvas::operations","chunkypng::color","chunkypng::palette","chunkypng::color","chunkypng::chunk::transparency","chunkypng::color","chunkypng::vector","chunkypng::color","chunkypng::datastream","chunkypng::rmagick","chunkypng::canvas","chunkypng::dimension","chunkypng::canvas","chunkypng::canvas","chunkypng::canvas","chunkypng::canvas","chunkypng::palette","chunkypng::palette","chunkypng::canvas","chunkypng::image","chunkypng::canvas","chunkypng::color","chunkypng::color","chunkypng::vector","chunkypng::canvas::drawing","chunkypng::canvas::drawing","chunkypng::vector","chunkypng::vector","chunkypng::datastream","chunkypng::image","chunkypng::vector","chunkypng::vector","string::enumerable","chunkypng::canvas::operations","chunkypng::canvas::operations","chunkypng::vector","chunkypng::vector","chunkypng::canvas","chunkypng::chunk::base","chunkypng::chunk::compressedtext","chunkypng::chunk::end","chunkypng::chunk::generic","chunkypng::chunk::header","chunkypng::chunk::text","chunkypng::datastream","chunkypng::dimension","chunkypng::image","chunkypng::palette","chunkypng::point","chunkypng::vector","chunkypng::vector","chunkypng::color","chunkypng::color","chunkypng::palette","chunkypng::palette","chunkypng::canvas","chunkypng::chunk::transparency","chunkypng::color","chunkypng::color","chunkypng::color","chunkypng::color","chunkypng::canvas::drawing","chunkypng::color","chunkypng::chunk","chunkypng::chunk::compressedtext","chunkypng::chunk::end","chunkypng::chunk::generic","chunkypng::chunk::header","chunkypng::chunk::imagedata","chunkypng::chunk::text","chunkypng::canvas::drawing","chunkypng::canvas::operations","chunkypng::canvas::operations","chunkypng::canvas","chunkypng::canvas","chunkypng::canvas","chunkypng::canvas::resampling","chunkypng::canvas::resampling","chunkypng::canvas::resampling","chunkypng::canvas::resampling","chunkypng::canvas::resampling","chunkypng::canvas::resampling","chunkypng::color","chunkypng::color","chunkypng::canvas::operations","chunkypng::canvas::operations","chunkypng::canvas::operations","chunkypng::canvas::operations","chunkypng::canvas::operations","chunkypng::canvas::operations","chunkypng::canvas::operations","chunkypng::canvas::operations","chunkypng::canvas::operations","chunkypng::canvas::operations","chunkypng::canvas","chunkypng::color","chunkypng::canvas::pngencoding","chunkypng::datastream","chunkypng::color","chunkypng::canvas","chunkypng::canvas","chunkypng::chunk::imagedata","chunkypng::canvas::resampling","chunkypng::canvas::resampling","chunkypng::dimension","chunkypng::point","chunkypng::canvas::streamexporting","chunkypng::canvas::streamexporting","chunkypng::dimension","chunkypng::point","chunkypng::canvas::pngencoding","chunkypng::datastream","chunkypng::canvas::dataurlexporting","chunkypng::canvas::pngencoding","chunkypng::image","chunkypng::color","chunkypng::color","chunkypng::color","chunkypng::canvas::streamexporting","chunkypng::color","chunkypng::canvas","chunkypng::palette","chunkypng::canvas::streamexporting","chunkypng::canvas::streamexporting","chunkypng::canvas::pngencoding","chunkypng::datastream","chunkypng::canvas::pngencoding","chunkypng::datastream","chunkypng::palette","chunkypng::color","chunkypng::color","chunkypng::chunk::transparency","chunkypng::chunk","chunkypng::datastream","chunkypng::vector","chunkypng::point","chunkypng::canvas::pngencoding","chunkypng::chunk::base","chunkypng::datastream","chunkypng::chunk::base","chunkypng::vector","chunkypng::vector","files/benchmarks_rdoc.html","files/license.html","files/readme_rdoc.html","files/lib/chunky_png_rb.html","files/lib/chunky_png/canvas_rb.html","files/lib/chunky_png/canvas/adam7_interlacing_rb.html","files/lib/chunky_png/canvas/data_url_exporting_rb.html","files/lib/chunky_png/canvas/data_url_importing_rb.html","files/lib/chunky_png/canvas/drawing_rb.html","files/lib/chunky_png/canvas/masking_rb.html","files/lib/chunky_png/canvas/operations_rb.html","files/lib/chunky_png/canvas/png_decoding_rb.html","files/lib/chunky_png/canvas/png_encoding_rb.html","files/lib/chunky_png/canvas/resampling_rb.html","files/lib/chunky_png/canvas/stream_exporting_rb.html","files/lib/chunky_png/canvas/stream_importing_rb.html","files/lib/chunky_png/chunk_rb.html","files/lib/chunky_png/color_rb.html","files/lib/chunky_png/compatibility_rb.html","files/lib/chunky_png/datastream_rb.html","files/lib/chunky_png/dimension_rb.html","files/lib/chunky_png/image_rb.html","files/lib/chunky_png/palette_rb.html","files/lib/chunky_png/point_rb.html","files/lib/chunky_png/rmagick_rb.html","files/lib/chunky_png/vector_rb.html"]}}