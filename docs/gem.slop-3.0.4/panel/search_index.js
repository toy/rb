var search_data = {"index":{"longSearchIndex":["lib/slop.rb","slop","slop","slop","slop","slop","slop","slop","slop","slop","slop::commands","slop::option","slop","slop","slop","slop::commands","slop","slop","slop::option","slop","slop::commands","slop","slop::commands","slop::commands","slop","slop","slop::option","slop","slop","slop","slop","slop","slop::commands","slop::commands","slop","slop::commands","slop::option","slop","slop","slop::commands","slop::option","slop::option","slop","slop","slop","slop::commands","slop::option","slop","slop::commands","slop","slop","slop","slop","slop","slop::commands","slop","slop","slop::commands","slop","slop::commands","slop","slop","slop","slop","slop","slop","slop::commands","slop","slop::commands","slop::option","slop::option","slop::option","files/changes_md.html","files/license.html","files/readme_md.html","files/lib/slop_rb.html","files/lib/slop/commands_rb.html","files/lib/slop/option_rb.html"],"info":[["Slop","lib/slop/commands.rb","classes/Slop.html"," < Object","",1],["Commands","Slop","classes/Slop/Commands.html"," < Object","",1],["Error","Slop","classes/Slop/Error.html"," < StandardError","The main Error class, all Exception classes inherit from this class. ",1],["InvalidArgumentError","Slop","classes/Slop/InvalidArgumentError.html"," < Error","Raised when an argument does not match its intended match constraint. ",1],["InvalidCommandError","Slop","classes/Slop/InvalidCommandError.html"," < Error","Raised when an invalid command is found and the strict flag is enabled. ",1],["InvalidOptionError","Slop","classes/Slop/InvalidOptionError.html"," < Error","Raised when an invalid option is found and the strict flag is enabled. ",1],["MissingArgumentError","Slop","classes/Slop/MissingArgumentError.html"," < Error","Raised when an option argument is expected but none are given. ",1],["MissingOptionError","Slop","classes/Slop/MissingOptionError.html"," < Error","Raised when an option is expected/required but not present. ",1],["Option","Slop","classes/Slop/Option.html"," < Object","",1],["[]","Slop","classes/Slop.html#M000038","(key)","Fetch an options argument value. key - The Symbol or String option short or long flag. Returns the Object",2],["[]","Slop::Commands","classes/Slop/Commands.html#M000005","(key)","Fetch the instance of Slop tied to a command. key - The String or Symbol key used to locate this command.",2],["accepts_optional_argument?","Slop::Option","classes/Slop/Option.html#M000018","()","Returns true if this option accepts an optional argument. ",2],["add_callback","Slop","classes/Slop.html#M000048","(label, &block)","Add a callback. label - The Symbol identifier to attach this callback. Returns nothing. ",2],["autocreate","Slop","classes/Slop.html#M000058","(items, index)","Autocreate an option on the fly. See the :autocreate Slop config option. items - The Array of items we're",2],["banner","Slop","classes/Slop.html#M000032","(banner = nil)","Get or set the banner. banner - The String to set the banner. Returns the banner String. ",2],["banner","Slop::Commands","classes/Slop/Commands.html#M000001","(banner = nil)","Optionally set the banner for this command help output. banner - The String text to set the banner. Returns",2],["banner=","Slop","classes/Slop.html#M000031","(banner)","Set the banner. banner - The String to set the banner. Returns nothing. ",2],["build_option","Slop","classes/Slop.html#M000059","(objects, &block)","Build an option from a list of objects. objects - An Array of objects used to build this option. Returns",2],["call","Slop::Option","classes/Slop/Option.html#M000020","(*objects)","Call this options callback if one exists, and it responds to call(). Returns nothing. ",2],["clean","Slop","classes/Slop.html#M000062","(object)","Remove any leading -- characters from a string. object - The Object we want to cast to a String and clean.",2],["default","Slop::Commands","classes/Slop/Commands.html#M000003","(config = {}, &block)","Add a Slop instance used when no other commands exist. config - A Hash of configuration options to pass",2],["each","Slop","classes/Slop.html#M000042","(&block)","Enumerable interface. Yields each Slop::Option. ",2],["each","Slop::Commands","classes/Slop/Commands.html#M000008","(&block)","Enumerable interface. ",2],["execute_global_opts","Slop::Commands","classes/Slop/Commands.html#M000016","(items, bang)","",2],["execute_multiple_switches","Slop","classes/Slop.html#M000056","(option, argument, index)","Execute a `-abc` type option where a, b and c are all options. This method is only executed if the multiple_switches",2],["execute_option","Slop","classes/Slop.html#M000055","(option, argument, index, item = nil)","Execute an option, firing off callbacks and assigning arguments. option   - The Slop::Option object found",2],["expects_argument?","Slop::Option","classes/Slop/Option.html#M000017","()","Returns true if this option expects an argument. ",2],["extract_long_flag","Slop","classes/Slop.html#M000061","(objects, config)","Extract the long flag from an item. objects - The Array of objects passed from #build_option. config",2],["extract_option","Slop","classes/Slop.html#M000057","(flag)","Extract an option from a flag. flag - The flag key used to extract an option. Returns an Array of [option,",2],["extract_short_flag","Slop","classes/Slop.html#M000060","(objects, config)","Extract the short flag from an item. objects - The Array of objects passed from #build_option. config",2],["fetch_option","Slop","classes/Slop.html#M000047","(key)","Fetch a Slop::Option object. key - The Symbol or String option key. Examples: opts.on(:foo, 'Something",2],["get","Slop","classes/Slop.html#M000039","(key)","Alias for #[]",2],["get","Slop::Commands","classes/Slop/Commands.html#M000006","(key)","Alias for #[]",2],["global","Slop::Commands","classes/Slop/Commands.html#M000004","(config = {}, &block)","Add a global Slop instance. config - A Hash of configuration options to pass to Slop. block  - An optional",2],["help","Slop","classes/Slop.html#M000051","()","Alias for #to_s",2],["help","Slop::Commands","classes/Slop/Commands.html#M000012","()","Alias for #to_s",2],["help","Slop::Option","classes/Slop/Option.html#M000023","()","Alias for #to_s",2],["init_and_parse","Slop","classes/Slop.html#M000029","(items, delete, config, &block)","Convenience method used by ::parse and ::parse!. items  - The Array of items to parse. delete - When",2],["inspect","Slop","classes/Slop.html#M000052","()","Returns the String inspection text. ",2],["inspect","Slop::Commands","classes/Slop/Commands.html#M000013","()","Returns the inspection String. ",2],["inspect","Slop::Option","classes/Slop/Option.html#M000024","()","Returns the String inspection text. ",2],["key","Slop::Option","classes/Slop/Option.html#M000019","()","Returns the String flag of this option. Preferring the long flag. ",2],["method_missing","Slop","classes/Slop.html#M000044","(method, *args, &block)","Convenience method for present?(:option). Examples: opts.parse %( --verbose ) opts.verbose? #=> true",2],["missing","Slop","classes/Slop.html#M000046","()","Fetch a list of options which were missing from the parsed list. Examples: opts = Slop.new do on :n,",2],["new","Slop","classes/Slop.html#M000030","(config = {}, &block)","Create a new instance of Slop and optionally build options via a block. config - A Hash of configuration",2],["new","Slop::Commands","classes/Slop/Commands.html#M000000","(config = {}, &block)","Create a new instance of Slop::Commands and optionally build Slop instances via a block. Any configuration",2],["new","Slop::Option","classes/Slop/Option.html#M000015","(slop, short, long, description, config = {}, &block)","Incapsulate internal option information, mainly used to store option specific configuration data, most",2],["on","Slop","classes/Slop.html#M000035","(*objects, &block)","Add an Option. objects - An Array with an optional Hash as the last element. Examples: on '-u', '--username=',",2],["on","Slop::Commands","classes/Slop/Commands.html#M000002","(command, config = {}, &block)","Add a Slop instance for a specific command. command - A String or Symbol key used to identify this command.",2],["opt","Slop","classes/Slop.html#M000037","(*objects, &block)","Alias for #on",2],["option","Slop","classes/Slop.html#M000036","(*objects, &block)","Alias for #on",2],["optspec","Slop","classes/Slop.html#M000028","(string, config = {})","Build a Slop object from a option specification. This allows you to design your options via a simple",2],["parse","Slop","classes/Slop.html#M000033","(items = ARGV, &block)","Parse a list of items, executing and gathering options along the way. items - The Array of items to extract",2],["parse","Slop","classes/Slop.html#M000026","(items = ARGV, config = {}, &block)","items  - The Array of items to extract options from (default: ARGV). config - The Hash of configuration",2],["parse","Slop::Commands","classes/Slop/Commands.html#M000007","(items = ARGV)","Parse a list of items. items - The Array of items to parse. Returns the original Array of items. ",2],["parse!","Slop","classes/Slop.html#M000027","(items = ARGV, config = {}, &block)","items  - The Array of items to extract options from (default: ARGV). config - The Hash of configuration",2],["parse!","Slop","classes/Slop.html#M000034","(items = ARGV, &block)","Parse a list of items, executing and gathering options along the way. unlike parse() this method will",2],["parse!","Slop::Commands","classes/Slop/Commands.html#M000009","(items = ARGV)","Parse a list of items, removing any options or option arguments found. items - The Array of items to",2],["parse_items","Slop","classes/Slop.html#M000053","(items, delete, &block)","Parse a list of items and process their values. items  - The Array of items to process. delete - True",2],["parse_items","Slop::Commands","classes/Slop/Commands.html#M000014","(items, bang = false)","Parse a list of items. items - The Array of items to parse. bang  - When true, #parse! will be called",2],["present?","Slop","classes/Slop.html#M000043","(*keys)","Check for an options presence. Examples: opts.parse %w( --foo ) opts.present?(:foo) #=> true opts.present?(:bar)",2],["process_item","Slop","classes/Slop.html#M000054","(items, index, &block)","Process a list item, figure out if it's an option, execute any callbacks, assign any option arguments,",2],["respond_to?","Slop","classes/Slop.html#M000045","(method)","Override this method so we can check if an option? method exists. Returns true if this option key exists",2],["separator","Slop","classes/Slop.html#M000049","(text)","Add string separators between options. text - The String text to print. ",2],["to_h","Slop","classes/Slop.html#M000041","()","Alias for #to_hash",2],["to_hash","Slop","classes/Slop.html#M000040","()","Returns a new Hash with option flags as keys and option values as values. ",2],["to_hash","Slop::Commands","classes/Slop/Commands.html#M000010","()","Returns a nested Hash with Slop options and values. See Slop#to_hash. ",2],["to_s","Slop","classes/Slop.html#M000050","()","Print a handy Slop help string. Returns the banner followed by available option help strings. ",2],["to_s","Slop::Commands","classes/Slop/Commands.html#M000011","()","Returns the help String. ",2],["to_s","Slop::Option","classes/Slop/Option.html#M000022","()","Returns the help String for this option. ",2],["value","Slop::Option","classes/Slop/Option.html#M000021","()","Fetch the argument value for this option. Returns the Object once any type conversions have taken place.",2],["value_to_range","Slop::Option","classes/Slop/Option.html#M000025","(value)","Convert an object to a Range if possible. value - The Object we want to convert to a range. Returns the",2],["CHANGES.md","files/CHANGES_md.html","files/CHANGES_md.html","","3.0.4 (2012-01-31) ------------------  * Ensure `option=argument` syntax does not consume following arguments",3],["LICENSE","files/LICENSE.html","files/LICENSE.html","","Copyright (c) 2012 Lee Jarvis  Permission is hereby granted, free of charge, to any person obtaining",3],["README.md","files/README_md.html","files/README_md.html","","Slop ====  Slop is a simple option parser with an easy to remember syntax and friendly API.  This README",3],["slop.rb","files/lib/slop_rb.html","files/lib/slop_rb.html","","",3],["commands.rb","files/lib/slop/commands_rb.html","files/lib/slop/commands_rb.html","","",3],["option.rb","files/lib/slop/option_rb.html","files/lib/slop/option_rb.html","","",3]],"searchIndex":["slop","commands","error","invalidargumenterror","invalidcommanderror","invalidoptionerror","missingargumenterror","missingoptionerror","option","[]()","[]()","accepts_optional_argument?()","add_callback()","autocreate()","banner()","banner()","banner=()","build_option()","call()","clean()","default()","each()","each()","execute_global_opts()","execute_multiple_switches()","execute_option()","expects_argument?()","extract_long_flag()","extract_option()","extract_short_flag()","fetch_option()","get()","get()","global()","help()","help()","help()","init_and_parse()","inspect()","inspect()","inspect()","key()","method_missing()","missing()","new()","new()","new()","on()","on()","opt()","option()","optspec()","parse()","parse()","parse()","parse!()","parse!()","parse!()","parse_items()","parse_items()","present?()","process_item()","respond_to?()","separator()","to_h()","to_hash()","to_hash()","to_s()","to_s()","to_s()","value()","value_to_range()","changes.md","license","readme.md","slop.rb","commands.rb","option.rb"]}}