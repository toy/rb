var search_data = {"index":{"info":[["Process","lib/thin/daemonizing.rb","classes/Process.html"," < ","",1],["Rack","lib/rack/adapter/loader.rb","classes/Rack.html"," < ","Adapter to run a Rails app with any supported Rack handler. By default it will try to load the Rails",1],["Adapter","Rack","classes/Rack/Adapter.html"," < ","",1],["Rails","Rack::Adapter","classes/Rack/Adapter/Rails.html"," < Object","",1],["CGIWrapper","Rack::Adapter::Rails","classes/Rack/Adapter/Rails/CGIWrapper.html"," < ::CGI","",1],["CgiApp","Rack::Adapter::Rails","classes/Rack/Adapter/Rails/CgiApp.html"," < Object","For Rails pre Rack (2.3) ",1],["AdapterNotFound","Rack","classes/Rack/AdapterNotFound.html"," < RuntimeError","",1],["Thin","lib/thin/backends/base.rb","classes/Thin.html"," < ","",1],["Backends","Thin","classes/Thin/Backends.html"," < ","",1],["Base","Thin::Backends","classes/Thin/Backends/Base.html"," < Object","A Backend connects the server to the client. It handles: * connection/disconnection to the server * initialization",1],["SwiftiplyClient","Thin::Backends","classes/Thin/Backends/SwiftiplyClient.html"," < Base","Backend to act as a Swiftiply client (http://swiftiply.swiftcore.org). ",1],["TcpServer","Thin::Backends","classes/Thin/Backends/TcpServer.html"," < Base","Backend to act as a TCP socket server. ",1],["UnixServer","Thin::Backends","classes/Thin/Backends/UnixServer.html"," < Base","Backend to act as a UNIX domain socket server. ",1],["Command","Thin","classes/Thin/Command.html"," < Object","Run a command through the +thin+ command-line script. ",1],["Connection","Thin","classes/Thin/Connection.html"," < EventMachine::Connection","Connection between the server and client. This class is instanciated by EventMachine on each new connection",1],["Controllers","Thin","classes/Thin/Controllers.html"," < ","Build and control Thin servers. Hey Controller pattern is not only for web apps yo! ",1],["Cluster","Thin::Controllers","classes/Thin/Controllers/Cluster.html"," < Controller","Control a set of servers. * Generate start and stop commands and run them. * Inject the port or socket",1],["Controller","Thin::Controllers","classes/Thin/Controllers/Controller.html"," < Object","Controls one Thin server. Allow to start, stop, restart and configure a single thin server. ",1],["Service","Thin::Controllers","classes/Thin/Controllers/Service.html"," < Controller","System service controller to launch all servers which config files are in a directory. ",1],["Daemonizable","Thin","classes/Thin/Daemonizable.html"," < ","Module included in classes that can be turned into a daemon. Handle stuff like: * storing the PID in",1],["ClassMethods","Thin::Daemonizable","classes/Thin/Daemonizable/ClassMethods.html"," < ","",1],["Headers","Thin","classes/Thin/Headers.html"," < Object","Store HTTP header name-value pairs direcly to a string and allow duplicated entries on some names. ",1],["InvalidOption","Thin","classes/Thin/InvalidOption.html"," < RunnerError","Raised when an option is not valid. ",1],["InvalidRequest","Thin","classes/Thin/InvalidRequest.html"," < IOError","Raised when an incoming request is not valid and the server can not process it. ",1],["Logging","Thin","classes/Thin/Logging.html"," < ","To be included in classes to allow some basic logging that can be silenced (<tt>Logging.silent=</tt>)",1],["OptionRequired","Thin","classes/Thin/OptionRequired.html"," < RunnerError","Raised when a mandatory option is missing to run a command. ",1],["PidFileExist","Thin","classes/Thin/PidFileExist.html"," < RuntimeError","Raised when the pid file already exist starting as a daemon. ",1],["PlatformNotSupported","Thin","classes/Thin/PlatformNotSupported.html"," < RuntimeError","Raised when a feature is not supported on the current platform. ",1],["Request","Thin","classes/Thin/Request.html"," < Object","A request sent by the client to the server. ",1],["Response","Thin","classes/Thin/Response.html"," < Object","A response sent to the client. ",1],["RestartTimeout","Thin","classes/Thin/RestartTimeout.html"," < RuntimeError","An exception class to handle the event that server didn't start on time ",1],["Runner","Thin","classes/Thin/Runner.html"," < Object","CLI runner. Parse options and send command to the correct Controller. ",1],["RunnerError","Thin","classes/Thin/RunnerError.html"," < RuntimeError","Error raised that will abort the process and print not backtrace. ",1],["Server","Thin","classes/Thin/Server.html"," < Object","The uterly famous Thin HTTP server. It listen for incoming request through a given +backend+ and forward",1],["Stats","Thin","classes/Thin/Stats.html"," < ","",1],["Adapter","Thin::Stats","classes/Thin/Stats/Adapter.html"," < Object","Rack adapter to log stats about a Rack application. ",1],["SwiftiplyConnection","Thin","classes/Thin/SwiftiplyConnection.html"," < Connection","",1],["UnixConnection","Thin","classes/Thin/UnixConnection.html"," < Connection","Connection through a UNIX domain socket. ",1],["[]=","Thin::Headers","classes/Thin/Headers.html#M000117","(key, value)","Add <tt>key: value</tt> pair to the headers. Ignore if already sent and no duplicates are allowed for",2],["address","Thin::Controllers::Cluster","classes/Thin/Controllers/Cluster.html#M000057","()","",2],["args","Rack::Adapter::Rails::CGIWrapper","classes/Rack/Adapter/Rails/CGIWrapper.html#M000024","()","Used to wrap the normal args variable used inside CGI. ",2],["async_callback=","Thin::Request","classes/Thin/Request.html#M000159","(callback)","",2],["async_close","Thin::Request","classes/Thin/Request.html#M000160","()","",2],["call","Rack::Adapter::Rails","classes/Rack/Adapter/Rails.html#M000006","(env)","",2],["call","Rack::Adapter::Rails::CgiApp","classes/Rack/Adapter/Rails/CgiApp.html#M000008","(env)","",2],["call","Thin::Stats::Adapter","classes/Thin/Stats/Adapter.html#M000187","(env)","",2],["can_persist!","Thin::Connection","classes/Thin/Connection.html#M000088","()","Allows this connection to be persistent. ",2],["can_persist?","Thin::Connection","classes/Thin/Connection.html#M000089","()","Return +true+ if this connection is allowed to stay open and be persistent. ",2],["change_privilege","Thin::Daemonizable","classes/Thin/Daemonizable.html#M000123","(user, group=user)","Change privileges of the process to the specified user and group. ",2],["close","Thin::Backends::Base","classes/Thin/Backends/Base.html#M000018","()","Free up resources used by the backend. ",2],["close","Thin::Backends::UnixServer","classes/Thin/Backends/UnixServer.html#M000047","()","Free up resources used by the backend. ",2],["close","Thin::Request","classes/Thin/Request.html#M000161","()","Close any resource used by the request ",2],["close","Thin::Response","classes/Thin/Response.html#M000149","()","Close any resource used by the response ",2],["close_request_response","Thin::Connection","classes/Thin/Connection.html#M000081","()","",2],["cluster?","Thin::Runner","classes/Thin/Runner.html#M000182","()","+true+ if we're controlling a cluster. ",2],["commands","Thin::Runner","classes/Thin/Runner.html#M000163","()","Return all available commands ",2],["config","Thin::Backends::Base","classes/Thin/Backends/Base.html#M000017","()","Configure the backend. This method will be called before droping superuser privileges, so you can do",2],["config","Thin::Controllers::Controller","classes/Thin/Controllers/Controller.html#M000109","()","",2],["config","Thin::Server","classes/Thin/Server.html#M000172","()","== Configure the server The process might need to have superuser privilege to configure server with optimal",2],["config_path","Thin::Controllers::Service","classes/Thin/Controllers/Service.html#M000098","()","",2],["connect","Thin::Backends::SwiftiplyClient","classes/Thin/Backends/SwiftiplyClient.html#M000032","()","Connect the server ",2],["connect","Thin::Backends::TcpServer","classes/Thin/Backends/TcpServer.html#M000034","()","Connect the server ",2],["connect","Thin::Backends::UnixServer","classes/Thin/Backends/UnixServer.html#M000045","()","Connect the server ",2],["connection_completed","Thin::SwiftiplyConnection","classes/Thin/SwiftiplyConnection.html#M000039","()","",2],["connection_finished","Thin::Backends::Base","classes/Thin/Backends/Base.html#M000020","(connection)","Called by a connection when it's unbinded. ",2],["content_length","Thin::Request","classes/Thin/Request.html#M000155","()","Expected size of the body ",2],["cookies","Rack::Adapter::Rails::CGIWrapper","classes/Rack/Adapter/Rails/CGIWrapper.html#M000022","()","",2],["daemonize","Thin::Daemonizable","classes/Thin/Daemonizable.html#M000122","()","Turns the current script into a daemon process that detaches from the console. ",2],["debug","Thin::Logging","classes/Thin/Logging.html#M000137","(msg=nil)","Log a message to the console if debugging is activated ",2],["debug","Thin::Logging","classes/Thin/Logging.html#M000137","(msg=nil)","Log a message to the console if debugging is activated ",2],["debug?","Thin::Logging","classes/Thin/Logging.html#M000130","()","",2],["disconnect","Thin::Backends::SwiftiplyClient","classes/Thin/Backends/SwiftiplyClient.html#M000037","()","Stops the server ",2],["disconnect","Thin::Backends::TcpServer","classes/Thin/Backends/TcpServer.html#M000035","()","Stops the server ",2],["disconnect","Thin::Backends::UnixServer","classes/Thin/Backends/UnixServer.html#M000046","()","Stops the server ",2],["each","Thin::Response","classes/Thin/Response.html#M000151","()","Yields each chunk of the response. To control the size of each chunk define your own +each+ method on",2],["empty?","Thin::Backends::Base","classes/Thin/Backends/Base.html#M000027","()","Returns +true+ if no active connection. ",2],["env_table","Rack::Adapter::Rails::CGIWrapper","classes/Rack/Adapter/Rails/CGIWrapper.html#M000025","()","Used to wrap the normal env_table variable used inside CGI. ",2],["file_exist?","Rack::Adapter::Rails","classes/Rack/Adapter/Rails.html#M000005","(path)","",2],["finished?","Thin::Request","classes/Thin/Request.html#M000154","()","+true+ if headers and body are finished parsing ",2],["first_port","Thin::Controllers::Cluster","classes/Thin/Controllers/Cluster.html#M000056","()","",2],["for","Rack::Adapter","classes/Rack/Adapter.html#M000002","(name, options={})","Loads an adapter identified by +name+ using +options+ hash. ",2],["force_kill","Thin::Daemonizable::ClassMethods","classes/Thin/Daemonizable/ClassMethods.html#M000135","(pid_file)","",2],["guess","Rack::Adapter","classes/Rack/Adapter.html#M000000","(dir)","Guess which adapter to use based on the directory structure or file content. Returns a symbol representing",2],["handle_error","Thin::Connection","classes/Thin/Connection.html#M000079","()","Logs catched exception and closes the connection. ",2],["has_key?","Thin::Headers","classes/Thin/Headers.html#M000119","(key)","",2],["head","Thin::Response","classes/Thin/Response.html#M000145","()","Top header of the response, containing the status code and response headers. ",2],["header","Rack::Adapter::Rails::CGIWrapper","classes/Rack/Adapter/Rails/CGIWrapper.html#M000011","(options = \"text/html\")","",2],["headers=","Thin::Response","classes/Thin/Response.html#M000148","(key_value_pairs)","Ruby 1.9 doesn't have a String#each anymore. Rack spec doesn't take care of that yet, for now we just",2],["headers=","Thin::Response","classes/Thin/Response.html#M000146","(key_value_pairs)","Ruby 1.8 implementation. Respects Rack specs. See http://rack.rubyforge.org/doc/files/SPEC.html ",2],["headers_output","Thin::Response","classes/Thin/Response.html#M000144","()","String representation of the headers to be sent in the response. ",2],["host_ip","Thin::SwiftiplyConnection","classes/Thin/SwiftiplyConnection.html#M000043","()","For some reason Swiftiply request the current host ",2],["include_server_number","Thin::Controllers::Cluster","classes/Thin/Controllers/Cluster.html#M000095","(path, number)","Add the server port or number in the filename so each instance get its own file ",2],["included","Thin::Daemonizable","classes/Thin/Daemonizable.html#M000118","(base)","",2],["initialize_connection","Thin::Backends::Base","classes/Thin/Backends/Base.html#M000029","(connection)","Initialize a new connection to a client. ",2],["install","Thin::Controllers::Service","classes/Thin/Controllers/Service.html#M000104","(config_files_path=DEFAULT_CONFIG_PATH)","",2],["kill","Thin::Daemonizable::ClassMethods","classes/Thin/Daemonizable/ClassMethods.html#M000126","(pid_file, timeout=60)","Send a QUIT or INT (if timeout is +0+) signal the process which PID is stored in +pid_file+. If the process",2],["linux?","Thin","classes/Thin.html#M000191","()","",2],["load","Rack::Adapter","classes/Rack/Adapter.html#M000001","(config)","Load a Rack application from a Rack config file (.ru). ",2],["load_adapter","Thin::Controllers::Controller","classes/Thin/Controllers/Controller.html#M000113","()","",2],["load_application","Rack::Adapter::Rails","classes/Rack/Adapter/Rails.html#M000004","()","",2],["load_cgi_multipart_eof_fix","Thin::Server","classes/Thin/Server.html#M000178","()","Taken from Mongrel cgi_multipart_eof_fix Ruby 1.8.5 has a security bug in cgi.rb, we need to patch it.",2],["load_options_from_config_file!","Thin::Runner","classes/Thin/Runner.html#M000184","()","",2],["load_rackup_config","Thin::Controllers::Controller","classes/Thin/Controllers/Controller.html#M000114","()","",2],["log","Thin::Logging","classes/Thin/Logging.html#M000134","(msg)","Log a message to the console ",2],["log","Thin::Logging","classes/Thin/Logging.html#M000134","(msg)","Log a message to the console ",2],["log","Thin::Stats::Adapter","classes/Thin/Stats/Adapter.html#M000188","(env)","",2],["log_error","Thin::Logging","classes/Thin/Logging.html#M000138","(e=$!)","Log an error backtrace if debugging is activated ",2],["log_error","Thin::Logging","classes/Thin/Logging.html#M000138","(e=$!)","Log an error backtrace if debugging is activated ",2],["log_file","Thin::Controllers::Cluster","classes/Thin/Controllers/Cluster.html#M000063","()","",2],["log_file_for","Thin::Controllers::Cluster","classes/Thin/Controllers/Cluster.html#M000080","(number)","",2],["move_body_to_tempfile","Thin::Request","classes/Thin/Request.html#M000162","()","",2],["name","Thin::Server","classes/Thin/Server.html#M000173","()","Name of the server and type of backend used. This is also the name of the process in which Thin is running",2],["new","Rack::Adapter::Rails","classes/Rack/Adapter/Rails.html#M000003","(options={})","",2],["new","Rack::Adapter::Rails::CGIWrapper","classes/Rack/Adapter/Rails/CGIWrapper.html#M000009","(request, response, *args)","",2],["new","Thin::Backends::Base","classes/Thin/Backends/Base.html#M000013","()","",2],["new","Thin::Backends::SwiftiplyClient","classes/Thin/Backends/SwiftiplyClient.html#M000031","(host, port, options={})","",2],["new","Thin::Backends::TcpServer","classes/Thin/Backends/TcpServer.html#M000033","(host, port)","",2],["new","Thin::Backends::UnixServer","classes/Thin/Backends/UnixServer.html#M000044","(socket)","",2],["new","Thin::Command","classes/Thin/Command.html#M000050","(name, options={})","",2],["new","Thin::Controllers::Cluster","classes/Thin/Controllers/Cluster.html#M000055","(options)","Create a new cluster of servers launched using +options+. ",2],["new","Thin::Controllers::Controller","classes/Thin/Controllers/Controller.html#M000102","(options)","",2],["new","Thin::Controllers::Service","classes/Thin/Controllers/Service.html#M000097","(options)","",2],["new","Thin::Headers","classes/Thin/Headers.html#M000116","()","",2],["new","Thin::OptionRequired","classes/Thin/OptionRequired.html#M000096","(option)","",2],["new","Thin::Request","classes/Thin/Request.html#M000147","()","",2],["new","Thin::Response","classes/Thin/Response.html#M000143","()","",2],["new","Thin::Runner","classes/Thin/Runner.html#M000164","(argv)","",2],["new","Thin::Server","classes/Thin/Server.html#M000166","(*args, &block)","",2],["new","Thin::Stats::Adapter","classes/Thin/Stats/Adapter.html#M000186","(app, path='/stats')","",2],["on_restart","Thin::Daemonizable","classes/Thin/Daemonizable.html#M000124","(&block)","Register a proc to be called to restart the server. ",2],["onebyone","Thin::Controllers::Cluster","classes/Thin/Controllers/Cluster.html#M000066","()","",2],["only","Thin::Controllers::Cluster","classes/Thin/Controllers/Cluster.html#M000065","()","",2],["params","Rack::Adapter::Rails::CGIWrapper","classes/Rack/Adapter/Rails/CGIWrapper.html#M000021","()","",2],["parse","Thin::Request","classes/Thin/Request.html#M000150","(data)","Parse a chunk of data into the request environment Raises a +InvalidRequest+ if invalid. Returns +true+",2],["parse!","Thin::Runner","classes/Thin/Runner.html#M000179","()","Parse the options. ",2],["parser","Thin::Runner","classes/Thin/Runner.html#M000165","()","",2],["persistent!","Thin::Response","classes/Thin/Response.html#M000152","()","Tell the client the connection should stay open ",2],["persistent?","Thin::Connection","classes/Thin/Connection.html#M000090","()","Return +true+ if the connection must be left open and ready to be reused for another request. ",2],["persistent?","Thin::Request","classes/Thin/Request.html#M000156","()","Returns +true+ if the client expect the connection to be persistent. ",2],["persistent?","Thin::Response","classes/Thin/Response.html#M000153","()","Persistent connection must be requested as keep-alive from the server and have a Content-Length, or the",2],["persistent?","Thin::SwiftiplyConnection","classes/Thin/SwiftiplyConnection.html#M000040","()","",2],["pid","Thin::Daemonizable","classes/Thin/Daemonizable.html#M000121","()","",2],["pid_file","Thin::Controllers::Cluster","classes/Thin/Controllers/Cluster.html#M000062","()","",2],["pid_file_for","Thin::Controllers::Cluster","classes/Thin/Controllers/Cluster.html#M000084","(number)","",2],["pid_for","Thin::Controllers::Cluster","classes/Thin/Controllers/Cluster.html#M000086","(number)","",2],["post_init","Thin::Connection","classes/Thin/Connection.html#M000058","()","Get the connection ready to process a request. ",2],["post_process","Thin::Connection","classes/Thin/Connection.html#M000075","(result)","",2],["pre_process","Thin::Connection","classes/Thin/Connection.html#M000069","()","",2],["process","Thin::Connection","classes/Thin/Connection.html#M000060","()","Called when all data was received and the request is ready to be processed. ",2],["query_string","Rack::Adapter::Rails::CGIWrapper","classes/Rack/Adapter/Rails/CGIWrapper.html#M000023","()","",2],["rack_based?","Rack::Adapter::Rails","classes/Rack/Adapter/Rails.html#M000007","()","",2],["read_pid_file","Thin::Daemonizable::ClassMethods","classes/Thin/Daemonizable/ClassMethods.html#M000139","(file)","",2],["receive_data","Thin::Connection","classes/Thin/Connection.html#M000059","(data)","Called when data is received from the client. ",2],["remote_address","Thin::Connection","classes/Thin/Connection.html#M000093","()","IP Address of the remote client. ",2],["remote_address=","Thin::Request","classes/Thin/Request.html#M000157","(address)","",2],["remove_pid_file","Thin::Daemonizable","classes/Thin/Daemonizable.html#M000140","()","",2],["remove_socket_file","Thin::Backends::UnixServer","classes/Thin/Backends/UnixServer.html#M000049","()","",2],["remove_stale_pid_file","Thin::Daemonizable","classes/Thin/Daemonizable.html#M000142","()","If PID file is stale, remove it. ",2],["restart","Thin::Controllers::Cluster","classes/Thin/Controllers/Cluster.html#M000074","()","Stop and start the servers. ",2],["restart","Thin::Controllers::Controller","classes/Thin/Controllers/Controller.html#M000108","()","",2],["restart","Thin::Controllers::Service","classes/Thin/Controllers/Service.html#M000101","()","",2],["restart","Thin::Daemonizable","classes/Thin/Daemonizable.html#M000125","()","Restart the server. ",2],["restart","Thin::Daemonizable::ClassMethods","classes/Thin/Daemonizable/ClassMethods.html#M000127","(pid_file)","Restart the server by sending HUP signal. ",2],["ruby_18?","Thin","classes/Thin.html#M000192","()","",2],["ruby_require","Thin::Runner","classes/Thin/Runner.html#M000185","(file)","",2],["run","Thin::Command","classes/Thin/Command.html#M000051","(*args)","",2],["run","Thin::Command","classes/Thin/Command.html#M000052","()","Send the command to the +thin+ script ",2],["run","Thin::Controllers::Cluster","classes/Thin/Controllers/Cluster.html#M000087","(cmd, number)","Send the command to the +thin+ script ",2],["run","Thin::Controllers::Service","classes/Thin/Controllers/Service.html#M000105","(command)","",2],["run!","Thin::Runner","classes/Thin/Runner.html#M000180","()","Parse the current shell arguments and run the command. Exits on error. ",2],["run_command","Thin::Runner","classes/Thin/Runner.html#M000181","()","Send the command to the controller: single instance or cluster. ",2],["running?","Process","classes/Process.html#M000115","(pid)","Returns +true+ the process identied by +pid+ is running. ",2],["running?","Process","classes/Process.html#M000115","(pid)","Returns +true+ the process identied by +pid+ is running. ",2],["running?","Thin::Backends::Base","classes/Thin/Backends/Base.html#M000019","()","Returns +true+ if the backend is connected and running. ",2],["running?","Thin::Server","classes/Thin/Server.html#M000175","()","Return +true+ if the server is running and ready to receive requests. Note that the server might still",2],["select_backend","Thin::Server","classes/Thin/Server.html#M000177","(host, port, options)","",2],["send_signal","Thin::Daemonizable::ClassMethods","classes/Thin/Daemonizable/ClassMethods.html#M000128","(signal, pid_file, timeout=60)","Send a +signal+ to the process which PID is stored in +pid_file+. ",2],["serve","Thin::Stats::Adapter","classes/Thin/Stats/Adapter.html#M000189","(env)","",2],["server_id","Thin::Controllers::Cluster","classes/Thin/Controllers/Cluster.html#M000078","(number)","",2],["service?","Thin::Runner","classes/Thin/Runner.html#M000183","()","+true+ if we're acting a as system service. ",2],["setup_signals","Thin::Server","classes/Thin/Server.html#M000176","()","Register signals: * TERM & QUIT calls +stop+ to shutdown gracefully. * INT calls <tt>stop!</tt> to force",2],["sh","Thin::Controllers::Service","classes/Thin/Controllers/Service.html#M000106","(cmd)","",2],["shellify","Thin::Command","classes/Thin/Command.html#M000053","()","Turn into a runnable shell command ",2],["silent","Thin::Logging","classes/Thin/Logging.html#M000132","()","Global silencer methods ",2],["silent=","Thin::Logging","classes/Thin/Logging.html#M000133","(value)","",2],["silent?","Thin::Logging","classes/Thin/Logging.html#M000131","()","",2],["size","Thin::Backends::Base","classes/Thin/Backends/Base.html#M000028","()","Number of active connections. ",2],["size","Thin::Controllers::Cluster","classes/Thin/Controllers/Cluster.html#M000064","()","",2],["socket","Thin::Controllers::Cluster","classes/Thin/Controllers/Cluster.html#M000061","()","",2],["socket_address","Thin::Connection","classes/Thin/Connection.html#M000094","()","Returns IP address of peer as a string. ",2],["socket_address","Thin::UnixConnection","classes/Thin/UnixConnection.html#M000054","()","",2],["socket_for","Thin::Controllers::Cluster","classes/Thin/Controllers/Cluster.html#M000085","(number)","",2],["ssl?","Thin::Backends::Base","classes/Thin/Backends/Base.html#M000012","()","",2],["start","Thin::Backends::Base","classes/Thin/Backends/Base.html#M000014","()","Start the backend and connect it. ",2],["start","Thin::Controllers::Cluster","classes/Thin/Controllers/Cluster.html#M000070","()","Start the servers ",2],["start","Thin::Controllers::Controller","classes/Thin/Controllers/Controller.html#M000103","()","",2],["start","Thin::Controllers::Service","classes/Thin/Controllers/Service.html#M000099","()","",2],["start","Thin::Server","classes/Thin/Server.html#M000167","(*args, &block)","Lil' shortcut to turn this: Server.new(...).start into this: Server.start(...) ",2],["start","Thin::Server","classes/Thin/Server.html#M000168","()","Start the server and listen for connections. ",2],["start!","Thin::Server","classes/Thin/Server.html#M000169","()","Alias for #start",2],["start_server","Thin::Controllers::Cluster","classes/Thin/Controllers/Cluster.html#M000071","(number)","Start a single server ",2],["stdinput","Rack::Adapter::Rails::CGIWrapper","classes/Rack/Adapter/Rails/CGIWrapper.html#M000026","()","Used to wrap the normal stdinput variable used inside CGI. ",2],["stdoutput","Rack::Adapter::Rails::CGIWrapper","classes/Rack/Adapter/Rails/CGIWrapper.html#M000030","()","",2],["stop","Thin::Backends::Base","classes/Thin/Backends/Base.html#M000015","()","Stop of the backend from accepting new connections. ",2],["stop","Thin::Controllers::Cluster","classes/Thin/Controllers/Cluster.html#M000072","()","Stop the servers ",2],["stop","Thin::Controllers::Controller","classes/Thin/Controllers/Controller.html#M000107","()","",2],["stop","Thin::Controllers::Service","classes/Thin/Controllers/Service.html#M000100","()","",2],["stop","Thin::Server","classes/Thin/Server.html#M000170","()","== Gracefull shutdown Stops the server after processing all current connections. As soon as this method",2],["stop!","Thin::Backends::Base","classes/Thin/Backends/Base.html#M000016","()","Force stop of the backend NOW, too bad for the current connections. ",2],["stop!","Thin::Server","classes/Thin/Server.html#M000171","()","== Force shutdown Stops the server closing all current connections right away. This doesn't wait for",2],["stop_server","Thin::Controllers::Cluster","classes/Thin/Controllers/Cluster.html#M000073","(number)","Stop a single server ",2],["swiftiply?","Thin::Controllers::Cluster","classes/Thin/Controllers/Cluster.html#M000068","()","",2],["swiftiply_handshake","Thin::SwiftiplyConnection","classes/Thin/SwiftiplyConnection.html#M000042","(key)","",2],["tail","Thin::Controllers::Controller","classes/Thin/Controllers/Controller.html#M000112","(file)","Acts like GNU tail command. Taken from Rails. ",2],["tail_log","Thin::Controllers::Controller","classes/Thin/Controllers/Controller.html#M000111","(log_file)","Tail the log file of server +number+ during the execution of the block.         ",2],["terminate_request","Thin::Connection","classes/Thin/Connection.html#M000082","()","Does request and response cleanup (closes open IO streams and deletes created temporary files). Re-initializes",2],["test_socket","Thin::Controllers::Cluster","classes/Thin/Controllers/Cluster.html#M000076","(number)","",2],["threaded=","Thin::Request","classes/Thin/Request.html#M000158","(value)","",2],["threaded?","Thin::Backends::Base","classes/Thin/Backends/Base.html#M000010","()","",2],["threaded?","Thin::Connection","classes/Thin/Connection.html#M000091","()","+true+ if <tt>app.call</tt> will be called inside a thread. You can set all requests as threaded setting",2],["to_s","Thin::Backends::SwiftiplyClient","classes/Thin/Backends/SwiftiplyClient.html#M000038","()","",2],["to_s","Thin::Backends::TcpServer","classes/Thin/Backends/TcpServer.html#M000036","()","",2],["to_s","Thin::Backends::UnixServer","classes/Thin/Backends/UnixServer.html#M000048","()","",2],["to_s","Thin::Headers","classes/Thin/Headers.html#M000120","()","",2],["to_s","Thin::Server","classes/Thin/Server.html#M000174","()","Alias for #name",2],["trace","Thin::Logging","classes/Thin/Logging.html#M000136","(msg=nil)","Log a message to the console if tracing is activated ",2],["trace","Thin::Logging","classes/Thin/Logging.html#M000136","(msg=nil)","Log a message to the console if tracing is activated ",2],["trace?","Thin::Logging","classes/Thin/Logging.html#M000129","()","",2],["unbind","Thin::Connection","classes/Thin/Connection.html#M000083","()","Called when the connection is unbinded from the socket and can no longer be used to process requests.",2],["unbind","Thin::SwiftiplyConnection","classes/Thin/SwiftiplyConnection.html#M000041","()","",2],["wait","Thin::Controllers::Cluster","classes/Thin/Controllers/Cluster.html#M000067","()","",2],["wait_for_file","Thin::Controllers::Controller","classes/Thin/Controllers/Controller.html#M000110","(state, file)","Wait for a pid file to either be created or deleted. ",2],["wait_until_server_started","Thin::Controllers::Cluster","classes/Thin/Controllers/Cluster.html#M000077","(number)","Make sure the server is running before moving on to the next one. ",2],["win?","Thin","classes/Thin.html#M000190","()","",2],["with_each_server","Thin::Controllers::Cluster","classes/Thin/Controllers/Cluster.html#M000092","()","",2],["write_pid_file","Thin::Daemonizable","classes/Thin/Daemonizable.html#M000141","()","",2],["CHANGELOG","files/CHANGELOG.html","files/CHANGELOG.html","","== 1.3.1 Triple Espresso  * Fix service not working pre 1.9.  == 1.3.0 Double Espresso  * BREAKING CHANGE:",3],["README","files/README.html","files/README.html","","== Thin Tiny, fast & funny HTTP server  Thin is a Ruby web server that glues together 3 of the best Ruby",3],["loader.rb","files/lib/rack/adapter/loader_rb.html","files/lib/rack/adapter/loader_rb.html","","",3],["rails.rb","files/lib/rack/adapter/rails_rb.html","files/lib/rack/adapter/rails_rb.html","","",3],["thin.rb","files/lib/thin_rb.html","files/lib/thin_rb.html","","",3],["base.rb","files/lib/thin/backends/base_rb.html","files/lib/thin/backends/base_rb.html","","",3],["swiftiply_client.rb","files/lib/thin/backends/swiftiply_client_rb.html","files/lib/thin/backends/swiftiply_client_rb.html","","",3],["tcp_server.rb","files/lib/thin/backends/tcp_server_rb.html","files/lib/thin/backends/tcp_server_rb.html","","",3],["unix_server.rb","files/lib/thin/backends/unix_server_rb.html","files/lib/thin/backends/unix_server_rb.html","","",3],["command.rb","files/lib/thin/command_rb.html","files/lib/thin/command_rb.html","","",3],["connection.rb","files/lib/thin/connection_rb.html","files/lib/thin/connection_rb.html","","",3],["cluster.rb","files/lib/thin/controllers/cluster_rb.html","files/lib/thin/controllers/cluster_rb.html","","",3],["controller.rb","files/lib/thin/controllers/controller_rb.html","files/lib/thin/controllers/controller_rb.html","","",3],["service.rb","files/lib/thin/controllers/service_rb.html","files/lib/thin/controllers/service_rb.html","","",3],["service.sh.erb","files/lib/thin/controllers/service_sh_erb.html","files/lib/thin/controllers/service_sh_erb.html","","#!/bin/sh ### BEGIN INIT INFO # Provides:          thin # Required-Start:    $local_fs $remote_fs # Required-Stop:",3],["daemonizing.rb","files/lib/thin/daemonizing_rb.html","files/lib/thin/daemonizing_rb.html","","",3],["headers.rb","files/lib/thin/headers_rb.html","files/lib/thin/headers_rb.html","","",3],["logging.rb","files/lib/thin/logging_rb.html","files/lib/thin/logging_rb.html","","",3],["request.rb","files/lib/thin/request_rb.html","files/lib/thin/request_rb.html","","",3],["response.rb","files/lib/thin/response_rb.html","files/lib/thin/response_rb.html","","",3],["runner.rb","files/lib/thin/runner_rb.html","files/lib/thin/runner_rb.html","","",3],["server.rb","files/lib/thin/server_rb.html","files/lib/thin/server_rb.html","","",3],["stats.html.erb","files/lib/thin/stats_html_erb.html","files/lib/thin/stats_html_erb.html","","<%# # Taken from Rack::ShowException # adapted from Django <djangoproject.com> # Copyright (c) 2005,",3],["stats.rb","files/lib/thin/stats_rb.html","files/lib/thin/stats_rb.html","","",3],["statuses.rb","files/lib/thin/statuses_rb.html","files/lib/thin/statuses_rb.html","","",3],["version.rb","files/lib/thin/version_rb.html","files/lib/thin/version_rb.html","","",3]],"searchIndex":["process","rack","adapter","rails","cgiwrapper","cgiapp","adapternotfound","thin","backends","base","swiftiplyclient","tcpserver","unixserver","command","connection","controllers","cluster","controller","service","daemonizable","classmethods","headers","invalidoption","invalidrequest","logging","optionrequired","pidfileexist","platformnotsupported","request","response","restarttimeout","runner","runnererror","server","stats","adapter","swiftiplyconnection","unixconnection","[]=()","address()","args()","async_callback=()","async_close()","call()","call()","call()","can_persist!()","can_persist?()","change_privilege()","close()","close()","close()","close()","close_request_response()","cluster?()","commands()","config()","config()","config()","config_path()","connect()","connect()","connect()","connection_completed()","connection_finished()","content_length()","cookies()","daemonize()","debug()","debug()","debug?()","disconnect()","disconnect()","disconnect()","each()","empty?()","env_table()","file_exist?()","finished?()","first_port()","for()","force_kill()","guess()","handle_error()","has_key?()","head()","header()","headers=()","headers=()","headers_output()","host_ip()","include_server_number()","included()","initialize_connection()","install()","kill()","linux?()","load()","load_adapter()","load_application()","load_cgi_multipart_eof_fix()","load_options_from_config_file!()","load_rackup_config()","log()","log()","log()","log_error()","log_error()","log_file()","log_file_for()","move_body_to_tempfile()","name()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","on_restart()","onebyone()","only()","params()","parse()","parse!()","parser()","persistent!()","persistent?()","persistent?()","persistent?()","persistent?()","pid()","pid_file()","pid_file_for()","pid_for()","post_init()","post_process()","pre_process()","process()","query_string()","rack_based?()","read_pid_file()","receive_data()","remote_address()","remote_address=()","remove_pid_file()","remove_socket_file()","remove_stale_pid_file()","restart()","restart()","restart()","restart()","restart()","ruby_18?()","ruby_require()","run()","run()","run()","run()","run!()","run_command()","running?()","running?()","running?()","running?()","select_backend()","send_signal()","serve()","server_id()","service?()","setup_signals()","sh()","shellify()","silent()","silent=()","silent?()","size()","size()","socket()","socket_address()","socket_address()","socket_for()","ssl?()","start()","start()","start()","start()","start()","start()","start!()","start_server()","stdinput()","stdoutput()","stop()","stop()","stop()","stop()","stop()","stop!()","stop!()","stop_server()","swiftiply?()","swiftiply_handshake()","tail()","tail_log()","terminate_request()","test_socket()","threaded=()","threaded?()","threaded?()","to_s()","to_s()","to_s()","to_s()","to_s()","trace()","trace()","trace?()","unbind()","unbind()","wait()","wait_for_file()","wait_until_server_started()","win?()","with_each_server()","write_pid_file()","changelog","readme","loader.rb","rails.rb","thin.rb","base.rb","swiftiply_client.rb","tcp_server.rb","unix_server.rb","command.rb","connection.rb","cluster.rb","controller.rb","service.rb","service.sh.erb","daemonizing.rb","headers.rb","logging.rb","request.rb","response.rb","runner.rb","server.rb","stats.html.erb","stats.rb","statuses.rb","version.rb"],"longSearchIndex":["lib/thin/daemonizing.rb","lib/thin.rb","rack","rack::adapter","rack::adapter::rails","rack::adapter::rails","rack","lib/thin.rb","thin","thin::backends","thin::backends","thin::backends","thin::backends","thin","thin","thin","thin::controllers","thin::controllers","thin::controllers","thin","thin::daemonizable","thin","thin","thin","thin","thin","thin","thin","thin","thin","thin","thin","thin","thin","thin","thin::stats","thin","thin","thin::headers","thin::controllers::cluster","rack::adapter::rails::cgiwrapper","thin::request","thin::request","rack::adapter::rails","rack::adapter::rails::cgiapp","thin::stats::adapter","thin::connection","thin::connection","thin::daemonizable","thin::backends::base","thin::backends::unixserver","thin::request","thin::response","thin::connection","thin::runner","thin::runner","thin::backends::base","thin::controllers::controller","thin::server","thin::controllers::service","thin::backends::swiftiplyclient","thin::backends::tcpserver","thin::backends::unixserver","thin::swiftiplyconnection","thin::backends::base","thin::request","rack::adapter::rails::cgiwrapper","thin::daemonizable","thin::logging","thin::logging","thin::logging","thin::backends::swiftiplyclient","thin::backends::tcpserver","thin::backends::unixserver","thin::response","thin::backends::base","rack::adapter::rails::cgiwrapper","rack::adapter::rails","thin::request","thin::controllers::cluster","rack::adapter","thin::daemonizable::classmethods","rack::adapter","thin::connection","thin::headers","thin::response","rack::adapter::rails::cgiwrapper","thin::response","thin::response","thin::response","thin::swiftiplyconnection","thin::controllers::cluster","thin::daemonizable","thin::backends::base","thin::controllers::service","thin::daemonizable::classmethods","thin","rack::adapter","thin::controllers::controller","rack::adapter::rails","thin::server","thin::runner","thin::controllers::controller","thin::logging","thin::logging","thin::stats::adapter","thin::logging","thin::logging","thin::controllers::cluster","thin::controllers::cluster","thin::request","thin::server","rack::adapter::rails","rack::adapter::rails::cgiwrapper","thin::backends::base","thin::backends::swiftiplyclient","thin::backends::tcpserver","thin::backends::unixserver","thin::command","thin::controllers::cluster","thin::controllers::controller","thin::controllers::service","thin::headers","thin::optionrequired","thin::request","thin::response","thin::runner","thin::server","thin::stats::adapter","thin::daemonizable","thin::controllers::cluster","thin::controllers::cluster","rack::adapter::rails::cgiwrapper","thin::request","thin::runner","thin::runner","thin::response","thin::connection","thin::request","thin::response","thin::swiftiplyconnection","thin::daemonizable","thin::controllers::cluster","thin::controllers::cluster","thin::controllers::cluster","thin::connection","thin::connection","thin::connection","thin::connection","rack::adapter::rails::cgiwrapper","rack::adapter::rails","thin::daemonizable::classmethods","thin::connection","thin::connection","thin::request","thin::daemonizable","thin::backends::unixserver","thin::daemonizable","thin::controllers::cluster","thin::controllers::controller","thin::controllers::service","thin::daemonizable","thin::daemonizable::classmethods","thin","thin::runner","thin::command","thin::command","thin::controllers::cluster","thin::controllers::service","thin::runner","thin::runner","process","process","thin::backends::base","thin::server","thin::server","thin::daemonizable::classmethods","thin::stats::adapter","thin::controllers::cluster","thin::runner","thin::server","thin::controllers::service","thin::command","thin::logging","thin::logging","thin::logging","thin::backends::base","thin::controllers::cluster","thin::controllers::cluster","thin::connection","thin::unixconnection","thin::controllers::cluster","thin::backends::base","thin::backends::base","thin::controllers::cluster","thin::controllers::controller","thin::controllers::service","thin::server","thin::server","thin::server","thin::controllers::cluster","rack::adapter::rails::cgiwrapper","rack::adapter::rails::cgiwrapper","thin::backends::base","thin::controllers::cluster","thin::controllers::controller","thin::controllers::service","thin::server","thin::backends::base","thin::server","thin::controllers::cluster","thin::controllers::cluster","thin::swiftiplyconnection","thin::controllers::controller","thin::controllers::controller","thin::connection","thin::controllers::cluster","thin::request","thin::backends::base","thin::connection","thin::backends::swiftiplyclient","thin::backends::tcpserver","thin::backends::unixserver","thin::headers","thin::server","thin::logging","thin::logging","thin::logging","thin::connection","thin::swiftiplyconnection","thin::controllers::cluster","thin::controllers::controller","thin::controllers::cluster","thin","thin::controllers::cluster","thin::daemonizable","files/changelog.html","files/readme.html","files/lib/rack/adapter/loader_rb.html","files/lib/rack/adapter/rails_rb.html","files/lib/thin_rb.html","files/lib/thin/backends/base_rb.html","files/lib/thin/backends/swiftiply_client_rb.html","files/lib/thin/backends/tcp_server_rb.html","files/lib/thin/backends/unix_server_rb.html","files/lib/thin/command_rb.html","files/lib/thin/connection_rb.html","files/lib/thin/controllers/cluster_rb.html","files/lib/thin/controllers/controller_rb.html","files/lib/thin/controllers/service_rb.html","files/lib/thin/controllers/service_sh_erb.html","files/lib/thin/daemonizing_rb.html","files/lib/thin/headers_rb.html","files/lib/thin/logging_rb.html","files/lib/thin/request_rb.html","files/lib/thin/response_rb.html","files/lib/thin/runner_rb.html","files/lib/thin/server_rb.html","files/lib/thin/stats_html_erb.html","files/lib/thin/stats_rb.html","files/lib/thin/statuses_rb.html","files/lib/thin/version_rb.html"]}}