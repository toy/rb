var search_data = {"index":{"info":[["CodeRay","lib/coderay/duo.rb","classes/CodeRay.html"," < ","encoding: utf-8 --- encoding: utf-8 --- encoding: utf-8 --- = CodeRay Library CodeRay is a Ruby library",1],["Duo","CodeRay","classes/CodeRay/Duo.html"," < Object","= Duo A Duo is a convenient way to use CodeRay. You just create a Duo, giving it a lang (language of",1],["Encoders","CodeRay","classes/CodeRay/Encoders.html"," < ","This module holds the Encoder class and its subclasses. For example, the HTML encoder is named CodeRay::Encoders::HTML",1],["CommentFilter","CodeRay::Encoders","classes/CodeRay/Encoders/CommentFilter.html"," < TokenKindFilter","A simple Filter that removes all tokens of the :comment kind. Alias: +remove_comments+ Usage: CodeRay.scan('print",1],["Count","CodeRay::Encoders","classes/CodeRay/Encoders/Count.html"," < Encoder","Returns the number of tokens. Text and block tokens are counted. ",1],["Debug","CodeRay::Encoders","classes/CodeRay/Encoders/Debug.html"," < Encoder","= Debug Encoder Fast encoder producing simple debug output. It is readable and diff-able and is used",1],["Div","CodeRay::Encoders","classes/CodeRay/Encoders/Div.html"," < HTML","Wraps HTML output into a DIV element, using inline styles by default. See Encoders::HTML for available",1],["Encoder","CodeRay::Encoders","classes/CodeRay/Encoders/Encoder.html"," < Object","= Encoder The Encoder base class. Together with Scanner and Tokens, it forms the highlighting triad.",1],["Filter","CodeRay::Encoders","classes/CodeRay/Encoders/Filter.html"," < Encoder","A Filter encoder has another Tokens instance as output. It can be subclass to select, remove, or modify",1],["HTML","CodeRay::Encoders","classes/CodeRay/Encoders/HTML.html"," < Encoder","= HTML Encoder This is CodeRay's most important highlighter: It provides save, fast XHTML generation",1],["Output","CodeRay::Encoders::HTML","classes/CodeRay/Encoders/HTML/Output.html"," < ","This module is included in the output String of the HTML Encoder. It provides methods like wrap, div,",1],["JSON","CodeRay::Encoders","classes/CodeRay/Encoders/JSON.html"," < Encoder","A simple JSON Encoder. Example: CodeRay.scan('puts \"Hello world!\"', :ruby).json yields [ {\"type\"=>\"text\",",1],["LinesOfCode","CodeRay::Encoders","classes/CodeRay/Encoders/LinesOfCode.html"," < TokenKindFilter","Counts the LoC (Lines of Code). Returns an Integer >= 0. Alias: +loc+ Everything that is not comment,",1],["Null","CodeRay::Encoders","classes/CodeRay/Encoders/Null.html"," < Encoder","= Null Encoder Does nothing and returns an empty string. ",1],["Page","CodeRay::Encoders","classes/CodeRay/Encoders/Page.html"," < HTML","Wraps the output into a HTML page, using CSS classes and line numbers in the table format by default.",1],["Span","CodeRay::Encoders","classes/CodeRay/Encoders/Span.html"," < HTML","Wraps HTML output into a SPAN element, using inline styles by default. See Encoders::HTML for available",1],["Statistic","CodeRay::Encoders","classes/CodeRay/Encoders/Statistic.html"," < Encoder","Makes a statistic for the given tokens. Alias: +stats+ ",1],["Terminal","CodeRay::Encoders","classes/CodeRay/Encoders/Terminal.html"," < Encoder","Outputs code highlighted for a color terminal. Note: This encoder is in beta. It currently doesn't use",1],["Text","CodeRay::Encoders","classes/CodeRay/Encoders/Text.html"," < Encoder","Concats the tokens into a single string, resulting in the original code string if no tokens were removed.",1],["TokenKindFilter","CodeRay::Encoders","classes/CodeRay/Encoders/TokenKindFilter.html"," < Filter","A Filter that selects tokens based on their token kind. == Options === :exclude One or many symbols (in",1],["XML","CodeRay::Encoders","classes/CodeRay/Encoders/XML.html"," < Encoder","= XML Encoder Uses REXML. Very slow. ",1],["YAML","CodeRay::Encoders","classes/CodeRay/Encoders/YAML.html"," < Encoder","= YAML Encoder Slow. ",1],["FileType","CodeRay","classes/CodeRay/FileType.html"," < ","= FileType A simple filetype recognizer. == Usage # determine the type of the given lang = FileType[file_name]",1],["ForRedCloth","CodeRay","classes/CodeRay/ForRedCloth.html"," < ","A little hack to enable CodeRay highlighting in RedCloth. Usage: require 'coderay' require 'coderay/for_redcloth'",1],["GZip","CodeRay","classes/CodeRay/GZip.html"," < ","A simplified interface to the gzip library +zlib+ (from the Ruby Standard Library.) ",1],["Plugin","CodeRay","classes/CodeRay/Plugin.html"," < ","= Plugin Plugins have to include this module. IMPORTANT: Use extend for this module. See CodeRay::PluginHost",1],["PluginHost","CodeRay","classes/CodeRay/PluginHost.html"," < ","= PluginHost A simple subclass/subfolder plugin system. Example: class Generators extend PluginHost plugin_path",1],["Scanners","CodeRay","classes/CodeRay/Scanners.html"," < ","= Scanners This module holds the Scanner class and its subclasses. For example, the Ruby scanner is named",1],["C","CodeRay::Scanners","classes/CodeRay/Scanners/C.html"," < Scanner","Scanner for C. ",1],["CPlusPlus","CodeRay::Scanners","classes/CodeRay/Scanners/CPlusPlus.html"," < Scanner","Scanner for C++. Aliases: +cplusplus+, c++ ",1],["CSS","CodeRay::Scanners","classes/CodeRay/Scanners/CSS.html"," < Scanner","",1],["Clojure","CodeRay::Scanners","classes/CodeRay/Scanners/Clojure.html"," < Scanner","Clojure scanner by Licenser. ",1],["Debug","CodeRay::Scanners","classes/CodeRay/Scanners/Debug.html"," < Scanner","= Debug Scanner Interprets the output of the Encoders::Debug encoder. ",1],["Delphi","CodeRay::Scanners","classes/CodeRay/Scanners/Delphi.html"," < Scanner","Scanner for the Delphi language (Object Pascal). Alias: +pascal+ ",1],["Diff","CodeRay::Scanners","classes/CodeRay/Scanners/Diff.html"," < Scanner","Scanner for output of the diff command. Alias: +patch+ ",1],["ERB","CodeRay::Scanners","classes/CodeRay/Scanners/ERB.html"," < Scanner","Scanner for HTML ERB templates. ",1],["Groovy","CodeRay::Scanners","classes/CodeRay/Scanners/Groovy.html"," < Java","Scanner for Groovy. ",1],["HAML","CodeRay::Scanners","classes/CodeRay/Scanners/HAML.html"," < Scanner","",1],["HTML","CodeRay::Scanners","classes/CodeRay/Scanners/HTML.html"," < Scanner","HTML Scanner Alias: +xhtml+ See also: Scanners::XML ",1],["JSON","CodeRay::Scanners","classes/CodeRay/Scanners/JSON.html"," < Scanner","Scanner for JSON (JavaScript Object Notation). ",1],["Java","CodeRay::Scanners","classes/CodeRay/Scanners/Java.html"," < Scanner","Scanner for Java. ",1],["JavaScript","CodeRay::Scanners","classes/CodeRay/Scanners/JavaScript.html"," < Scanner","Scanner for JavaScript. Aliases: +ecmascript+, +ecma_script+, +javascript+ ",1],["PHP","CodeRay::Scanners","classes/CodeRay/Scanners/PHP.html"," < Scanner","Scanner for PHP. Original by Stefan Walk. ",1],["Python","CodeRay::Scanners","classes/CodeRay/Scanners/Python.html"," < Scanner","Scanner for Python. Supports Python 3. Based on pygments' PythonLexer, see http://dev.pocoo.org/projects/pygments/browser/pygments/lexers/agile.py.",1],["Raydebug","CodeRay::Scanners","classes/CodeRay/Scanners/Raydebug.html"," < Scanner","= Debug Scanner Parses the output of the Encoders::Debug encoder. ",1],["Ruby","CodeRay::Scanners","classes/CodeRay/Scanners/Ruby.html"," < Scanner","This scanner is really complex, since Ruby _is_ a complex language! It tries to highlight 100% of all",1],["SQL","CodeRay::Scanners","classes/CodeRay/Scanners/SQL.html"," < Scanner","by Josh Goebel ",1],["Scanner","CodeRay::Scanners","classes/CodeRay/Scanners/Scanner.html"," < StringScanner","= Scanner The base class for all Scanners. It is a subclass of Ruby's great +StringScanner+, which makes",1],["Text","CodeRay::Scanners","classes/CodeRay/Scanners/Text.html"," < Scanner","Scanner for plain text. Yields just one token of the kind :plain. Alias: +plaintext+, +plain+ ",1],["XML","CodeRay::Scanners","classes/CodeRay/Scanners/XML.html"," < HTML","Scanner for XML. Currently this is the same scanner as Scanners::HTML. ",1],["YAML","CodeRay::Scanners","classes/CodeRay/Scanners/YAML.html"," < Scanner","Scanner for YAML. Based on the YAML scanner from Syntax by Jamis Buck. ",1],["Styles","CodeRay","classes/CodeRay/Styles.html"," < ","This module holds the Style class and its subclasses. See Plugin. ",1],["Alpha","CodeRay::Styles","classes/CodeRay/Styles/Alpha.html"," < Style","A colorful theme using CSS 3 colors (with alpha channel). ",1],["Style","CodeRay::Styles","classes/CodeRay/Styles/Style.html"," < Object","Base class for styles. Styles are used by Encoders::HTML to colorize tokens. ",1],["Tokens","CodeRay","classes/CodeRay/Tokens.html"," < Array","= Tokens  TODO: Rewrite! The Tokens class represents a list of tokens returnd from a Scanner. A token",1],["Undumping","CodeRay::Tokens","classes/CodeRay/Tokens/Undumping.html"," < ","Include this module to give an object an #undump method. The string returned by Tokens.dump includes",1],["TokensProxy","CodeRay","classes/CodeRay/TokensProxy.html"," < Object","The result of a scan operation is a TokensProxy, but should act like Tokens. This proxy makes it possible",1],["WordList","CodeRay","classes/CodeRay/WordList.html"," < Hash","= WordList <b>A Hash subclass designed for mapping word lists to token types.</b> Copyright (c) 2006-2011",1],["CaseIgnoring","CodeRay::WordList","classes/CodeRay/WordList/CaseIgnoring.html"," < WordList","A CaseIgnoring WordList is like a WordList, only that keys are compared case-insensitively (normalizing",1],["<<","CodeRay::Encoders::Encoder","classes/CodeRay/Encoders/Encoder.html#M000013","(token)","",2],["[]","CodeRay::FileType","classes/CodeRay/FileType.html#M000119","(filename, read_shebang = false)","Try to determine the file type of the file. +filename+ is a relative or absolute path to a file. The",2],["[]","CodeRay::PluginHost","classes/CodeRay/PluginHost.html#M000128","(id, *args, &blk)","Returns the Plugin for +id+. Example: yaml_plugin = MyPluginHost[:yaml] ",2],["[]","CodeRay::WordList::CaseIgnoring","classes/CodeRay/WordList/CaseIgnoring.html#M000126","(key)","",2],["[]=","CodeRay::WordList::CaseIgnoring","classes/CodeRay/WordList/CaseIgnoring.html#M000129","(key, value)","",2],["add","CodeRay::WordList","classes/CodeRay/WordList.html#M000125","(words, value = true)","Add words to the list and associate them with +value+. Returns +self+, so you can concat add calls. ",2],["aliases","CodeRay::Plugin","classes/CodeRay/Plugin.html#M000148","()","",2],["all_plugins","CodeRay::PluginHost","classes/CodeRay/PluginHost.html#M000139","()","Returns an array of all Plugins. Note: This loads all plugins using load_all. ",2],["ansi_clear","CodeRay::Encoders::Terminal","classes/CodeRay/Encoders/Terminal.html#M000091","()","",2],["ansi_colorize","CodeRay::Encoders::Terminal","classes/CodeRay/Encoders/Terminal.html#M000090","(color)","",2],["append","CodeRay::Encoders::JSON","classes/CodeRay/Encoders/JSON.html#M000057","(data)","",2],["apply_title!","CodeRay::Encoders::HTML::Output","classes/CodeRay/Encoders/HTML/Output.html#M000052","(title)","",2],["begin_group","CodeRay::Encoders","classes/CodeRay/Encoders.html#M000069","(kind)","token groups, eg. strings ",2],["begin_group","CodeRay::Encoders::Count","classes/CodeRay/Encoders/Count.html#M000029","(kind)","",2],["begin_group","CodeRay::Encoders::Debug","classes/CodeRay/Encoders/Debug.html#M000035","(kind)","",2],["begin_group","CodeRay::Encoders::Encoder","classes/CodeRay/Encoders/Encoder.html#M000016","(kind)","Starts a token group with the given +kind+. ",2],["begin_group","CodeRay::Encoders::JSON","classes/CodeRay/Encoders/JSON.html#M000059","(kind)","",2],["begin_group","CodeRay::Encoders::Statistic","classes/CodeRay/Encoders/Statistic.html#M000077","(kind)","TODO Hierarchy handling ",2],["begin_group","CodeRay::Encoders::Terminal","classes/CodeRay/Encoders/Terminal.html#M000084","(kind)","",2],["begin_group","CodeRay::Encoders::TokenKindFilter","classes/CodeRay/Encoders/TokenKindFilter.html#M000102","(kind)","Add the token group to the output stream if +kind+ matches the conditions. If it does not, all tokens",2],["begin_group","CodeRay::Encoders::XML","classes/CodeRay/Encoders/XML.html#M000100","(kind)","",2],["begin_group","CodeRay::Encoders::YAML","classes/CodeRay/Encoders/YAML.html#M000110","(kind)","",2],["begin_group","CodeRay::Tokens","classes/CodeRay/Tokens.html#M000220","(kind;)","",2],["begin_line","CodeRay::Encoders","classes/CodeRay/Encoders.html#M000071","(kind)","whole lines to be highlighted, eg. a deleted line in a diff ",2],["begin_line","CodeRay::Encoders::Count","classes/CodeRay/Encoders/Count.html#M000031","(kind)","Alias for #begin_group",2],["begin_line","CodeRay::Encoders::Debug","classes/CodeRay/Encoders/Debug.html#M000037","(kind)","",2],["begin_line","CodeRay::Encoders::Encoder","classes/CodeRay/Encoders/Encoder.html#M000018","(kind)","Starts a new line token group with the given +kind+. ",2],["begin_line","CodeRay::Encoders::JSON","classes/CodeRay/Encoders/JSON.html#M000061","(kind)","",2],["begin_line","CodeRay::Encoders::Statistic","classes/CodeRay/Encoders/Statistic.html#M000079","(kind)","",2],["begin_line","CodeRay::Encoders::Terminal","classes/CodeRay/Encoders/Terminal.html#M000085","(kind)","Alias for #begin_group",2],["begin_line","CodeRay::Encoders::TokenKindFilter","classes/CodeRay/Encoders/TokenKindFilter.html#M000103","(kind)","See +begin_group+. ",2],["begin_line","CodeRay::Encoders::YAML","classes/CodeRay/Encoders/YAML.html#M000113","(kind)","",2],["begin_line","CodeRay::Tokens","classes/CodeRay/Tokens.html#M000222","(kind;)","",2],["binary_string","CodeRay::Scanners::Scanner","classes/CodeRay/Scanners/Scanner.html#M000165","()","The string in binary encoding. To be used with #pos, which is the index of the byte the scanner will",2],["block_token","CodeRay::Encoders::Statistic","classes/CodeRay/Encoders/Statistic.html#M000081","(action, kind)","",2],["call","CodeRay::Duo","classes/CodeRay/Duo.html#M000005","(code, options = {})","Alias for #encode",2],["coderay_path","CodeRay","classes/CodeRay.html#M000224","(*path)","Assuming the path is a subpath of lib/coderay/ ",2],["column","CodeRay::Scanners::Scanner","classes/CodeRay/Scanners/Scanner.html#M000164","(pos = self.pos)","The current column position of the scanner, starting with 1. See also: #line. ",2],["compile","CodeRay::Encoders::Encoder","classes/CodeRay/Encoders/Encoder.html#M000024","(tokens, options = {})","Do the encoding. The already created +tokens+ object must be used; it must be a Tokens object. ",2],["const_missing","CodeRay::Encoders::Encoder","classes/CodeRay/Encoders/Encoder.html#M000006","(sym)","If FILE_EXTENSION isn't defined, this method returns the downcase class name instead. ",2],["const_missing","CodeRay::PluginHost","classes/CodeRay/PluginHost.html#M000131","(const)","Tries to +load+ the missing plugin by translating +const+ to the underscore form (eg. LinesOfCode becomes",2],["count","CodeRay::Tokens","classes/CodeRay/Tokens.html#M000217","()","Return the actual number of tokens. ",2],["default","CodeRay::PluginHost","classes/CodeRay/PluginHost.html#M000135","(id = nil)","Define the default plugin to use when no plugin is found for a given id, or return the default plugin.",2],["diff","CodeRay::Scanners::Diff","classes/CodeRay/Scanners/Diff.html#M000179","(a, b)","",2],["dump","CodeRay::Tokens","classes/CodeRay/Tokens.html#M000216","(gzip_level = 7)","Dumps the object into a String that can be saved in files or databases. The dump is created with Marshal.dump;",2],["each","CodeRay::Scanners::Scanner","classes/CodeRay/Scanners/Scanner.html#M000162","(&block)","Traverse the tokens. ",2],["each","CodeRay::TokensProxy","classes/CodeRay/TokensProxy.html#M000215","(*args, &blk)","Overwrite Struct#each. ",2],["encode","CodeRay","classes/CodeRay.html#M000227","(code, lang, format, options = {})","Encode a string. This scans +code+ with the the Scanner for +lang+ and then encodes it with the Encoder",2],["encode","CodeRay::Duo","classes/CodeRay/Duo.html#M000003","(code, options = {})","Tokenize and highlight the code using +scanner+ and +encoder+. ",2],["encode","CodeRay::Encoders::Encoder","classes/CodeRay/Encoders/Encoder.html#M000010","(code, lang, options = {})","Encode the given +code+ using the Scanner for +lang+. ",2],["encode","CodeRay::Tokens","classes/CodeRay/Tokens.html#M000206","(encoder, options = {})","Encode the tokens using encoder. encoder can be * a symbol like :html oder :statistic * an Encoder class",2],["encode","CodeRay::TokensProxy","classes/CodeRay/TokensProxy.html#M000211","(encoder, options = {})","Call CodeRay.encode if +encoder+ is a Symbol; otherwise, convert the receiver to tokens and call encoder.encode_tokens.",2],["encode_file","CodeRay","classes/CodeRay.html#M000229","(filename, format, options = {})","Encodes +filename+ (a path to a code file) with the Scanner for +lang+. See CodeRay.scan_file. Notice",2],["encode_tokens","CodeRay","classes/CodeRay.html#M000228","(tokens, format, options = {})","Encode pre-scanned Tokens. Use this together with CodeRay.scan: require 'coderay' # Highlight a short",2],["encode_tokens","CodeRay::Encoders::Encoder","classes/CodeRay/Encoders/Encoder.html#M000009","(tokens, options = {})","Encode a Tokens object. ",2],["encode_with_encoding","CodeRay::Scanners::Scanner","classes/CodeRay/Scanners/Scanner.html#M000152","(code, target_encoding)","",2],["encoder","CodeRay","classes/CodeRay.html#M000232","(format, options = {})","Finds the Encoder class for +format+ and creates an instance, passing +options+ to it. Example: require",2],["encoder","CodeRay::Duo","classes/CodeRay/Duo.html#M000002","()","The encoder of the duo. Only created once. ",2],["encoding","CodeRay::Scanners::Scanner","classes/CodeRay/Scanners/Scanner.html#M000150","(name = 'UTF-8')","The encoding used internally by this scanner. ",2],["end_group","CodeRay::Encoders","classes/CodeRay/Encoders.html#M000070","(kind)","",2],["end_group","CodeRay::Encoders::Count","classes/CodeRay/Encoders/Count.html#M000030","(kind)","Alias for #begin_group",2],["end_group","CodeRay::Encoders::Debug","classes/CodeRay/Encoders/Debug.html#M000036","(kind)","",2],["end_group","CodeRay::Encoders::Encoder","classes/CodeRay/Encoders/Encoder.html#M000017","(kind)","Ends a token group with the given +kind+. ",2],["end_group","CodeRay::Encoders::JSON","classes/CodeRay/Encoders/JSON.html#M000060","(kind)","",2],["end_group","CodeRay::Encoders::Statistic","classes/CodeRay/Encoders/Statistic.html#M000078","(kind)","",2],["end_group","CodeRay::Encoders::Terminal","classes/CodeRay/Encoders/Terminal.html#M000086","(kind)","",2],["end_group","CodeRay::Encoders::TokenKindFilter","classes/CodeRay/Encoders/TokenKindFilter.html#M000104","(kind)","Take care of re-enabling the delegation of tokens to the output stream if an exluded group has ended.",2],["end_group","CodeRay::Encoders::XML","classes/CodeRay/Encoders/XML.html#M000101","(kind)","",2],["end_group","CodeRay::Encoders::YAML","classes/CodeRay/Encoders/YAML.html#M000112","(kind)","",2],["end_group","CodeRay::Tokens","classes/CodeRay/Tokens.html#M000221","(kind;)","",2],["end_line","CodeRay::Encoders","classes/CodeRay/Encoders.html#M000072","(kind)","",2],["end_line","CodeRay::Encoders::Count","classes/CodeRay/Encoders/Count.html#M000032","(kind)","Alias for #begin_group",2],["end_line","CodeRay::Encoders::Debug","classes/CodeRay/Encoders/Debug.html#M000038","(kind)","",2],["end_line","CodeRay::Encoders::Encoder","classes/CodeRay/Encoders/Encoder.html#M000019","(kind)","Ends a new line token group with the given +kind+. ",2],["end_line","CodeRay::Encoders::JSON","classes/CodeRay/Encoders/JSON.html#M000062","(kind)","",2],["end_line","CodeRay::Encoders::Statistic","classes/CodeRay/Encoders/Statistic.html#M000080","(kind)","",2],["end_line","CodeRay::Encoders::Terminal","classes/CodeRay/Encoders/Terminal.html#M000087","(kind)","",2],["end_line","CodeRay::Encoders::TokenKindFilter","classes/CodeRay/Encoders/TokenKindFilter.html#M000105","(kind)","See +end_group+. ",2],["end_line","CodeRay::Encoders::YAML","classes/CodeRay/Encoders/YAML.html#M000114","(kind)","",2],["end_line","CodeRay::Tokens","classes/CodeRay/Tokens.html#M000223","(kind;)","",2],["extended","CodeRay::PluginHost","classes/CodeRay/PluginHost.html#M000132","(mod)","Adds the module/class to the PLUGIN_HOSTS list. ",2],["fetch","CodeRay::FileType","classes/CodeRay/FileType.html#M000120","(filename, default = nil, read_shebang = false)","This works like Hash#fetch. If the filetype cannot be found, the +default+ value is returned. ",2],["file_extension","CodeRay::Encoders::Encoder","classes/CodeRay/Encoders/Encoder.html#M000007","()","The default file extension for output file of this encoder class. ",2],["file_extension","CodeRay::Encoders::Encoder","classes/CodeRay/Encoders/Encoder.html#M000012","()","The default file extension for this encoder. ",2],["file_extension","CodeRay::Scanners::Scanner","classes/CodeRay/Scanners/Scanner.html#M000159","()","the default file extension for this scanner ",2],["file_extension","CodeRay::Scanners::Scanner","classes/CodeRay/Scanners/Scanner.html#M000149","(extension = lang)","The typical filename suffix for this scanner's language. ",2],["finish","CodeRay::Encoders","classes/CodeRay/Encoders.html#M000067","(options)","",2],["finish","CodeRay::Encoders::Count","classes/CodeRay/Encoders/Count.html#M000027","(options)","",2],["finish","CodeRay::Encoders::Encoder","classes/CodeRay/Encoders/Encoder.html#M000023","(options)","Called with merged options after encoding starts. The return value is the result of encoding, typically",2],["finish","CodeRay::Encoders::Filter","classes/CodeRay/Encoders/Filter.html#M000040","(options)","",2],["finish","CodeRay::Encoders::JSON","classes/CodeRay/Encoders/JSON.html#M000056","(options)","",2],["finish","CodeRay::Encoders::LinesOfCode","classes/CodeRay/Encoders/LinesOfCode.html#M000066","(options)","",2],["finish","CodeRay::Encoders::Statistic","classes/CodeRay/Encoders/Statistic.html#M000075","(options)","",2],["finish","CodeRay::Encoders::XML","classes/CodeRay/Encoders/XML.html#M000095","(options)","",2],["finish","CodeRay::Encoders::YAML","classes/CodeRay/Encoders/YAML.html#M000108","(options)","",2],["get_output","CodeRay::Encoders::Encoder","classes/CodeRay/Encoders/Encoder.html#M000021","(options)","",2],["get_scanner_options","CodeRay","classes/CodeRay.html#M000234","(options)","Extract the options for the scanner from the +options+ hash. Returns an empty Hash if <tt>:scanner_options</tt>",2],["guess_encoding","CodeRay::Scanners::Scanner","classes/CodeRay/Scanners/Scanner.html#M000154","(s)","",2],["gunzip","CodeRay::GZip","classes/CodeRay/GZip.html#M000122","(s)","Unzips the given string +s+. Example: require 'gzip_simple' print GZip.gunzip(File.read('adresses.gz'))",2],["gzip","CodeRay::GZip","classes/CodeRay/GZip.html#M000123","(s, level = DEFAULT_GZIP_LEVEL)","Zips the given string +s+. Example: require 'gzip_simple' File.open('adresses.gz', 'w') do |file file.write",2],["highlight","CodeRay","classes/CodeRay.html#M000230","(code, lang, options = { :css => :class })","Highlight a string into a HTML <div>. CSS styles use classes, so you have to include a stylesheet in",2],["highlight","CodeRay::Duo","classes/CodeRay/Duo.html#M000004","(code, options = {})","Alias for #encode",2],["highlight","CodeRay::Encoders::Encoder","classes/CodeRay/Encoders/Encoder.html#M000011","(code, lang, options = {})","Alias for #encode",2],["highlight_file","CodeRay","classes/CodeRay.html#M000231","(filename, options = { :css => :class })","Highlight a file into a HTML <div>. CSS styles use classes, so you have to include a stylesheet in your",2],["include_group?","CodeRay::Encoders::TokenKindFilter","classes/CodeRay/Encoders/TokenKindFilter.html#M000098","(kind)","",2],["include_text_token?","CodeRay::Encoders::TokenKindFilter","classes/CodeRay/Encoders/TokenKindFilter.html#M000097","(text, kind)","",2],["install","CodeRay::ForRedCloth","classes/CodeRay/ForRedCloth.html#M000106","()","",2],["interpreted_string_state","CodeRay::Scanners::Ruby","classes/CodeRay/Scanners/Ruby.html#M000201","()","",2],["lang","CodeRay::Scanners::Scanner","classes/CodeRay/Scanners/Scanner.html#M000151","()","The lang of this Scanner class, which is equal to its Plugin ID. ",2],["lang","CodeRay::Scanners::Scanner","classes/CodeRay/Scanners/Scanner.html#M000158","()","the Plugin ID for this scanner ",2],["line","CodeRay::Scanners::Scanner","classes/CodeRay/Scanners/Scanner.html#M000163","(pos = self.pos)","The current line position of the scanner, starting with 1. See also: #column. Beware, this is implemented",2],["list","CodeRay::PluginHost","classes/CodeRay/PluginHost.html#M000138","()","Returns an array of all .rb files in the plugin path. The extension .rb is not included. ",2],["load","CodeRay::PluginHost","classes/CodeRay/PluginHost.html#M000130","(id, *args, &blk)","Alias for #[]",2],["load","CodeRay::Tokens","classes/CodeRay/Tokens.html#M000219","(dump)","Undump the object using Marshal.load, then unzip it using GZip.gunzip. The result is commonly a Tokens",2],["load_all","CodeRay::PluginHost","classes/CodeRay/PluginHost.html#M000127","()","Loads all plugins using list and load. ",2],["load_plugin_map","CodeRay::PluginHost","classes/CodeRay/PluginHost.html#M000140","()","Loads the map file (see map). This is done automatically when plugin_path is called. ",2],["make_plugin_hash","CodeRay::PluginHost","classes/CodeRay/PluginHost.html#M000141","()","Return a plugin hash that automatically loads plugins. ",2],["map","CodeRay::PluginHost","classes/CodeRay/PluginHost.html#M000134","(hash)","Map a plugin_id to another. Usage: Put this in a file plugin_path/_map.rb. class MyColorHost < PluginHost",2],["method_missing","CodeRay::Tokens","classes/CodeRay/Tokens.html#M000208","(meth, options = {})","Redirects unknown methods to encoder calls. For example, if you call +tokens.html+, the HTML encoder",2],["method_missing","CodeRay::TokensProxy","classes/CodeRay/TokensProxy.html#M000212","(method, *args, &blk)","Tries to call encode; delegates to tokens otherwise. ",2],["new","CodeRay::Duo","classes/CodeRay/Duo.html#M000000","(lang = nil, format = nil, options = {})","Create a new Duo, holding a lang and a format to highlight code. simple: CodeRay::Duo[:ruby, :html].highlight",2],["new","CodeRay::Encoders::Debug","classes/CodeRay/Encoders/Debug.html#M000033","(options = {})","",2],["new","CodeRay::Encoders::Encoder","classes/CodeRay/Encoders/Encoder.html#M000008","(options = {})","Creates a new Encoder. +options+ is saved and used for all encode operations, as long as you don't overwrite",2],["new","CodeRay::Scanners::Scanner","classes/CodeRay/Scanners/Scanner.html#M000155","(code = '', options = {})","Create a new Scanner. * +code+ is the input String and is handled by the superclass StringScanner. *",2],["new","CodeRay::TokensProxy","classes/CodeRay/TokensProxy.html#M000210","(input, lang, options = {})","Create a new TokensProxy with the arguments of CodeRay.scan. ",2],["new","CodeRay::WordList","classes/CodeRay/WordList.html#M000124","(default = false)","Create a new WordList with +default+ as default value. ",2],["normalize","CodeRay::Scanners::Scanner","classes/CodeRay/Scanners/Scanner.html#M000146","(code)","Normalizes the given code into a string with UNIX newlines, in the scanner's internal encoding, with",2],["open_token","CodeRay::Encoders::Terminal","classes/CodeRay/Encoders/Terminal.html#M000089","(kind)","",2],["output","CodeRay::Encoders::Encoder","classes/CodeRay/Encoders/Encoder.html#M000022","(data)","Append data.to_s to the output. Returns the argument. ",2],["path_to","CodeRay::PluginHost","classes/CodeRay/PluginHost.html#M000142","(plugin_id)","Returns the expected path to the plugin file for the given id. ",2],["plugin_hash","CodeRay::PluginHost","classes/CodeRay/PluginHost.html#M000137","()","A Hash of plugion_id => Plugin pairs. ",2],["plugin_host","CodeRay::Plugin","classes/CodeRay/Plugin.html#M000147","(host = nil)","The PluginHost for this Plugin class. ",2],["plugin_path","CodeRay::PluginHost","classes/CodeRay/PluginHost.html#M000133","(*args)","The path where the plugins can be found. ",2],["raise_inspect","CodeRay::Scanners::Scanner","classes/CodeRay/Scanners/Scanner.html#M000169","(msg, tokens, state = self.state || 'No state given!', ambit = 30, backtrace = caller)","Scanner error with additional status information ",2],["register","CodeRay::PluginHost","classes/CodeRay/PluginHost.html#M000136","(plugin, id)","Every plugin must register itself for +id+ by calling register_for, which calls this method. See Plugin#register_for.",2],["register_for","CodeRay::Plugin","classes/CodeRay/Plugin.html#M000144","(id)","Register this class for the given +id+. Example: class MyPlugin < PluginHost::BaseClass register_for",2],["reset","CodeRay::Scanners::HTML","classes/CodeRay/Scanners/HTML.html#M000186","()","",2],["reset","CodeRay::Scanners::Scanner","classes/CodeRay/Scanners/Scanner.html#M000156","()","Sets back the scanner. Subclasses should redefine the reset_instance method instead of this one. ",2],["reset_instance","CodeRay::Scanners::ERB","classes/CodeRay/Scanners/ERB.html#M000181","()","",2],["reset_instance","CodeRay::Scanners::JavaScript","classes/CodeRay/Scanners/JavaScript.html#M000193","()","",2],["reset_instance","CodeRay::Scanners::PHP","classes/CodeRay/Scanners/PHP.html#M000196","()","",2],["reset_instance","CodeRay::Scanners::Scanner","classes/CodeRay/Scanners/Scanner.html#M000168","()","Resets the scanner. ",2],["scan","CodeRay","classes/CodeRay.html#M000225","(code, lang, options = {})","Scans the given +code+ (a String) with the Scanner for +lang+. This is a simple way to use CodeRay. Example:",2],["scan_file","CodeRay","classes/CodeRay.html#M000226","(filename, lang = :auto, options = {})","Scans +filename+ (a path to a code file) with the Scanner for +lang+. If +lang+ is :auto or omitted,",2],["scan_java_script","CodeRay::Scanners::HTML","classes/CodeRay/Scanners/HTML.html#M000188","(encoder, code)","",2],["scan_rest","CodeRay::Scanners::Scanner","classes/CodeRay/Scanners/Scanner.html#M000170","()","Shorthand for scan_until(/\\z/). This method also avoids a JRuby 1.9 mode bug. ",2],["scan_tokens","CodeRay::Scanners::C","classes/CodeRay/Scanners/C.html#M000171","(encoder, options)","",2],["scan_tokens","CodeRay::Scanners::CPlusPlus","classes/CodeRay/Scanners/CPlusPlus.html#M000173","(encoder, options)","",2],["scan_tokens","CodeRay::Scanners::CSS","classes/CodeRay/Scanners/CSS.html#M000175","(encoder, options)","",2],["scan_tokens","CodeRay::Scanners::Clojure","classes/CodeRay/Scanners/Clojure.html#M000172","(encoder, options)","",2],["scan_tokens","CodeRay::Scanners::Debug","classes/CodeRay/Scanners/Debug.html#M000176","(encoder, options)","",2],["scan_tokens","CodeRay::Scanners::Delphi","classes/CodeRay/Scanners/Delphi.html#M000178","(encoder, options)","",2],["scan_tokens","CodeRay::Scanners::Diff","classes/CodeRay/Scanners/Diff.html#M000177","(encoder, options)","",2],["scan_tokens","CodeRay::Scanners::ERB","classes/CodeRay/Scanners/ERB.html#M000182","(encoder, options)","",2],["scan_tokens","CodeRay::Scanners::Groovy","classes/CodeRay/Scanners/Groovy.html#M000183","(encoder, options)","",2],["scan_tokens","CodeRay::Scanners::HAML","classes/CodeRay/Scanners/HAML.html#M000185","(encoder, options)","",2],["scan_tokens","CodeRay::Scanners::HTML","classes/CodeRay/Scanners/HTML.html#M000189","(encoder, options)","",2],["scan_tokens","CodeRay::Scanners::JSON","classes/CodeRay/Scanners/JSON.html#M000191","(encoder, options)","See http://json.org/ for a definition of the JSON lexic/grammar. ",2],["scan_tokens","CodeRay::Scanners::Java","classes/CodeRay/Scanners/Java.html#M000190","(encoder, options)","",2],["scan_tokens","CodeRay::Scanners::JavaScript","classes/CodeRay/Scanners/JavaScript.html#M000192","(encoder, options)","",2],["scan_tokens","CodeRay::Scanners::PHP","classes/CodeRay/Scanners/PHP.html#M000197","(encoder, options)","",2],["scan_tokens","CodeRay::Scanners::Python","classes/CodeRay/Scanners/Python.html#M000198","(encoder, options)","",2],["scan_tokens","CodeRay::Scanners::Raydebug","classes/CodeRay/Scanners/Raydebug.html#M000199","(encoder, options)","",2],["scan_tokens","CodeRay::Scanners::Ruby","classes/CodeRay/Scanners/Ruby.html#M000203","(encoder, options)","",2],["scan_tokens","CodeRay::Scanners::SQL","classes/CodeRay/Scanners/SQL.html#M000200","(encoder, options)","",2],["scan_tokens","CodeRay::Scanners::Scanner","classes/CodeRay/Scanners/Scanner.html#M000167","(tokens, options)","This is the central method, and commonly the only one a subclass implements. Subclasses must implement",2],["scan_tokens","CodeRay::Scanners::Text","classes/CodeRay/Scanners/Text.html#M000204","(encoder, options)","",2],["scan_tokens","CodeRay::Scanners::YAML","classes/CodeRay/Scanners/YAML.html#M000205","(encoder, options)","",2],["scanner","CodeRay","classes/CodeRay.html#M000233","(lang, options = {})","Finds the Scanner class for +lang+ and creates an instance, passing +options+ to it. See Scanner.new.",2],["scanner","CodeRay::Duo","classes/CodeRay/Duo.html#M000001","()","The scanner of the duo. Only created once. ",2],["scanner","CodeRay::TokensProxy","classes/CodeRay/TokensProxy.html#M000214","()","A (cached) scanner instance to use for the scan task. ",2],["setup","CodeRay::Encoders","classes/CodeRay/Encoders.html#M000064","(options)","",2],["setup","CodeRay::Encoders::Count","classes/CodeRay/Encoders/Count.html#M000026","(options)","",2],["setup","CodeRay::Encoders::Encoder","classes/CodeRay/Encoders/Encoder.html#M000020","(options)","Called with merged options before encoding starts. Sets @out to an empty string. See the HTML Encoder",2],["setup","CodeRay::Encoders::Filter","classes/CodeRay/Encoders/Filter.html#M000039","(options)","",2],["setup","CodeRay::Encoders::JSON","classes/CodeRay/Encoders/JSON.html#M000055","(options)","",2],["setup","CodeRay::Encoders::LinesOfCode","classes/CodeRay/Encoders/LinesOfCode.html#M000065","(options)","",2],["setup","CodeRay::Encoders::Statistic","classes/CodeRay/Encoders/Statistic.html#M000074","(options)","",2],["setup","CodeRay::Encoders::Terminal","classes/CodeRay/Encoders/Terminal.html#M000082","(options)","",2],["setup","CodeRay::Encoders::Text","classes/CodeRay/Encoders/Text.html#M000092","(options)","",2],["setup","CodeRay::Encoders::TokenKindFilter","classes/CodeRay/Encoders/TokenKindFilter.html#M000093","(options)","",2],["setup","CodeRay::Encoders::XML","classes/CodeRay/Encoders/XML.html#M000094","(options)","",2],["setup","CodeRay::Encoders::YAML","classes/CodeRay/Encoders/YAML.html#M000107","(options)","",2],["setup","CodeRay::Scanners::CSS","classes/CodeRay/Scanners/CSS.html#M000174","()","",2],["setup","CodeRay::Scanners::ERB","classes/CodeRay/Scanners/ERB.html#M000180","()","",2],["setup","CodeRay::Scanners::HAML","classes/CodeRay/Scanners/HAML.html#M000184","()","",2],["setup","CodeRay::Scanners::HTML","classes/CodeRay/Scanners/HTML.html#M000187","()","",2],["setup","CodeRay::Scanners::PHP","classes/CodeRay/Scanners/PHP.html#M000195","()","",2],["setup","CodeRay::Scanners::Ruby","classes/CodeRay/Scanners/Ruby.html#M000202","()","",2],["setup","CodeRay::Scanners::Scanner","classes/CodeRay/Scanners/Scanner.html#M000166","()","Can be implemented by subclasses to do some initialization that has to be done once per instance. Use",2],["shebang","CodeRay::FileType","classes/CodeRay/FileType.html#M000121","(filename)","",2],["split_into_parts","CodeRay::Tokens","classes/CodeRay/Tokens.html#M000209","(*sizes)","Split the tokens into parts of the given +sizes+. The result will be an Array of Tokens objects. The",2],["string=","CodeRay::Scanners::Scanner","classes/CodeRay/Scanners/Scanner.html#M000157","(code)","Set a new string to be scanned. ",2],["stylesheet","CodeRay::Encoders::HTML::Output","classes/CodeRay/Encoders/HTML/Output.html#M000054","(in_tag = false)","",2],["text_token","CodeRay::Encoders","classes/CodeRay/Encoders.html#M000068","(text, kind)","",2],["text_token","CodeRay::Encoders::Count","classes/CodeRay/Encoders/Count.html#M000028","(text, kind)","",2],["text_token","CodeRay::Encoders::Debug","classes/CodeRay/Encoders/Debug.html#M000034","(text, kind)","",2],["text_token","CodeRay::Encoders::Encoder","classes/CodeRay/Encoders/Encoder.html#M000015","(text, kind)","Called for each text token ([text, kind]), where text is a String. ",2],["text_token","CodeRay::Encoders::JSON","classes/CodeRay/Encoders/JSON.html#M000058","(text, kind)","",2],["text_token","CodeRay::Encoders::Null","classes/CodeRay/Encoders/Null.html#M000073","(text, kind)","",2],["text_token","CodeRay::Encoders::Statistic","classes/CodeRay/Encoders/Statistic.html#M000076","(text, kind)","",2],["text_token","CodeRay::Encoders::Terminal","classes/CodeRay/Encoders/Terminal.html#M000083","(text, kind)","",2],["text_token","CodeRay::Encoders::Text","classes/CodeRay/Encoders/Text.html#M000088","(text, kind)","",2],["text_token","CodeRay::Encoders::TokenKindFilter","classes/CodeRay/Encoders/TokenKindFilter.html#M000099","(text, kind)","Add the token to the output stream if +kind+ matches the conditions. ",2],["text_token","CodeRay::Encoders::XML","classes/CodeRay/Encoders/XML.html#M000096","(text, kind)","",2],["text_token","CodeRay::Encoders::YAML","classes/CodeRay/Encoders/YAML.html#M000109","(text, kind)","",2],["title","CodeRay::Plugin","classes/CodeRay/Plugin.html#M000145","(title = nil)","Returns the title of the plugin, or sets it to the optional argument +title+. ",2],["to_s","CodeRay::Tokens","classes/CodeRay/Tokens.html#M000207","()","Turn tokens into a string by concatenating them. ",2],["to_unix","CodeRay::Scanners::Scanner","classes/CodeRay/Scanners/Scanner.html#M000153","(code)","",2],["token","CodeRay::Encoders::Encoder","classes/CodeRay/Encoders/Encoder.html#M000014","(content, kind)","Called with +content+ and +kind+ of the currently scanned token. For simple scanners, it's enougth to",2],["token_path_to_hint","CodeRay::Encoders","classes/CodeRay/Encoders.html#M000063","(hint, kinds)","Generate a hint about the given +kinds+ in a +hint+ style. +hint+ may be :info, :info_long or :debug.",2],["tokenize","CodeRay::Scanners::Scanner","classes/CodeRay/Scanners/Scanner.html#M000160","(source = nil, options = {})","Scan the code and returns all tokens in a Tokens object. ",2],["tokens","CodeRay::Encoders::Encoder","classes/CodeRay/Encoders/Encoder.html#M000025","(tokens, options = {})","Alias for #compile",2],["tokens","CodeRay::Scanners::Scanner","classes/CodeRay/Scanners/Scanner.html#M000161","()","Cache the result of tokenize. ",2],["tokens","CodeRay::TokensProxy","classes/CodeRay/TokensProxy.html#M000213","()","The (cached) result of the tokenized input; a Tokens instance. ",2],["undump","CodeRay::Tokens::Undumping","classes/CodeRay/Tokens/Undumping.html#M000218","()","Calls Tokens.load with itself. ",2],["validate_id","CodeRay::PluginHost","classes/CodeRay/PluginHost.html#M000143","(id)","Converts +id+ to a Symbol if it is a String, or returns +id+ if it already is a Symbol. Raises +ArgumentError+",2],["wrap!","CodeRay::Encoders::HTML::Output","classes/CodeRay/Encoders/HTML/Output.html#M000053","(element, *args)","",2],["wrap_in!","CodeRay::Encoders::HTML::Output","classes/CodeRay/Encoders/HTML/Output.html#M000051","(template)","",2],["wrapped_in","CodeRay::Encoders::HTML::Output","classes/CodeRay/Encoders/HTML/Output.html#M000050","()","",2],["wrapped_in?","CodeRay::Encoders::HTML::Output","classes/CodeRay/Encoders/HTML/Output.html#M000049","(element)","",2],["xml_scanner","CodeRay::Scanners::JavaScript","classes/CodeRay/Scanners/JavaScript.html#M000194","()","",2],["LICENSE","files/LICENSE.html","files/LICENSE.html","","                  GNU LESSER GENERAL PUBLIC LICENSE                        Version 2.1, February 1999",3],["README_INDEX.rdoc","files/README_INDEX_rdoc.html","files/README_INDEX_rdoc.html","","= CodeRay  Tired of blue'n'gray? Try the original version of this documentation on coderay.rubychan.de[http://coderay.rubychan.de/doc/]",3],["coderay.rb","files/lib/coderay_rb.html","files/lib/coderay_rb.html","","encoding: utf-8 Encoding.default_internal = 'UTF-8' ",3],["duo.rb","files/lib/coderay/duo_rb.html","files/lib/coderay/duo_rb.html","","",3],["encoder.rb","files/lib/coderay/encoder_rb.html","files/lib/coderay/encoder_rb.html","","",3],["_map.rb","files/lib/coderay/encoders/_map_rb.html","files/lib/coderay/encoders/_map_rb.html","","",3],["comment_filter.rb","files/lib/coderay/encoders/comment_filter_rb.html","files/lib/coderay/encoders/comment_filter_rb.html","","",3],["count.rb","files/lib/coderay/encoders/count_rb.html","files/lib/coderay/encoders/count_rb.html","","",3],["debug.rb","files/lib/coderay/encoders/debug_rb.html","files/lib/coderay/encoders/debug_rb.html","","",3],["div.rb","files/lib/coderay/encoders/div_rb.html","files/lib/coderay/encoders/div_rb.html","","",3],["filter.rb","files/lib/coderay/encoders/filter_rb.html","files/lib/coderay/encoders/filter_rb.html","","",3],["html.rb","files/lib/coderay/encoders/html_rb.html","files/lib/coderay/encoders/html_rb.html","","",3],["css.rb","files/lib/coderay/encoders/html/css_rb.html","files/lib/coderay/encoders/html/css_rb.html","","",3],["numbering.rb","files/lib/coderay/encoders/html/numbering_rb.html","files/lib/coderay/encoders/html/numbering_rb.html","","",3],["output.rb","files/lib/coderay/encoders/html/output_rb.html","files/lib/coderay/encoders/html/output_rb.html","","",3],["json.rb","files/lib/coderay/encoders/json_rb.html","files/lib/coderay/encoders/json_rb.html","","",3],["lines_of_code.rb","files/lib/coderay/encoders/lines_of_code_rb.html","files/lib/coderay/encoders/lines_of_code_rb.html","","",3],["null.rb","files/lib/coderay/encoders/null_rb.html","files/lib/coderay/encoders/null_rb.html","","",3],["page.rb","files/lib/coderay/encoders/page_rb.html","files/lib/coderay/encoders/page_rb.html","","",3],["span.rb","files/lib/coderay/encoders/span_rb.html","files/lib/coderay/encoders/span_rb.html","","",3],["statistic.rb","files/lib/coderay/encoders/statistic_rb.html","files/lib/coderay/encoders/statistic_rb.html","","",3],["terminal.rb","files/lib/coderay/encoders/terminal_rb.html","files/lib/coderay/encoders/terminal_rb.html","","",3],["text.rb","files/lib/coderay/encoders/text_rb.html","files/lib/coderay/encoders/text_rb.html","","",3],["token_kind_filter.rb","files/lib/coderay/encoders/token_kind_filter_rb.html","files/lib/coderay/encoders/token_kind_filter_rb.html","","",3],["xml.rb","files/lib/coderay/encoders/xml_rb.html","files/lib/coderay/encoders/xml_rb.html","","",3],["yaml.rb","files/lib/coderay/encoders/yaml_rb.html","files/lib/coderay/encoders/yaml_rb.html","","",3],["for_redcloth.rb","files/lib/coderay/for_redcloth_rb.html","files/lib/coderay/for_redcloth_rb.html","","",3],["file_type.rb","files/lib/coderay/helpers/file_type_rb.html","files/lib/coderay/helpers/file_type_rb.html","","",3],["gzip.rb","files/lib/coderay/helpers/gzip_rb.html","files/lib/coderay/helpers/gzip_rb.html","","",3],["plugin.rb","files/lib/coderay/helpers/plugin_rb.html","files/lib/coderay/helpers/plugin_rb.html","","",3],["word_list.rb","files/lib/coderay/helpers/word_list_rb.html","files/lib/coderay/helpers/word_list_rb.html","","",3],["scanner.rb","files/lib/coderay/scanner_rb.html","files/lib/coderay/scanner_rb.html","","encoding: utf-8 ",3],["_map.rb","files/lib/coderay/scanners/_map_rb.html","files/lib/coderay/scanners/_map_rb.html","","",3],["c.rb","files/lib/coderay/scanners/c_rb.html","files/lib/coderay/scanners/c_rb.html","","",3],["clojure.rb","files/lib/coderay/scanners/clojure_rb.html","files/lib/coderay/scanners/clojure_rb.html","","encoding: utf-8 --- encoding: utf-8 --- encoding: utf-8 --- = CodeRay Library CodeRay is a Ruby library",3],["cpp.rb","files/lib/coderay/scanners/cpp_rb.html","files/lib/coderay/scanners/cpp_rb.html","","",3],["css.rb","files/lib/coderay/scanners/css_rb.html","files/lib/coderay/scanners/css_rb.html","","",3],["debug.rb","files/lib/coderay/scanners/debug_rb.html","files/lib/coderay/scanners/debug_rb.html","","",3],["delphi.rb","files/lib/coderay/scanners/delphi_rb.html","files/lib/coderay/scanners/delphi_rb.html","","",3],["diff.rb","files/lib/coderay/scanners/diff_rb.html","files/lib/coderay/scanners/diff_rb.html","","",3],["erb.rb","files/lib/coderay/scanners/erb_rb.html","files/lib/coderay/scanners/erb_rb.html","","",3],["groovy.rb","files/lib/coderay/scanners/groovy_rb.html","files/lib/coderay/scanners/groovy_rb.html","","",3],["haml.rb","files/lib/coderay/scanners/haml_rb.html","files/lib/coderay/scanners/haml_rb.html","","",3],["html.rb","files/lib/coderay/scanners/html_rb.html","files/lib/coderay/scanners/html_rb.html","","",3],["java.rb","files/lib/coderay/scanners/java_rb.html","files/lib/coderay/scanners/java_rb.html","","",3],["builtin_types.rb","files/lib/coderay/scanners/java/builtin_types_rb.html","files/lib/coderay/scanners/java/builtin_types_rb.html","","",3],["java_script.rb","files/lib/coderay/scanners/java_script_rb.html","files/lib/coderay/scanners/java_script_rb.html","","",3],["json.rb","files/lib/coderay/scanners/json_rb.html","files/lib/coderay/scanners/json_rb.html","","",3],["php.rb","files/lib/coderay/scanners/php_rb.html","files/lib/coderay/scanners/php_rb.html","","",3],["python.rb","files/lib/coderay/scanners/python_rb.html","files/lib/coderay/scanners/python_rb.html","","",3],["raydebug.rb","files/lib/coderay/scanners/raydebug_rb.html","files/lib/coderay/scanners/raydebug_rb.html","","",3],["ruby.rb","files/lib/coderay/scanners/ruby_rb.html","files/lib/coderay/scanners/ruby_rb.html","","",3],["patterns.rb","files/lib/coderay/scanners/ruby/patterns_rb.html","files/lib/coderay/scanners/ruby/patterns_rb.html","","encoding: utf-8 ",3],["string_state.rb","files/lib/coderay/scanners/ruby/string_state_rb.html","files/lib/coderay/scanners/ruby/string_state_rb.html","","encoding: utf-8 ",3],["sql.rb","files/lib/coderay/scanners/sql_rb.html","files/lib/coderay/scanners/sql_rb.html","","",3],["text.rb","files/lib/coderay/scanners/text_rb.html","files/lib/coderay/scanners/text_rb.html","","",3],["xml.rb","files/lib/coderay/scanners/xml_rb.html","files/lib/coderay/scanners/xml_rb.html","","",3],["yaml.rb","files/lib/coderay/scanners/yaml_rb.html","files/lib/coderay/scanners/yaml_rb.html","","",3],["style.rb","files/lib/coderay/style_rb.html","files/lib/coderay/style_rb.html","","",3],["_map.rb","files/lib/coderay/styles/_map_rb.html","files/lib/coderay/styles/_map_rb.html","","",3],["alpha.rb","files/lib/coderay/styles/alpha_rb.html","files/lib/coderay/styles/alpha_rb.html","","",3],["token_kinds.rb","files/lib/coderay/token_kinds_rb.html","files/lib/coderay/token_kinds_rb.html","","",3],["tokens.rb","files/lib/coderay/tokens_rb.html","files/lib/coderay/tokens_rb.html","","",3],["tokens_proxy.rb","files/lib/coderay/tokens_proxy_rb.html","files/lib/coderay/tokens_proxy_rb.html","","",3],["version.rb","files/lib/coderay/version_rb.html","files/lib/coderay/version_rb.html","","",3]],"searchIndex":["coderay","duo","encoders","commentfilter","count","debug","div","encoder","filter","html","output","json","linesofcode","null","page","span","statistic","terminal","text","tokenkindfilter","xml","yaml","filetype","forredcloth","gzip","plugin","pluginhost","scanners","c","cplusplus","css","clojure","debug","delphi","diff","erb","groovy","haml","html","json","java","javascript","php","python","raydebug","ruby","sql","scanner","text","xml","yaml","styles","alpha","style","tokens","undumping","tokensproxy","wordlist","caseignoring","<<()","[]()","[]()","[]()","[]=()","add()","aliases()","all_plugins()","ansi_clear()","ansi_colorize()","append()","apply_title!()","begin_group()","begin_group()","begin_group()","begin_group()","begin_group()","begin_group()","begin_group()","begin_group()","begin_group()","begin_group()","begin_group()","begin_line()","begin_line()","begin_line()","begin_line()","begin_line()","begin_line()","begin_line()","begin_line()","begin_line()","begin_line()","binary_string()","block_token()","call()","coderay_path()","column()","compile()","const_missing()","const_missing()","count()","default()","diff()","dump()","each()","each()","encode()","encode()","encode()","encode()","encode()","encode_file()","encode_tokens()","encode_tokens()","encode_with_encoding()","encoder()","encoder()","encoding()","end_group()","end_group()","end_group()","end_group()","end_group()","end_group()","end_group()","end_group()","end_group()","end_group()","end_group()","end_line()","end_line()","end_line()","end_line()","end_line()","end_line()","end_line()","end_line()","end_line()","end_line()","extended()","fetch()","file_extension()","file_extension()","file_extension()","file_extension()","finish()","finish()","finish()","finish()","finish()","finish()","finish()","finish()","finish()","get_output()","get_scanner_options()","guess_encoding()","gunzip()","gzip()","highlight()","highlight()","highlight()","highlight_file()","include_group?()","include_text_token?()","install()","interpreted_string_state()","lang()","lang()","line()","list()","load()","load()","load_all()","load_plugin_map()","make_plugin_hash()","map()","method_missing()","method_missing()","new()","new()","new()","new()","new()","new()","normalize()","open_token()","output()","path_to()","plugin_hash()","plugin_host()","plugin_path()","raise_inspect()","register()","register_for()","reset()","reset()","reset_instance()","reset_instance()","reset_instance()","reset_instance()","scan()","scan_file()","scan_java_script()","scan_rest()","scan_tokens()","scan_tokens()","scan_tokens()","scan_tokens()","scan_tokens()","scan_tokens()","scan_tokens()","scan_tokens()","scan_tokens()","scan_tokens()","scan_tokens()","scan_tokens()","scan_tokens()","scan_tokens()","scan_tokens()","scan_tokens()","scan_tokens()","scan_tokens()","scan_tokens()","scan_tokens()","scan_tokens()","scan_tokens()","scanner()","scanner()","scanner()","setup()","setup()","setup()","setup()","setup()","setup()","setup()","setup()","setup()","setup()","setup()","setup()","setup()","setup()","setup()","setup()","setup()","setup()","setup()","shebang()","split_into_parts()","string=()","stylesheet()","text_token()","text_token()","text_token()","text_token()","text_token()","text_token()","text_token()","text_token()","text_token()","text_token()","text_token()","text_token()","title()","to_s()","to_unix()","token()","token_path_to_hint()","tokenize()","tokens()","tokens()","tokens()","undump()","validate_id()","wrap!()","wrap_in!()","wrapped_in()","wrapped_in?()","xml_scanner()","license","readme_index.rdoc","coderay.rb","duo.rb","encoder.rb","_map.rb","comment_filter.rb","count.rb","debug.rb","div.rb","filter.rb","html.rb","css.rb","numbering.rb","output.rb","json.rb","lines_of_code.rb","null.rb","page.rb","span.rb","statistic.rb","terminal.rb","text.rb","token_kind_filter.rb","xml.rb","yaml.rb","for_redcloth.rb","file_type.rb","gzip.rb","plugin.rb","word_list.rb","scanner.rb","_map.rb","c.rb","clojure.rb","cpp.rb","css.rb","debug.rb","delphi.rb","diff.rb","erb.rb","groovy.rb","haml.rb","html.rb","java.rb","builtin_types.rb","java_script.rb","json.rb","php.rb","python.rb","raydebug.rb","ruby.rb","patterns.rb","string_state.rb","sql.rb","text.rb","xml.rb","yaml.rb","style.rb","_map.rb","alpha.rb","token_kinds.rb","tokens.rb","tokens_proxy.rb","version.rb"],"longSearchIndex":["lib/coderay.rb","coderay","coderay","coderay::encoders","coderay::encoders","coderay::encoders","coderay::encoders","coderay::encoders","coderay::encoders","coderay::encoders","coderay::encoders::html","coderay::encoders","coderay::encoders","coderay::encoders","coderay::encoders","coderay::encoders","coderay::encoders","coderay::encoders","coderay::encoders","coderay::encoders","coderay::encoders","coderay::encoders","coderay","coderay","coderay","coderay","coderay","coderay","coderay::scanners","coderay::scanners","coderay::scanners","coderay::scanners","coderay::scanners","coderay::scanners","coderay::scanners","coderay::scanners","coderay::scanners","coderay::scanners","coderay::scanners","coderay::scanners","coderay::scanners","coderay::scanners","coderay::scanners","coderay::scanners","coderay::scanners","coderay::scanners","coderay::scanners","coderay::scanners","coderay::scanners","coderay::scanners","coderay::scanners","coderay","coderay::styles","coderay::styles","coderay","coderay::tokens","coderay","coderay","coderay::wordlist","coderay::encoders::encoder","coderay::filetype","coderay::pluginhost","coderay::wordlist::caseignoring","coderay::wordlist::caseignoring","coderay::wordlist","coderay::plugin","coderay::pluginhost","coderay::encoders::terminal","coderay::encoders::terminal","coderay::encoders::json","coderay::encoders::html::output","coderay::encoders","coderay::encoders::count","coderay::encoders::debug","coderay::encoders::encoder","coderay::encoders::json","coderay::encoders::statistic","coderay::encoders::terminal","coderay::encoders::tokenkindfilter","coderay::encoders::xml","coderay::encoders::yaml","coderay::tokens","coderay::encoders","coderay::encoders::count","coderay::encoders::debug","coderay::encoders::encoder","coderay::encoders::json","coderay::encoders::statistic","coderay::encoders::terminal","coderay::encoders::tokenkindfilter","coderay::encoders::yaml","coderay::tokens","coderay::scanners::scanner","coderay::encoders::statistic","coderay::duo","coderay","coderay::scanners::scanner","coderay::encoders::encoder","coderay::encoders::encoder","coderay::pluginhost","coderay::tokens","coderay::pluginhost","coderay::scanners::diff","coderay::tokens","coderay::scanners::scanner","coderay::tokensproxy","coderay","coderay::duo","coderay::encoders::encoder","coderay::tokens","coderay::tokensproxy","coderay","coderay","coderay::encoders::encoder","coderay::scanners::scanner","coderay","coderay::duo","coderay::scanners::scanner","coderay::encoders","coderay::encoders::count","coderay::encoders::debug","coderay::encoders::encoder","coderay::encoders::json","coderay::encoders::statistic","coderay::encoders::terminal","coderay::encoders::tokenkindfilter","coderay::encoders::xml","coderay::encoders::yaml","coderay::tokens","coderay::encoders","coderay::encoders::count","coderay::encoders::debug","coderay::encoders::encoder","coderay::encoders::json","coderay::encoders::statistic","coderay::encoders::terminal","coderay::encoders::tokenkindfilter","coderay::encoders::yaml","coderay::tokens","coderay::pluginhost","coderay::filetype","coderay::encoders::encoder","coderay::encoders::encoder","coderay::scanners::scanner","coderay::scanners::scanner","coderay::encoders","coderay::encoders::count","coderay::encoders::encoder","coderay::encoders::filter","coderay::encoders::json","coderay::encoders::linesofcode","coderay::encoders::statistic","coderay::encoders::xml","coderay::encoders::yaml","coderay::encoders::encoder","coderay","coderay::scanners::scanner","coderay::gzip","coderay::gzip","coderay","coderay::duo","coderay::encoders::encoder","coderay","coderay::encoders::tokenkindfilter","coderay::encoders::tokenkindfilter","coderay::forredcloth","coderay::scanners::ruby","coderay::scanners::scanner","coderay::scanners::scanner","coderay::scanners::scanner","coderay::pluginhost","coderay::pluginhost","coderay::tokens","coderay::pluginhost","coderay::pluginhost","coderay::pluginhost","coderay::pluginhost","coderay::tokens","coderay::tokensproxy","coderay::duo","coderay::encoders::debug","coderay::encoders::encoder","coderay::scanners::scanner","coderay::tokensproxy","coderay::wordlist","coderay::scanners::scanner","coderay::encoders::terminal","coderay::encoders::encoder","coderay::pluginhost","coderay::pluginhost","coderay::plugin","coderay::pluginhost","coderay::scanners::scanner","coderay::pluginhost","coderay::plugin","coderay::scanners::html","coderay::scanners::scanner","coderay::scanners::erb","coderay::scanners::javascript","coderay::scanners::php","coderay::scanners::scanner","coderay","coderay","coderay::scanners::html","coderay::scanners::scanner","coderay::scanners::c","coderay::scanners::cplusplus","coderay::scanners::css","coderay::scanners::clojure","coderay::scanners::debug","coderay::scanners::delphi","coderay::scanners::diff","coderay::scanners::erb","coderay::scanners::groovy","coderay::scanners::haml","coderay::scanners::html","coderay::scanners::json","coderay::scanners::java","coderay::scanners::javascript","coderay::scanners::php","coderay::scanners::python","coderay::scanners::raydebug","coderay::scanners::ruby","coderay::scanners::sql","coderay::scanners::scanner","coderay::scanners::text","coderay::scanners::yaml","coderay","coderay::duo","coderay::tokensproxy","coderay::encoders","coderay::encoders::count","coderay::encoders::encoder","coderay::encoders::filter","coderay::encoders::json","coderay::encoders::linesofcode","coderay::encoders::statistic","coderay::encoders::terminal","coderay::encoders::text","coderay::encoders::tokenkindfilter","coderay::encoders::xml","coderay::encoders::yaml","coderay::scanners::css","coderay::scanners::erb","coderay::scanners::haml","coderay::scanners::html","coderay::scanners::php","coderay::scanners::ruby","coderay::scanners::scanner","coderay::filetype","coderay::tokens","coderay::scanners::scanner","coderay::encoders::html::output","coderay::encoders","coderay::encoders::count","coderay::encoders::debug","coderay::encoders::encoder","coderay::encoders::json","coderay::encoders::null","coderay::encoders::statistic","coderay::encoders::terminal","coderay::encoders::text","coderay::encoders::tokenkindfilter","coderay::encoders::xml","coderay::encoders::yaml","coderay::plugin","coderay::tokens","coderay::scanners::scanner","coderay::encoders::encoder","coderay::encoders","coderay::scanners::scanner","coderay::encoders::encoder","coderay::scanners::scanner","coderay::tokensproxy","coderay::tokens::undumping","coderay::pluginhost","coderay::encoders::html::output","coderay::encoders::html::output","coderay::encoders::html::output","coderay::encoders::html::output","coderay::scanners::javascript","files/license.html","files/readme_index_rdoc.html","files/lib/coderay_rb.html","files/lib/coderay/duo_rb.html","files/lib/coderay/encoder_rb.html","files/lib/coderay/encoders/_map_rb.html","files/lib/coderay/encoders/comment_filter_rb.html","files/lib/coderay/encoders/count_rb.html","files/lib/coderay/encoders/debug_rb.html","files/lib/coderay/encoders/div_rb.html","files/lib/coderay/encoders/filter_rb.html","files/lib/coderay/encoders/html_rb.html","files/lib/coderay/encoders/html/css_rb.html","files/lib/coderay/encoders/html/numbering_rb.html","files/lib/coderay/encoders/html/output_rb.html","files/lib/coderay/encoders/json_rb.html","files/lib/coderay/encoders/lines_of_code_rb.html","files/lib/coderay/encoders/null_rb.html","files/lib/coderay/encoders/page_rb.html","files/lib/coderay/encoders/span_rb.html","files/lib/coderay/encoders/statistic_rb.html","files/lib/coderay/encoders/terminal_rb.html","files/lib/coderay/encoders/text_rb.html","files/lib/coderay/encoders/token_kind_filter_rb.html","files/lib/coderay/encoders/xml_rb.html","files/lib/coderay/encoders/yaml_rb.html","files/lib/coderay/for_redcloth_rb.html","files/lib/coderay/helpers/file_type_rb.html","files/lib/coderay/helpers/gzip_rb.html","files/lib/coderay/helpers/plugin_rb.html","files/lib/coderay/helpers/word_list_rb.html","files/lib/coderay/scanner_rb.html","files/lib/coderay/scanners/_map_rb.html","files/lib/coderay/scanners/c_rb.html","files/lib/coderay/scanners/clojure_rb.html","files/lib/coderay/scanners/cpp_rb.html","files/lib/coderay/scanners/css_rb.html","files/lib/coderay/scanners/debug_rb.html","files/lib/coderay/scanners/delphi_rb.html","files/lib/coderay/scanners/diff_rb.html","files/lib/coderay/scanners/erb_rb.html","files/lib/coderay/scanners/groovy_rb.html","files/lib/coderay/scanners/haml_rb.html","files/lib/coderay/scanners/html_rb.html","files/lib/coderay/scanners/java_rb.html","files/lib/coderay/scanners/java/builtin_types_rb.html","files/lib/coderay/scanners/java_script_rb.html","files/lib/coderay/scanners/json_rb.html","files/lib/coderay/scanners/php_rb.html","files/lib/coderay/scanners/python_rb.html","files/lib/coderay/scanners/raydebug_rb.html","files/lib/coderay/scanners/ruby_rb.html","files/lib/coderay/scanners/ruby/patterns_rb.html","files/lib/coderay/scanners/ruby/string_state_rb.html","files/lib/coderay/scanners/sql_rb.html","files/lib/coderay/scanners/text_rb.html","files/lib/coderay/scanners/xml_rb.html","files/lib/coderay/scanners/yaml_rb.html","files/lib/coderay/style_rb.html","files/lib/coderay/styles/_map_rb.html","files/lib/coderay/styles/alpha_rb.html","files/lib/coderay/token_kinds_rb.html","files/lib/coderay/tokens_rb.html","files/lib/coderay/tokens_proxy_rb.html","files/lib/coderay/version_rb.html"]}}