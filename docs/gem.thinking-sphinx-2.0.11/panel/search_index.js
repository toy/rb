var search_data = {"index":{"info":[["Cucumber","lib/cucumber/thinking_sphinx/external_world.rb","classes/Cucumber.html"," < ","",1],["ThinkingSphinx","Cucumber","classes/Cucumber/ThinkingSphinx.html"," < ","",1],["ExternalWorld","Cucumber::ThinkingSphinx","classes/Cucumber/ThinkingSphinx/ExternalWorld.html"," < Object","",1],["InternalWorld","Cucumber::ThinkingSphinx","classes/Cucumber/ThinkingSphinx/InternalWorld.html"," < Object","",1],["SqlLogger","Cucumber::ThinkingSphinx","classes/Cucumber/ThinkingSphinx/SqlLogger.html"," < ","",1],["Object","lib/thinking_sphinx/deploy/capistrano.rb","classes/Object.html"," < Object","",1],["String","lib/thinking_sphinx/core/string.rb","classes/String.html"," < Object","",1],["ThinkingSphinx","lib/thinking_sphinx/action_controller.rb","classes/ThinkingSphinx.html"," < ","encoding: UTF-8 ",1],["AbstractAdapter","ThinkingSphinx","classes/ThinkingSphinx/AbstractAdapter.html"," < Object","",1],["ActionController","ThinkingSphinx","classes/ThinkingSphinx/ActionController.html"," < ","",1],["ClassMethods","ThinkingSphinx::ActionController","classes/ThinkingSphinx/ActionController/ClassMethods.html"," < ","",1],["ActiveRecord","ThinkingSphinx","classes/ThinkingSphinx/ActiveRecord.html"," < ","Core additions to ActiveRecord models - define_index for creating indexes for models. If you want to",1],["AttributeUpdates","ThinkingSphinx::ActiveRecord","classes/ThinkingSphinx/ActiveRecord/AttributeUpdates.html"," < ","",1],["ClassMethods","ThinkingSphinx::ActiveRecord","classes/ThinkingSphinx/ActiveRecord/ClassMethods.html"," < ","",1],["CollectionProxy","ThinkingSphinx::ActiveRecord","classes/ThinkingSphinx/ActiveRecord/CollectionProxy.html"," < ","",1],["CollectionProxyWithScopes","ThinkingSphinx::ActiveRecord","classes/ThinkingSphinx/ActiveRecord/CollectionProxyWithScopes.html"," < ","",1],["Delta","ThinkingSphinx::ActiveRecord","classes/ThinkingSphinx/ActiveRecord/Delta.html"," < ","This module contains all the delta-related code for models. There isn't really anything you need to call",1],["HasManyAssociation","ThinkingSphinx::ActiveRecord","classes/ThinkingSphinx/ActiveRecord/HasManyAssociation.html"," < ","",1],["HasManyAssociationWithScopes","ThinkingSphinx::ActiveRecord","classes/ThinkingSphinx/ActiveRecord/HasManyAssociationWithScopes.html"," < ","",1],["LogSubscriber","ThinkingSphinx::ActiveRecord","classes/ThinkingSphinx/ActiveRecord/LogSubscriber.html"," < ActiveSupport::LogSubscriber","",1],["Scopes","ThinkingSphinx::ActiveRecord","classes/ThinkingSphinx/ActiveRecord/Scopes.html"," < ","",1],["ClassMethods","ThinkingSphinx::ActiveRecord::Scopes","classes/ThinkingSphinx/ActiveRecord/Scopes/ClassMethods.html"," < ","",1],["Association","ThinkingSphinx","classes/ThinkingSphinx/Association.html"," < Object","Association tracks a specific reflection and join to reference data that isn't in the base model. Very",1],["Attribute","ThinkingSphinx","classes/ThinkingSphinx/Attribute.html"," < ThinkingSphinx::Property","Attributes - eternally useful when it comes to filtering, sorting or grouping. This class isn't really",1],["AutoVersion","ThinkingSphinx","classes/ThinkingSphinx/AutoVersion.html"," < Object","",1],["BundledSearch","ThinkingSphinx","classes/ThinkingSphinx/BundledSearch.html"," < Object","",1],["ClassFacet","ThinkingSphinx","classes/ThinkingSphinx/ClassFacet.html"," < ThinkingSphinx::Facet","",1],["Configuration","ThinkingSphinx","classes/ThinkingSphinx/Configuration.html"," < Object","This class both keeps track of the configuration settings for Sphinx and also generates the resulting",1],["ConnectionError","ThinkingSphinx","classes/ThinkingSphinx/ConnectionError.html"," < StandardError","A ConnectionError will get thrown when a connection to Sphinx can't be made. ",1],["Context","ThinkingSphinx","classes/ThinkingSphinx/Context.html"," < Object","",1],["Core","ThinkingSphinx","classes/ThinkingSphinx/Core.html"," < ","",1],["String","ThinkingSphinx::Core","classes/ThinkingSphinx/Core/String.html"," < ","",1],["Deltas","ThinkingSphinx","classes/ThinkingSphinx/Deltas.html"," < ","",1],["DefaultDelta","ThinkingSphinx::Deltas","classes/ThinkingSphinx/Deltas/DefaultDelta.html"," < Object","",1],["Excerpter","ThinkingSphinx","classes/ThinkingSphinx/Excerpter.html"," < Object","",1],["Facet","ThinkingSphinx","classes/ThinkingSphinx/Facet.html"," < Object","",1],["FacetSearch","ThinkingSphinx","classes/ThinkingSphinx/FacetSearch.html"," < Hash","",1],["Field","ThinkingSphinx","classes/ThinkingSphinx/Field.html"," < ThinkingSphinx::Property","Fields - holding the string data which Sphinx indexes for your searches. This class isn't really useful",1],["Index","ThinkingSphinx","classes/ThinkingSphinx/Index.html"," < Object","",1],["Builder","ThinkingSphinx::Index","classes/ThinkingSphinx/Index/Builder.html"," < BlankSlate","The Builder class is the core for the index definition block processing. There are four methods you really",1],["FauxColumn","ThinkingSphinx::Index","classes/ThinkingSphinx/Index/FauxColumn.html"," < Object","Instances of this class represent database columns and the stack of associations that lead from the base",1],["Join","ThinkingSphinx","classes/ThinkingSphinx/Join.html"," < Object","",1],["MysqlAdapter","ThinkingSphinx","classes/ThinkingSphinx/MysqlAdapter.html"," < AbstractAdapter","",1],["PostgreSQLAdapter","ThinkingSphinx","classes/ThinkingSphinx/PostgreSQLAdapter.html"," < AbstractAdapter","",1],["Property","ThinkingSphinx","classes/ThinkingSphinx/Property.html"," < Object","",1],["Railtie","ThinkingSphinx","classes/ThinkingSphinx/Railtie.html"," < Rails::Railtie","",1],["Search","ThinkingSphinx","classes/ThinkingSphinx/Search.html"," < Array","Once you've got those indexes in and built, this is the stuff that matters - how to search! This class",1],["SearchMethods","ThinkingSphinx","classes/ThinkingSphinx/SearchMethods.html"," < ","",1],["ClassMethods","ThinkingSphinx::SearchMethods","classes/ThinkingSphinx/SearchMethods/ClassMethods.html"," < ","",1],["Source","ThinkingSphinx","classes/ThinkingSphinx/Source.html"," < Object","",1],["InternalProperties","ThinkingSphinx::Source","classes/ThinkingSphinx/Source/InternalProperties.html"," < ","",1],["SQL","ThinkingSphinx::Source","classes/ThinkingSphinx/Source/SQL.html"," < ","",1],["SphinxError","ThinkingSphinx","classes/ThinkingSphinx/SphinxError.html"," < RuntimeError","A SphinxError occurs when Sphinx responds with an error due to problematic queries or indexes. ",1],["StaleIdsException","ThinkingSphinx","classes/ThinkingSphinx/StaleIdsException.html"," < StandardError","A StaleIdsException is thrown by Collection.instances_from_matches if there are records in Sphinx but",1],["Test","ThinkingSphinx","classes/ThinkingSphinx/Test.html"," < Object","",1],["__name","ThinkingSphinx::Index::FauxColumn","classes/ThinkingSphinx/Index/FauxColumn.html#M000298","()","Can't use normal method name, as that could be an association or column name. ",2],["__path","ThinkingSphinx::Index::FauxColumn","classes/ThinkingSphinx/Index/FauxColumn.html#M000300","()","",2],["__stack","ThinkingSphinx::Index::FauxColumn","classes/ThinkingSphinx/Index/FauxColumn.html#M000299","()","Can't use normal method name, as that could be an association or column name. ",2],["adapter","ThinkingSphinx::Deltas::DefaultDelta","classes/ThinkingSphinx/Deltas/DefaultDelta.html#M000248","()","",2],["adapter","ThinkingSphinx::Index","classes/ThinkingSphinx/Index.html#M000333","()","",2],["adapter","ThinkingSphinx::Property","classes/ThinkingSphinx/Property.html#M000355","()","",2],["adapter","ThinkingSphinx::Source","classes/ThinkingSphinx/Source.html#M000503","()","",2],["adapter_for_model","ThinkingSphinx::AbstractAdapter","classes/ThinkingSphinx/AbstractAdapter.html#M000080","(model)","",2],["add_default_scope","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000493","()","Adds the default_sphinx_scope if set. ",2],["add_excerpter","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000431","()","",2],["add_facet_attribute","ThinkingSphinx::Index::Builder","classes/ThinkingSphinx/Index/Builder.html#M000325","(property, options)","",2],["add_from_results","ThinkingSphinx::FacetSearch","classes/ThinkingSphinx/FacetSearch.html#M000284","(facet, search)","example: facet = country_facet; name = :country ",2],["add_indexed_model","ThinkingSphinx::Context","classes/ThinkingSphinx/Context.html#M000206","(model)","",2],["add_indexed_models","ThinkingSphinx::Context","classes/ThinkingSphinx/Context.html#M000208","()","",2],["add_internal_attribute","ThinkingSphinx::Index::Builder","classes/ThinkingSphinx/Index/Builder.html#M000330","(property, options, suffix, crc = false)","",2],["add_internal_attribute","ThinkingSphinx::Source::InternalProperties","classes/ThinkingSphinx/Source/InternalProperties.html#M000443","(name, type, contents, facet = false)","",2],["add_internal_attributes_and_facets","ThinkingSphinx::Source::InternalProperties","classes/ThinkingSphinx/Source/InternalProperties.html#M000439","()","",2],["add_internal_facet","ThinkingSphinx::Source::InternalProperties","classes/ThinkingSphinx/Source/InternalProperties.html#M000444","(name)","",2],["add_matching_fields","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000433","()","",2],["add_scope","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000494","(method, *args, &block)","",2],["add_sort_attribute","ThinkingSphinx::Index::Builder","classes/ThinkingSphinx/Index/Builder.html#M000324","(field, options)","",2],["add_sphinx_attributes","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000432","()","",2],["add_sphinx_callbacks_and_extend","ThinkingSphinx::ActiveRecord::ClassMethods","classes/ThinkingSphinx/ActiveRecord/ClassMethods.html#M000100","(delta = false)","",2],["add_sphinx_index","ThinkingSphinx::ActiveRecord::ClassMethods","classes/ThinkingSphinx/ActiveRecord/ClassMethods.html#M000079","(name, &block)","",2],["add_sphinx_scopes_support_to_has_many_associations","ThinkingSphinx::ActiveRecord::Scopes::ClassMethods","classes/ThinkingSphinx/ActiveRecord/Scopes/ClassMethods.html#M000062","()","",2],["address","ThinkingSphinx::Configuration","classes/ThinkingSphinx/Configuration.html#M000215","()","",2],["address=","ThinkingSphinx::Configuration","classes/ThinkingSphinx/Configuration.html#M000216","(address)","",2],["admin?","ThinkingSphinx::Property","classes/ThinkingSphinx/Property.html#M000350","()","",2],["all","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000375","()","Populates the search result set ",2],["all_associations","ThinkingSphinx::Source","classes/ThinkingSphinx/Source.html#M000510","()","Returns all associations used amongst all the fields and attributes. This includes all associations between",2],["all_datetimes?","ThinkingSphinx::Attribute","classes/ThinkingSphinx/Attribute.html#M000173","()","",2],["all_facets","ThinkingSphinx::FacetSearch","classes/ThinkingSphinx/FacetSearch.html#M000277","()","",2],["all_ints?","ThinkingSphinx::Attribute","classes/ThinkingSphinx/Attribute.html#M000172","()","",2],["all_names","ThinkingSphinx::Index","classes/ThinkingSphinx/Index.html#M000321","()","",2],["all_of_type?","ThinkingSphinx::Attribute","classes/ThinkingSphinx/Attribute.html#M000197","(*column_types)","",2],["all_strings?","ThinkingSphinx::Attribute","classes/ThinkingSphinx/Attribute.html#M000174","()","",2],["ancestors","ThinkingSphinx::Association","classes/ThinkingSphinx/Association.html#M000142","()","Returns an array of all the associations that lead to this one - starting with the top level all the",2],["anchor","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000468","()","",2],["append_info_to_payload","ThinkingSphinx::ActionController","classes/ThinkingSphinx/ActionController.html#M000016","(payload)","",2],["append_to","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000419","(client)","",2],["arel_join","ThinkingSphinx::Association","classes/ThinkingSphinx/Association.html#M000134","()","",2],["as_json","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000377","(*args)","",2],["assoc","ThinkingSphinx::Index::Builder","classes/ThinkingSphinx/Index/Builder.html#M000314","(assoc, *args)","A method to allow adding fields from associations which have names that clash with method names in the",2],["association","ThinkingSphinx::Source","classes/ThinkingSphinx/Source.html#M000501","(key)","Gets the association stack for a specific key. ",2],["association_joins","ThinkingSphinx::Attribute","classes/ThinkingSphinx/Attribute.html#M000186","()","",2],["association_stack","ThinkingSphinx::Join","classes/ThinkingSphinx/Join.html#M000344","(path, parent = nil)","Gets a stack of associations for a specific path. ",2],["association_stack","ThinkingSphinx::Property","classes/ThinkingSphinx/Property.html#M000364","(path, parent = nil)","Gets a stack of associations for a specific path. ",2],["attribute","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000477","(*keys)","",2],["attribute_by_alias","ThinkingSphinx::Source::InternalProperties","classes/ThinkingSphinx/Source/InternalProperties.html#M000447","(attr_alias)","",2],["attribute_for_foreign_key","ThinkingSphinx::ActiveRecord::CollectionProxy","classes/ThinkingSphinx/ActiveRecord/CollectionProxy.html#M000024","()","",2],["attribute_for_foreign_key","ThinkingSphinx::ActiveRecord::HasManyAssociation","classes/ThinkingSphinx/ActiveRecord/HasManyAssociation.html#M000036","()","",2],["attribute_name","ThinkingSphinx::ClassFacet","classes/ThinkingSphinx/ClassFacet.html#M000188","()","",2],["attribute_name","ThinkingSphinx::Facet","classes/ThinkingSphinx/Facet.html#M000261","()","",2],["attribute_name_for","ThinkingSphinx::Facet","classes/ThinkingSphinx/Facet.html#M000257","(name)","",2],["attribute_name_from_value","ThinkingSphinx::Facet","classes/ThinkingSphinx/Facet.html#M000258","(name, value)","",2],["attribute_values_for_index","ThinkingSphinx::ActiveRecord::AttributeUpdates","classes/ThinkingSphinx/ActiveRecord/AttributeUpdates.html#M000021","(index)","",2],["attributes","ThinkingSphinx::Index","classes/ThinkingSphinx/Index.html#M000318","()","",2],["attributes","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000480","()","",2],["autostop","ThinkingSphinx::Test","classes/ThinkingSphinx/Test.html#M000519","()","",2],["available?","ThinkingSphinx::Property","classes/ThinkingSphinx/Property.html#M000352","()","",2],["available_attributes","ThinkingSphinx::Source","classes/ThinkingSphinx/Source.html#M000504","()","",2],["base_association_for_mva","ThinkingSphinx::Attribute","classes/ThinkingSphinx/Attribute.html#M000185","()","",2],["bigint_pattern","ThinkingSphinx::AbstractAdapter","classes/ThinkingSphinx/AbstractAdapter.html#M000092","()","",2],["bin_path","ThinkingSphinx::Configuration","classes/ThinkingSphinx/Configuration.html#M000227","()","",2],["bin_path=","ThinkingSphinx::Configuration","classes/ThinkingSphinx/Configuration.html#M000228","(path)","",2],["boolean","ThinkingSphinx::MysqlAdapter","classes/ThinkingSphinx/MysqlAdapter.html#M000116","(value)","",2],["boolean","ThinkingSphinx::PostgreSQLAdapter","classes/ThinkingSphinx/PostgreSQLAdapter.html#M000135","(value)","",2],["build","ThinkingSphinx::Configuration","classes/ThinkingSphinx/Configuration.html#M000214","(file_path=nil)","Generate the config file for Sphinx by using all the settings defined and looping through all the models",2],["bundle_searches","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000371","(enum = nil)","",2],["case","ThinkingSphinx::AbstractAdapter","classes/ThinkingSphinx/AbstractAdapter.html#M000094","(expression, pairs, default)","",2],["cast_to_datetime","ThinkingSphinx::MysqlAdapter","classes/ThinkingSphinx/MysqlAdapter.html#M000110","(clause)","",2],["cast_to_datetime","ThinkingSphinx::PostgreSQLAdapter","classes/ThinkingSphinx/PostgreSQLAdapter.html#M000129","(clause)","",2],["cast_to_int","ThinkingSphinx::MysqlAdapter","classes/ThinkingSphinx/MysqlAdapter.html#M000114","(clause)","",2],["cast_to_int","ThinkingSphinx::PostgreSQLAdapter","classes/ThinkingSphinx/PostgreSQLAdapter.html#M000131","(clause)","",2],["cast_to_string","ThinkingSphinx::MysqlAdapter","classes/ThinkingSphinx/MysqlAdapter.html#M000109","(clause)","",2],["cast_to_string","ThinkingSphinx::PostgreSQLAdapter","classes/ThinkingSphinx/PostgreSQLAdapter.html#M000128","(clause)","",2],["cast_to_unsigned","ThinkingSphinx::MysqlAdapter","classes/ThinkingSphinx/MysqlAdapter.html#M000113","(clause)","",2],["cast_to_unsigned","ThinkingSphinx::PostgreSQLAdapter","classes/ThinkingSphinx/PostgreSQLAdapter.html#M000130","(clause)","",2],["casted_options","ThinkingSphinx::Association","classes/ThinkingSphinx/Association.html#M000151","(klass, ref)","Returns a new set of options for an association that mimics an existing polymorphic relationship for",2],["changed?","ThinkingSphinx::Property","classes/ThinkingSphinx/Property.html#M000349","(instance)","",2],["children","ThinkingSphinx::Association","classes/ThinkingSphinx/Association.html#M000127","(klass, assoc, parent=nil)","Get the children associations for a given class, association name and parent association. Much like the",2],["children","ThinkingSphinx::Association","classes/ThinkingSphinx/Association.html#M000126","(assoc)","Get the children associations for a given association name. The only time that there'll actually be more",2],["class_facet","ThinkingSphinx::FacetSearch","classes/ThinkingSphinx/FacetSearch.html#M000292","()","",2],["class_from_crc","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000490","(crc)","",2],["classes","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000440","()","",2],["classes_option","ThinkingSphinx::SearchMethods::ClassMethods","classes/ThinkingSphinx/SearchMethods/ClassMethods.html#M000427","()","",2],["clause","ThinkingSphinx::Deltas::DefaultDelta","classes/ThinkingSphinx/Deltas/DefaultDelta.html#M000243","(model, toggled)","",2],["cleanup_view_runtime","ThinkingSphinx::ActionController","classes/ThinkingSphinx/ActionController.html#M000015","()","",2],["clear_primary_key_for_sphinx","ThinkingSphinx::ActiveRecord","classes/ThinkingSphinx/ActiveRecord.html#M000064","()","",2],["client","ThinkingSphinx::BundledSearch","classes/ThinkingSphinx/BundledSearch.html#M000170","()","",2],["client","ThinkingSphinx::Configuration","classes/ThinkingSphinx/Configuration.html#M000234","()","",2],["client","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000418","()","",2],["coerce","ThinkingSphinx::Index::FauxColumn","classes/ThinkingSphinx/Index/FauxColumn.html#M000295","(columns)","",2],["column","ThinkingSphinx::Facet","classes/ThinkingSphinx/Facet.html#M000273","()","",2],["column_available?","ThinkingSphinx::Property","classes/ThinkingSphinx/Property.html#M000363","(column)","",2],["column_from_db","ThinkingSphinx::Attribute","classes/ThinkingSphinx/Attribute.html#M000196","()","",2],["column_with_prefix","ThinkingSphinx::Property","classes/ThinkingSphinx/Property.html#M000361","(column)","Builds a column reference tied to the appropriate associations. This dives into the associations hash",2],["columns_with_prefixes","ThinkingSphinx::Property","classes/ThinkingSphinx/Property.html#M000362","()","",2],["comment","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000451","()","",2],["compose_ids_results","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000429","()","",2],["compose_only_results","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000430","()","",2],["compose_results","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000428","()","",2],["concat_ws?","ThinkingSphinx::Property","classes/ThinkingSphinx/Property.html#M000359","()","Indication of whether the columns should be concatenated with a space between each value. True if there's",2],["concatenate","ThinkingSphinx::MysqlAdapter","classes/ThinkingSphinx/MysqlAdapter.html#M000107","(clause, separator = ' ')","",2],["concatenate","ThinkingSphinx::PostgreSQLAdapter","classes/ThinkingSphinx/PostgreSQLAdapter.html#M000124","(clause, separator = ' ')","",2],["conditions_as_query","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000445","()","",2],["config","Cucumber::ThinkingSphinx::InternalWorld","classes/Cucumber/ThinkingSphinx/InternalWorld.html#M000004","()","",2],["config","ThinkingSphinx::FacetSearch","classes/ThinkingSphinx/FacetSearch.html#M000281","()","",2],["config","ThinkingSphinx::Index","classes/ThinkingSphinx/Index.html#M000337","()","",2],["config","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000423","()","",2],["config","ThinkingSphinx::Test","classes/ThinkingSphinx/Test.html#M000523","()","",2],["config_file","ThinkingSphinx::Configuration","classes/ThinkingSphinx/Configuration.html#M000225","()","",2],["config_file=","ThinkingSphinx::Configuration","classes/ThinkingSphinx/Configuration.html#M000226","(file)","",2],["config_value","ThinkingSphinx::Attribute","classes/ThinkingSphinx/Attribute.html#M000163","(offset = nil, delta = false)","Returns the configuration value that should be used for the attribute. Special case is the multi-valued",2],["configure","ThinkingSphinx::Configuration","classes/ThinkingSphinx/Configuration.html#M000204","(&block)","",2],["configure_active_record","Cucumber::ThinkingSphinx::InternalWorld","classes/Cucumber/ThinkingSphinx/InternalWorld.html#M000011","()","",2],["configure_cleanup","Cucumber::ThinkingSphinx::InternalWorld","classes/Cucumber/ThinkingSphinx/InternalWorld.html#M000007","()","",2],["configure_database","Cucumber::ThinkingSphinx::InternalWorld","classes/Cucumber/ThinkingSphinx/InternalWorld.html#M000003","()","",2],["configure_thinking_sphinx","Cucumber::ThinkingSphinx::InternalWorld","classes/Cucumber/ThinkingSphinx/InternalWorld.html#M000006","()","",2],["connection","ThinkingSphinx::AbstractAdapter","classes/ThinkingSphinx/AbstractAdapter.html#M000096","()","",2],["context","ThinkingSphinx","classes/ThinkingSphinx.html#M000530","()","",2],["convert_nulls","ThinkingSphinx::MysqlAdapter","classes/ThinkingSphinx/MysqlAdapter.html#M000115","(clause, default = '')","",2],["convert_nulls","ThinkingSphinx::PostgreSQLAdapter","classes/ThinkingSphinx/PostgreSQLAdapter.html#M000132","(clause, default = '')","",2],["core_index_names","ThinkingSphinx::ActiveRecord::ClassMethods","classes/ThinkingSphinx/ActiveRecord/ClassMethods.html#M000087","()","",2],["core_name","ThinkingSphinx::Index","classes/ThinkingSphinx/Index.html#M000319","()","",2],["count","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000368","(*args)","Deprecated. Use ThinkingSphinx.count ",2],["count","ThinkingSphinx::SearchMethods::ClassMethods","classes/ThinkingSphinx/SearchMethods/ClassMethods.html#M000420","(*args)","",2],["crc","ThinkingSphinx::MysqlAdapter","classes/ThinkingSphinx/MysqlAdapter.html#M000117","(clause, blank_to_null = false)","",2],["crc","ThinkingSphinx::PostgreSQLAdapter","classes/ThinkingSphinx/PostgreSQLAdapter.html#M000136","(clause, blank_to_null = false)","",2],["crc_attribute","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000502","()","",2],["crc_column","ThinkingSphinx::Source::SQL","classes/ThinkingSphinx/Source/SQL.html#M000474","()","",2],["create_array_accum_function","ThinkingSphinx::PostgreSQLAdapter","classes/ThinkingSphinx/PostgreSQLAdapter.html#M000146","()","",2],["create_crc32_function","ThinkingSphinx::PostgreSQLAdapter","classes/ThinkingSphinx/PostgreSQLAdapter.html#M000148","()","",2],["create_indexes_folder","ThinkingSphinx::Test","classes/ThinkingSphinx/Test.html#M000526","()","",2],["current_page","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000388","()","The current page number of the result set. Defaults to 1 if no page was explicitly requested. @return",2],["custom_primary_key_for_sphinx?","ThinkingSphinx::ActiveRecord","classes/ThinkingSphinx/ActiveRecord.html#M000061","()","",2],["database_settings","Cucumber::ThinkingSphinx::InternalWorld","classes/Cucumber/ThinkingSphinx/InternalWorld.html#M000009","()","",2],["default_filter","ThinkingSphinx::ActiveRecord::CollectionProxy","classes/ThinkingSphinx/ActiveRecord/CollectionProxy.html#M000025","()","",2],["default_filter","ThinkingSphinx::ActiveRecord::HasManyAssociation","classes/ThinkingSphinx/ActiveRecord/HasManyAssociation.html#M000039","()","",2],["default_sphinx_scope","ThinkingSphinx::ActiveRecord::Scopes::ClassMethods","classes/ThinkingSphinx/ActiveRecord/Scopes/ClassMethods.html#M000052","(sphinx_scope_name)","Similar to ActiveRecord's default_scope method Thinking Sphinx supports a default_sphinx_scope. For example:",2],["default_star_token","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000450","()","",2],["define_index","ThinkingSphinx::ActiveRecord::ClassMethods","classes/ThinkingSphinx/ActiveRecord/ClassMethods.html#M000074","(name = nil, &block)","Allows creation of indexes for Sphinx. If you don't do this, there isn't much point trying to search",2],["define_indexes","ThinkingSphinx::ActiveRecord","classes/ThinkingSphinx/ActiveRecord.html#M000112","()","",2],["define_indexes","ThinkingSphinx::ActiveRecord::ClassMethods","classes/ThinkingSphinx/ActiveRecord/ClassMethods.html#M000075","()","",2],["define_indexes","ThinkingSphinx::Context","classes/ThinkingSphinx/Context.html#M000202","()","",2],["define_indexes=","ThinkingSphinx","classes/ThinkingSphinx.html#M000534","(value)","Enable/disable indexes - you may want to do this while migrating data. ThinkingSphinx.define_indexes",2],["define_indexes?","ThinkingSphinx","classes/ThinkingSphinx.html#M000533","()","Check if index definition is disabled. ",2],["define_source","ThinkingSphinx::Index::Builder","classes/ThinkingSphinx/Index/Builder.html#M000297","(&block)","",2],["defined_indexes=","ThinkingSphinx::ActiveRecord","classes/ThinkingSphinx/ActiveRecord.html#M000072","(value)","",2],["defined_indexes?","ThinkingSphinx::ActiveRecord","classes/ThinkingSphinx/ActiveRecord.html#M000071","()","",2],["delete_from_core","ThinkingSphinx::Deltas::DefaultDelta","classes/ThinkingSphinx/Deltas/DefaultDelta.html#M000247","(model, instance)","",2],["delete_in_index","ThinkingSphinx::ActiveRecord::ClassMethods","classes/ThinkingSphinx/ActiveRecord/ClassMethods.html#M000095","(index, document_id)","",2],["delta?","ThinkingSphinx::Index","classes/ThinkingSphinx/Index.html#M000331","()","",2],["delta?","ThinkingSphinx::Source","classes/ThinkingSphinx/Source.html#M000500","()","",2],["delta_index_names","ThinkingSphinx::ActiveRecord::ClassMethods","classes/ThinkingSphinx/ActiveRecord/ClassMethods.html#M000088","()","",2],["delta_indexed_by_sphinx?","ThinkingSphinx::ActiveRecord::ClassMethods","classes/ThinkingSphinx/ActiveRecord/ClassMethods.html#M000084","()","",2],["delta_name","ThinkingSphinx::Index","classes/ThinkingSphinx/Index.html#M000320","()","",2],["delta_objects","ThinkingSphinx::ActiveRecord::Delta","classes/ThinkingSphinx/ActiveRecord/Delta.html#M000031","()","",2],["deltas_enabled=","ThinkingSphinx","classes/ThinkingSphinx.html#M000536","(value)","Enable/disable delta indexing. ThinkingSphinx.deltas_enabled = false ",2],["deltas_enabled?","ThinkingSphinx","classes/ThinkingSphinx.html#M000535","()","Check if delta indexing is enabled/disabled. ",2],["deltas_suspended=","ThinkingSphinx","classes/ThinkingSphinx.html#M000538","(value)","Suspend/resume delta indexing. ThinkingSphinx.deltas_suspended = false ",2],["deltas_suspended?","ThinkingSphinx","classes/ThinkingSphinx.html#M000537","()","Check if delta indexing is suspended. ",2],["depolymorphic_reflection","ThinkingSphinx::Association","classes/ThinkingSphinx/Association.html#M000149","(reflection, source_class, poly_class)","",2],["detect","ThinkingSphinx::AbstractAdapter","classes/ThinkingSphinx/AbstractAdapter.html#M000078","(model)","",2],["detect","ThinkingSphinx::AutoVersion","classes/ThinkingSphinx/AutoVersion.html#M000158","()","",2],["downcase","ThinkingSphinx::AbstractAdapter","classes/ThinkingSphinx/AbstractAdapter.html#M000093","(clause)","",2],["each_with_attribute","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000491","(attribute, &block)","",2],["each_with_group_and_count","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000408","(&block)","Alias for #each_with_groupby_and_count",2],["each_with_groupby_and_count","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000407","(&block)","",2],["each_with_match","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000410","(&block)","",2],["each_with_weighting","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000409","(&block)","",2],["eldest_indexed_ancestor","ThinkingSphinx::ActiveRecord::ClassMethods","classes/ThinkingSphinx/ActiveRecord/ClassMethods.html#M000101","()","",2],["end_association_for_mva","ThinkingSphinx::Attribute","classes/ThinkingSphinx/Attribute.html#M000184","()","",2],["enforce_common_attribute_types","ThinkingSphinx::Configuration","classes/ThinkingSphinx/Configuration.html#M000245","()","",2],["environment","ThinkingSphinx::Configuration","classes/ThinkingSphinx/Configuration.html#M000212","()","",2],["environment","ThinkingSphinx::Configuration","classes/ThinkingSphinx/Configuration.html#M000210","()","",2],["error","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000380","()","The Sphinx-reported error, if any. @return [String, nil] ",2],["error?","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000379","()","Indication of whether the request resulted in an error from Sphinx. @return [Boolean] true if Sphinx",2],["excerpt_for","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000411","(string, model = nil)","",2],["execute","ThinkingSphinx::PostgreSQLAdapter","classes/ThinkingSphinx/PostgreSQLAdapter.html#M000140","(command, output_error = false)","",2],["execute_command","ThinkingSphinx::PostgreSQLAdapter","classes/ThinkingSphinx/PostgreSQLAdapter.html#M000145","(command, output_error = false)","",2],["facet","ThinkingSphinx::Index::Builder","classes/ThinkingSphinx/Index/Builder.html#M000306","(*args)","",2],["facet_by_alias","ThinkingSphinx::Source::InternalProperties","classes/ThinkingSphinx/Source/InternalProperties.html#M000448","(name)","",2],["facet_classes","ThinkingSphinx::FacetSearch","classes/ThinkingSphinx/FacetSearch.html#M000276","()","",2],["facet_from_name","ThinkingSphinx::FacetSearch","classes/ThinkingSphinx/FacetSearch.html#M000291","(name)","",2],["facet_from_object","ThinkingSphinx::FacetSearch","classes/ThinkingSphinx/FacetSearch.html#M000287","(object, name)","",2],["facet_names","ThinkingSphinx::FacetSearch","classes/ThinkingSphinx/FacetSearch.html#M000270","()","",2],["facet_names_common_to_all_classes","ThinkingSphinx::FacetSearch","classes/ThinkingSphinx/FacetSearch.html#M000279","()","",2],["facet_names_for_all_classes","ThinkingSphinx::FacetSearch","classes/ThinkingSphinx/FacetSearch.html#M000278","()","",2],["facet_search_options","ThinkingSphinx::FacetSearch","classes/ThinkingSphinx/FacetSearch.html#M000275","(facet_name)","",2],["facets","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000417","(*args)","",2],["facets","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000369","(*args)","Deprecated. Use ThinkingSphinx.facets ",2],["facets","ThinkingSphinx::SearchMethods::ClassMethods","classes/ThinkingSphinx/SearchMethods/ClassMethods.html#M000425","(*args)","Model.facets *args ThinkingSphinx.facets *args ThinkingSphinx.facets *args, :all_facets  => true ThinkingSphinx.facets",2],["field_names","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000455","()","",2],["fields","ThinkingSphinx::Index","classes/ThinkingSphinx/Index.html#M000317","()","",2],["file?","ThinkingSphinx::Field","classes/ThinkingSphinx/Field.html#M000288","()","",2],["filter_value","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000467","(value)","When passed a Time instance, returns the integer timestamp. ",2],["filters","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000463","()","",2],["first_page?","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000389","()","",2],["float?","ThinkingSphinx::Facet","classes/ThinkingSphinx/Facet.html#M000264","()","",2],["for","ThinkingSphinx::FacetSearch","classes/ThinkingSphinx/FacetSearch.html#M000267","(hash = {})","",2],["foreign_key_for_mva","ThinkingSphinx::Attribute","classes/ThinkingSphinx/Attribute.html#M000183","(assoc)","",2],["foreign_type","ThinkingSphinx::Association","classes/ThinkingSphinx/Association.html#M000154","(ref)","",2],["freeze","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000376","()","",2],["generate","ThinkingSphinx::Configuration","classes/ThinkingSphinx/Configuration.html#M000213","()","",2],["generate","ThinkingSphinx::Index::Builder","classes/ThinkingSphinx/Index/Builder.html#M000293","(model, name = nil, &block)","",2],["get_default_sphinx_scope","ThinkingSphinx::ActiveRecord::Scopes::ClassMethods","classes/ThinkingSphinx/ActiveRecord/Scopes/ClassMethods.html#M000053","()","Returns the default_sphinx_scope or nil if none is set. ",2],["group_by","ThinkingSphinx::Index::Builder","classes/ThinkingSphinx/Index/Builder.html#M000309","(*args)","Use this method to add some manual SQL strings to the GROUP BY clause. You can pass in as many strings",2],["group_by","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000459","()","",2],["group_concatenate","ThinkingSphinx::MysqlAdapter","classes/ThinkingSphinx/MysqlAdapter.html#M000108","(clause, separator = ' ')","",2],["group_concatenate","ThinkingSphinx::PostgreSQLAdapter","classes/ThinkingSphinx/PostgreSQLAdapter.html#M000125","(clause, separator = ' ')","",2],["group_function","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000460","()","",2],["has","ThinkingSphinx::Index::Builder","classes/ThinkingSphinx/Index/Builder.html#M000305","(*args)","This is the method to add attributes to your index (hence why it is aliased as 'attribute'). The syntax",2],["has_column?","ThinkingSphinx::Association","classes/ThinkingSphinx/Association.html#M000143","(column)","",2],["has_default_sphinx_scope?","ThinkingSphinx::ActiveRecord::Scopes::ClassMethods","classes/ThinkingSphinx/ActiveRecord/Scopes/ClassMethods.html#M000054","()","Returns true if the current Model has a default_sphinx_scope. Also checks if the default_sphinx_scope",2],["has_sphinx_indexes?","ThinkingSphinx::ActiveRecord::ClassMethods","classes/ThinkingSphinx/ActiveRecord/ClassMethods.html#M000082","()","",2],["include_as_association?","ThinkingSphinx::Attribute","classes/ThinkingSphinx/Attribute.html#M000162","()","",2],["include_for_class","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000482","(klass)","",2],["include_from_array","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000484","(array, klass)","",2],["include_from_hash","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000485","(hash, klass)","",2],["included","ThinkingSphinx::ActiveRecord","classes/ThinkingSphinx/ActiveRecord.html#M000056","(base)","",2],["included","ThinkingSphinx::ActiveRecord::AttributeUpdates","classes/ThinkingSphinx/ActiveRecord/AttributeUpdates.html#M000018","(base)","",2],["included","ThinkingSphinx::ActiveRecord::CollectionProxyWithScopes","classes/ThinkingSphinx/ActiveRecord/CollectionProxyWithScopes.html#M000026","(base)","",2],["included","ThinkingSphinx::ActiveRecord::Delta","classes/ThinkingSphinx/ActiveRecord/Delta.html#M000029","(base)","Code for after_commit callback is written by Eli Miller: http://elimiller.blogspot.com/2007/06/proper-cache-expiry-with-aftercommit.html",2],["included","ThinkingSphinx::ActiveRecord::Scopes","classes/ThinkingSphinx/ActiveRecord/Scopes.html#M000051","(base)","",2],["included","ThinkingSphinx::SearchMethods","classes/ThinkingSphinx/SearchMethods.html#M000383","(base)","",2],["index","ThinkingSphinx::Deltas::DefaultDelta","classes/ThinkingSphinx/Deltas/DefaultDelta.html#M000239","(model, instance = nil)","",2],["index","ThinkingSphinx::Test","classes/ThinkingSphinx/Test.html#M000524","(*indexes)","",2],["index_delta","ThinkingSphinx::ActiveRecord::Delta","classes/ThinkingSphinx/ActiveRecord/Delta.html#M000034","()","Build the delta index for the related model. This won't be called if running in the test environment.",2],["index_delta","ThinkingSphinx::ActiveRecord::Delta","classes/ThinkingSphinx/ActiveRecord/Delta.html#M000030","(instance = nil)","Build the delta index for the related model. This won't be called if running in the test environment.",2],["index_option","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000476","(key)","",2],["index_weights","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000457","()","Turn :index_weights => { \"foo\" => 2, User => 1 } into :index_weights => { \"foo\" => 2, \"user_core\" =>",2],["indexed_by_sphinx?","ThinkingSphinx::ActiveRecord::ClassMethods","classes/ThinkingSphinx/ActiveRecord/ClassMethods.html#M000083","()","",2],["indexed_data_changed?","ThinkingSphinx::ActiveRecord::Delta","classes/ThinkingSphinx/ActiveRecord/Delta.html#M000038","()","",2],["indexer_binary_name","ThinkingSphinx::Configuration","classes/ThinkingSphinx/Configuration.html#M000232","()","",2],["indexer_binary_name=","ThinkingSphinx::Configuration","classes/ThinkingSphinx/Configuration.html#M000233","(name)","",2],["indexes","ThinkingSphinx::Index::Builder","classes/ThinkingSphinx/Index/Builder.html#M000304","(*args)","This is how you add fields - the strings Sphinx looks at - to your index. Technically, to use this method,",2],["indexes","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000406","()","",2],["infix_fields","ThinkingSphinx::Index","classes/ThinkingSphinx/Index.html#M000327","()","",2],["init","ThinkingSphinx::Test","classes/ThinkingSphinx/Test.html#M000515","(suppress_delta_output = true)","",2],["initial_joins","ThinkingSphinx::Source","classes/ThinkingSphinx/Source.html#M000513","()","",2],["initial_model_directories","ThinkingSphinx::Configuration","classes/ThinkingSphinx/Configuration.html#M000250","()","",2],["insensitive?","ThinkingSphinx::Attribute","classes/ThinkingSphinx/Attribute.html#M000199","()","",2],["insert_sphinx_index","ThinkingSphinx::ActiveRecord::ClassMethods","classes/ThinkingSphinx/ActiveRecord/ClassMethods.html#M000081","(index)","",2],["instances_from_class","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000486","(klass, matches)","",2],["instances_from_matches","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000487","()","Group results by class and call #find(:all) once for each group to reduce the number of #find's in multi-model",2],["integer_type_from_db","ThinkingSphinx::Attribute","classes/ThinkingSphinx/Attribute.html#M000195","()","",2],["internal_class_column","ThinkingSphinx::Source::SQL","classes/ThinkingSphinx/Source/SQL.html#M000478","()","",2],["internal_filters","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000461","()","",2],["is_many?","ThinkingSphinx::Association","classes/ThinkingSphinx/Association.html#M000141","()","Returns true if the association - or a parent - is a has_many or has_and_belongs_to_many. ",2],["is_many?","ThinkingSphinx::Property","classes/ThinkingSphinx/Property.html#M000353","()","Could there be more than one value related to the parent record? If so, then this will return true. If",2],["is_many_datetimes?","ThinkingSphinx::Attribute","classes/ThinkingSphinx/Attribute.html#M000191","()","",2],["is_many_ints?","ThinkingSphinx::Attribute","classes/ThinkingSphinx/Attribute.html#M000190","()","",2],["is_many_strings?","ThinkingSphinx::Attribute","classes/ThinkingSphinx/Attribute.html#M000192","()","",2],["is_scope?","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000492","(method)","",2],["is_string?","ThinkingSphinx::Index::FauxColumn","classes/ThinkingSphinx/Index/FauxColumn.html#M000301","()","Returns true if the stack is empty *and* if the name is a string - which is an indication that of raw",2],["is_string?","ThinkingSphinx::Property","classes/ThinkingSphinx/Property.html#M000354","()","Returns true if any of the columns are string values, instead of database column references. ",2],["join","ThinkingSphinx::Index::Builder","classes/ThinkingSphinx/Index/Builder.html#M000307","(*args)","",2],["join_association_class","ThinkingSphinx::Association","classes/ThinkingSphinx/Association.html#M000152","()","",2],["join_dependency_class","ThinkingSphinx::Source","classes/ThinkingSphinx/Source.html#M000512","()","",2],["join_parent","ThinkingSphinx::Association","classes/ThinkingSphinx/Association.html#M000153","(join)","",2],["join_to","ThinkingSphinx::Association","classes/ThinkingSphinx/Association.html#M000133","(base_join)","Link up the join for this model from a base join - and set parent associations' joins recursively. ",2],["jruby?","ThinkingSphinx","classes/ThinkingSphinx.html#M000552","()","",2],["last_page?","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000393","()","",2],["latitude_attr","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000470","()","",2],["limit_value","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000396","()","Alias for #per_page",2],["live_value","ThinkingSphinx::Attribute","classes/ThinkingSphinx/Attribute.html#M000171","(instance)","",2],["load_files","Cucumber::ThinkingSphinx::InternalWorld","classes/Cucumber/ThinkingSphinx/InternalWorld.html#M000013","(path)","",2],["load_models","ThinkingSphinx::Context","classes/ThinkingSphinx/Context.html#M000209","()","Make sure all models are loaded - without reloading any that ActiveRecord::Base is already aware of (otherwise",2],["local_options","ThinkingSphinx::Index","classes/ThinkingSphinx/Index.html#M000328","()","",2],["local_sphinx_indexes","ThinkingSphinx::ActiveRecord::ClassMethods","classes/ThinkingSphinx/ActiveRecord/ClassMethods.html#M000099","()","",2],["log","Cucumber::ThinkingSphinx::SqlLogger","classes/Cucumber/ThinkingSphinx/SqlLogger.html#M000010","(sql, name = 'SQL', binds = [])","",2],["log","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000435","(message, &block)","",2],["log","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000436","(query, &block)","",2],["log_process_action","ThinkingSphinx::ActionController::ClassMethods","classes/ThinkingSphinx/ActionController/ClassMethods.html#M000017","(payload)","",2],["logger","ThinkingSphinx::ActiveRecord::LogSubscriber","classes/ThinkingSphinx/ActiveRecord/LogSubscriber.html#M000049","()","",2],["logger=","ThinkingSphinx::ActiveRecord::LogSubscriber","classes/ThinkingSphinx/ActiveRecord/LogSubscriber.html#M000050","(logger)","",2],["longitude_attr","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000475","()","",2],["make_temporary_directory","Cucumber::ThinkingSphinx::InternalWorld","classes/Cucumber/ThinkingSphinx/InternalWorld.html#M000005","()","",2],["match_hash","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000434","(object)","",2],["match_mode","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000452","()","",2],["matching_fields","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000372","(fields, bitmask)","",2],["max_matches","ThinkingSphinx::FacetSearch","classes/ThinkingSphinx/FacetSearch.html#M000282","()","",2],["merge_search","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000495","(search, args, options)","",2],["message","ThinkingSphinx::ActiveRecord::LogSubscriber","classes/ThinkingSphinx/ActiveRecord/LogSubscriber.html#M000047","(event)","",2],["method_missing","ThinkingSphinx::ActiveRecord::HasManyAssociationWithScopes","classes/ThinkingSphinx/ActiveRecord/HasManyAssociationWithScopes.html#M000042","(method, *args, &block)","",2],["method_missing","ThinkingSphinx::Excerpter","classes/ThinkingSphinx/Excerpter.html#M000254","(method, *args, &block)","",2],["method_missing","ThinkingSphinx::Index::Builder","classes/ThinkingSphinx/Index/Builder.html#M000312","(method, *args)","Handles the generation of new columns for the field and attribute definitions. ",2],["method_missing","ThinkingSphinx::Index::FauxColumn","classes/ThinkingSphinx/Index/FauxColumn.html#M000303","(method, *args)","This handles any 'invalid' method calls and sets them as the name, and pushing the previous name into",2],["method_missing","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000386","(method, *args, &block)","",2],["method_missing_with_sphinx_scopes","ThinkingSphinx::ActiveRecord::CollectionProxyWithScopes","classes/ThinkingSphinx/ActiveRecord/CollectionProxyWithScopes.html#M000027","(method, *args, &block)","",2],["microsoft?","ThinkingSphinx","classes/ThinkingSphinx.html#M000551","()","",2],["models_by_crc","ThinkingSphinx::Configuration","classes/ThinkingSphinx/Configuration.html#M000235","()","",2],["multiple_associations?","ThinkingSphinx::Property","classes/ThinkingSphinx/Property.html#M000360","()","Checks whether any column requires multiple associations (which only happens for polymorphic situations).",2],["mutex","ThinkingSphinx","classes/ThinkingSphinx.html#M000529","()","",2],["mysql?","ThinkingSphinx","classes/ThinkingSphinx.html#M000553","()","",2],["name","ThinkingSphinx::ClassFacet","classes/ThinkingSphinx/ClassFacet.html#M000187","()","",2],["name","ThinkingSphinx::Facet","classes/ThinkingSphinx/Facet.html#M000260","()","",2],["name","ThinkingSphinx::Source","classes/ThinkingSphinx/Source.html#M000496","()","",2],["name_for","ThinkingSphinx::Facet","classes/ThinkingSphinx/Facet.html#M000256","(facet)","",2],["name_for","ThinkingSphinx::Index","classes/ThinkingSphinx/Index.html#M000322","(model)","",2],["new","Cucumber::ThinkingSphinx::ExternalWorld","classes/Cucumber/ThinkingSphinx/ExternalWorld.html#M000000","(suppress_delta_output = true)","",2],["new","Cucumber::ThinkingSphinx::InternalWorld","classes/Cucumber/ThinkingSphinx/InternalWorld.html#M000001","()","",2],["new","ThinkingSphinx::AbstractAdapter","classes/ThinkingSphinx/AbstractAdapter.html#M000076","(model)","",2],["new","ThinkingSphinx::ActiveRecord::LogSubscriber","classes/ThinkingSphinx/ActiveRecord/LogSubscriber.html#M000045","()","",2],["new","ThinkingSphinx::Association","classes/ThinkingSphinx/Association.html#M000121","(parent, reflection)","Create a new association by passing in the parent association, and the corresponding reflection instance.",2],["new","ThinkingSphinx::Attribute","classes/ThinkingSphinx/Attribute.html#M000159","(source, columns, options = {})","To create a new attribute, you'll need to pass in either a single Column or an array of them, and some",2],["new","ThinkingSphinx::BundledSearch","classes/ThinkingSphinx/BundledSearch.html#M000166","()","",2],["new","ThinkingSphinx::Configuration","classes/ThinkingSphinx/Configuration.html#M000203","(app_root = Dir.pwd)","Load in the configuration settings - this will look for config/sphinx.yml and parse it according to the",2],["new","ThinkingSphinx::Context","classes/ThinkingSphinx/Context.html#M000200","(*models)","",2],["new","ThinkingSphinx::Deltas::DefaultDelta","classes/ThinkingSphinx/Deltas/DefaultDelta.html#M000238","(index, options)","",2],["new","ThinkingSphinx::Excerpter","classes/ThinkingSphinx/Excerpter.html#M000253","(search, instance)","",2],["new","ThinkingSphinx::Facet","classes/ThinkingSphinx/Facet.html#M000255","(property, value_source = nil)","",2],["new","ThinkingSphinx::FacetSearch","classes/ThinkingSphinx/FacetSearch.html#M000266","(*args)","",2],["new","ThinkingSphinx::Field","classes/ThinkingSphinx/Field.html#M000283","(source, columns, options = {})","To create a new field, you'll need to pass in either a single Column or an array of them, and some (optional)",2],["new","ThinkingSphinx::Index","classes/ThinkingSphinx/Index.html#M000313","(model, &block)","Create a new index instance by passing in the model it is tied to, and a block to build it with (optional",2],["new","ThinkingSphinx::Index::Builder","classes/ThinkingSphinx/Index/Builder.html#M000296","(index, &block)","",2],["new","ThinkingSphinx::Index::FauxColumn","classes/ThinkingSphinx/Index/FauxColumn.html#M000294","(*stack)","Create a new column with a pre-defined stack. The top element in the stack will get shifted to be the",2],["new","ThinkingSphinx::Join","classes/ThinkingSphinx/Join.html#M000343","(source, column)","",2],["new","ThinkingSphinx::Property","classes/ThinkingSphinx/Property.html#M000345","(source, columns, options = {})","",2],["new","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000373","(*args)","",2],["new","ThinkingSphinx::Source","classes/ThinkingSphinx/Source.html#M000488","(index, options = {})","",2],["new","ThinkingSphinx::SphinxError","classes/ThinkingSphinx/SphinxError.html#M000528","(message = nil, results = nil)","",2],["new","ThinkingSphinx::StaleIdsException","classes/ThinkingSphinx/StaleIdsException.html#M000527","(ids)","",2],["next_page","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000391","()","The next page number of the result set. If there are no more pages available, nil is returned. @return",2],["next_page?","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000392","()","",2],["no_fields?","ThinkingSphinx::Index::Builder","classes/ThinkingSphinx/Index/Builder.html#M000335","()","",2],["num_pages","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000400","()","Alias for #total_pages",2],["odd?","ThinkingSphinx::ActiveRecord::LogSubscriber","classes/ThinkingSphinx/ActiveRecord/LogSubscriber.html#M000048","()","",2],["offset","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000404","()","The current page's offset, based on the number of records per page. Or explicit :offset if given. @return",2],["offset_value","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000405","()","Alias for #offset",2],["one_class","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000441","()","",2],["options","ThinkingSphinx::Index","classes/ThinkingSphinx/Index.html#M000329","()","",2],["page","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000390","(page_number)","Kaminari support ",2],["page_count","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000399","()","Alias for #total_pages",2],["parse","ThinkingSphinx::Deltas","classes/ThinkingSphinx/Deltas.html#M000251","(index)","",2],["parse_config","ThinkingSphinx::Configuration","classes/ThinkingSphinx/Configuration.html#M000237","()","Parse the config/sphinx.yml file - if it exists - then use the attribute accessors to set the appropriate",2],["per","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000397","(limit)","Kaminari support ",2],["per_page","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000395","()","The amount of records per set of paged results. Defaults to 20 unless a specific page size is requested.",2],["pid_active?","ThinkingSphinx","classes/ThinkingSphinx.html#M000550","(pid)","",2],["pid_file","ThinkingSphinx::Configuration","classes/ThinkingSphinx/Configuration.html#M000219","()","",2],["pid_file=","ThinkingSphinx::Configuration","classes/ThinkingSphinx/Configuration.html#M000220","(pid_file)","",2],["polymorphic_classes","ThinkingSphinx::Association","classes/ThinkingSphinx/Association.html#M000150","(ref)","Returns all the objects that could be currently instantiated from a polymorphic association. This is",2],["populate","ThinkingSphinx::BundledSearch","classes/ThinkingSphinx/BundledSearch.html#M000176","()","",2],["populate","ThinkingSphinx::FacetSearch","classes/ThinkingSphinx/FacetSearch.html#M000274","()","",2],["populate","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000424","()","",2],["populate_from_queue","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000422","(results)","",2],["populated?","ThinkingSphinx::BundledSearch","classes/ThinkingSphinx/BundledSearch.html#M000175","()","",2],["populated?","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000378","()","Indication of whether the request has been made to Sphinx for the search query. @return [Boolean] true",2],["port","ThinkingSphinx::Configuration","classes/ThinkingSphinx/Configuration.html#M000217","()","",2],["port=","ThinkingSphinx::Configuration","classes/ThinkingSphinx/Configuration.html#M000218","(port)","",2],["prefix_fields","ThinkingSphinx::Index","classes/ThinkingSphinx/Index.html#M000326","()","",2],["prepare","ThinkingSphinx::Context","classes/ThinkingSphinx/Context.html#M000201","()","",2],["prepare","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000437","(client)","",2],["prepare_data","Cucumber::ThinkingSphinx::InternalWorld","classes/Cucumber/ThinkingSphinx/InternalWorld.html#M000012","()","",2],["previous_page","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000394","()","The previous page number of the result set. If this is the first page, then nil is returned. @return",2],["primary_key_for_mva","ThinkingSphinx::Attribute","classes/ThinkingSphinx/Attribute.html#M000182","(assoc)","",2],["primary_key_for_sphinx","ThinkingSphinx::ActiveRecord","classes/ThinkingSphinx/ActiveRecord.html#M000060","()","",2],["primary_key_for_sphinx","ThinkingSphinx::ActiveRecord","classes/ThinkingSphinx/ActiveRecord.html#M000103","()","Returns the unique integer id for the object. This method uses the attribute hash to get around ActiveRecord",2],["primary_key_from_reflection","ThinkingSphinx::Association","classes/ThinkingSphinx/Association.html#M000144","()","",2],["public?","ThinkingSphinx::Property","classes/ThinkingSphinx/Property.html#M000351","()","",2],["query","ThinkingSphinx::ActiveRecord::LogSubscriber","classes/ThinkingSphinx/ActiveRecord/LogSubscriber.html#M000046","(event)","",2],["query","ThinkingSphinx::Attribute","classes/ThinkingSphinx/Attribute.html#M000178","(offset)","",2],["query","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000442","()","",2],["query_clause","ThinkingSphinx::Attribute","classes/ThinkingSphinx/Attribute.html#M000179","()","",2],["query_delta","ThinkingSphinx::Attribute","classes/ThinkingSphinx/Attribute.html#M000180","()","",2],["query_log_file","ThinkingSphinx::Configuration","classes/ThinkingSphinx/Configuration.html#M000223","()","",2],["query_log_file=","ThinkingSphinx::Configuration","classes/ThinkingSphinx/Configuration.html#M000224","(file)","",2],["query_time","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000401","()","Query time taken @return [Integer] ",2],["quote_column","ThinkingSphinx::Property","classes/ThinkingSphinx/Property.html#M000357","(column)","",2],["quote_column","ThinkingSphinx::Source::SQL","classes/ThinkingSphinx/Source/SQL.html#M000473","(column)","",2],["quote_table_name","ThinkingSphinx::Property","classes/ThinkingSphinx/Property.html#M000358","(table_name)","",2],["quote_with_table","ThinkingSphinx::AbstractAdapter","classes/ThinkingSphinx/AbstractAdapter.html#M000091","(column)","",2],["quote_with_table","ThinkingSphinx::Property","classes/ThinkingSphinx/Property.html#M000356","(table, column)","",2],["quoted_alias","ThinkingSphinx::Association","classes/ThinkingSphinx/Association.html#M000157","(join)","",2],["rails_3_1?","ThinkingSphinx","classes/ThinkingSphinx.html#M000554","()","",2],["rails_3_1?","ThinkingSphinx::Source","classes/ThinkingSphinx/Source.html#M000514","()","",2],["rake","Object","classes/Object.html#M000252","(*tasks)","",2],["range_query","ThinkingSphinx::Attribute","classes/ThinkingSphinx/Attribute.html#M000181","()","",2],["remote_sphinx=","ThinkingSphinx","classes/ThinkingSphinx.html#M000546","(value)","Tells Thinking Sphinx that Sphinx is running on a different machine, and thus it can't reliably guess",2],["remote_sphinx?","ThinkingSphinx","classes/ThinkingSphinx.html#M000545","()","An indication of whether Sphinx is running on a remote machine instead of the same machine. ",2],["remove_sphinx_scopes","ThinkingSphinx::ActiveRecord::Scopes::ClassMethods","classes/ThinkingSphinx/ActiveRecord/Scopes/ClassMethods.html#M000058","()","",2],["reset","ThinkingSphinx::Configuration","classes/ThinkingSphinx/Configuration.html#M000205","(custom_app_root=nil)","",2],["reset_context!","ThinkingSphinx","classes/ThinkingSphinx.html#M000531","(context = nil)","",2],["reset_environment","ThinkingSphinx::Configuration","classes/ThinkingSphinx/Configuration.html#M000211","()","",2],["reset_query","ThinkingSphinx::Deltas::DefaultDelta","classes/ThinkingSphinx/Deltas/DefaultDelta.html#M000242","(model)","",2],["reset_runtime","ThinkingSphinx::ActiveRecord::LogSubscriber","classes/ThinkingSphinx/ActiveRecord/LogSubscriber.html#M000044","()","",2],["reset_use_group_by_shortcut","ThinkingSphinx","classes/ThinkingSphinx.html#M000544","()","",2],["respond_to?","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000387","(method, include_private = false)","Returns true if the Search object or the underlying Array object respond to the requested method. @param",2],["respond_to_with_sphinx_scopes?","ThinkingSphinx::ActiveRecord::CollectionProxyWithScopes","classes/ThinkingSphinx/ActiveRecord/CollectionProxyWithScopes.html#M000028","(method)","",2],["responds_to_scope","ThinkingSphinx::ActiveRecord::HasManyAssociationWithScopes","classes/ThinkingSphinx/ActiveRecord/HasManyAssociationWithScopes.html#M000043","(scope)","",2],["results","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000385","()","The query result hash from Riddle. @return [Hash] Raw Sphinx results ",2],["retry_on_stale_index","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000438","(&block)","",2],["rewrite_condition","ThinkingSphinx::Association","classes/ThinkingSphinx/Association.html#M000156","(condition)","",2],["rewrite_conditions","ThinkingSphinx::Association","classes/ThinkingSphinx/Association.html#M000155","()","",2],["run","ThinkingSphinx::Test","classes/ThinkingSphinx/Test.html#M000522","(&block)","",2],["runtime","ThinkingSphinx::ActiveRecord::LogSubscriber","classes/ThinkingSphinx/ActiveRecord/LogSubscriber.html#M000041","()","",2],["runtime=","ThinkingSphinx::ActiveRecord::LogSubscriber","classes/ThinkingSphinx/ActiveRecord/LogSubscriber.html#M000040","(value)","",2],["sanitize_sql","ThinkingSphinx::Index::Builder","classes/ThinkingSphinx/Index/Builder.html#M000315","(*args)","Use this method to generate SQL for your attributes, conditions, etc. You can pass in as whatever ActiveRecord::Base.sanitize_sql",2],["scoped_count","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000499","()","",2],["search","ThinkingSphinx::ActiveRecord::CollectionProxy","classes/ThinkingSphinx/ActiveRecord/CollectionProxy.html#M000023","(*args)","",2],["search","ThinkingSphinx::ActiveRecord::HasManyAssociation","classes/ThinkingSphinx/ActiveRecord/HasManyAssociation.html#M000035","(*args)","",2],["search","ThinkingSphinx::BundledSearch","classes/ThinkingSphinx/BundledSearch.html#M000167","(*args)","",2],["search","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000413","(*args)","",2],["search","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000365","(*args)","Deprecated. Use ThinkingSphinx.search ",2],["search","ThinkingSphinx::SearchMethods::ClassMethods","classes/ThinkingSphinx/SearchMethods/ClassMethods.html#M000412","(*args)","Searches through the Sphinx indexes for relevant matches. There's various ways to search, sort, group",2],["search_context","ThinkingSphinx::SearchMethods::ClassMethods","classes/ThinkingSphinx/SearchMethods/ClassMethods.html#M000384","()","",2],["search_count","ThinkingSphinx::SearchMethods::ClassMethods","classes/ThinkingSphinx/SearchMethods/ClassMethods.html#M000421","(*args)","",2],["search_for_id","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000367","(*args)","Deprecated. Use ThinkingSphinx.search_for_ids ",2],["search_for_id","ThinkingSphinx::SearchMethods::ClassMethods","classes/ThinkingSphinx/SearchMethods/ClassMethods.html#M000416","(id, index, options = {})","Checks if a document with the given id exists within a specific index. Expected parameters: - ID of the",2],["search_for_ids","ThinkingSphinx::BundledSearch","classes/ThinkingSphinx/BundledSearch.html#M000168","(*args)","",2],["search_for_ids","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000366","(*args)","Deprecated. Use ThinkingSphinx.search_for_ids ",2],["search_for_ids","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000414","(*args)","",2],["search_for_ids","ThinkingSphinx::SearchMethods::ClassMethods","classes/ThinkingSphinx/SearchMethods/ClassMethods.html#M000415","(*args)","Searches for results that match the parameters provided. Will only return the ids for the matching objects.",2],["search_options","ThinkingSphinx::SearchMethods::ClassMethods","classes/ThinkingSphinx/SearchMethods/ClassMethods.html#M000426","(args, options = {})","",2],["searchd_binary_name","ThinkingSphinx::Configuration","classes/ThinkingSphinx/Configuration.html#M000229","()","",2],["searchd_binary_name=","ThinkingSphinx::Configuration","classes/ThinkingSphinx/Configuration.html#M000231","(name)","",2],["searchd_log_file","ThinkingSphinx::Configuration","classes/ThinkingSphinx/Configuration.html#M000221","()","",2],["searchd_log_file=","ThinkingSphinx::Configuration","classes/ThinkingSphinx/Configuration.html#M000222","(file)","",2],["searches","ThinkingSphinx::BundledSearch","classes/ThinkingSphinx/BundledSearch.html#M000169","()","",2],["set_configuration_options_for_indexes","ThinkingSphinx::Index","classes/ThinkingSphinx/Index.html#M000341","(index)","",2],["set_default_options","ThinkingSphinx::FacetSearch","classes/ThinkingSphinx/FacetSearch.html#M000271","()","",2],["set_field_settings_for_indexes","ThinkingSphinx::Index","classes/ThinkingSphinx/Index.html#M000342","(index)","",2],["set_flags","ThinkingSphinx::Test","classes/ThinkingSphinx/Test.html#M000525","(suppress_delta_output)","",2],["set_properties","ThinkingSphinx::Index::Builder","classes/ThinkingSphinx/Index/Builder.html#M000311","(*args)","Alias for #set_property",2],["set_property","ThinkingSphinx::Index::Builder","classes/ThinkingSphinx/Index/Builder.html#M000310","(*args)","This is what to use to set properties on the index. Chief amongst those is the delta property - to allow",2],["set_single_property","ThinkingSphinx::Index::Builder","classes/ThinkingSphinx/Index/Builder.html#M000323","(key, value)","",2],["set_source_attributes","ThinkingSphinx::Source","classes/ThinkingSphinx/Source.html#M000507","(source, offset, delta = false)","",2],["set_source_database_settings","ThinkingSphinx::Source","classes/ThinkingSphinx/Source.html#M000505","(source)","",2],["set_source_fields","ThinkingSphinx::Source","classes/ThinkingSphinx/Source.html#M000506","(source)","",2],["set_source_settings","ThinkingSphinx::Source","classes/ThinkingSphinx/Source.html#M000509","(source)","",2],["set_source_sql","ThinkingSphinx::Source","classes/ThinkingSphinx/Source.html#M000508","(source, offset, delta = false)","",2],["set_sphinx_primary_key","ThinkingSphinx::ActiveRecord","classes/ThinkingSphinx/ActiveRecord.html#M000059","(attribute)","",2],["set_sphinx_setting","ThinkingSphinx::Configuration","classes/ThinkingSphinx/Configuration.html#M000244","(object, key, value, allowed = {})","",2],["setup","Cucumber::ThinkingSphinx::InternalWorld","classes/Cucumber/ThinkingSphinx/InternalWorld.html#M000002","()","",2],["setup","ThinkingSphinx::AbstractAdapter","classes/ThinkingSphinx/AbstractAdapter.html#M000077","()","",2],["setup","ThinkingSphinx::MysqlAdapter","classes/ThinkingSphinx/MysqlAdapter.html#M000105","()","",2],["setup","ThinkingSphinx::PostgreSQLAdapter","classes/ThinkingSphinx/PostgreSQLAdapter.html#M000122","()","",2],["setup_sphinx","Cucumber::ThinkingSphinx::InternalWorld","classes/Cucumber/ThinkingSphinx/InternalWorld.html#M000014","()","",2],["should_toggle_delta?","ThinkingSphinx::ActiveRecord::Delta","classes/ThinkingSphinx/ActiveRecord/Delta.html#M000037","()","",2],["shuffled_addresses","ThinkingSphinx::Configuration","classes/ThinkingSphinx/Configuration.html#M000249","()","",2],["single_class_results","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000489","()","",2],["sort_by","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000454","()","",2],["sort_mode","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000453","()","",2],["sorted_fields_to_attributes","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000456","(order_string)","",2],["source","ThinkingSphinx::Index::Builder","classes/ThinkingSphinx/Index/Builder.html#M000316","()","",2],["source_objects","ThinkingSphinx::Facet","classes/ThinkingSphinx/Facet.html#M000272","(object)","",2],["source_of_sphinx_index","ThinkingSphinx::ActiveRecord::ClassMethods","classes/ThinkingSphinx/ActiveRecord/ClassMethods.html#M000090","()","",2],["source_value","ThinkingSphinx::Attribute","classes/ThinkingSphinx/Attribute.html#M000177","(offset, delta)","",2],["sphinx_database_adapter","ThinkingSphinx::ActiveRecord","classes/ThinkingSphinx/ActiveRecord.html#M000068","()","",2],["sphinx_delta?","ThinkingSphinx::ActiveRecord","classes/ThinkingSphinx/ActiveRecord.html#M000073","()","",2],["sphinx_document_id","ThinkingSphinx::ActiveRecord","classes/ThinkingSphinx/ActiveRecord.html#M000104","()","",2],["sphinx_identifier","ThinkingSphinx::MysqlAdapter","classes/ThinkingSphinx/MysqlAdapter.html#M000106","()","",2],["sphinx_identifier","ThinkingSphinx::PostgreSQLAdapter","classes/ThinkingSphinx/PostgreSQLAdapter.html#M000123","()","",2],["sphinx_index_name","ThinkingSphinx::ActiveRecord","classes/ThinkingSphinx/ActiveRecord.html#M000111","(suffix)","",2],["sphinx_index_names","ThinkingSphinx::ActiveRecord::ClassMethods","classes/ThinkingSphinx/ActiveRecord/ClassMethods.html#M000086","()","",2],["sphinx_index_options","ThinkingSphinx::ActiveRecord","classes/ThinkingSphinx/ActiveRecord.html#M000065","()","",2],["sphinx_name","ThinkingSphinx::ActiveRecord","classes/ThinkingSphinx/ActiveRecord.html#M000070","()","",2],["sphinx_offset","ThinkingSphinx::ActiveRecord::ClassMethods","classes/ThinkingSphinx/ActiveRecord/ClassMethods.html#M000097","()","",2],["sphinx_pid","Object","classes/Object.html#M000520","()","",2],["sphinx_pid","ThinkingSphinx","classes/ThinkingSphinx.html#M000549","()","",2],["sphinx_running?","Object","classes/Object.html#M000521","()","",2],["sphinx_running?","ThinkingSphinx","classes/ThinkingSphinx.html#M000547","()","Check if Sphinx is running. If remote_sphinx is set to true (indicating Sphinx is on a different machine),",2],["sphinx_running_by_pid?","ThinkingSphinx","classes/ThinkingSphinx.html#M000548","()","Check if Sphinx is actually running, provided the pid is on the same machine as this code. ",2],["sphinx_scope","ThinkingSphinx::ActiveRecord::Scopes::ClassMethods","classes/ThinkingSphinx/ActiveRecord/Scopes/ClassMethods.html#M000055","(method, &block)","Similar to ActiveRecord's named_scope method Thinking Sphinx supports scopes. For example: sphinx_scope(:latest_first)",2],["sphinx_scopes","ThinkingSphinx::ActiveRecord::Scopes::ClassMethods","classes/ThinkingSphinx/ActiveRecord/Scopes/ClassMethods.html#M000057","()","This returns an Array of all defined scopes. The default scope shows as :default. ",2],["sphinx_scopes_support_classes","ThinkingSphinx::ActiveRecord::Scopes::ClassMethods","classes/ThinkingSphinx/ActiveRecord/Scopes/ClassMethods.html#M000063","()","",2],["sphinx_scopes_support_mixin","ThinkingSphinx::ActiveRecord::Scopes::ClassMethods","classes/ThinkingSphinx/ActiveRecord/Scopes/ClassMethods.html#M000069","()","",2],["sphinx_value","ThinkingSphinx::Attribute","classes/ThinkingSphinx/Attribute.html#M000198","(value)","",2],["sql_group_clause","ThinkingSphinx::Source::SQL","classes/ThinkingSphinx/Source/SQL.html#M000469","()","",2],["sql_query_pre_for_core","ThinkingSphinx::Source::SQL","classes/ThinkingSphinx/Source/SQL.html#M000471","()","",2],["sql_query_pre_for_delta","ThinkingSphinx::Index","classes/ThinkingSphinx/Index.html#M000336","()","",2],["sql_query_pre_for_delta","ThinkingSphinx::Source::SQL","classes/ThinkingSphinx/Source/SQL.html#M000472","()","",2],["sql_select_clause","ThinkingSphinx::Source::SQL","classes/ThinkingSphinx/Source/SQL.html#M000465","(offset)","",2],["sql_where_clause","ThinkingSphinx::Source::SQL","classes/ThinkingSphinx/Source/SQL.html#M000466","(options)","",2],["stale_retries","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000481","()","",2],["standard_adapter_for_model","ThinkingSphinx::AbstractAdapter","classes/ThinkingSphinx/AbstractAdapter.html#M000085","(model)","",2],["star_query","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000446","(query)","",2],["start","ThinkingSphinx::Test","classes/ThinkingSphinx/Test.html#M000516","()","",2],["start_with_autostop","ThinkingSphinx::Test","classes/ThinkingSphinx/Test.html#M000517","()","",2],["stop","ThinkingSphinx::Test","classes/ThinkingSphinx/Test.html#M000518","()","",2],["subclasses_to_s","ThinkingSphinx::Source::InternalProperties","classes/ThinkingSphinx/Source/InternalProperties.html#M000449","()","",2],["superclass_indexed_models","ThinkingSphinx::Context","classes/ThinkingSphinx/Context.html#M000207","()","",2],["suppress_delta_output=","ThinkingSphinx","classes/ThinkingSphinx.html#M000542","(value)","",2],["suppress_delta_output?","ThinkingSphinx","classes/ThinkingSphinx.html#M000541","()","",2],["suspended_delta","ThinkingSphinx::ActiveRecord::ClassMethods","classes/ThinkingSphinx/ActiveRecord/ClassMethods.html#M000098","(reindex_after = true, &block)","Temporarily disable delta indexing inside a block, then perform a single rebuild of index at the end.",2],["table","ThinkingSphinx::Association","classes/ThinkingSphinx/Association.html#M000147","()","",2],["time_difference","ThinkingSphinx::MysqlAdapter","classes/ThinkingSphinx/MysqlAdapter.html#M000119","(diff)","",2],["time_difference","ThinkingSphinx::PostgreSQLAdapter","classes/ThinkingSphinx/PostgreSQLAdapter.html#M000138","(diff)","",2],["to_a","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000374","()","",2],["to_ary","ThinkingSphinx::Index::FauxColumn","classes/ThinkingSphinx/Index/FauxColumn.html#M000302","()","",2],["to_crc32","ThinkingSphinx::ActiveRecord","classes/ThinkingSphinx/ActiveRecord.html#M000066","()","Generate a unique CRC value for the model's name, to use to determine which Sphinx documents belong to",2],["to_crc32","ThinkingSphinx::Core::String","classes/ThinkingSphinx/Core/String.html#M000230","()","",2],["to_crc32s","ThinkingSphinx::ActiveRecord","classes/ThinkingSphinx/ActiveRecord.html#M000067","()","",2],["to_facet","ThinkingSphinx::Property","classes/ThinkingSphinx/Property.html#M000347","()","",2],["to_group_sql","ThinkingSphinx::Property","classes/ThinkingSphinx/Property.html#M000348","()","Get the part of the GROUP BY clause related to this attribute - if one is needed. If not, all you'll",2],["to_riddle","ThinkingSphinx::ActiveRecord::ClassMethods","classes/ThinkingSphinx/ActiveRecord/ClassMethods.html#M000089","()","",2],["to_riddle","ThinkingSphinx::Index","classes/ThinkingSphinx/Index.html#M000332","(offset)","",2],["to_riddle_for_core","ThinkingSphinx::Index","classes/ThinkingSphinx/Index.html#M000338","(offset)","",2],["to_riddle_for_core","ThinkingSphinx::Source","classes/ThinkingSphinx/Source.html#M000497","(offset, position)","",2],["to_riddle_for_delta","ThinkingSphinx::Index","classes/ThinkingSphinx/Index.html#M000339","(offset)","",2],["to_riddle_for_delta","ThinkingSphinx::Source","classes/ThinkingSphinx/Source.html#M000498","(offset, position)","",2],["to_riddle_for_distributed","ThinkingSphinx::Index","classes/ThinkingSphinx/Index.html#M000340","()","",2],["to_s","ThinkingSphinx::Facet","classes/ThinkingSphinx/Facet.html#M000268","()","",2],["to_select_sql","ThinkingSphinx::Attribute","classes/ThinkingSphinx/Attribute.html#M000160","()","Get the part of the SELECT clause related to this attribute. Don't forget to set your model and associations",2],["to_select_sql","ThinkingSphinx::Field","classes/ThinkingSphinx/Field.html#M000286","()","Get the part of the SELECT clause related to this field. Don't forget to set your model and associations",2],["to_sql","ThinkingSphinx::Source::SQL","classes/ThinkingSphinx/Source/SQL.html#M000458","(options={})","Generates the big SQL statement to get the data back for all the fields and attributes, using all the",2],["to_sql_query_info","ThinkingSphinx::Source::SQL","classes/ThinkingSphinx/Source/SQL.html#M000464","(offset)","Simple helper method for the query info SQL - which is a statement that returns the single row for a",2],["to_sql_query_range","ThinkingSphinx::Source::SQL","classes/ThinkingSphinx/Source/SQL.html#M000462","(options={})","Simple helper method for the query range SQL - which is a statement that returns minimum and maximum",2],["toggle","ThinkingSphinx::Deltas::DefaultDelta","classes/ThinkingSphinx/Deltas/DefaultDelta.html#M000240","(instance)","",2],["toggle_deleted","ThinkingSphinx::ActiveRecord","classes/ThinkingSphinx/ActiveRecord.html#M000102","()","",2],["toggle_delta","ThinkingSphinx::ActiveRecord::Delta","classes/ThinkingSphinx/ActiveRecord/Delta.html#M000033","()","Set the delta value for the model to be true. ",2],["toggled","ThinkingSphinx::Deltas::DefaultDelta","classes/ThinkingSphinx/Deltas/DefaultDelta.html#M000241","(instance)","",2],["toggled_delta?","ThinkingSphinx::ActiveRecord::Delta","classes/ThinkingSphinx/ActiveRecord/Delta.html#M000032","()","",2],["total_count","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000403","()","Alias for #total_entries",2],["total_entries","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000402","()","The total number of search results available. @return [Integer] ",2],["total_pages","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000398","()","The total number of pages available if the results are paginated. @return [Integer] ",2],["touch_reindex_file","ThinkingSphinx::Configuration","classes/ThinkingSphinx/Configuration.html#M000236","(output)","",2],["translate","ThinkingSphinx::Facet","classes/ThinkingSphinx/Facet.html#M000269","(object, attribute_value)","",2],["translate?","ThinkingSphinx::Facet","classes/ThinkingSphinx/Facet.html#M000262","()","",2],["translate?","ThinkingSphinx::Facet","classes/ThinkingSphinx/Facet.html#M000259","(property)","",2],["translate?","ThinkingSphinx::FacetSearch","classes/ThinkingSphinx/FacetSearch.html#M000280","(name)","",2],["translated_type_from_database","ThinkingSphinx::Attribute","classes/ThinkingSphinx/Attribute.html#M000193","()","",2],["type","ThinkingSphinx::Attribute","classes/ThinkingSphinx/Attribute.html#M000164","()","Returns the type of the column. If that's not already set, it returns :multi if there's the possibility",2],["type","ThinkingSphinx::Facet","classes/ThinkingSphinx/Facet.html#M000263","()","",2],["type_from_database","ThinkingSphinx::Attribute","classes/ThinkingSphinx/Attribute.html#M000194","()","",2],["type_to_config","ThinkingSphinx::Attribute","classes/ThinkingSphinx/Attribute.html#M000161","()","",2],["type_values","ThinkingSphinx::Source::SQL","classes/ThinkingSphinx/Source/SQL.html#M000479","()","",2],["types_to_crcs","ThinkingSphinx::Source::SQL","classes/ThinkingSphinx/Source/SQL.html#M000483","()","",2],["underlying_value","ThinkingSphinx::FacetSearch","classes/ThinkingSphinx/FacetSearch.html#M000285","(key, value)","",2],["unique_id_expression","ThinkingSphinx","classes/ThinkingSphinx.html#M000532","(adapter, offset = nil)","",2],["unique_name","ThinkingSphinx::Property","classes/ThinkingSphinx/Property.html#M000346","()","Returns the unique name of the attribute - which is either the alias of the attribute, or the name of",2],["updatable?","ThinkingSphinx::Attribute","classes/ThinkingSphinx/Attribute.html#M000165","()","",2],["updatable_attributes","ThinkingSphinx::ActiveRecord::AttributeUpdates","classes/ThinkingSphinx/ActiveRecord/AttributeUpdates.html#M000020","(index)","",2],["update_attribute_values","ThinkingSphinx::ActiveRecord::AttributeUpdates","classes/ThinkingSphinx/ActiveRecord/AttributeUpdates.html#M000019","()","",2],["update_delta_indexes","ThinkingSphinx::Deltas::DefaultDelta","classes/ThinkingSphinx/Deltas/DefaultDelta.html#M000246","(model)","",2],["update_index","ThinkingSphinx::ActiveRecord::AttributeUpdates","classes/ThinkingSphinx/ActiveRecord/AttributeUpdates.html#M000022","(index_name, attribute_names, attribute_values)","",2],["updates_enabled=","ThinkingSphinx","classes/ThinkingSphinx.html#M000540","(value)","Enable/disable updates to Sphinx ThinkingSphinx.updates_enabled = false ",2],["updates_enabled?","ThinkingSphinx","classes/ThinkingSphinx.html#M000539","()","Check if updates are enabled. True by default, unless within the test environment. ",2],["use_group_by_shortcut?","ThinkingSphinx","classes/ThinkingSphinx.html#M000543","()","Checks to see if MySQL will allow simplistic GROUP BY statements. If not, or if not using MySQL, this",2],["utc_query_pre","ThinkingSphinx::MysqlAdapter","classes/ThinkingSphinx/MysqlAdapter.html#M000120","()","",2],["utc_query_pre","ThinkingSphinx::PostgreSQLAdapter","classes/ThinkingSphinx/PostgreSQLAdapter.html#M000139","()","",2],["utf8?","ThinkingSphinx::Index","classes/ThinkingSphinx/Index.html#M000334","()","",2],["utf8?","ThinkingSphinx::Source","classes/ThinkingSphinx/Source.html#M000511","()","",2],["utf8_query_pre","ThinkingSphinx::MysqlAdapter","classes/ThinkingSphinx/MysqlAdapter.html#M000118","()","",2],["utf8_query_pre","ThinkingSphinx::PostgreSQLAdapter","classes/ThinkingSphinx/PostgreSQLAdapter.html#M000137","()","",2],["value","ThinkingSphinx::ClassFacet","classes/ThinkingSphinx/ClassFacet.html#M000189","(object, attribute_hash)","",2],["value","ThinkingSphinx::Facet","classes/ThinkingSphinx/Facet.html#M000265","(object, attribute_hash)","",2],["warn","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000370","(message)","",2],["warning","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000382","()","The Sphinx-reported warning, if any. @return [String, nil] ",2],["warning?","ThinkingSphinx::Search","classes/ThinkingSphinx/Search.html#M000381","()","Indication of whether the request resulted in a warning from Sphinx. @return [Boolean] true if Sphinx",2],["where","ThinkingSphinx::Index::Builder","classes/ThinkingSphinx/Index/Builder.html#M000308","(*args)","Use this method to add some manual SQL conditions for your index request. You can pass in as many strings",2],["with_attribute?","ThinkingSphinx::Field","classes/ThinkingSphinx/Field.html#M000289","()","",2],["with_wordcount?","ThinkingSphinx::Field","classes/ThinkingSphinx/Field.html#M000290","()","",2],["yaml_database_settings","Cucumber::ThinkingSphinx::InternalWorld","classes/Cucumber/ThinkingSphinx/InternalWorld.html#M000008","()","",2],["HISTORY","files/HISTORY.html","files/HISTORY.html","","2.0.11 - January 2nd 2011 * Call #all on search results to force population of results, matching ActiveRecord::Relation#all",3],["README.textile","files/README_textile.html","files/README_textile.html","","h1. Thinking Sphinx  Please note: this is the branch for Rails 3. At some point in the near future, it",3],["external_world.rb","files/lib/cucumber/thinking_sphinx/external_world_rb.html","files/lib/cucumber/thinking_sphinx/external_world_rb.html","","",3],["internal_world.rb","files/lib/cucumber/thinking_sphinx/internal_world_rb.html","files/lib/cucumber/thinking_sphinx/internal_world_rb.html","","",3],["sql_logger.rb","files/lib/cucumber/thinking_sphinx/sql_logger_rb.html","files/lib/cucumber/thinking_sphinx/sql_logger_rb.html","","",3],["thinking-sphinx.rb","files/lib/thinking-sphinx_rb.html","files/lib/thinking-sphinx_rb.html","","",3],["thinking_sphinx.rb","files/lib/thinking_sphinx_rb.html","files/lib/thinking_sphinx_rb.html","","",3],["action_controller.rb","files/lib/thinking_sphinx/action_controller_rb.html","files/lib/thinking_sphinx/action_controller_rb.html","","",3],["active_record.rb","files/lib/thinking_sphinx/active_record_rb.html","files/lib/thinking_sphinx/active_record_rb.html","","",3],["attribute_updates.rb","files/lib/thinking_sphinx/active_record/attribute_updates_rb.html","files/lib/thinking_sphinx/active_record/attribute_updates_rb.html","","",3],["collection_proxy.rb","files/lib/thinking_sphinx/active_record/collection_proxy_rb.html","files/lib/thinking_sphinx/active_record/collection_proxy_rb.html","","",3],["collection_proxy_with_scopes.rb","files/lib/thinking_sphinx/active_record/collection_proxy_with_scopes_rb.html","files/lib/thinking_sphinx/active_record/collection_proxy_with_scopes_rb.html","","",3],["delta.rb","files/lib/thinking_sphinx/active_record/delta_rb.html","files/lib/thinking_sphinx/active_record/delta_rb.html","","",3],["has_many_association.rb","files/lib/thinking_sphinx/active_record/has_many_association_rb.html","files/lib/thinking_sphinx/active_record/has_many_association_rb.html","","",3],["has_many_association_with_scopes.rb","files/lib/thinking_sphinx/active_record/has_many_association_with_scopes_rb.html","files/lib/thinking_sphinx/active_record/has_many_association_with_scopes_rb.html","","",3],["log_subscriber.rb","files/lib/thinking_sphinx/active_record/log_subscriber_rb.html","files/lib/thinking_sphinx/active_record/log_subscriber_rb.html","","",3],["scopes.rb","files/lib/thinking_sphinx/active_record/scopes_rb.html","files/lib/thinking_sphinx/active_record/scopes_rb.html","","",3],["abstract_adapter.rb","files/lib/thinking_sphinx/adapters/abstract_adapter_rb.html","files/lib/thinking_sphinx/adapters/abstract_adapter_rb.html","","",3],["mysql_adapter.rb","files/lib/thinking_sphinx/adapters/mysql_adapter_rb.html","files/lib/thinking_sphinx/adapters/mysql_adapter_rb.html","","",3],["postgresql_adapter.rb","files/lib/thinking_sphinx/adapters/postgresql_adapter_rb.html","files/lib/thinking_sphinx/adapters/postgresql_adapter_rb.html","","",3],["association.rb","files/lib/thinking_sphinx/association_rb.html","files/lib/thinking_sphinx/association_rb.html","","",3],["attribute.rb","files/lib/thinking_sphinx/attribute_rb.html","files/lib/thinking_sphinx/attribute_rb.html","","",3],["auto_version.rb","files/lib/thinking_sphinx/auto_version_rb.html","files/lib/thinking_sphinx/auto_version_rb.html","","",3],["bundled_search.rb","files/lib/thinking_sphinx/bundled_search_rb.html","files/lib/thinking_sphinx/bundled_search_rb.html","","",3],["class_facet.rb","files/lib/thinking_sphinx/class_facet_rb.html","files/lib/thinking_sphinx/class_facet_rb.html","","",3],["configuration.rb","files/lib/thinking_sphinx/configuration_rb.html","files/lib/thinking_sphinx/configuration_rb.html","","",3],["context.rb","files/lib/thinking_sphinx/context_rb.html","files/lib/thinking_sphinx/context_rb.html","","",3],["string.rb","files/lib/thinking_sphinx/core/string_rb.html","files/lib/thinking_sphinx/core/string_rb.html","","",3],["deltas.rb","files/lib/thinking_sphinx/deltas_rb.html","files/lib/thinking_sphinx/deltas_rb.html","","",3],["default_delta.rb","files/lib/thinking_sphinx/deltas/default_delta_rb.html","files/lib/thinking_sphinx/deltas/default_delta_rb.html","","",3],["capistrano.rb","files/lib/thinking_sphinx/deploy/capistrano_rb.html","files/lib/thinking_sphinx/deploy/capistrano_rb.html","","",3],["excerpter.rb","files/lib/thinking_sphinx/excerpter_rb.html","files/lib/thinking_sphinx/excerpter_rb.html","","",3],["facet.rb","files/lib/thinking_sphinx/facet_rb.html","files/lib/thinking_sphinx/facet_rb.html","","",3],["facet_search.rb","files/lib/thinking_sphinx/facet_search_rb.html","files/lib/thinking_sphinx/facet_search_rb.html","","",3],["field.rb","files/lib/thinking_sphinx/field_rb.html","files/lib/thinking_sphinx/field_rb.html","","",3],["index.rb","files/lib/thinking_sphinx/index_rb.html","files/lib/thinking_sphinx/index_rb.html","","",3],["builder.rb","files/lib/thinking_sphinx/index/builder_rb.html","files/lib/thinking_sphinx/index/builder_rb.html","","",3],["faux_column.rb","files/lib/thinking_sphinx/index/faux_column_rb.html","files/lib/thinking_sphinx/index/faux_column_rb.html","","",3],["join.rb","files/lib/thinking_sphinx/join_rb.html","files/lib/thinking_sphinx/join_rb.html","","",3],["property.rb","files/lib/thinking_sphinx/property_rb.html","files/lib/thinking_sphinx/property_rb.html","","",3],["railtie.rb","files/lib/thinking_sphinx/railtie_rb.html","files/lib/thinking_sphinx/railtie_rb.html","","",3],["search.rb","files/lib/thinking_sphinx/search_rb.html","files/lib/thinking_sphinx/search_rb.html","","encoding: UTF-8 ",3],["search_methods.rb","files/lib/thinking_sphinx/search_methods_rb.html","files/lib/thinking_sphinx/search_methods_rb.html","","",3],["sinatra.rb","files/lib/thinking_sphinx/sinatra_rb.html","files/lib/thinking_sphinx/sinatra_rb.html","","",3],["source.rb","files/lib/thinking_sphinx/source_rb.html","files/lib/thinking_sphinx/source_rb.html","","",3],["internal_properties.rb","files/lib/thinking_sphinx/source/internal_properties_rb.html","files/lib/thinking_sphinx/source/internal_properties_rb.html","","",3],["sql.rb","files/lib/thinking_sphinx/source/sql_rb.html","files/lib/thinking_sphinx/source/sql_rb.html","","",3],["tasks.rb","files/lib/thinking_sphinx/tasks_rb.html","files/lib/thinking_sphinx/tasks_rb.html","","",3],["test.rb","files/lib/thinking_sphinx/test_rb.html","files/lib/thinking_sphinx/test_rb.html","","",3],["version.rb","files/lib/thinking_sphinx/version_rb.html","files/lib/thinking_sphinx/version_rb.html","","",3]],"searchIndex":["cucumber","thinkingsphinx","externalworld","internalworld","sqllogger","object","string","thinkingsphinx","abstractadapter","actioncontroller","classmethods","activerecord","attributeupdates","classmethods","collectionproxy","collectionproxywithscopes","delta","hasmanyassociation","hasmanyassociationwithscopes","logsubscriber","scopes","classmethods","association","attribute","autoversion","bundledsearch","classfacet","configuration","connectionerror","context","core","string","deltas","defaultdelta","excerpter","facet","facetsearch","field","index","builder","fauxcolumn","join","mysqladapter","postgresqladapter","property","railtie","search","searchmethods","classmethods","source","internalproperties","sql","sphinxerror","staleidsexception","test","__name()","__path()","__stack()","adapter()","adapter()","adapter()","adapter()","adapter_for_model()","add_default_scope()","add_excerpter()","add_facet_attribute()","add_from_results()","add_indexed_model()","add_indexed_models()","add_internal_attribute()","add_internal_attribute()","add_internal_attributes_and_facets()","add_internal_facet()","add_matching_fields()","add_scope()","add_sort_attribute()","add_sphinx_attributes()","add_sphinx_callbacks_and_extend()","add_sphinx_index()","add_sphinx_scopes_support_to_has_many_associations()","address()","address=()","admin?()","all()","all_associations()","all_datetimes?()","all_facets()","all_ints?()","all_names()","all_of_type?()","all_strings?()","ancestors()","anchor()","append_info_to_payload()","append_to()","arel_join()","as_json()","assoc()","association()","association_joins()","association_stack()","association_stack()","attribute()","attribute_by_alias()","attribute_for_foreign_key()","attribute_for_foreign_key()","attribute_name()","attribute_name()","attribute_name_for()","attribute_name_from_value()","attribute_values_for_index()","attributes()","attributes()","autostop()","available?()","available_attributes()","base_association_for_mva()","bigint_pattern()","bin_path()","bin_path=()","boolean()","boolean()","build()","bundle_searches()","case()","cast_to_datetime()","cast_to_datetime()","cast_to_int()","cast_to_int()","cast_to_string()","cast_to_string()","cast_to_unsigned()","cast_to_unsigned()","casted_options()","changed?()","children()","children()","class_facet()","class_from_crc()","classes()","classes_option()","clause()","cleanup_view_runtime()","clear_primary_key_for_sphinx()","client()","client()","client()","coerce()","column()","column_available?()","column_from_db()","column_with_prefix()","columns_with_prefixes()","comment()","compose_ids_results()","compose_only_results()","compose_results()","concat_ws?()","concatenate()","concatenate()","conditions_as_query()","config()","config()","config()","config()","config()","config_file()","config_file=()","config_value()","configure()","configure_active_record()","configure_cleanup()","configure_database()","configure_thinking_sphinx()","connection()","context()","convert_nulls()","convert_nulls()","core_index_names()","core_name()","count()","count()","crc()","crc()","crc_attribute()","crc_column()","create_array_accum_function()","create_crc32_function()","create_indexes_folder()","current_page()","custom_primary_key_for_sphinx?()","database_settings()","default_filter()","default_filter()","default_sphinx_scope()","default_star_token()","define_index()","define_indexes()","define_indexes()","define_indexes()","define_indexes=()","define_indexes?()","define_source()","defined_indexes=()","defined_indexes?()","delete_from_core()","delete_in_index()","delta?()","delta?()","delta_index_names()","delta_indexed_by_sphinx?()","delta_name()","delta_objects()","deltas_enabled=()","deltas_enabled?()","deltas_suspended=()","deltas_suspended?()","depolymorphic_reflection()","detect()","detect()","downcase()","each_with_attribute()","each_with_group_and_count()","each_with_groupby_and_count()","each_with_match()","each_with_weighting()","eldest_indexed_ancestor()","end_association_for_mva()","enforce_common_attribute_types()","environment()","environment()","error()","error?()","excerpt_for()","execute()","execute_command()","facet()","facet_by_alias()","facet_classes()","facet_from_name()","facet_from_object()","facet_names()","facet_names_common_to_all_classes()","facet_names_for_all_classes()","facet_search_options()","facets()","facets()","facets()","field_names()","fields()","file?()","filter_value()","filters()","first_page?()","float?()","for()","foreign_key_for_mva()","foreign_type()","freeze()","generate()","generate()","get_default_sphinx_scope()","group_by()","group_by()","group_concatenate()","group_concatenate()","group_function()","has()","has_column?()","has_default_sphinx_scope?()","has_sphinx_indexes?()","include_as_association?()","include_for_class()","include_from_array()","include_from_hash()","included()","included()","included()","included()","included()","included()","index()","index()","index_delta()","index_delta()","index_option()","index_weights()","indexed_by_sphinx?()","indexed_data_changed?()","indexer_binary_name()","indexer_binary_name=()","indexes()","indexes()","infix_fields()","init()","initial_joins()","initial_model_directories()","insensitive?()","insert_sphinx_index()","instances_from_class()","instances_from_matches()","integer_type_from_db()","internal_class_column()","internal_filters()","is_many?()","is_many?()","is_many_datetimes?()","is_many_ints?()","is_many_strings?()","is_scope?()","is_string?()","is_string?()","join()","join_association_class()","join_dependency_class()","join_parent()","join_to()","jruby?()","last_page?()","latitude_attr()","limit_value()","live_value()","load_files()","load_models()","local_options()","local_sphinx_indexes()","log()","log()","log()","log_process_action()","logger()","logger=()","longitude_attr()","make_temporary_directory()","match_hash()","match_mode()","matching_fields()","max_matches()","merge_search()","message()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing_with_sphinx_scopes()","microsoft?()","models_by_crc()","multiple_associations?()","mutex()","mysql?()","name()","name()","name()","name_for()","name_for()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","next_page()","next_page?()","no_fields?()","num_pages()","odd?()","offset()","offset_value()","one_class()","options()","page()","page_count()","parse()","parse_config()","per()","per_page()","pid_active?()","pid_file()","pid_file=()","polymorphic_classes()","populate()","populate()","populate()","populate_from_queue()","populated?()","populated?()","port()","port=()","prefix_fields()","prepare()","prepare()","prepare_data()","previous_page()","primary_key_for_mva()","primary_key_for_sphinx()","primary_key_for_sphinx()","primary_key_from_reflection()","public?()","query()","query()","query()","query_clause()","query_delta()","query_log_file()","query_log_file=()","query_time()","quote_column()","quote_column()","quote_table_name()","quote_with_table()","quote_with_table()","quoted_alias()","rails_3_1?()","rails_3_1?()","rake()","range_query()","remote_sphinx=()","remote_sphinx?()","remove_sphinx_scopes()","reset()","reset_context!()","reset_environment()","reset_query()","reset_runtime()","reset_use_group_by_shortcut()","respond_to?()","respond_to_with_sphinx_scopes?()","responds_to_scope()","results()","retry_on_stale_index()","rewrite_condition()","rewrite_conditions()","run()","runtime()","runtime=()","sanitize_sql()","scoped_count()","search()","search()","search()","search()","search()","search()","search_context()","search_count()","search_for_id()","search_for_id()","search_for_ids()","search_for_ids()","search_for_ids()","search_for_ids()","search_options()","searchd_binary_name()","searchd_binary_name=()","searchd_log_file()","searchd_log_file=()","searches()","set_configuration_options_for_indexes()","set_default_options()","set_field_settings_for_indexes()","set_flags()","set_properties()","set_property()","set_single_property()","set_source_attributes()","set_source_database_settings()","set_source_fields()","set_source_settings()","set_source_sql()","set_sphinx_primary_key()","set_sphinx_setting()","setup()","setup()","setup()","setup()","setup_sphinx()","should_toggle_delta?()","shuffled_addresses()","single_class_results()","sort_by()","sort_mode()","sorted_fields_to_attributes()","source()","source_objects()","source_of_sphinx_index()","source_value()","sphinx_database_adapter()","sphinx_delta?()","sphinx_document_id()","sphinx_identifier()","sphinx_identifier()","sphinx_index_name()","sphinx_index_names()","sphinx_index_options()","sphinx_name()","sphinx_offset()","sphinx_pid()","sphinx_pid()","sphinx_running?()","sphinx_running?()","sphinx_running_by_pid?()","sphinx_scope()","sphinx_scopes()","sphinx_scopes_support_classes()","sphinx_scopes_support_mixin()","sphinx_value()","sql_group_clause()","sql_query_pre_for_core()","sql_query_pre_for_delta()","sql_query_pre_for_delta()","sql_select_clause()","sql_where_clause()","stale_retries()","standard_adapter_for_model()","star_query()","start()","start_with_autostop()","stop()","subclasses_to_s()","superclass_indexed_models()","suppress_delta_output=()","suppress_delta_output?()","suspended_delta()","table()","time_difference()","time_difference()","to_a()","to_ary()","to_crc32()","to_crc32()","to_crc32s()","to_facet()","to_group_sql()","to_riddle()","to_riddle()","to_riddle_for_core()","to_riddle_for_core()","to_riddle_for_delta()","to_riddle_for_delta()","to_riddle_for_distributed()","to_s()","to_select_sql()","to_select_sql()","to_sql()","to_sql_query_info()","to_sql_query_range()","toggle()","toggle_deleted()","toggle_delta()","toggled()","toggled_delta?()","total_count()","total_entries()","total_pages()","touch_reindex_file()","translate()","translate?()","translate?()","translate?()","translated_type_from_database()","type()","type()","type_from_database()","type_to_config()","type_values()","types_to_crcs()","underlying_value()","unique_id_expression()","unique_name()","updatable?()","updatable_attributes()","update_attribute_values()","update_delta_indexes()","update_index()","updates_enabled=()","updates_enabled?()","use_group_by_shortcut?()","utc_query_pre()","utc_query_pre()","utf8?()","utf8?()","utf8_query_pre()","utf8_query_pre()","value()","value()","warn()","warning()","warning?()","where()","with_attribute?()","with_wordcount?()","yaml_database_settings()","history","readme.textile","external_world.rb","internal_world.rb","sql_logger.rb","thinking-sphinx.rb","thinking_sphinx.rb","action_controller.rb","active_record.rb","attribute_updates.rb","collection_proxy.rb","collection_proxy_with_scopes.rb","delta.rb","has_many_association.rb","has_many_association_with_scopes.rb","log_subscriber.rb","scopes.rb","abstract_adapter.rb","mysql_adapter.rb","postgresql_adapter.rb","association.rb","attribute.rb","auto_version.rb","bundled_search.rb","class_facet.rb","configuration.rb","context.rb","string.rb","deltas.rb","default_delta.rb","capistrano.rb","excerpter.rb","facet.rb","facet_search.rb","field.rb","index.rb","builder.rb","faux_column.rb","join.rb","property.rb","railtie.rb","search.rb","search_methods.rb","sinatra.rb","source.rb","internal_properties.rb","sql.rb","tasks.rb","test.rb","version.rb"],"longSearchIndex":["lib/cucumber/thinking_sphinx/sql_logger.rb","cucumber","cucumber::thinkingsphinx","cucumber::thinkingsphinx","cucumber::thinkingsphinx","lib/thinking_sphinx/deploy/capistrano.rb","lib/thinking_sphinx/core/string.rb","lib/thinking_sphinx.rb","thinkingsphinx","thinkingsphinx","thinkingsphinx::actioncontroller","thinkingsphinx","thinkingsphinx::activerecord","thinkingsphinx::activerecord","thinkingsphinx::activerecord","thinkingsphinx::activerecord","thinkingsphinx::activerecord","thinkingsphinx::activerecord","thinkingsphinx::activerecord","thinkingsphinx::activerecord","thinkingsphinx::activerecord","thinkingsphinx::activerecord::scopes","thinkingsphinx","thinkingsphinx","thinkingsphinx","thinkingsphinx","thinkingsphinx","thinkingsphinx","thinkingsphinx","thinkingsphinx","thinkingsphinx","thinkingsphinx::core","thinkingsphinx","thinkingsphinx::deltas","thinkingsphinx","thinkingsphinx","thinkingsphinx","thinkingsphinx","thinkingsphinx","thinkingsphinx::index","thinkingsphinx::index","thinkingsphinx","thinkingsphinx","thinkingsphinx","thinkingsphinx","thinkingsphinx","thinkingsphinx","thinkingsphinx","thinkingsphinx::searchmethods","thinkingsphinx","thinkingsphinx::source","thinkingsphinx::source","thinkingsphinx","thinkingsphinx","thinkingsphinx","thinkingsphinx::index::fauxcolumn","thinkingsphinx::index::fauxcolumn","thinkingsphinx::index::fauxcolumn","thinkingsphinx::deltas::defaultdelta","thinkingsphinx::index","thinkingsphinx::property","thinkingsphinx::source","thinkingsphinx::abstractadapter","thinkingsphinx::search","thinkingsphinx::search","thinkingsphinx::index::builder","thinkingsphinx::facetsearch","thinkingsphinx::context","thinkingsphinx::context","thinkingsphinx::index::builder","thinkingsphinx::source::internalproperties","thinkingsphinx::source::internalproperties","thinkingsphinx::source::internalproperties","thinkingsphinx::search","thinkingsphinx::search","thinkingsphinx::index::builder","thinkingsphinx::search","thinkingsphinx::activerecord::classmethods","thinkingsphinx::activerecord::classmethods","thinkingsphinx::activerecord::scopes::classmethods","thinkingsphinx::configuration","thinkingsphinx::configuration","thinkingsphinx::property","thinkingsphinx::search","thinkingsphinx::source","thinkingsphinx::attribute","thinkingsphinx::facetsearch","thinkingsphinx::attribute","thinkingsphinx::index","thinkingsphinx::attribute","thinkingsphinx::attribute","thinkingsphinx::association","thinkingsphinx::search","thinkingsphinx::actioncontroller","thinkingsphinx::search","thinkingsphinx::association","thinkingsphinx::search","thinkingsphinx::index::builder","thinkingsphinx::source","thinkingsphinx::attribute","thinkingsphinx::join","thinkingsphinx::property","thinkingsphinx::search","thinkingsphinx::source::internalproperties","thinkingsphinx::activerecord::collectionproxy","thinkingsphinx::activerecord::hasmanyassociation","thinkingsphinx::classfacet","thinkingsphinx::facet","thinkingsphinx::facet","thinkingsphinx::facet","thinkingsphinx::activerecord::attributeupdates","thinkingsphinx::index","thinkingsphinx::search","thinkingsphinx::test","thinkingsphinx::property","thinkingsphinx::source","thinkingsphinx::attribute","thinkingsphinx::abstractadapter","thinkingsphinx::configuration","thinkingsphinx::configuration","thinkingsphinx::mysqladapter","thinkingsphinx::postgresqladapter","thinkingsphinx::configuration","thinkingsphinx::search","thinkingsphinx::abstractadapter","thinkingsphinx::mysqladapter","thinkingsphinx::postgresqladapter","thinkingsphinx::mysqladapter","thinkingsphinx::postgresqladapter","thinkingsphinx::mysqladapter","thinkingsphinx::postgresqladapter","thinkingsphinx::mysqladapter","thinkingsphinx::postgresqladapter","thinkingsphinx::association","thinkingsphinx::property","thinkingsphinx::association","thinkingsphinx::association","thinkingsphinx::facetsearch","thinkingsphinx::search","thinkingsphinx::search","thinkingsphinx::searchmethods::classmethods","thinkingsphinx::deltas::defaultdelta","thinkingsphinx::actioncontroller","thinkingsphinx::activerecord","thinkingsphinx::bundledsearch","thinkingsphinx::configuration","thinkingsphinx::search","thinkingsphinx::index::fauxcolumn","thinkingsphinx::facet","thinkingsphinx::property","thinkingsphinx::attribute","thinkingsphinx::property","thinkingsphinx::property","thinkingsphinx::search","thinkingsphinx::search","thinkingsphinx::search","thinkingsphinx::search","thinkingsphinx::property","thinkingsphinx::mysqladapter","thinkingsphinx::postgresqladapter","thinkingsphinx::search","cucumber::thinkingsphinx::internalworld","thinkingsphinx::facetsearch","thinkingsphinx::index","thinkingsphinx::search","thinkingsphinx::test","thinkingsphinx::configuration","thinkingsphinx::configuration","thinkingsphinx::attribute","thinkingsphinx::configuration","cucumber::thinkingsphinx::internalworld","cucumber::thinkingsphinx::internalworld","cucumber::thinkingsphinx::internalworld","cucumber::thinkingsphinx::internalworld","thinkingsphinx::abstractadapter","thinkingsphinx","thinkingsphinx::mysqladapter","thinkingsphinx::postgresqladapter","thinkingsphinx::activerecord::classmethods","thinkingsphinx::index","thinkingsphinx::search","thinkingsphinx::searchmethods::classmethods","thinkingsphinx::mysqladapter","thinkingsphinx::postgresqladapter","thinkingsphinx::search","thinkingsphinx::source::sql","thinkingsphinx::postgresqladapter","thinkingsphinx::postgresqladapter","thinkingsphinx::test","thinkingsphinx::search","thinkingsphinx::activerecord","cucumber::thinkingsphinx::internalworld","thinkingsphinx::activerecord::collectionproxy","thinkingsphinx::activerecord::hasmanyassociation","thinkingsphinx::activerecord::scopes::classmethods","thinkingsphinx::search","thinkingsphinx::activerecord::classmethods","thinkingsphinx::activerecord","thinkingsphinx::activerecord::classmethods","thinkingsphinx::context","thinkingsphinx","thinkingsphinx","thinkingsphinx::index::builder","thinkingsphinx::activerecord","thinkingsphinx::activerecord","thinkingsphinx::deltas::defaultdelta","thinkingsphinx::activerecord::classmethods","thinkingsphinx::index","thinkingsphinx::source","thinkingsphinx::activerecord::classmethods","thinkingsphinx::activerecord::classmethods","thinkingsphinx::index","thinkingsphinx::activerecord::delta","thinkingsphinx","thinkingsphinx","thinkingsphinx","thinkingsphinx","thinkingsphinx::association","thinkingsphinx::abstractadapter","thinkingsphinx::autoversion","thinkingsphinx::abstractadapter","thinkingsphinx::search","thinkingsphinx::search","thinkingsphinx::search","thinkingsphinx::search","thinkingsphinx::search","thinkingsphinx::activerecord::classmethods","thinkingsphinx::attribute","thinkingsphinx::configuration","thinkingsphinx::configuration","thinkingsphinx::configuration","thinkingsphinx::search","thinkingsphinx::search","thinkingsphinx::search","thinkingsphinx::postgresqladapter","thinkingsphinx::postgresqladapter","thinkingsphinx::index::builder","thinkingsphinx::source::internalproperties","thinkingsphinx::facetsearch","thinkingsphinx::facetsearch","thinkingsphinx::facetsearch","thinkingsphinx::facetsearch","thinkingsphinx::facetsearch","thinkingsphinx::facetsearch","thinkingsphinx::facetsearch","thinkingsphinx::search","thinkingsphinx::search","thinkingsphinx::searchmethods::classmethods","thinkingsphinx::search","thinkingsphinx::index","thinkingsphinx::field","thinkingsphinx::search","thinkingsphinx::search","thinkingsphinx::search","thinkingsphinx::facet","thinkingsphinx::facetsearch","thinkingsphinx::attribute","thinkingsphinx::association","thinkingsphinx::search","thinkingsphinx::configuration","thinkingsphinx::index::builder","thinkingsphinx::activerecord::scopes::classmethods","thinkingsphinx::index::builder","thinkingsphinx::search","thinkingsphinx::mysqladapter","thinkingsphinx::postgresqladapter","thinkingsphinx::search","thinkingsphinx::index::builder","thinkingsphinx::association","thinkingsphinx::activerecord::scopes::classmethods","thinkingsphinx::activerecord::classmethods","thinkingsphinx::attribute","thinkingsphinx::search","thinkingsphinx::search","thinkingsphinx::search","thinkingsphinx::activerecord","thinkingsphinx::activerecord::attributeupdates","thinkingsphinx::activerecord::collectionproxywithscopes","thinkingsphinx::activerecord::delta","thinkingsphinx::activerecord::scopes","thinkingsphinx::searchmethods","thinkingsphinx::deltas::defaultdelta","thinkingsphinx::test","thinkingsphinx::activerecord::delta","thinkingsphinx::activerecord::delta","thinkingsphinx::search","thinkingsphinx::search","thinkingsphinx::activerecord::classmethods","thinkingsphinx::activerecord::delta","thinkingsphinx::configuration","thinkingsphinx::configuration","thinkingsphinx::index::builder","thinkingsphinx::search","thinkingsphinx::index","thinkingsphinx::test","thinkingsphinx::source","thinkingsphinx::configuration","thinkingsphinx::attribute","thinkingsphinx::activerecord::classmethods","thinkingsphinx::search","thinkingsphinx::search","thinkingsphinx::attribute","thinkingsphinx::source::sql","thinkingsphinx::search","thinkingsphinx::association","thinkingsphinx::property","thinkingsphinx::attribute","thinkingsphinx::attribute","thinkingsphinx::attribute","thinkingsphinx::search","thinkingsphinx::index::fauxcolumn","thinkingsphinx::property","thinkingsphinx::index::builder","thinkingsphinx::association","thinkingsphinx::source","thinkingsphinx::association","thinkingsphinx::association","thinkingsphinx","thinkingsphinx::search","thinkingsphinx::search","thinkingsphinx::search","thinkingsphinx::attribute","cucumber::thinkingsphinx::internalworld","thinkingsphinx::context","thinkingsphinx::index","thinkingsphinx::activerecord::classmethods","cucumber::thinkingsphinx::sqllogger","thinkingsphinx::search","thinkingsphinx::search","thinkingsphinx::actioncontroller::classmethods","thinkingsphinx::activerecord::logsubscriber","thinkingsphinx::activerecord::logsubscriber","thinkingsphinx::search","cucumber::thinkingsphinx::internalworld","thinkingsphinx::search","thinkingsphinx::search","thinkingsphinx::search","thinkingsphinx::facetsearch","thinkingsphinx::search","thinkingsphinx::activerecord::logsubscriber","thinkingsphinx::activerecord::hasmanyassociationwithscopes","thinkingsphinx::excerpter","thinkingsphinx::index::builder","thinkingsphinx::index::fauxcolumn","thinkingsphinx::search","thinkingsphinx::activerecord::collectionproxywithscopes","thinkingsphinx","thinkingsphinx::configuration","thinkingsphinx::property","thinkingsphinx","thinkingsphinx","thinkingsphinx::classfacet","thinkingsphinx::facet","thinkingsphinx::source","thinkingsphinx::facet","thinkingsphinx::index","cucumber::thinkingsphinx::externalworld","cucumber::thinkingsphinx::internalworld","thinkingsphinx::abstractadapter","thinkingsphinx::activerecord::logsubscriber","thinkingsphinx::association","thinkingsphinx::attribute","thinkingsphinx::bundledsearch","thinkingsphinx::configuration","thinkingsphinx::context","thinkingsphinx::deltas::defaultdelta","thinkingsphinx::excerpter","thinkingsphinx::facet","thinkingsphinx::facetsearch","thinkingsphinx::field","thinkingsphinx::index","thinkingsphinx::index::builder","thinkingsphinx::index::fauxcolumn","thinkingsphinx::join","thinkingsphinx::property","thinkingsphinx::search","thinkingsphinx::source","thinkingsphinx::sphinxerror","thinkingsphinx::staleidsexception","thinkingsphinx::search","thinkingsphinx::search","thinkingsphinx::index::builder","thinkingsphinx::search","thinkingsphinx::activerecord::logsubscriber","thinkingsphinx::search","thinkingsphinx::search","thinkingsphinx::search","thinkingsphinx::index","thinkingsphinx::search","thinkingsphinx::search","thinkingsphinx::deltas","thinkingsphinx::configuration","thinkingsphinx::search","thinkingsphinx::search","thinkingsphinx","thinkingsphinx::configuration","thinkingsphinx::configuration","thinkingsphinx::association","thinkingsphinx::bundledsearch","thinkingsphinx::facetsearch","thinkingsphinx::search","thinkingsphinx::search","thinkingsphinx::bundledsearch","thinkingsphinx::search","thinkingsphinx::configuration","thinkingsphinx::configuration","thinkingsphinx::index","thinkingsphinx::context","thinkingsphinx::search","cucumber::thinkingsphinx::internalworld","thinkingsphinx::search","thinkingsphinx::attribute","thinkingsphinx::activerecord","thinkingsphinx::activerecord","thinkingsphinx::association","thinkingsphinx::property","thinkingsphinx::activerecord::logsubscriber","thinkingsphinx::attribute","thinkingsphinx::search","thinkingsphinx::attribute","thinkingsphinx::attribute","thinkingsphinx::configuration","thinkingsphinx::configuration","thinkingsphinx::search","thinkingsphinx::property","thinkingsphinx::source::sql","thinkingsphinx::property","thinkingsphinx::abstractadapter","thinkingsphinx::property","thinkingsphinx::association","thinkingsphinx","thinkingsphinx::source","object","thinkingsphinx::attribute","thinkingsphinx","thinkingsphinx","thinkingsphinx::activerecord::scopes::classmethods","thinkingsphinx::configuration","thinkingsphinx","thinkingsphinx::configuration","thinkingsphinx::deltas::defaultdelta","thinkingsphinx::activerecord::logsubscriber","thinkingsphinx","thinkingsphinx::search","thinkingsphinx::activerecord::collectionproxywithscopes","thinkingsphinx::activerecord::hasmanyassociationwithscopes","thinkingsphinx::search","thinkingsphinx::search","thinkingsphinx::association","thinkingsphinx::association","thinkingsphinx::test","thinkingsphinx::activerecord::logsubscriber","thinkingsphinx::activerecord::logsubscriber","thinkingsphinx::index::builder","thinkingsphinx::search","thinkingsphinx::activerecord::collectionproxy","thinkingsphinx::activerecord::hasmanyassociation","thinkingsphinx::bundledsearch","thinkingsphinx::search","thinkingsphinx::search","thinkingsphinx::searchmethods::classmethods","thinkingsphinx::searchmethods::classmethods","thinkingsphinx::searchmethods::classmethods","thinkingsphinx::search","thinkingsphinx::searchmethods::classmethods","thinkingsphinx::bundledsearch","thinkingsphinx::search","thinkingsphinx::search","thinkingsphinx::searchmethods::classmethods","thinkingsphinx::searchmethods::classmethods","thinkingsphinx::configuration","thinkingsphinx::configuration","thinkingsphinx::configuration","thinkingsphinx::configuration","thinkingsphinx::bundledsearch","thinkingsphinx::index","thinkingsphinx::facetsearch","thinkingsphinx::index","thinkingsphinx::test","thinkingsphinx::index::builder","thinkingsphinx::index::builder","thinkingsphinx::index::builder","thinkingsphinx::source","thinkingsphinx::source","thinkingsphinx::source","thinkingsphinx::source","thinkingsphinx::source","thinkingsphinx::activerecord","thinkingsphinx::configuration","cucumber::thinkingsphinx::internalworld","thinkingsphinx::abstractadapter","thinkingsphinx::mysqladapter","thinkingsphinx::postgresqladapter","cucumber::thinkingsphinx::internalworld","thinkingsphinx::activerecord::delta","thinkingsphinx::configuration","thinkingsphinx::search","thinkingsphinx::search","thinkingsphinx::search","thinkingsphinx::search","thinkingsphinx::index::builder","thinkingsphinx::facet","thinkingsphinx::activerecord::classmethods","thinkingsphinx::attribute","thinkingsphinx::activerecord","thinkingsphinx::activerecord","thinkingsphinx::activerecord","thinkingsphinx::mysqladapter","thinkingsphinx::postgresqladapter","thinkingsphinx::activerecord","thinkingsphinx::activerecord::classmethods","thinkingsphinx::activerecord","thinkingsphinx::activerecord","thinkingsphinx::activerecord::classmethods","object","thinkingsphinx","object","thinkingsphinx","thinkingsphinx","thinkingsphinx::activerecord::scopes::classmethods","thinkingsphinx::activerecord::scopes::classmethods","thinkingsphinx::activerecord::scopes::classmethods","thinkingsphinx::activerecord::scopes::classmethods","thinkingsphinx::attribute","thinkingsphinx::source::sql","thinkingsphinx::source::sql","thinkingsphinx::index","thinkingsphinx::source::sql","thinkingsphinx::source::sql","thinkingsphinx::source::sql","thinkingsphinx::search","thinkingsphinx::abstractadapter","thinkingsphinx::search","thinkingsphinx::test","thinkingsphinx::test","thinkingsphinx::test","thinkingsphinx::source::internalproperties","thinkingsphinx::context","thinkingsphinx","thinkingsphinx","thinkingsphinx::activerecord::classmethods","thinkingsphinx::association","thinkingsphinx::mysqladapter","thinkingsphinx::postgresqladapter","thinkingsphinx::search","thinkingsphinx::index::fauxcolumn","thinkingsphinx::activerecord","thinkingsphinx::core::string","thinkingsphinx::activerecord","thinkingsphinx::property","thinkingsphinx::property","thinkingsphinx::activerecord::classmethods","thinkingsphinx::index","thinkingsphinx::index","thinkingsphinx::source","thinkingsphinx::index","thinkingsphinx::source","thinkingsphinx::index","thinkingsphinx::facet","thinkingsphinx::attribute","thinkingsphinx::field","thinkingsphinx::source::sql","thinkingsphinx::source::sql","thinkingsphinx::source::sql","thinkingsphinx::deltas::defaultdelta","thinkingsphinx::activerecord","thinkingsphinx::activerecord::delta","thinkingsphinx::deltas::defaultdelta","thinkingsphinx::activerecord::delta","thinkingsphinx::search","thinkingsphinx::search","thinkingsphinx::search","thinkingsphinx::configuration","thinkingsphinx::facet","thinkingsphinx::facet","thinkingsphinx::facet","thinkingsphinx::facetsearch","thinkingsphinx::attribute","thinkingsphinx::attribute","thinkingsphinx::facet","thinkingsphinx::attribute","thinkingsphinx::attribute","thinkingsphinx::source::sql","thinkingsphinx::source::sql","thinkingsphinx::facetsearch","thinkingsphinx","thinkingsphinx::property","thinkingsphinx::attribute","thinkingsphinx::activerecord::attributeupdates","thinkingsphinx::activerecord::attributeupdates","thinkingsphinx::deltas::defaultdelta","thinkingsphinx::activerecord::attributeupdates","thinkingsphinx","thinkingsphinx","thinkingsphinx","thinkingsphinx::mysqladapter","thinkingsphinx::postgresqladapter","thinkingsphinx::index","thinkingsphinx::source","thinkingsphinx::mysqladapter","thinkingsphinx::postgresqladapter","thinkingsphinx::classfacet","thinkingsphinx::facet","thinkingsphinx::search","thinkingsphinx::search","thinkingsphinx::search","thinkingsphinx::index::builder","thinkingsphinx::field","thinkingsphinx::field","cucumber::thinkingsphinx::internalworld","files/history.html","files/readme_textile.html","files/lib/cucumber/thinking_sphinx/external_world_rb.html","files/lib/cucumber/thinking_sphinx/internal_world_rb.html","files/lib/cucumber/thinking_sphinx/sql_logger_rb.html","files/lib/thinking-sphinx_rb.html","files/lib/thinking_sphinx_rb.html","files/lib/thinking_sphinx/action_controller_rb.html","files/lib/thinking_sphinx/active_record_rb.html","files/lib/thinking_sphinx/active_record/attribute_updates_rb.html","files/lib/thinking_sphinx/active_record/collection_proxy_rb.html","files/lib/thinking_sphinx/active_record/collection_proxy_with_scopes_rb.html","files/lib/thinking_sphinx/active_record/delta_rb.html","files/lib/thinking_sphinx/active_record/has_many_association_rb.html","files/lib/thinking_sphinx/active_record/has_many_association_with_scopes_rb.html","files/lib/thinking_sphinx/active_record/log_subscriber_rb.html","files/lib/thinking_sphinx/active_record/scopes_rb.html","files/lib/thinking_sphinx/adapters/abstract_adapter_rb.html","files/lib/thinking_sphinx/adapters/mysql_adapter_rb.html","files/lib/thinking_sphinx/adapters/postgresql_adapter_rb.html","files/lib/thinking_sphinx/association_rb.html","files/lib/thinking_sphinx/attribute_rb.html","files/lib/thinking_sphinx/auto_version_rb.html","files/lib/thinking_sphinx/bundled_search_rb.html","files/lib/thinking_sphinx/class_facet_rb.html","files/lib/thinking_sphinx/configuration_rb.html","files/lib/thinking_sphinx/context_rb.html","files/lib/thinking_sphinx/core/string_rb.html","files/lib/thinking_sphinx/deltas_rb.html","files/lib/thinking_sphinx/deltas/default_delta_rb.html","files/lib/thinking_sphinx/deploy/capistrano_rb.html","files/lib/thinking_sphinx/excerpter_rb.html","files/lib/thinking_sphinx/facet_rb.html","files/lib/thinking_sphinx/facet_search_rb.html","files/lib/thinking_sphinx/field_rb.html","files/lib/thinking_sphinx/index_rb.html","files/lib/thinking_sphinx/index/builder_rb.html","files/lib/thinking_sphinx/index/faux_column_rb.html","files/lib/thinking_sphinx/join_rb.html","files/lib/thinking_sphinx/property_rb.html","files/lib/thinking_sphinx/railtie_rb.html","files/lib/thinking_sphinx/search_rb.html","files/lib/thinking_sphinx/search_methods_rb.html","files/lib/thinking_sphinx/sinatra_rb.html","files/lib/thinking_sphinx/source_rb.html","files/lib/thinking_sphinx/source/internal_properties_rb.html","files/lib/thinking_sphinx/source/sql_rb.html","files/lib/thinking_sphinx/tasks_rb.html","files/lib/thinking_sphinx/test_rb.html","files/lib/thinking_sphinx/version_rb.html"]}}