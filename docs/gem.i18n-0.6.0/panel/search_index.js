var search_data = {"index":{"info":[["GetText","lib/i18n/gettext/po_parser.rb","classes/GetText.html"," < ","",1],["PoParser","GetText","classes/GetText/PoParser.html"," < Racc::Parser","",1],["Hash","lib/i18n/core_ext/hash.rb","classes/Hash.html"," < Object","",1],["I18n","lib/i18n/backend/base.rb","classes/I18n.html"," < ","This module allows you to easily cache all responses from the backend - thus speeding up the I18n aspects",1],["ArgumentError","I18n","classes/I18n/ArgumentError.html"," < ::ArgumentError","",1],["Backend","I18n","classes/I18n/Backend.html"," < ","",1],["Base","I18n::Backend","classes/I18n/Backend/Base.html"," < ","",1],["Cache","I18n::Backend","classes/I18n/Backend/Cache.html"," < ","TODO Should the cache be cleared if new translations are stored? ",1],["Cascade","I18n::Backend","classes/I18n/Backend/Cascade.html"," < ","",1],["Chain","I18n::Backend","classes/I18n/Backend/Chain.html"," < Object","Backend that chains multiple other backends and checks each of them when a translation needs to be looked",1],["Implementation","I18n::Backend::Chain","classes/I18n/Backend/Chain/Implementation.html"," < ","",1],["Fallbacks","I18n::Backend","classes/I18n/Backend/Fallbacks.html"," < ","",1],["Flatten","I18n::Backend","classes/I18n/Backend/Flatten.html"," < ","This module contains several helpers to assist flattening translations. You may want to flatten translations",1],["Gettext","I18n::Backend","classes/I18n/Backend/Gettext.html"," < ","",1],["PoData","I18n::Backend::Gettext","classes/I18n/Backend/Gettext/PoData.html"," < Hash","",1],["InterpolationCompiler","I18n::Backend","classes/I18n/Backend/InterpolationCompiler.html"," < ","",1],["Compiler","I18n::Backend::InterpolationCompiler","classes/I18n/Backend/InterpolationCompiler/Compiler.html"," < ","",1],["KeyValue","I18n::Backend","classes/I18n/Backend/KeyValue.html"," < Object","This is a basic backend for key value stores. It receives on initialization the store, which should respond",1],["Implementation","I18n::Backend::KeyValue","classes/I18n/Backend/KeyValue/Implementation.html"," < ","",1],["Memoize","I18n::Backend","classes/I18n/Backend/Memoize.html"," < ","",1],["Metadata","I18n::Backend","classes/I18n/Backend/Metadata.html"," < ","",1],["Pluralization","I18n::Backend","classes/I18n/Backend/Pluralization.html"," < ","",1],["Simple","I18n::Backend","classes/I18n/Backend/Simple.html"," < Object","A simple backend that reads translations from YAML files and stores them in an in-memory hash. Relies",1],["Implementation","I18n::Backend::Simple","classes/I18n/Backend/Simple/Implementation.html"," < ","",1],["Transliterator","I18n::Backend","classes/I18n/Backend/Transliterator.html"," < ","",1],["HashTransliterator","I18n::Backend::Transliterator","classes/I18n/Backend/Transliterator/HashTransliterator.html"," < Object","A transliterator which accepts a Hash of characters as its translation rule. ",1],["ProcTransliterator","I18n::Backend::Transliterator","classes/I18n/Backend/Transliterator/ProcTransliterator.html"," < Object","A transliterator which accepts a Proc as its transliteration rule. ",1],["Config","I18n","classes/I18n/Config.html"," < Object","",1],["ExceptionHandler","I18n","classes/I18n/ExceptionHandler.html"," < Object","Handles exceptions raised in the backend. All exceptions except for MissingTranslationData exceptions",1],["Gettext","I18n","classes/I18n/Gettext.html"," < ","",1],["Helpers","I18n::Gettext","classes/I18n/Gettext/Helpers.html"," < ","Implements classical Gettext style accessors. To use this include the module to the global namespace",1],["InvalidLocale","I18n","classes/I18n/InvalidLocale.html"," < ArgumentError","",1],["InvalidLocaleData","I18n","classes/I18n/InvalidLocaleData.html"," < ArgumentError","",1],["InvalidPluralizationData","I18n","classes/I18n/InvalidPluralizationData.html"," < ArgumentError","",1],["Locale","I18n","classes/I18n/Locale.html"," < ","",1],["Fallbacks","I18n::Locale","classes/I18n/Locale/Fallbacks.html"," < Hash","",1],["Tag","I18n::Locale","classes/I18n/Locale/Tag.html"," < ","",1],["Parents","I18n::Locale::Tag","classes/I18n/Locale/Tag/Parents.html"," < ","",1],["Rfc4646","I18n::Locale::Tag","classes/I18n/Locale/Tag/Rfc4646.html"," < Struct.new(*RFC4646_SUBTAGS)","",1],["Parser","I18n::Locale::Tag::Rfc4646","classes/I18n/Locale/Tag/Rfc4646/Parser.html"," < ","",1],["Simple","I18n::Locale::Tag","classes/I18n/Locale/Tag/Simple.html"," < Object","",1],["MissingInterpolationArgument","I18n","classes/I18n/MissingInterpolationArgument.html"," < ArgumentError","",1],["MissingTranslation","I18n","classes/I18n/MissingTranslation.html"," < Object","",1],["Base","I18n::MissingTranslation","classes/I18n/MissingTranslation/Base.html"," < ","",1],["MissingTranslationData","I18n","classes/I18n/MissingTranslationData.html"," < ArgumentError","",1],["ReservedInterpolationKey","I18n","classes/I18n/ReservedInterpolationKey.html"," < ArgumentError","",1],["Tests","I18n","classes/I18n/Tests.html"," < ","",1],["Basics","I18n::Tests","classes/I18n/Tests/Basics.html"," < ","",1],["Defaults","I18n::Tests","classes/I18n/Tests/Defaults.html"," < ","",1],["Interpolation","I18n::Tests","classes/I18n/Tests/Interpolation.html"," < ","",1],["Link","I18n::Tests","classes/I18n/Tests/Link.html"," < ","",1],["Localization","I18n::Tests","classes/I18n/Tests/Localization.html"," < ","",1],["Date","I18n::Tests::Localization","classes/I18n/Tests/Localization/Date.html"," < ","",1],["DateTime","I18n::Tests::Localization","classes/I18n/Tests/Localization/DateTime.html"," < ","",1],["Procs","I18n::Tests::Localization","classes/I18n/Tests/Localization/Procs.html"," < ","",1],["Time","I18n::Tests::Localization","classes/I18n/Tests/Localization/Time.html"," < ","",1],["Lookup","I18n::Tests","classes/I18n/Tests/Lookup.html"," < ","",1],["Pluralization","I18n::Tests","classes/I18n/Tests/Pluralization.html"," < ","",1],["Procs","I18n::Tests","classes/I18n/Tests/Procs.html"," < ","",1],["UnknownFileType","I18n","classes/I18n/UnknownFileType.html"," < ArgumentError","",1],["Kernel","lib/i18n/core_ext/kernel/surpress_warnings.rb","classes/Kernel.html"," < ","",1],["KeyError","lib/i18n/core_ext/string/interpolate.rb","classes/KeyError.html"," < IndexError","KeyError is raised by String#% when the string contains a named placeholder that is not contained in",1],["String","lib/i18n/core_ext/string/interpolate.rb","classes/String.html"," < Object","Extension for String class. This feature is included in Ruby 1.9 or later but not occur TypeError. String#%",1],["%","String","classes/String.html#M000123","(args)","% uses self (i.e. the String) as a format specification and returns the result of applying it to the",2],["[]","I18n::Locale::Fallbacks","classes/I18n/Locale/Fallbacks.html#M000161","(locale)","",2],["_","GetText::PoParser","classes/GetText/PoParser.html#M000150","(x)","",2],["_","I18n::Gettext::Helpers","classes/I18n/Gettext/Helpers.html#M000136","(msgid, options = {})","Alias for #gettext",2],["_fetch","I18n::Backend::Cache","classes/I18n/Backend/Cache.html#M000016","(cache_key, &block)","",2],["_reduce_none","GetText::PoParser","classes/GetText/PoParser.html#M000155","( val, _values, result )","",2],["add","I18n::Backend::Transliterator::HashTransliterator","classes/I18n/Backend/Transliterator/HashTransliterator.html#M000102","(hash)","Add transliteration rules to the approximations hash. ",2],["approximations","I18n::Backend::Transliterator::HashTransliterator","classes/I18n/Backend/Transliterator/HashTransliterator.html#M000101","()","",2],["available_locales","I18n::Backend::Base","classes/I18n/Backend/Base.html#M000004","()","Returns an array of locales for which translations are available ignoring the reserved translation meta",2],["available_locales","I18n::Backend::Chain::Implementation","classes/I18n/Backend/Chain/Implementation.html#M000027","()","",2],["available_locales","I18n::Backend::KeyValue::Implementation","classes/I18n/Backend/KeyValue/Implementation.html#M000070","()","",2],["available_locales","I18n::Backend::Memoize","classes/I18n/Backend/Memoize.html#M000072","()","",2],["available_locales","I18n::Backend::Simple::Implementation","classes/I18n/Backend/Simple/Implementation.html#M000090","()","Get available locales from the translations hash ",2],["available_locales","I18n::Config","classes/I18n/Config.html#M000112","()","Returns an array of locales for which translations are available. Unless you explicitely set these through",2],["available_locales=","I18n::Config","classes/I18n/Config.html#M000113","(locales)","Sets the available locales. ",2],["backend","I18n::Config","classes/I18n/Config.html#M000106","()","Returns the current backend. Defaults to +Backend::Simple+. ",2],["backend=","I18n::Config","classes/I18n/Config.html#M000107","(backend)","Sets the current backend. Used to set a custom backend. ",2],["cache_key","I18n::Backend::Cache","classes/I18n/Backend/Cache.html#M000017","(locale, key, options)","",2],["cache_namespace","I18n","classes/I18n.html#M000009","()","",2],["cache_namespace=","I18n","classes/I18n.html#M000010","(namespace)","",2],["cache_store","I18n","classes/I18n.html#M000007","()","",2],["cache_store=","I18n","classes/I18n.html#M000008","(store)","",2],["call","I18n::ExceptionHandler","classes/I18n/ExceptionHandler.html#M000125","(exception, locale, key, options)","",2],["capture","I18n::Tests::Interpolation","classes/I18n/Tests/Interpolation.html#M000182","(stream)","",2],["compile_all_strings_in","I18n::Backend::InterpolationCompiler","classes/I18n/Backend/InterpolationCompiler.html#M000067","(data)","",2],["compile_if_an_interpolation","I18n::Backend::InterpolationCompiler::Compiler","classes/I18n/Backend/InterpolationCompiler/Compiler.html#M000051","(string)","",2],["compile_interpolation_token","I18n::Backend::InterpolationCompiler::Compiler","classes/I18n/Backend/InterpolationCompiler/Compiler.html#M000056","(key)","",2],["compiled_interpolation_body","I18n::Backend::InterpolationCompiler::Compiler","classes/I18n/Backend/InterpolationCompiler/Compiler.html#M000054","(str)","",2],["compute","I18n::Locale::Fallbacks","classes/I18n/Locale/Fallbacks.html#M000163","(tags, include_defaults = true)","",2],["config","I18n","classes/I18n.html#M000196","()","Gets I18n configuration object. ",2],["config=","I18n","classes/I18n.html#M000197","(value)","Sets I18n configuration object. ",2],["deep_merge!","Hash","classes/Hash.html#M000115","(data)","",2],["deep_symbolize_keys","Hash","classes/Hash.html#M000111","()","",2],["default","I18n::Backend::Base","classes/I18n/Backend/Base.html#M000013","(locale, object, subject, options = {})","Evaluates defaults. If given subject is an Array, it walks the array and returns the first translation",2],["default_exception_handler","I18n","classes/I18n.html#M000209","(exception, locale, key, options)","DEPRECATED. Please use the I18n::ExceptionHandler class instead. ",2],["default_locale","I18n::Config","classes/I18n/Config.html#M000108","()","Returns the current default locale. Defaults to :'en' ",2],["default_locale=","I18n::Config","classes/I18n/Config.html#M000109","(locale)","Sets the current default locale. Used to set a custom default locale. ",2],["default_separator","I18n::Config","classes/I18n/Config.html#M000114","()","Returns the current default scope separator. Defaults to '.' ",2],["default_separator=","I18n::Config","classes/I18n/Config.html#M000116","(separator)","Sets the current default scope separator. ",2],["defaults=","I18n::Locale::Fallbacks","classes/I18n/Locale/Fallbacks.html#M000160","(defaults)","",2],["direct_key","I18n::Backend::InterpolationCompiler::Compiler","classes/I18n/Backend/InterpolationCompiler/Compiler.html#M000059","(key)","",2],["escape_key_sym","I18n::Backend::InterpolationCompiler::Compiler","classes/I18n/Backend/InterpolationCompiler/Compiler.html#M000064","(key)","",2],["escape_plain_str","I18n::Backend::InterpolationCompiler::Compiler","classes/I18n/Backend/InterpolationCompiler/Compiler.html#M000063","(str)","",2],["euc_jp","I18n::Tests::Interpolation","classes/I18n/Tests/Interpolation.html#M000183","(string)","",2],["except","Hash","classes/Hash.html#M000110","(*less_keys)","",2],["exception_handler","I18n::Config","classes/I18n/Config.html#M000117","()","Return the current exception handler. Defaults to :default_exception_handler. ",2],["exception_handler=","I18n::Config","classes/I18n/Config.html#M000118","(exception_handler)","Sets the exception handler. ",2],["extract_scope","I18n::Gettext","classes/I18n/Gettext.html#M000152","(msgid, separator)","",2],["extract_string_or_lambda_default!","I18n::Backend::Fallbacks","classes/I18n/Backend/Fallbacks.html#M000034","(options)","",2],["fallbacks","I18n","classes/I18n.html#M000031","()","Returns the current fallbacks implementation. Defaults to +I18n::Locale::Fallbacks+. ",2],["fallbacks=","I18n","classes/I18n.html#M000032","(fallbacks)","Sets the current fallbacks implementation. Use this to set a different fallbacks implementation. ",2],["fetch","I18n::Backend::Cache","classes/I18n/Backend/Cache.html#M000014","(cache_key, &block)","",2],["filter_args","I18n::Tests::Procs","classes/I18n/Tests/Procs.html#M000195","(*args)","",2],["find_first_string_or_lambda_default","I18n::Backend::Fallbacks","classes/I18n/Backend/Fallbacks.html#M000035","(defaults)","",2],["flatten_keys","I18n::Backend::Flatten","classes/I18n/Backend/Flatten.html#M000040","(hash, escape, prev_key=nil, &block)","Flatten keys for nested Hashes by chaining up keys: >> { \"a\" => { \"b\" => { \"c\" => \"d\", \"e\" => \"f\" },",2],["flatten_translations","I18n::Backend::Flatten","classes/I18n/Backend/Flatten.html#M000041","(locale, data, escape, subtree)","Receives a hash of translations (where the key is a locale and the value is another hash) and return",2],["get","I18n::Backend::Transliterator","classes/I18n/Backend/Transliterator.html#M000096","(rule = nil)","Get a transliterator instance. ",2],["gettext","I18n::Gettext::Helpers","classes/I18n/Gettext/Helpers.html#M000135","(msgid, options = {})","",2],["handle_exception","I18n","classes/I18n.html#M000205","(handling, exception, locale, key, options)","Any exceptions thrown in translate will be sent to the @@exception_handler which can be a Symbol, a Proc",2],["handle_interpolation_token","I18n::Backend::InterpolationCompiler::Compiler","classes/I18n/Backend/InterpolationCompiler/Compiler.html#M000055","(interpolation, matchdata)","",2],["html_message","I18n::MissingTranslation::Base","classes/I18n/MissingTranslation/Base.html#M000129","()","",2],["implementation","I18n::Locale::Tag","classes/I18n/Locale/Tag.html#M000177","()","Returns the current locale tag implementation. Defaults to +I18n::Locale::Tag::Simple+. ",2],["implementation=","I18n::Locale::Tag","classes/I18n/Locale/Tag.html#M000178","(implementation)","Sets the current locale tag implementation. Use this to set a different locale tag implementation. ",2],["included","I18n::Backend::Metadata","classes/I18n/Backend/Metadata.html#M000078","(base)","",2],["included","I18n::Tests::Localization","classes/I18n/Tests/Localization.html#M000193","(base)","",2],["init_translations","I18n::Backend::Simple::Implementation","classes/I18n/Backend/Simple/Implementation.html#M000093","()","",2],["initialized?","I18n::Backend::Simple::Implementation","classes/I18n/Backend/Simple/Implementation.html#M000088","()","",2],["inspect_args","I18n::Tests::Localization::Procs","classes/I18n/Tests/Localization/Procs.html#M000190","(args)","",2],["interpolate","I18n","classes/I18n.html#M000153","(string, values)","",2],["interpolate","I18n::Backend::Base","classes/I18n/Backend/Base.html#M000019","(locale, string, values = {})","Interpolates values into a given string. interpolate \"file %{file} opened by %%{user}\", :file => 'test.txt',",2],["interpolate","I18n::Backend::InterpolationCompiler","classes/I18n/Backend/InterpolationCompiler.html#M000065","(locale, string, values)","",2],["interpolate","I18n::Backend::Metadata","classes/I18n/Backend/Metadata.html#M000082","(locale, entry, values = {})","",2],["interpolate","I18n::Tests::Interpolation","classes/I18n/Tests/Interpolation.html#M000184","(*args)","",2],["interpolate_hash","I18n","classes/I18n.html#M000154","(string, values)","",2],["interpolate_key","I18n::Backend::InterpolationCompiler::Compiler","classes/I18n/Backend/InterpolationCompiler/Compiler.html#M000058","(key)","",2],["interpolate_or_raise_missing","I18n::Backend::InterpolationCompiler::Compiler","classes/I18n/Backend/InterpolationCompiler/Compiler.html#M000057","(key)","",2],["interpolate_without_ruby_19_syntax","String","classes/String.html#M000124","(args)","Alias for #%",2],["interpolated_str?","I18n::Backend::InterpolationCompiler::Compiler","classes/I18n/Backend/InterpolationCompiler/Compiler.html#M000052","(str)","",2],["keys","I18n::MissingTranslation::Base","classes/I18n/MissingTranslation/Base.html#M000130","()","",2],["links","I18n::Backend::Flatten","classes/I18n/Backend/Flatten.html#M000039","()","Store flattened links. ",2],["load_file","I18n::Backend::Base","classes/I18n/Backend/Base.html#M000020","(filename)","Loads a single translations file by delegating to #load_rb or #load_yml depending on the file extension",2],["load_path","I18n::Config","classes/I18n/Config.html#M000119","()","Allow clients to register paths providing translation data sources. The backend defines acceptable sources.",2],["load_path=","I18n::Config","classes/I18n/Config.html#M000120","(load_path)","Sets the load path instance. Custom implementations are expected to behave like a Ruby Array. ",2],["load_po","I18n::Backend::Gettext","classes/I18n/Backend/Gettext.html#M000045","(filename)","",2],["load_rb","I18n::Backend::Base","classes/I18n/Backend/Base.html#M000021","(filename)","Loads a plain Ruby translations file. eval'ing the file must yield a Hash containing translation data",2],["load_translations","I18n::Backend::Base","classes/I18n/Backend/Base.html#M000000","(*filenames)","Accepts a list of paths to translation files. Loads translations from plain Ruby (*.rb) or YAML files",2],["load_yml","I18n::Backend::Base","classes/I18n/Backend/Base.html#M000022","(filename)","Loads a YAML translations file. The data must have locales as toplevel keys. ",2],["locale","I18n::Config","classes/I18n/Config.html#M000103","()","The only configuration value that is not global and scoped to thread is :locale. It defaults to the default_locale.",2],["locale=","I18n::Config","classes/I18n/Config.html#M000105","(locale)","Sets the current locale pseudo-globally, i.e. in the Thread.current hash. ",2],["localize","I18n","classes/I18n.html#M000202","(object, options = {})","Localizes certain objects, such as dates and numbers to local formatting. ",2],["localize","I18n::Backend::Base","classes/I18n/Backend/Base.html#M000003","(locale, object, format = :default, options = {})","Acts the same as +strftime+, but uses a localized version of the format string. Takes a key from the",2],["localize","I18n::Backend::Chain::Implementation","classes/I18n/Backend/Chain/Implementation.html#M000029","(locale, object, format = :default, options = {})","",2],["lookup","I18n::Backend::Base","classes/I18n/Backend/Base.html#M000006","(locale, key, scope = [], options = {})","The method which actually looks up for the translation in the store. ",2],["lookup","I18n::Backend::Cascade","classes/I18n/Backend/Cascade.html#M000023","(locale, key, scope = [], options = {})","",2],["lookup","I18n::Backend::KeyValue::Implementation","classes/I18n/Backend/KeyValue/Implementation.html#M000071","(locale, key, scope = [], options = {})","",2],["lookup","I18n::Backend::Memoize","classes/I18n/Backend/Memoize.html#M000075","(locale, key, scope = nil, options = {})","",2],["lookup","I18n::Backend::Simple::Implementation","classes/I18n/Backend/Simple/Implementation.html#M000095","(locale, key, scope = [], options = {})","Looks up a translation from the translations hash. Returns nil if eiher key is nil, or locale, scope",2],["map","I18n::Locale::Fallbacks","classes/I18n/Locale/Fallbacks.html#M000162","(mappings)","",2],["match","I18n::Locale::Tag::Rfc4646::Parser","classes/I18n/Locale/Tag/Rfc4646/Parser.html#M000173","(tag)","",2],["memoized_lookup","I18n::Backend::Memoize","classes/I18n/Backend/Memoize.html#M000076","()","",2],["message","I18n::MissingTranslation::Base","classes/I18n/MissingTranslation/Base.html#M000131","()","",2],["missing_key","I18n::Backend::InterpolationCompiler::Compiler","classes/I18n/Backend/InterpolationCompiler/Compiler.html#M000061","(key)","",2],["n_","I18n::Gettext::Helpers","classes/I18n/Gettext/Helpers.html#M000145","(msgid, msgid_plural, n = 1)","Alias for #ngettext",2],["namespace_lookup?","I18n::Backend::Chain::Implementation","classes/I18n/Backend/Chain/Implementation.html#M000030","(result, options)","",2],["new","I18n::Backend::Chain::Implementation","classes/I18n/Backend/Chain/Implementation.html#M000024","(*backends)","",2],["new","I18n::Backend::KeyValue::Implementation","classes/I18n/Backend/KeyValue/Implementation.html#M000068","(store, subtrees=true)","",2],["new","I18n::Backend::Transliterator::HashTransliterator","classes/I18n/Backend/Transliterator/HashTransliterator.html#M000099","(rule = nil)","",2],["new","I18n::Backend::Transliterator::ProcTransliterator","classes/I18n/Backend/Transliterator/ProcTransliterator.html#M000097","(rule)","",2],["new","I18n::InvalidLocale","classes/I18n/InvalidLocale.html#M000126","(locale)","",2],["new","I18n::InvalidLocaleData","classes/I18n/InvalidLocaleData.html#M000127","(filename)","",2],["new","I18n::InvalidPluralizationData","classes/I18n/InvalidPluralizationData.html#M000134","(entry, count)","",2],["new","I18n::Locale::Fallbacks","classes/I18n/Locale/Fallbacks.html#M000159","(*mappings)","",2],["new","I18n::Locale::Tag::Simple","classes/I18n/Locale/Tag/Simple.html#M000171","(*tag)","",2],["new","I18n::MissingInterpolationArgument","classes/I18n/MissingInterpolationArgument.html#M000138","(values, string)","",2],["new","I18n::MissingTranslation::Base","classes/I18n/MissingTranslation/Base.html#M000128","(locale, key, options = nil)","",2],["new","I18n::ReservedInterpolationKey","classes/I18n/ReservedInterpolationKey.html#M000139","(key, string)","",2],["new","I18n::UnknownFileType","classes/I18n/UnknownFileType.html#M000144","(type, filename)","",2],["new","KeyError","classes/KeyError.html#M000122","(message = nil)","",2],["ngettext","I18n::Gettext::Helpers","classes/I18n/Gettext/Helpers.html#M000143","(msgid, msgid_plural, n = 1)","",2],["nil_key","I18n::Backend::InterpolationCompiler::Compiler","classes/I18n/Backend/InterpolationCompiler/Compiler.html#M000060","(key)","",2],["normalize","I18n::Backend::Gettext","classes/I18n/Backend/Gettext.html#M000049","(locale, data)","",2],["normalize_flat_keys","I18n::Backend::Flatten","classes/I18n/Backend/Flatten.html#M000038","(locale, key, scope, separator)","Shortcut to I18n::Backend::Flatten.normalize_flat_keys and then resolve_links. ",2],["normalize_flat_keys","I18n::Backend::Flatten","classes/I18n/Backend/Flatten.html#M000036","(locale, key, scope, separator)","normalize_keys the flatten way. This method is significantly faster and creates way less objects than",2],["normalize_key","I18n","classes/I18n.html#M000206","(key, separator)","",2],["normalize_keys","I18n","classes/I18n.html#M000204","(locale, key, scope, separator = nil)","Merges the given locale, key and scope into a single array of keys. Splits keys that contain dots into",2],["normalize_pluralization","I18n::Backend::Gettext","classes/I18n/Backend/Gettext.html#M000050","(locale, key, value)","",2],["normalize_translation_keys","I18n","classes/I18n.html#M000208","(locale, key, scope, separator = nil)","DEPRECATED. Use I18n.normalize_keys instead. ",2],["normalized_key_cache","I18n","classes/I18n.html#M000207","()","",2],["np_","I18n::Gettext::Helpers","classes/I18n/Gettext/Helpers.html#M000149","(msgctxt, msgid, msgid_plural, n = 1)","Alias for #npgettext",2],["npgettext","I18n::Gettext::Helpers","classes/I18n/Gettext/Helpers.html#M000148","(msgctxt, msgid, msgid_plural, n = 1)","Method signatures: npgettext('Fruits', 'apple', 'apples', 2) npgettext('Fruits', ['apple', 'apples'],",2],["ns_","I18n::Gettext::Helpers","classes/I18n/Gettext/Helpers.html#M000147","(msgid, msgid_plural, n = 1, separator = '|')","Alias for #nsgettext",2],["nsgettext","I18n::Gettext::Helpers","classes/I18n/Gettext/Helpers.html#M000146","(msgid, msgid_plural, n = 1, separator = '|')","Method signatures: nsgettext('Fruits|apple', 'apples', 2) nsgettext(['Fruits|apple', 'apples'], 2) ",2],["p_","I18n::Gettext::Helpers","classes/I18n/Gettext/Helpers.html#M000142","(msgctxt, msgid)","Alias for #pgettext",2],["parent","I18n::Locale::Tag::Parents","classes/I18n/Locale/Tag/Parents.html#M000156","()","",2],["parents","I18n::Locale::Tag::Parents","classes/I18n/Locale/Tag/Parents.html#M000158","()","",2],["parse","I18n::Backend::Gettext","classes/I18n/Backend/Gettext.html#M000048","(filename)","",2],["parser","I18n::Locale::Tag::Rfc4646","classes/I18n/Locale/Tag/Rfc4646.html#M000165","()","",2],["parser=","I18n::Locale::Tag::Rfc4646","classes/I18n/Locale/Tag/Rfc4646.html#M000166","(parser)","",2],["perform_caching?","I18n","classes/I18n.html#M000011","()","",2],["pgettext","I18n::Gettext::Helpers","classes/I18n/Gettext/Helpers.html#M000141","(msgctxt, msgid)","",2],["plural_keys","I18n::Gettext","classes/I18n/Gettext.html#M000151","(locale)","returns an array of plural keys for the given locale so that we can convert from gettext's integer-index",2],["pluralize","I18n::Backend::Base","classes/I18n/Backend/Base.html#M000018","(locale, entry, count)","Picks a translation from an array according to English pluralization rules. It will pick the first translation",2],["pluralize","I18n::Backend::Metadata","classes/I18n/Backend/Metadata.html#M000083","(locale, entry, count)","",2],["pluralize","I18n::Backend::Pluralization","classes/I18n/Backend/Pluralization.html#M000085","(locale, entry, count)","Overwrites the Base backend translate method so that it will check the translation meta data space (:i18n)",2],["pluralizer","I18n::Backend::Pluralization","classes/I18n/Backend/Pluralization.html#M000087","(locale)","",2],["pluralizers","I18n::Backend::Pluralization","classes/I18n/Backend/Pluralization.html#M000086","()","",2],["reload!","I18n","classes/I18n.html#M000198","()","Tells the backend to reload translations. Used in situations like the Rails development environment.",2],["reload!","I18n::Backend::Base","classes/I18n/Backend/Base.html#M000005","()","",2],["reload!","I18n::Backend::Chain::Implementation","classes/I18n/Backend/Chain/Implementation.html#M000025","()","",2],["reload!","I18n::Backend::Memoize","classes/I18n/Backend/Memoize.html#M000074","()","",2],["reload!","I18n::Backend::Simple::Implementation","classes/I18n/Backend/Simple/Implementation.html#M000092","()","Clean up translations hash and set initialized to false on reload! ",2],["reserved_key","I18n::Backend::InterpolationCompiler::Compiler","classes/I18n/Backend/InterpolationCompiler/Compiler.html#M000062","(key)","",2],["reset_memoizations!","I18n::Backend::Memoize","classes/I18n/Backend/Memoize.html#M000077","(locale=nil)","",2],["resolve","I18n::Backend::Base","classes/I18n/Backend/Base.html#M000015","(locale, object, subject, options = {})","Resolves a translation. If the given subject is a Symbol, it will be translated with the given options.",2],["resolve_link","I18n::Backend::Flatten","classes/I18n/Backend/Flatten.html#M000043","(locale, key)","",2],["s_","I18n::Gettext::Helpers","classes/I18n/Gettext/Helpers.html#M000140","(msgid, separator = '|')","Alias for #sgettext",2],["self_and_parents","I18n::Locale::Tag::Parents","classes/I18n/Locale/Tag/Parents.html#M000157","()","",2],["set_comment","I18n::Backend::Gettext::PoData","classes/I18n/Backend/Gettext/PoData.html#M000044","(msgid_or_sym, comment)","",2],["setup","I18n::Tests::Defaults","classes/I18n/Tests/Defaults.html#M000181","()","",2],["setup","I18n::Tests::Localization::Date","classes/I18n/Tests/Localization/Date.html#M000185","()","",2],["setup","I18n::Tests::Localization::DateTime","classes/I18n/Tests/Localization/DateTime.html#M000186","()","",2],["setup","I18n::Tests::Localization::Time","classes/I18n/Tests/Localization/Time.html#M000189","()","",2],["setup","I18n::Tests::Lookup","classes/I18n/Tests/Lookup.html#M000194","()","",2],["setup_date_translations","I18n::Tests::Localization::Date","classes/I18n/Tests/Localization/Date.html#M000187","()","",2],["setup_datetime_translations","I18n::Tests::Localization::DateTime","classes/I18n/Tests/Localization/DateTime.html#M000188","()","",2],["setup_time_proc_translations","I18n::Tests::Localization::Procs","classes/I18n/Tests/Localization/Procs.html#M000192","()","",2],["setup_time_translations","I18n::Tests::Localization::Time","classes/I18n/Tests/Localization/Time.html#M000191","()","",2],["sgettext","I18n::Gettext::Helpers","classes/I18n/Gettext/Helpers.html#M000137","(msgid, separator = '|')","",2],["slice","Hash","classes/Hash.html#M000104","(*keep_keys)","",2],["store_link","I18n::Backend::Flatten","classes/I18n/Backend/Flatten.html#M000042","(locale, key, link)","",2],["store_translations","I18n::Backend::Base","classes/I18n/Backend/Base.html#M000001","(locale, data, options = {})","This method receives a locale, a data hash and options for storing translations. Should be implemented",2],["store_translations","I18n::Backend::Chain::Implementation","classes/I18n/Backend/Chain/Implementation.html#M000026","(locale, data, options = {})","",2],["store_translations","I18n::Backend::InterpolationCompiler","classes/I18n/Backend/InterpolationCompiler.html#M000066","(locale, data, options = {})","",2],["store_translations","I18n::Backend::KeyValue::Implementation","classes/I18n/Backend/KeyValue/Implementation.html#M000069","(locale, data, options = {})","",2],["store_translations","I18n::Backend::Memoize","classes/I18n/Backend/Memoize.html#M000073","(locale, data, options = {})","",2],["store_translations","I18n::Backend::Simple::Implementation","classes/I18n/Backend/Simple/Implementation.html#M000089","(locale, data, options = {})","Stores translations for the given locale in memory. This uses a deep merge for the translations hash,",2],["subtags","I18n::Locale::Tag::Simple","classes/I18n/Locale/Tag/Simple.html#M000172","()","",2],["suppress_warnings","Kernel","classes/Kernel.html#M000121","()","",2],["tag","I18n::Locale::Tag","classes/I18n/Locale/Tag.html#M000179","(tag)","Factory method for locale tags. Delegates to the current locale tag implementation. ",2],["tag","I18n::Locale::Tag::Rfc4646","classes/I18n/Locale/Tag/Rfc4646.html#M000164","(tag)","Parses the given tag and returns a Tag instance if it is valid. Returns false if the given tag is not",2],["tag","I18n::Locale::Tag::Simple","classes/I18n/Locale/Tag/Simple.html#M000170","(tag)","",2],["teardown","I18n::Tests::Basics","classes/I18n/Tests/Basics.html#M000180","()","",2],["to_a","I18n::Locale::Tag::Rfc4646","classes/I18n/Locale/Tag/Rfc4646.html#M000169","()","",2],["to_a","I18n::Locale::Tag::Simple","classes/I18n/Locale/Tag/Simple.html#M000176","()","",2],["to_exception","I18n::MissingTranslation::Base","classes/I18n/MissingTranslation/Base.html#M000133","()","",2],["to_s","I18n::Locale::Tag::Rfc4646","classes/I18n/Locale/Tag/Rfc4646.html#M000168","()","",2],["to_s","I18n::Locale::Tag::Simple","classes/I18n/Locale/Tag/Simple.html#M000175","()","",2],["to_s","I18n::MissingTranslation::Base","classes/I18n/MissingTranslation/Base.html#M000132","()","Alias for #message",2],["to_sym","I18n::Locale::Tag::Rfc4646","classes/I18n/Locale/Tag/Rfc4646.html#M000167","()","",2],["to_sym","I18n::Locale::Tag::Simple","classes/I18n/Locale/Tag/Simple.html#M000174","()","",2],["tokenize","I18n::Backend::InterpolationCompiler::Compiler","classes/I18n/Backend/InterpolationCompiler/Compiler.html#M000053","(str)","tokenize(\"foo %{bar} baz %%{buz}\") # => [\"foo \", \"%{bar}\", \" baz \", \"%%{buz}\"] ",2],["translate","I18n","classes/I18n.html#M000199","(*args)","Translates, pluralizes and interpolates a given key using a given locale, scope, and default, as well",2],["translate","I18n::Backend::Base","classes/I18n/Backend/Base.html#M000002","(locale, key, options = {})","",2],["translate","I18n::Backend::Cache","classes/I18n/Backend/Cache.html#M000012","(locale, key, options = {})","",2],["translate","I18n::Backend::Chain::Implementation","classes/I18n/Backend/Chain/Implementation.html#M000028","(locale, key, default_options = {})","",2],["translate","I18n::Backend::Fallbacks","classes/I18n/Backend/Fallbacks.html#M000033","(locale, key, options = {})","Overwrites the Base backend translate method so that it will try each locale given by I18n.fallbacks",2],["translate","I18n::Backend::Metadata","classes/I18n/Backend/Metadata.html#M000081","(locale, key, options = {})","",2],["translate!","I18n","classes/I18n.html#M000200","(key, options={})","",2],["translation_metadata","I18n::Backend::Metadata","classes/I18n/Backend/Metadata.html#M000079","()","",2],["translation_metadata=","I18n::Backend::Metadata","classes/I18n/Backend/Metadata.html#M000080","(translation_metadata)","",2],["translations","I18n::Backend::Simple::Implementation","classes/I18n/Backend/Simple/Implementation.html#M000094","()","",2],["transliterate","I18n","classes/I18n.html#M000201","(*args)","Transliterates UTF-8 characters to ASCII. By default this method will transliterate only Latin strings",2],["transliterate","I18n::Backend::Transliterator","classes/I18n/Backend/Transliterator.html#M000091","(locale, string, replacement = nil)","Given a locale and a UTF-8 string, return the locale's ASCII approximation for the string. ",2],["transliterate","I18n::Backend::Transliterator::HashTransliterator","classes/I18n/Backend/Transliterator/HashTransliterator.html#M000100","(string, replacement = nil)","",2],["transliterate","I18n::Backend::Transliterator::ProcTransliterator","classes/I18n/Backend/Transliterator/ProcTransliterator.html#M000098","(string, replacement = nil)","",2],["with_locale","I18n","classes/I18n.html#M000203","(tmp_locale = nil)","Executes block with given I18n.locale set. ",2],["with_metadata","I18n::Backend::Metadata","classes/I18n/Backend/Metadata.html#M000084","(metadata, &block)","",2],["CHANGELOG.textile","files/CHANGELOG_textile.html","files/CHANGELOG_textile.html","","h1. Changelog  h2. 0.5.0  * \"Extract Backend::ActiveRecord to a separate gem\":https://github.com/svenfuchs/i18n/commit/197dacebad356b910d69fa69a719c2ad10cf49e6",3],["MIT-LICENSE","files/MIT-LICENSE.html","files/MIT-LICENSE.html","","Copyright (c) 2008 The Ruby I18n team  Permission is hereby granted, free of charge, to any person obtaining",3],["README.textile","files/README_textile.html","files/README_textile.html","","h1. Ruby I18n  Ruby Internationalization and localization solution.  Features:  * translation and localization",3],["i18n.rb","files/lib/i18n_rb.html","files/lib/i18n_rb.html","","",3],["backend.rb","files/lib/i18n/backend_rb.html","files/lib/i18n/backend_rb.html","","",3],["base.rb","files/lib/i18n/backend/base_rb.html","files/lib/i18n/backend/base_rb.html","","",3],["cache.rb","files/lib/i18n/backend/cache_rb.html","files/lib/i18n/backend/cache_rb.html","","This module allows you to easily cache all responses from the backend - thus speeding up the I18n aspects",3],["cascade.rb","files/lib/i18n/backend/cascade_rb.html","files/lib/i18n/backend/cascade_rb.html","","The Cascade module adds the ability to do cascading lookups to backends that are compatible to the Simple",3],["chain.rb","files/lib/i18n/backend/chain_rb.html","files/lib/i18n/backend/chain_rb.html","","",3],["fallbacks.rb","files/lib/i18n/backend/fallbacks_rb.html","files/lib/i18n/backend/fallbacks_rb.html","","I18n locale fallbacks are useful when you want your application to use translations from other locales",3],["flatten.rb","files/lib/i18n/backend/flatten_rb.html","files/lib/i18n/backend/flatten_rb.html","","",3],["gettext.rb","files/lib/i18n/backend/gettext_rb.html","files/lib/i18n/backend/gettext_rb.html","","",3],["interpolation_compiler.rb","files/lib/i18n/backend/interpolation_compiler_rb.html","files/lib/i18n/backend/interpolation_compiler_rb.html","","The InterpolationCompiler module contains optimizations that can tremendously speed up the interpolation",3],["key_value.rb","files/lib/i18n/backend/key_value_rb.html","files/lib/i18n/backend/key_value_rb.html","","",3],["memoize.rb","files/lib/i18n/backend/memoize_rb.html","files/lib/i18n/backend/memoize_rb.html","","Memoize module simply memoizes the values returned by lookup using a flat hash and can tremendously speed",3],["metadata.rb","files/lib/i18n/backend/metadata_rb.html","files/lib/i18n/backend/metadata_rb.html","","I18n translation metadata is useful when you want to access information about how a translation was looked",3],["pluralization.rb","files/lib/i18n/backend/pluralization_rb.html","files/lib/i18n/backend/pluralization_rb.html","","I18n locale fallbacks are useful when you want your application to use translations from other locales",3],["simple.rb","files/lib/i18n/backend/simple_rb.html","files/lib/i18n/backend/simple_rb.html","","",3],["transliterator.rb","files/lib/i18n/backend/transliterator_rb.html","files/lib/i18n/backend/transliterator_rb.html","","encoding: utf-8 ",3],["config.rb","files/lib/i18n/config_rb.html","files/lib/i18n/config_rb.html","","",3],["hash.rb","files/lib/i18n/core_ext/hash_rb.html","files/lib/i18n/core_ext/hash_rb.html","","",3],["surpress_warnings.rb","files/lib/i18n/core_ext/kernel/surpress_warnings_rb.html","files/lib/i18n/core_ext/kernel/surpress_warnings_rb.html","","",3],["interpolate.rb","files/lib/i18n/core_ext/string/interpolate_rb.html","files/lib/i18n/core_ext/string/interpolate_rb.html","","This backports the Ruby 1.9 String interpolation syntax to Ruby 1.8. This backport has been shipped with",3],["exceptions.rb","files/lib/i18n/exceptions_rb.html","files/lib/i18n/exceptions_rb.html","","",3],["gettext.rb","files/lib/i18n/gettext_rb.html","files/lib/i18n/gettext_rb.html","","",3],["helpers.rb","files/lib/i18n/gettext/helpers_rb.html","files/lib/i18n/gettext/helpers_rb.html","","",3],["po_parser.rb","files/lib/i18n/gettext/po_parser_rb.html","files/lib/i18n/gettext/po_parser_rb.html","","",3],["ruby.rb","files/lib/i18n/interpolate/ruby_rb.html","files/lib/i18n/interpolate/ruby_rb.html","","heavily based on Masao Mutoh's gettext String interpolation extension http://github.com/mutoh/gettext/blob/f6566738b981fe0952548c421042ad1e0cdfb31e/lib/gettext/core_ext/string.rb",3],["locale.rb","files/lib/i18n/locale_rb.html","files/lib/i18n/locale_rb.html","","",3],["fallbacks.rb","files/lib/i18n/locale/fallbacks_rb.html","files/lib/i18n/locale/fallbacks_rb.html","","Locale Fallbacks Extends the I18n module to hold a fallbacks instance which is set to an instance of",3],["tag.rb","files/lib/i18n/locale/tag_rb.html","files/lib/i18n/locale/tag_rb.html","","encoding: utf-8 ",3],["parents.rb","files/lib/i18n/locale/tag/parents_rb.html","files/lib/i18n/locale/tag/parents_rb.html","","",3],["rfc4646.rb","files/lib/i18n/locale/tag/rfc4646_rb.html","files/lib/i18n/locale/tag/rfc4646_rb.html","","RFC 4646/47 compliant Locale tag implementation that parses locale tags to subtags such as language,",3],["simple.rb","files/lib/i18n/locale/tag/simple_rb.html","files/lib/i18n/locale/tag/simple_rb.html","","Simple Locale tag implementation that computes subtags by simply splitting the locale tag at '-' occurences.",3],["tests.rb","files/lib/i18n/tests_rb.html","files/lib/i18n/tests_rb.html","","",3],["basics.rb","files/lib/i18n/tests/basics_rb.html","files/lib/i18n/tests/basics_rb.html","","",3],["defaults.rb","files/lib/i18n/tests/defaults_rb.html","files/lib/i18n/tests/defaults_rb.html","","encoding: utf-8 ",3],["interpolation.rb","files/lib/i18n/tests/interpolation_rb.html","files/lib/i18n/tests/interpolation_rb.html","","encoding: utf-8 ",3],["link.rb","files/lib/i18n/tests/link_rb.html","files/lib/i18n/tests/link_rb.html","","encoding: utf-8 ",3],["localization.rb","files/lib/i18n/tests/localization_rb.html","files/lib/i18n/tests/localization_rb.html","","",3],["date.rb","files/lib/i18n/tests/localization/date_rb.html","files/lib/i18n/tests/localization/date_rb.html","","encoding: utf-8 ",3],["date_time.rb","files/lib/i18n/tests/localization/date_time_rb.html","files/lib/i18n/tests/localization/date_time_rb.html","","encoding: utf-8 ",3],["procs.rb","files/lib/i18n/tests/localization/procs_rb.html","files/lib/i18n/tests/localization/procs_rb.html","","encoding: utf-8 ",3],["time.rb","files/lib/i18n/tests/localization/time_rb.html","files/lib/i18n/tests/localization/time_rb.html","","encoding: utf-8 ",3],["lookup.rb","files/lib/i18n/tests/lookup_rb.html","files/lib/i18n/tests/lookup_rb.html","","encoding: utf-8 ",3],["pluralization.rb","files/lib/i18n/tests/pluralization_rb.html","files/lib/i18n/tests/pluralization_rb.html","","encoding: utf-8 ",3],["procs.rb","files/lib/i18n/tests/procs_rb.html","files/lib/i18n/tests/procs_rb.html","","encoding: utf-8 ",3],["version.rb","files/lib/i18n/version_rb.html","files/lib/i18n/version_rb.html","","",3]],"searchIndex":["gettext","poparser","hash","i18n","argumenterror","backend","base","cache","cascade","chain","implementation","fallbacks","flatten","gettext","podata","interpolationcompiler","compiler","keyvalue","implementation","memoize","metadata","pluralization","simple","implementation","transliterator","hashtransliterator","proctransliterator","config","exceptionhandler","gettext","helpers","invalidlocale","invalidlocaledata","invalidpluralizationdata","locale","fallbacks","tag","parents","rfc4646","parser","simple","missinginterpolationargument","missingtranslation","base","missingtranslationdata","reservedinterpolationkey","tests","basics","defaults","interpolation","link","localization","date","datetime","procs","time","lookup","pluralization","procs","unknownfiletype","kernel","keyerror","string","%()","[]()","_()","_()","_fetch()","_reduce_none()","add()","approximations()","available_locales()","available_locales()","available_locales()","available_locales()","available_locales()","available_locales()","available_locales=()","backend()","backend=()","cache_key()","cache_namespace()","cache_namespace=()","cache_store()","cache_store=()","call()","capture()","compile_all_strings_in()","compile_if_an_interpolation()","compile_interpolation_token()","compiled_interpolation_body()","compute()","config()","config=()","deep_merge!()","deep_symbolize_keys()","default()","default_exception_handler()","default_locale()","default_locale=()","default_separator()","default_separator=()","defaults=()","direct_key()","escape_key_sym()","escape_plain_str()","euc_jp()","except()","exception_handler()","exception_handler=()","extract_scope()","extract_string_or_lambda_default!()","fallbacks()","fallbacks=()","fetch()","filter_args()","find_first_string_or_lambda_default()","flatten_keys()","flatten_translations()","get()","gettext()","handle_exception()","handle_interpolation_token()","html_message()","implementation()","implementation=()","included()","included()","init_translations()","initialized?()","inspect_args()","interpolate()","interpolate()","interpolate()","interpolate()","interpolate()","interpolate_hash()","interpolate_key()","interpolate_or_raise_missing()","interpolate_without_ruby_19_syntax()","interpolated_str?()","keys()","links()","load_file()","load_path()","load_path=()","load_po()","load_rb()","load_translations()","load_yml()","locale()","locale=()","localize()","localize()","localize()","lookup()","lookup()","lookup()","lookup()","lookup()","map()","match()","memoized_lookup()","message()","missing_key()","n_()","namespace_lookup?()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","ngettext()","nil_key()","normalize()","normalize_flat_keys()","normalize_flat_keys()","normalize_key()","normalize_keys()","normalize_pluralization()","normalize_translation_keys()","normalized_key_cache()","np_()","npgettext()","ns_()","nsgettext()","p_()","parent()","parents()","parse()","parser()","parser=()","perform_caching?()","pgettext()","plural_keys()","pluralize()","pluralize()","pluralize()","pluralizer()","pluralizers()","reload!()","reload!()","reload!()","reload!()","reload!()","reserved_key()","reset_memoizations!()","resolve()","resolve_link()","s_()","self_and_parents()","set_comment()","setup()","setup()","setup()","setup()","setup()","setup_date_translations()","setup_datetime_translations()","setup_time_proc_translations()","setup_time_translations()","sgettext()","slice()","store_link()","store_translations()","store_translations()","store_translations()","store_translations()","store_translations()","store_translations()","subtags()","suppress_warnings()","tag()","tag()","tag()","teardown()","to_a()","to_a()","to_exception()","to_s()","to_s()","to_s()","to_sym()","to_sym()","tokenize()","translate()","translate()","translate()","translate()","translate()","translate()","translate!()","translation_metadata()","translation_metadata=()","translations()","transliterate()","transliterate()","transliterate()","transliterate()","with_locale()","with_metadata()","changelog.textile","mit-license","readme.textile","i18n.rb","backend.rb","base.rb","cache.rb","cascade.rb","chain.rb","fallbacks.rb","flatten.rb","gettext.rb","interpolation_compiler.rb","key_value.rb","memoize.rb","metadata.rb","pluralization.rb","simple.rb","transliterator.rb","config.rb","hash.rb","surpress_warnings.rb","interpolate.rb","exceptions.rb","gettext.rb","helpers.rb","po_parser.rb","ruby.rb","locale.rb","fallbacks.rb","tag.rb","parents.rb","rfc4646.rb","simple.rb","tests.rb","basics.rb","defaults.rb","interpolation.rb","link.rb","localization.rb","date.rb","date_time.rb","procs.rb","time.rb","lookup.rb","pluralization.rb","procs.rb","version.rb"],"longSearchIndex":["lib/i18n/gettext/po_parser.rb","gettext","lib/i18n/core_ext/hash.rb","lib/i18n.rb","i18n","i18n","i18n::backend","i18n::backend","i18n::backend","i18n::backend","i18n::backend::chain","i18n::backend","i18n::backend","i18n::backend","i18n::backend::gettext","i18n::backend","i18n::backend::interpolationcompiler","i18n::backend","i18n::backend::keyvalue","i18n::backend","i18n::backend","i18n::backend","i18n::backend","i18n::backend::simple","i18n::backend","i18n::backend::transliterator","i18n::backend::transliterator","i18n","i18n","i18n","i18n::gettext","i18n","i18n","i18n","i18n","i18n::locale","i18n::locale","i18n::locale::tag","i18n::locale::tag","i18n::locale::tag::rfc4646","i18n::locale::tag","i18n","i18n","i18n::missingtranslation","i18n","i18n","i18n","i18n::tests","i18n::tests","i18n::tests","i18n::tests","i18n::tests","i18n::tests::localization","i18n::tests::localization","i18n::tests::localization","i18n::tests::localization","i18n::tests","i18n::tests","i18n::tests","i18n","lib/i18n/core_ext/kernel/surpress_warnings.rb","lib/i18n/core_ext/string/interpolate.rb","lib/i18n/core_ext/string/interpolate.rb","string","i18n::locale::fallbacks","gettext::poparser","i18n::gettext::helpers","i18n::backend::cache","gettext::poparser","i18n::backend::transliterator::hashtransliterator","i18n::backend::transliterator::hashtransliterator","i18n::backend::base","i18n::backend::chain::implementation","i18n::backend::keyvalue::implementation","i18n::backend::memoize","i18n::backend::simple::implementation","i18n::config","i18n::config","i18n::config","i18n::config","i18n::backend::cache","i18n","i18n","i18n","i18n","i18n::exceptionhandler","i18n::tests::interpolation","i18n::backend::interpolationcompiler","i18n::backend::interpolationcompiler::compiler","i18n::backend::interpolationcompiler::compiler","i18n::backend::interpolationcompiler::compiler","i18n::locale::fallbacks","i18n","i18n","hash","hash","i18n::backend::base","i18n","i18n::config","i18n::config","i18n::config","i18n::config","i18n::locale::fallbacks","i18n::backend::interpolationcompiler::compiler","i18n::backend::interpolationcompiler::compiler","i18n::backend::interpolationcompiler::compiler","i18n::tests::interpolation","hash","i18n::config","i18n::config","i18n::gettext","i18n::backend::fallbacks","i18n","i18n","i18n::backend::cache","i18n::tests::procs","i18n::backend::fallbacks","i18n::backend::flatten","i18n::backend::flatten","i18n::backend::transliterator","i18n::gettext::helpers","i18n","i18n::backend::interpolationcompiler::compiler","i18n::missingtranslation::base","i18n::locale::tag","i18n::locale::tag","i18n::backend::metadata","i18n::tests::localization","i18n::backend::simple::implementation","i18n::backend::simple::implementation","i18n::tests::localization::procs","i18n","i18n::backend::base","i18n::backend::interpolationcompiler","i18n::backend::metadata","i18n::tests::interpolation","i18n","i18n::backend::interpolationcompiler::compiler","i18n::backend::interpolationcompiler::compiler","string","i18n::backend::interpolationcompiler::compiler","i18n::missingtranslation::base","i18n::backend::flatten","i18n::backend::base","i18n::config","i18n::config","i18n::backend::gettext","i18n::backend::base","i18n::backend::base","i18n::backend::base","i18n::config","i18n::config","i18n","i18n::backend::base","i18n::backend::chain::implementation","i18n::backend::base","i18n::backend::cascade","i18n::backend::keyvalue::implementation","i18n::backend::memoize","i18n::backend::simple::implementation","i18n::locale::fallbacks","i18n::locale::tag::rfc4646::parser","i18n::backend::memoize","i18n::missingtranslation::base","i18n::backend::interpolationcompiler::compiler","i18n::gettext::helpers","i18n::backend::chain::implementation","i18n::backend::chain::implementation","i18n::backend::keyvalue::implementation","i18n::backend::transliterator::hashtransliterator","i18n::backend::transliterator::proctransliterator","i18n::invalidlocale","i18n::invalidlocaledata","i18n::invalidpluralizationdata","i18n::locale::fallbacks","i18n::locale::tag::simple","i18n::missinginterpolationargument","i18n::missingtranslation::base","i18n::reservedinterpolationkey","i18n::unknownfiletype","keyerror","i18n::gettext::helpers","i18n::backend::interpolationcompiler::compiler","i18n::backend::gettext","i18n::backend::flatten","i18n::backend::flatten","i18n","i18n","i18n::backend::gettext","i18n","i18n","i18n::gettext::helpers","i18n::gettext::helpers","i18n::gettext::helpers","i18n::gettext::helpers","i18n::gettext::helpers","i18n::locale::tag::parents","i18n::locale::tag::parents","i18n::backend::gettext","i18n::locale::tag::rfc4646","i18n::locale::tag::rfc4646","i18n","i18n::gettext::helpers","i18n::gettext","i18n::backend::base","i18n::backend::metadata","i18n::backend::pluralization","i18n::backend::pluralization","i18n::backend::pluralization","i18n","i18n::backend::base","i18n::backend::chain::implementation","i18n::backend::memoize","i18n::backend::simple::implementation","i18n::backend::interpolationcompiler::compiler","i18n::backend::memoize","i18n::backend::base","i18n::backend::flatten","i18n::gettext::helpers","i18n::locale::tag::parents","i18n::backend::gettext::podata","i18n::tests::defaults","i18n::tests::localization::date","i18n::tests::localization::datetime","i18n::tests::localization::time","i18n::tests::lookup","i18n::tests::localization::date","i18n::tests::localization::datetime","i18n::tests::localization::procs","i18n::tests::localization::time","i18n::gettext::helpers","hash","i18n::backend::flatten","i18n::backend::base","i18n::backend::chain::implementation","i18n::backend::interpolationcompiler","i18n::backend::keyvalue::implementation","i18n::backend::memoize","i18n::backend::simple::implementation","i18n::locale::tag::simple","kernel","i18n::locale::tag","i18n::locale::tag::rfc4646","i18n::locale::tag::simple","i18n::tests::basics","i18n::locale::tag::rfc4646","i18n::locale::tag::simple","i18n::missingtranslation::base","i18n::locale::tag::rfc4646","i18n::locale::tag::simple","i18n::missingtranslation::base","i18n::locale::tag::rfc4646","i18n::locale::tag::simple","i18n::backend::interpolationcompiler::compiler","i18n","i18n::backend::base","i18n::backend::cache","i18n::backend::chain::implementation","i18n::backend::fallbacks","i18n::backend::metadata","i18n","i18n::backend::metadata","i18n::backend::metadata","i18n::backend::simple::implementation","i18n","i18n::backend::transliterator","i18n::backend::transliterator::hashtransliterator","i18n::backend::transliterator::proctransliterator","i18n","i18n::backend::metadata","files/changelog_textile.html","files/mit-license.html","files/readme_textile.html","files/lib/i18n_rb.html","files/lib/i18n/backend_rb.html","files/lib/i18n/backend/base_rb.html","files/lib/i18n/backend/cache_rb.html","files/lib/i18n/backend/cascade_rb.html","files/lib/i18n/backend/chain_rb.html","files/lib/i18n/backend/fallbacks_rb.html","files/lib/i18n/backend/flatten_rb.html","files/lib/i18n/backend/gettext_rb.html","files/lib/i18n/backend/interpolation_compiler_rb.html","files/lib/i18n/backend/key_value_rb.html","files/lib/i18n/backend/memoize_rb.html","files/lib/i18n/backend/metadata_rb.html","files/lib/i18n/backend/pluralization_rb.html","files/lib/i18n/backend/simple_rb.html","files/lib/i18n/backend/transliterator_rb.html","files/lib/i18n/config_rb.html","files/lib/i18n/core_ext/hash_rb.html","files/lib/i18n/core_ext/kernel/surpress_warnings_rb.html","files/lib/i18n/core_ext/string/interpolate_rb.html","files/lib/i18n/exceptions_rb.html","files/lib/i18n/gettext_rb.html","files/lib/i18n/gettext/helpers_rb.html","files/lib/i18n/gettext/po_parser_rb.html","files/lib/i18n/interpolate/ruby_rb.html","files/lib/i18n/locale_rb.html","files/lib/i18n/locale/fallbacks_rb.html","files/lib/i18n/locale/tag_rb.html","files/lib/i18n/locale/tag/parents_rb.html","files/lib/i18n/locale/tag/rfc4646_rb.html","files/lib/i18n/locale/tag/simple_rb.html","files/lib/i18n/tests_rb.html","files/lib/i18n/tests/basics_rb.html","files/lib/i18n/tests/defaults_rb.html","files/lib/i18n/tests/interpolation_rb.html","files/lib/i18n/tests/link_rb.html","files/lib/i18n/tests/localization_rb.html","files/lib/i18n/tests/localization/date_rb.html","files/lib/i18n/tests/localization/date_time_rb.html","files/lib/i18n/tests/localization/procs_rb.html","files/lib/i18n/tests/localization/time_rb.html","files/lib/i18n/tests/lookup_rb.html","files/lib/i18n/tests/pluralization_rb.html","files/lib/i18n/tests/procs_rb.html","files/lib/i18n/version_rb.html"]}}