var search_data = {"index":{"info":[["BER","Net","classes/Net/BER.html"," < ","== Basic Encoding Rules (BER) Support Module Much of the text below is cribbed from Wikipedia: http://en.wikipedia.org/wiki/Basic_Encoding_Rules",1],["BERParser","Net::BER","classes/Net/BER/BERParser.html"," < ","Implements Basic Encoding Rules parsing to be mixed into types as needed. ",1],["BerError","Net::BER","classes/Net/BER/BerError.html"," < RuntimeError","",1],["BerIdentifiedArray","Net::BER","classes/Net/BER/BerIdentifiedArray.html"," < Array","An Array object with a BER identifier attached. ",1],["BerIdentifiedNull","Net::BER","classes/Net/BER/BerIdentifiedNull.html"," < Object","A BER null object. ",1],["BerIdentifiedOid","Net::BER","classes/Net/BER/BerIdentifiedOid.html"," < Object","A BER object identifier. ",1],["BerIdentifiedString","Net::BER","classes/Net/BER/BerIdentifiedString.html"," < String","A String object with a BER identifier attached. ",1],["Array","Net::BER::Extensions","classes/Net/BER/Extensions/Array.html"," < ","BER extensions to the Array class. ",1],["Bignum","Net::BER::Extensions","classes/Net/BER/Extensions/Bignum.html"," < ","BER extensions to the Bignum class. ",1],["FalseClass","Net::BER::Extensions","classes/Net/BER/Extensions/FalseClass.html"," < ","BER extensions to +false+. ",1],["Fixnum","Net::BER::Extensions","classes/Net/BER/Extensions/Fixnum.html"," < ","Ber extensions to the Fixnum class. ",1],["String","Net::BER::Extensions","classes/Net/BER/Extensions/String.html"," < ","BER extensions to the String class. ",1],["TrueClass","Net::BER::Extensions","classes/Net/BER/Extensions/TrueClass.html"," < ","BER extensions to +true+. ",1],["LDAP","Net","classes/Net/LDAP.html"," < Object","== Quick-start for the Impatient === Quick Example of a user-authentication against an LDAP directory:",1],["GetbyteForSSLSocket","Net::LDAP::Connection","classes/Net/LDAP/Connection/GetbyteForSSLSocket.html"," < ","",1],["DN","Net::LDAP","classes/Net/LDAP/DN.html"," < Object","Objects of this class represent an LDAP DN (\"Distinguished Name\"). A DN (\"Distinguished Name\") is a unique",1],["Dataset","Net::LDAP","classes/Net/LDAP/Dataset.html"," < Hash","An LDAP Dataset. Used primarily as an intermediate format for converting to and from LDIF strings and",1],["Entry","Net::LDAP","classes/Net/LDAP/Entry.html"," < Object","Objects of this class represent individual entries in an LDAP directory. User code generally does not",1],["Filter","Net::LDAP","classes/Net/LDAP/Filter.html"," < Object","Class Net::LDAP::Filter is used to constrain LDAP searches. An object of this class is passed to Net::LDAP#search",1],["LdapControls","Net::LDAP","classes/Net/LDAP/LdapControls.html"," < ","",1],["LdapError","Net::LDAP","classes/Net/LDAP/LdapError.html"," < StandardError","",1],["PDU","Net::LDAP","classes/Net/LDAP/PDU.html"," < Object","Defines the Protocol Data Unit (PDU) for LDAP. An LDAP PDU always looks like a BER SEQUENCE with at least",1],["Error","Net::LDAP::PDU","classes/Net/LDAP/PDU/Error.html"," < RuntimeError","",1],["Password","Net::LDAP","classes/Net/LDAP/Password.html"," < Object","",1],["&","Net::LDAP::Filter","classes/Net/LDAP/Filter.html#M000092","(filter)","Joins two or more filters so that all conditions must be true. # Selects only entries that have an <tt>objectclass</tt>",2],["==","Net::LDAP::Filter","classes/Net/LDAP/Filter.html#M000095","(filter)","Equality operator for filters, useful primarily for constructing unit tests. ",2],["[]","Net::LDAP::Entry","classes/Net/LDAP/Entry.html#M000047","(name)","Reads the array of values for the provided attribute. The attribute name is canonicalized prior to reading.",2],["[]=","Net::LDAP::Entry","classes/Net/LDAP/Entry.html#M000046","(name, value)","Sets or replaces the array of values for the provided attribute. The attribute name is canonicalized",2],["add","Net::LDAP","classes/Net/LDAP.html#M000115","(args)","Adds a new entry to the remote LDAP server. Supported arguments: :dn :: Full DN of the new entry :attributes",2],["add_attribute","Net::LDAP","classes/Net/LDAP.html#M000117","(dn, attribute, value)","Add a value to an attribute. Takes the full DN of the entry to modify, the name (Symbol or String) of",2],["attribute_name","Net::LDAP::Entry","classes/Net/LDAP/Entry.html#M000045","(name)","Canonicalizes an LDAP attribute name as a \\Symbol. The name is lowercased and, if present, a trailing",2],["attribute_names","Net::LDAP::Entry","classes/Net/LDAP/Entry.html#M000049","()","Returns an array of the attribute names present in the Entry. ",2],["auth","Net::LDAP","classes/Net/LDAP.html#M000107","(username, password)","Alias for #authenticate",2],["authenticate","Net::LDAP","classes/Net/LDAP.html#M000106","(username, password)","Convenience method to specify authentication credentials to the LDAP server. Currently supports simple",2],["begins","Net::LDAP::Filter","classes/Net/LDAP/Filter.html#M000067","(attribute, value)","Creates a Filter object indicating that the value of a particular attribute must begin with a particular",2],["bind","Net::LDAP","classes/Net/LDAP.html#M000113","(auth = @auth)","#bind connects to an LDAP server and requests authentication based on the <tt>:auth</tt> parameter passed",2],["bind_as","Net::LDAP","classes/Net/LDAP.html#M000114","(args = {})","#bind_as is for testing authentication credentials. As described under #bind, most LDAP servers require",2],["compile_syntax","Net::BER","classes/Net/BER.html#M000030","(syntax)","Accepts a hash of hashes describing a BER syntax and converts it into a byte-keyed object for fast BER",2],["construct","Net::LDAP::Filter","classes/Net/LDAP/Filter.html#M000090","(ldap_filter_string)","Converts an LDAP filter-string (in the prefix syntax specified in RFC-2254) to a Net::LDAP::Filter. ",2],["contains","Net::LDAP::Filter","classes/Net/LDAP/Filter.html#M000069","(attribute, value)","Creates a Filter object indicating that the value of a particular attribute must contain a particular",2],["delete","Net::LDAP","classes/Net/LDAP.html#M000122","(args)","Delete an entry from the LDAP directory. Takes a hash of arguments. The only supported argument is :dn,",2],["delete_attribute","Net::LDAP","classes/Net/LDAP.html#M000119","(dn, attribute)","Delete an attribute and all its values. Takes the full DN of the entry to modify, and the name (Symbol",2],["dn","Net::LDAP::Entry","classes/Net/LDAP/Entry.html#M000048","()","Returns the first distinguished name (dn) of the Entry as a \\String. ",2],["each","Net::LDAP::Entry","classes/Net/LDAP/Entry.html#M000050","()","Accesses each of the attributes present in the Entry. Calls a user-supplied block with each attribute",2],["each_attribute","Net::LDAP::Entry","classes/Net/LDAP/Entry.html#M000051","()","Alias for #each",2],["each_pair","Net::LDAP::DN","classes/Net/LDAP/DN.html#M000040","()","Parse a DN into key value pairs using ASN from http://tools.ietf.org/html/rfc2253 section 3. ",2],["encryption","Net::LDAP","classes/Net/LDAP.html#M000108","(args)","Convenience method to specify encryption characteristics for connections to LDAP servers. Called implicitly",2],["ends","Net::LDAP::Filter","classes/Net/LDAP/Filter.html#M000068","(attribute, value)","Creates a Filter object indicating that the value of a particular attribute must end with a particular",2],["eq","Net::LDAP::Filter","classes/Net/LDAP/Filter.html#M000063","(attribute, value)","Creates a Filter object indicating that the value of a particular attribute must either be present or",2],["equals","Net::LDAP::Filter","classes/Net/LDAP/Filter.html#M000066","(attribute, value)","Creates a Filter object indicating that the value of a particular attribute must match a particular string.",2],["escape","Net::LDAP::DN","classes/Net/LDAP/DN.html#M000059","(string)","Escape a string for use in a DN value ",2],["escape","Net::LDAP::Filter","classes/Net/LDAP/Filter.html#M000082","(string)","Escape a string for use in an LDAP filter ",2],["ex","Net::LDAP::Filter","classes/Net/LDAP/Filter.html#M000064","(attribute, value)","Creates a Filter object indicating extensible comparison. This Filter object is currently considered",2],["execute","Net::LDAP::Filter","classes/Net/LDAP/Filter.html#M000100","(&block)","Perform filter operations against a user-supplied block. This is useful when implementing an LDAP directory",2],["from_entry","Net::LDAP::Dataset","classes/Net/LDAP/Dataset.html#M000028","(entry)","Creates a Dataset object from an Entry object. Used mostly to assist with the conversion of ",2],["from_single_ldif_string","Net::LDAP::Entry","classes/Net/LDAP/Entry.html#M000044","(ldif)","Converts a single LDIF entry string into an Entry object. Useful for Marshal serialization. If a string",2],["ge","Net::LDAP::Filter","classes/Net/LDAP/Filter.html#M000071","(attribute, value)","Creates a Filter object indicating that a particular attribute value is greater than or equal to the",2],["generate","Net::LDAP::Password","classes/Net/LDAP/Password.html#M000061","(type, str)","Generate a password-hash suitable for inclusion in an LDAP attribute. Pass a hash type (currently supported:",2],["get_operation_result","Net::LDAP","classes/Net/LDAP.html#M000110","()","Returns a meaningful result any time after a protocol operation (#bind, #search, #add, #modify, #rename,",2],["getbyte","Net::LDAP::Connection::GetbyteForSSLSocket","classes/Net/LDAP/Connection/GetbyteForSSLSocket.html#M000126","()","",2],["intersect","Net::LDAP::Filter","classes/Net/LDAP/Filter.html#M000075","(left, right)","Creates a disjoint comparison between two or more filters. Selects entries where either the left or right",2],["join","Net::LDAP::Filter","classes/Net/LDAP/Filter.html#M000073","(left, right)","Joins two or more filters so that all conditions must be true. Calling <tt>Filter.join(left, right)</tt>",2],["le","Net::LDAP::Filter","classes/Net/LDAP/Filter.html#M000072","(attribute, value)","Creates a Filter object indicating that a particular attribute value is less than or equal to the specified",2],["match","Net::LDAP::Filter","classes/Net/LDAP/Filter.html#M000102","(entry)","",2],["method_missing","Net::LDAP::DN","classes/Net/LDAP/DN.html#M000060","(method, *args, &block)","Proxy all other requests to the string object, because a DN is mainly used within the library as a string",2],["modify","Net::LDAP","classes/Net/LDAP.html#M000116","(args)","Modifies the attribute values of a particular entry on the LDAP directory. Takes a hash with arguments.",2],["modify_rdn","Net::LDAP","classes/Net/LDAP.html#M000121","(args)","Alias for #rename",2],["ne","Net::LDAP::Filter","classes/Net/LDAP/Filter.html#M000065","(attribute, value)","Creates a Filter object indicating that a particular attribute value is either not present or does not",2],["negate","Net::LDAP::Filter","classes/Net/LDAP/Filter.html#M000079","(filter)","Negates a filter. Calling <tt>Fitler.negate(filter)</tt> i s the same as <tt>~filter</tt>. # Selects",2],["new","Net::BER::BerIdentifiedArray","classes/Net/BER/BerIdentifiedArray.html#M000031","(*args)","",2],["new","Net::BER::BerIdentifiedOid","classes/Net/BER/BerIdentifiedOid.html#M000032","(oid)","",2],["new","Net::BER::BerIdentifiedString","classes/Net/BER/BerIdentifiedString.html#M000037","(args)","",2],["new","Net::LDAP","classes/Net/LDAP.html#M000105","(args = {})","Instantiate an object of type Net::LDAP to perform directory operations. This constructor takes a Hash",2],["new","Net::LDAP::DN","classes/Net/LDAP/DN.html#M000039","(*args)","Initialize a DN, escaping as required. Pass in attributes in name/value pairs. If there is a left over",2],["new","Net::LDAP::PDU","classes/Net/LDAP/PDU.html#M000070","(ber_object)","Messy. Does this functionality belong somewhere else? ",2],["open","Net::LDAP","classes/Net/LDAP.html#M000111","()","Opens a network connection to the server and then passes <tt>self</tt> to the caller-supplied block.",2],["open","Net::LDAP","classes/Net/LDAP.html#M000109","(args)","#open takes the same parameters as #new. #open makes a network connection to the LDAP server and then",2],["paged_searches_supported?","Net::LDAP","classes/Net/LDAP.html#M000125","()"," ",2],["parse_ber","Net::LDAP::Filter","classes/Net/LDAP/Filter.html#M000084","(ber)","Converts an LDAP search filter in BER format to an Net::LDAP::Filter object. The incoming BER object",2],["parse_ber_object","Net::BER::BERParser","classes/Net/BER/BERParser.html#M000000","(syntax, id, data)","This is an extract of our BER object parsing to simplify our understanding of how we parse basic BER",2],["parse_bind_request","Net::LDAP::PDU","classes/Net/LDAP/PDU.html#M000088","(sequence)","(provisional, must document) ",2],["parse_bind_response","Net::LDAP::PDU","classes/Net/LDAP/PDU.html#M000081","(sequence)","A Bind Response may have an additional field, ID [7], serverSaslCreds, per RFC 2251 pgh 4.2.3. ",2],["parse_controls","Net::LDAP::PDU","classes/Net/LDAP/PDU.html#M000086","(sequence)","Per RFC 2251, an LDAP \"control\" is a sequence of tuples, each consisting of an OID, a boolean criticality",2],["parse_ldap_filter","Net::LDAP::Filter","classes/Net/LDAP/Filter.html#M000091","(obj)","Convert an RFC-1777 LDAP/BER \"Filter\" object to a Net::LDAP::Filter object.  ",2],["parse_ldap_result","Net::LDAP::PDU","classes/Net/LDAP/PDU.html#M000078","(sequence)","",2],["parse_ldap_search_request","Net::LDAP::PDU","classes/Net/LDAP/PDU.html#M000087","(sequence)","(provisional, must document) ",2],["parse_search_referral","Net::LDAP::PDU","classes/Net/LDAP/PDU.html#M000085","(uris)","A search referral is a sequence of one or more LDAP URIs. Any number of search-referral replies can be",2],["parse_search_return","Net::LDAP::PDU","classes/Net/LDAP/PDU.html#M000083","(sequence)","Definition from RFC 1777 (we're handling application-4 here). Search Response ::= CHOICE { entry    ",2],["parse_unbind_request","Net::LDAP::PDU","classes/Net/LDAP/PDU.html#M000089","(sequence)","(provisional, must document) UnbindRequest has no content so this is a no-op. ",2],["present?","Net::LDAP::Filter","classes/Net/LDAP/Filter.html#M000080","(attribute)","This is a synonym for #eq(attribute, \"*\"). Also known as #present and #pres. ",2],["read_ber","Net::BER::BERParser","classes/Net/BER/BERParser.html#M000009","(syntax = nil)","Reads a BER object from the including object. Requires that #getbyte is implemented on the including",2],["read_ber","Net::BER::Extensions::String","classes/Net/BER/Extensions/String.html#M000020","(syntax = nil)","Nondestructively reads a BER object from this string. ",2],["read_ber!","Net::BER::Extensions::String","classes/Net/BER/Extensions/String.html#M000021","(syntax = nil)","Destructively reads a BER object from the string.  ",2],["read_ber_length","Net::BER::BERParser","classes/Net/BER/BERParser.html#M000008","()","This is an extract of how our BER object length parsing is done to simplify the primary call. This is",2],["read_ldif","Net::LDAP::Dataset","classes/Net/LDAP/Dataset.html#M000029","(io)","Reads an object that returns data line-wise (using #gets) and parses LDIF data into a Dataset object.",2],["rename","Net::LDAP","classes/Net/LDAP.html#M000120","(args)","Rename an entry on the remote DIS by changing the last RDN of its DN. _Documentation_ _stub_ ",2],["replace_attribute","Net::LDAP","classes/Net/LDAP.html#M000118","(dn, attribute, value)","Replace the value of an attribute. #replace_attribute can be thought of as equivalent to calling #delete_attribute",2],["result","Net::LDAP::PDU","classes/Net/LDAP/PDU.html#M000074","()","Returns a hash which (usually) defines the members :resultCode, :errorMessage, and :matchedDN. These",2],["result_code","Net::LDAP::PDU","classes/Net/LDAP/PDU.html#M000076","(code = :resultCode)","This returns an LDAP result code taken from the PDU, but it will be nil if there wasn't a result code.",2],["result_server_sasl_creds","Net::LDAP::PDU","classes/Net/LDAP/PDU.html#M000077","()","Return serverSaslCreds, which are only present in BindResponse packets. ",2],["search","Net::LDAP","classes/Net/LDAP.html#M000112","(args = {})","Searches the LDAP directory for directory entries. Takes a hash argument with parameters. Supported parameters",2],["search_root_dse","Net::LDAP","classes/Net/LDAP.html#M000123","()","This method is experimental and subject to change. Return the rootDSE record from the LDAP server as",2],["search_subschema_entry","Net::LDAP","classes/Net/LDAP.html#M000124","()","Return the root Subschema record from the LDAP server as a Net::LDAP::Entry, or an empty Entry if the",2],["setter?","Net::LDAP::Entry","classes/Net/LDAP/Entry.html#M000056","(sym)","Returns true if the symbol ends with an equal sign. ",2],["to_a","Net::LDAP::DN","classes/Net/LDAP/DN.html#M000057","()","Returns the DN as an array in the form expected by the constructor. ",2],["to_arr","Net::BER::BerIdentifiedOid","classes/Net/BER/BerIdentifiedOid.html#M000036","()","",2],["to_ber","Net::BER::BerIdentifiedNull","classes/Net/BER/BerIdentifiedNull.html#M000038","()","",2],["to_ber","Net::BER::BerIdentifiedOid","classes/Net/BER/BerIdentifiedOid.html#M000033","()","",2],["to_ber","Net::BER::Extensions::Array","classes/Net/BER/Extensions/Array.html#M000001","(id = 0)","Converts an Array to a BER sequence. All values in the Array are expected to be in BER format prior to",2],["to_ber","Net::BER::Extensions::Bignum","classes/Net/BER/Extensions/Bignum.html#M000010","()","Converts a Bignum to an uncompressed BER integer. ",2],["to_ber","Net::BER::Extensions::FalseClass","classes/Net/BER/Extensions/FalseClass.html#M000011","()","Converts +false+ to the BER wireline representation of +false+. ",2],["to_ber","Net::BER::Extensions::Fixnum","classes/Net/BER/Extensions/Fixnum.html#M000012","()","Converts the fixnum to BER format. ",2],["to_ber","Net::BER::Extensions::String","classes/Net/BER/Extensions/String.html#M000017","(code = 0x04)","Converts a string to a BER string. Universal octet-strings are tagged with 0x04, but other values are",2],["to_ber","Net::BER::Extensions::TrueClass","classes/Net/BER/Extensions/TrueClass.html#M000022","()","Converts +true+ to the BER wireline representation of +true+. ",2],["to_ber","Net::LDAP::Filter","classes/Net/LDAP/Filter.html#M000099","()","Converts the filter to BER format.  ",2],["to_ber_application","Net::BER::Extensions::Fixnum","classes/Net/BER/Extensions/Fixnum.html#M000015","(tag)","Generate a BER-encoding for an application-defined INTEGER. Examples of such integers are SNMP's Counter,",2],["to_ber_application_string","Net::BER::Extensions::String","classes/Net/BER/Extensions/String.html#M000018","(code)","Creates an application-specific BER string encoded value with the provided syntax code value. ",2],["to_ber_appsequence","Net::BER::Extensions::Array","classes/Net/BER/Extensions/Array.html#M000004","(id = 0)","Converts an Array to an application-specific sequence, assigned a tag value that is meaningful to the",2],["to_ber_contextspecific","Net::BER::Extensions::Array","classes/Net/BER/Extensions/Array.html#M000005","(id = 0)","Converts an Array to a context-specific sequence, assigned a tag value that is meaningful to the particular",2],["to_ber_contextspecific","Net::BER::Extensions::String","classes/Net/BER/Extensions/String.html#M000019","(code)","Creates a context-specific BER string encoded value with the provided syntax code value. ",2],["to_ber_enumerated","Net::BER::Extensions::Fixnum","classes/Net/BER/Extensions/Fixnum.html#M000013","()","Converts the fixnum to BER enumerated format. ",2],["to_ber_internal","Net::BER::Extensions::Fixnum","classes/Net/BER/Extensions/Fixnum.html#M000016","()","Used to BER-encode the length and content bytes of a Fixnum. Callers must prepend the tag byte for the",2],["to_ber_length_encoding","Net::BER::Extensions::Fixnum","classes/Net/BER/Extensions/Fixnum.html#M000014","()","Converts the fixnum to BER length encodining format. ",2],["to_ber_oid","Net::BER::BerIdentifiedOid","classes/Net/BER/BerIdentifiedOid.html#M000034","()","",2],["to_ber_oid","Net::BER::Extensions::Array","classes/Net/BER/Extensions/Array.html#M000007","()","SNMP Object Identifiers (OID) are special arrays  ",2],["to_ber_seq_internal","Net::BER::Extensions::Array","classes/Net/BER/Extensions/Array.html#M000006","(code)","The internal sequence packing routine. All values in the Array are expected to be in BER format prior",2],["to_ber_sequence","Net::BER::Extensions::Array","classes/Net/BER/Extensions/Array.html#M000002","(id = 0)","Alias for #to_ber",2],["to_ber_set","Net::BER::Extensions::Array","classes/Net/BER/Extensions/Array.html#M000003","(id = 0)","Converts an Array to a BER set. All values in the Array are expected to be in BER format prior to calling",2],["to_entries","Net::LDAP::Dataset","classes/Net/LDAP/Dataset.html#M000026","()","Convert the parsed LDIF objects to Net::LDAP::Entry objects. ",2],["to_ldif","Net::LDAP::Dataset","classes/Net/LDAP/Dataset.html#M000024","()","Outputs an LDAP Dataset as an array of strings representing LDIF entries. ",2],["to_ldif","Net::LDAP::Entry","classes/Net/LDAP/Entry.html#M000052","()","Converts the Entry to an LDIF-formatted String ",2],["to_ldif_string","Net::LDAP::Dataset","classes/Net/LDAP/Dataset.html#M000025","()","Outputs an LDAP Dataset as an LDIF string. ",2],["to_raw_rfc2254","Net::LDAP::Filter","classes/Net/LDAP/Filter.html#M000096","()","",2],["to_rfc2254","Net::LDAP::Filter","classes/Net/LDAP/Filter.html#M000097","()","Converts the Filter object to an RFC 2254-compatible text format. ",2],["to_s","Net::BER::BerIdentifiedOid","classes/Net/BER/BerIdentifiedOid.html#M000035","()","",2],["to_s","Net::LDAP::DN","classes/Net/LDAP/DN.html#M000058","()","Return the DN as an escaped string. ",2],["to_s","Net::LDAP::Filter","classes/Net/LDAP/Filter.html#M000098","()","",2],["unescape","Net::LDAP::Filter","classes/Net/LDAP/Filter.html#M000103","(right)","Converts escaped characters (e.g., \"\\\\28\") to unescaped characters (\"(\"). ",2],["valid_attribute?","Net::LDAP::Entry","classes/Net/LDAP/Entry.html#M000055","(attr_name)","Given a valid attribute symbol, returns true. ",2],["|","Net::LDAP::Filter","classes/Net/LDAP/Filter.html#M000093","(filter)","Creates a disjoint comparison between two or more filters. Selects entries where either the left or right",2],["~","Net::LDAP::Filter","classes/Net/LDAP/Filter.html#M000094","()","Negates a filter. # Selects only entries that do not have an <tt>objectclass</tt> # attribute. x = ~Net::LDAP::Filter.present(\"objectclass\")",2],["Contributors.rdoc","files/Contributors_rdoc.html","files/Contributors_rdoc.html","","== Contributors  Net::LDAP was originally developed by:  * Francis Cianfrocca (garbagecat)  Contributions",3],["Hacking.rdoc","files/Hacking_rdoc.html","files/Hacking_rdoc.html","","= Hacking on Net::LDAP  We welcome your contributions to Net::LDAP. We accept most contributions, but",3],["History.rdoc","files/History_rdoc.html","files/History_rdoc.html","","=== Net::LDAP 0.2.2 / 2011-03-26 * Bug Fixes:   * Fixed the call to Net::LDAP.modify_ops from Net::LDAP#modify.",3],["License.rdoc","files/License_rdoc.html","files/License_rdoc.html","","== License  This software is available under the terms of the MIT license.  Copyright 2006–2011 by Francis",3],["Manifest.txt","files/Manifest_txt.html","files/Manifest_txt.html","",".autotest .rspec Contributors.rdoc Hacking.rdoc History.rdoc License.rdoc Manifest.txt README.rdoc Rakefile",3],["README.rdoc","files/README_rdoc.html","files/README_rdoc.html","","= Net::LDAP for Ruby  == Description  Net::LDAP for Ruby (also called net-ldap) implements client access",3],["net-ldap.rb","files/lib/net-ldap_rb.html","files/lib/net-ldap_rb.html","","",3],["ber.rb","files/lib/net/ber_rb.html","files/lib/net/ber_rb.html","","",3],["ber_parser.rb","files/lib/net/ber/ber_parser_rb.html","files/lib/net/ber/ber_parser_rb.html","","",3],["core_ext.rb","files/lib/net/ber/core_ext_rb.html","files/lib/net/ber/core_ext_rb.html","","",3],["array.rb","files/lib/net/ber/core_ext/array_rb.html","files/lib/net/ber/core_ext/array_rb.html","","BER extensions to the Array class. ",3],["bignum.rb","files/lib/net/ber/core_ext/bignum_rb.html","files/lib/net/ber/core_ext/bignum_rb.html","","BER extensions to the Bignum class. ",3],["false_class.rb","files/lib/net/ber/core_ext/false_class_rb.html","files/lib/net/ber/core_ext/false_class_rb.html","","BER extensions to +false+. ",3],["fixnum.rb","files/lib/net/ber/core_ext/fixnum_rb.html","files/lib/net/ber/core_ext/fixnum_rb.html","","Ber extensions to the Fixnum class. ",3],["string.rb","files/lib/net/ber/core_ext/string_rb.html","files/lib/net/ber/core_ext/string_rb.html","","",3],["true_class.rb","files/lib/net/ber/core_ext/true_class_rb.html","files/lib/net/ber/core_ext/true_class_rb.html","","BER extensions to +true+. ",3],["ldap.rb","files/lib/net/ldap_rb.html","files/lib/net/ldap_rb.html","","",3],["dataset.rb","files/lib/net/ldap/dataset_rb.html","files/lib/net/ldap/dataset_rb.html","","An LDAP Dataset. Used primarily as an intermediate format for converting to and from LDIF strings and",3],["dn.rb","files/lib/net/ldap/dn_rb.html","files/lib/net/ldap/dn_rb.html","","Objects of this class represent an LDAP DN (\"Distinguished Name\"). A DN (\"Distinguished Name\") is a unique",3],["entry.rb","files/lib/net/ldap/entry_rb.html","files/lib/net/ldap/entry_rb.html","","Objects of this class represent individual entries in an LDAP directory. User code generally does not",3],["filter.rb","files/lib/net/ldap/filter_rb.html","files/lib/net/ldap/filter_rb.html","","Class Net::LDAP::Filter is used to constrain LDAP searches. An object of this class is passed to Net::LDAP#search",3],["password.rb","files/lib/net/ldap/password_rb.html","files/lib/net/ldap/password_rb.html","","",3],["pdu.rb","files/lib/net/ldap/pdu_rb.html","files/lib/net/ldap/pdu_rb.html","","",3],["snmp.rb","files/lib/net/snmp_rb.html","files/lib/net/snmp_rb.html","","",3]],"searchIndex":["ber","berparser","bererror","beridentifiedarray","beridentifiednull","beridentifiedoid","beridentifiedstring","array","bignum","falseclass","fixnum","string","trueclass","ldap","getbyteforsslsocket","dn","dataset","entry","filter","ldapcontrols","ldaperror","pdu","error","password","&()","==()","[]()","[]=()","add()","add_attribute()","attribute_name()","attribute_names()","auth()","authenticate()","begins()","bind()","bind_as()","compile_syntax()","construct()","contains()","delete()","delete_attribute()","dn()","each()","each_attribute()","each_pair()","encryption()","ends()","eq()","equals()","escape()","escape()","ex()","execute()","from_entry()","from_single_ldif_string()","ge()","generate()","get_operation_result()","getbyte()","intersect()","join()","le()","match()","method_missing()","modify()","modify_rdn()","ne()","negate()","new()","new()","new()","new()","new()","new()","open()","open()","paged_searches_supported?()","parse_ber()","parse_ber_object()","parse_bind_request()","parse_bind_response()","parse_controls()","parse_ldap_filter()","parse_ldap_result()","parse_ldap_search_request()","parse_search_referral()","parse_search_return()","parse_unbind_request()","present?()","read_ber()","read_ber()","read_ber!()","read_ber_length()","read_ldif()","rename()","replace_attribute()","result()","result_code()","result_server_sasl_creds()","search()","search_root_dse()","search_subschema_entry()","setter?()","to_a()","to_arr()","to_ber()","to_ber()","to_ber()","to_ber()","to_ber()","to_ber()","to_ber()","to_ber()","to_ber()","to_ber_application()","to_ber_application_string()","to_ber_appsequence()","to_ber_contextspecific()","to_ber_contextspecific()","to_ber_enumerated()","to_ber_internal()","to_ber_length_encoding()","to_ber_oid()","to_ber_oid()","to_ber_seq_internal()","to_ber_sequence()","to_ber_set()","to_entries()","to_ldif()","to_ldif()","to_ldif_string()","to_raw_rfc2254()","to_rfc2254()","to_s()","to_s()","to_s()","unescape()","valid_attribute?()","|()","~()","contributors.rdoc","hacking.rdoc","history.rdoc","license.rdoc","manifest.txt","readme.rdoc","net-ldap.rb","ber.rb","ber_parser.rb","core_ext.rb","array.rb","bignum.rb","false_class.rb","fixnum.rb","string.rb","true_class.rb","ldap.rb","dataset.rb","dn.rb","entry.rb","filter.rb","password.rb","pdu.rb","snmp.rb"],"longSearchIndex":["net","net::ber","net::ber","net::ber","net::ber","net::ber","net::ber","net::ber::extensions","net::ber::extensions","net::ber::extensions","net::ber::extensions","net::ber::extensions","net::ber::extensions","net","net::ldap::connection","net::ldap","net::ldap","net::ldap","net::ldap","net::ldap","net::ldap","net::ldap","net::ldap::pdu","net::ldap","net::ldap::filter","net::ldap::filter","net::ldap::entry","net::ldap::entry","net::ldap","net::ldap","net::ldap::entry","net::ldap::entry","net::ldap","net::ldap","net::ldap::filter","net::ldap","net::ldap","net::ber","net::ldap::filter","net::ldap::filter","net::ldap","net::ldap","net::ldap::entry","net::ldap::entry","net::ldap::entry","net::ldap::dn","net::ldap","net::ldap::filter","net::ldap::filter","net::ldap::filter","net::ldap::dn","net::ldap::filter","net::ldap::filter","net::ldap::filter","net::ldap::dataset","net::ldap::entry","net::ldap::filter","net::ldap::password","net::ldap","net::ldap::connection::getbyteforsslsocket","net::ldap::filter","net::ldap::filter","net::ldap::filter","net::ldap::filter","net::ldap::dn","net::ldap","net::ldap","net::ldap::filter","net::ldap::filter","net::ber::beridentifiedarray","net::ber::beridentifiedoid","net::ber::beridentifiedstring","net::ldap","net::ldap::dn","net::ldap::pdu","net::ldap","net::ldap","net::ldap","net::ldap::filter","net::ber::berparser","net::ldap::pdu","net::ldap::pdu","net::ldap::pdu","net::ldap::filter","net::ldap::pdu","net::ldap::pdu","net::ldap::pdu","net::ldap::pdu","net::ldap::pdu","net::ldap::filter","net::ber::berparser","net::ber::extensions::string","net::ber::extensions::string","net::ber::berparser","net::ldap::dataset","net::ldap","net::ldap","net::ldap::pdu","net::ldap::pdu","net::ldap::pdu","net::ldap","net::ldap","net::ldap","net::ldap::entry","net::ldap::dn","net::ber::beridentifiedoid","net::ber::beridentifiednull","net::ber::beridentifiedoid","net::ber::extensions::array","net::ber::extensions::bignum","net::ber::extensions::falseclass","net::ber::extensions::fixnum","net::ber::extensions::string","net::ber::extensions::trueclass","net::ldap::filter","net::ber::extensions::fixnum","net::ber::extensions::string","net::ber::extensions::array","net::ber::extensions::array","net::ber::extensions::string","net::ber::extensions::fixnum","net::ber::extensions::fixnum","net::ber::extensions::fixnum","net::ber::beridentifiedoid","net::ber::extensions::array","net::ber::extensions::array","net::ber::extensions::array","net::ber::extensions::array","net::ldap::dataset","net::ldap::dataset","net::ldap::entry","net::ldap::dataset","net::ldap::filter","net::ldap::filter","net::ber::beridentifiedoid","net::ldap::dn","net::ldap::filter","net::ldap::filter","net::ldap::entry","net::ldap::filter","net::ldap::filter","files/contributors_rdoc.html","files/hacking_rdoc.html","files/history_rdoc.html","files/license_rdoc.html","files/manifest_txt.html","files/readme_rdoc.html","files/lib/net-ldap_rb.html","files/lib/net/ber_rb.html","files/lib/net/ber/ber_parser_rb.html","files/lib/net/ber/core_ext_rb.html","files/lib/net/ber/core_ext/array_rb.html","files/lib/net/ber/core_ext/bignum_rb.html","files/lib/net/ber/core_ext/false_class_rb.html","files/lib/net/ber/core_ext/fixnum_rb.html","files/lib/net/ber/core_ext/string_rb.html","files/lib/net/ber/core_ext/true_class_rb.html","files/lib/net/ldap_rb.html","files/lib/net/ldap/dataset_rb.html","files/lib/net/ldap/dn_rb.html","files/lib/net/ldap/entry_rb.html","files/lib/net/ldap/filter_rb.html","files/lib/net/ldap/password_rb.html","files/lib/net/ldap/pdu_rb.html","files/lib/net/snmp_rb.html"]}}