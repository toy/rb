var search_data = {"index":{"info":[["Object","lib/pry/core_extensions.rb","classes/Object.html"," < Object","",1],["Pry","lib/pry/command_context.rb","classes/Pry.html"," < Object","",1],["CommandContext","Pry","classes/Pry/CommandContext.html"," < Object","Command contexts are the objects runing each command. Helper modules can be mixed into this class. ",1],["VOID_VALUE","Pry::CommandContext","classes/Pry/CommandContext/VOID_VALUE.html"," < ","",1],["CommandProcessor","Pry","classes/Pry/CommandProcessor.html"," < Object","",1],["Result","Pry::CommandProcessor","classes/Pry/CommandProcessor/Result.html"," < Object","Wraps the return result of process_commands, indicates if the result IS a command and what kind of command",1],["CommandSet","Pry","classes/Pry/CommandSet.html"," < Object","This class is used to create sets of commands. Commands can be imported from different sets, aliased,",1],["Command","Pry::CommandSet","classes/Pry/CommandSet/Command.html"," < Struct.new(:name, :description, :options, :block)","",1],["Config","Pry","classes/Pry/Config.html"," < OpenStruct","",1],["DefaultCommands","Pry","classes/Pry/DefaultCommands.html"," < ","",1],["ExtendedCommands","Pry","classes/Pry/ExtendedCommands.html"," < ","",1],["Helpers","Pry","classes/Pry/Helpers.html"," < ","",1],["BaseHelpers","Pry::Helpers","classes/Pry/Helpers/BaseHelpers.html"," < ","",1],["CommandHelpers","Pry::Helpers","classes/Pry/Helpers/CommandHelpers.html"," < ","",1],["OptionsHelpers","Pry::Helpers","classes/Pry/Helpers/OptionsHelpers.html"," < ","",1],["Text","Pry::Helpers","classes/Pry/Helpers/Text.html"," < ","The methods defined on {Text} are available to custom commands via {Pry::CommandContext#text}. ",1],["History","Pry","classes/Pry/History.html"," < Object","The History class is responsible for maintaining the user's input history, both internally and within",1],["HistoryArray","Pry","classes/Pry/HistoryArray.html"," < Object","A history array is an array to which you can only add elements. Older entries are removed progressively,",1],["Indent","Pry","classes/Pry/Indent.html"," < Object","Pry::Indent is a class that can be used to indent a number of lines containing Ruby code similar as to",1],["InputCompleter","Pry","classes/Pry/InputCompleter.html"," < ","Implements tab completion for Readline in Pry ",1],["Method","Pry","classes/Pry/Method.html"," < Object","",1],["NoCommandError","Pry","classes/Pry/NoCommandError.html"," < StandardError","",1],["PluginManager","Pry","classes/Pry/PluginManager.html"," < Object","",1],["NoPlugin","Pry::PluginManager","classes/Pry/PluginManager/NoPlugin.html"," < Object","Placeholder when no associated gem found, displays warning ",1],["Plugin","Pry::PluginManager","classes/Pry/PluginManager/Plugin.html"," < Object","",1],["RbxMethod","Pry","classes/Pry/RbxMethod.html"," < ","",1],["RbxPath","Pry","classes/Pry/RbxPath.html"," < ","",1],["<<","Pry::History","classes/Pry/History.html#M000093","(line)","Alias for #push",2],["<<","Pry::HistoryArray","classes/Pry/HistoryArray.html#M000097","(value)","Pushes an object at the end of the array @param [Object] value Object to be added ",2],["==","Pry::Method","classes/Pry/Method.html#M000149","(obj)","@return [Boolean] ",2],["[]","Pry::HistoryArray","classes/Pry/HistoryArray.html#M000098","(index_or_range, size = nil)","@overload [](index) @param [Integer] index Index of the item to access. @return [Object, nil] Item at",2],["__binding__","Object","classes/Object.html#M000034","()","Return a binding object for the receiver. ",2],["activate!","Pry::PluginManager::Plugin","classes/Pry/PluginManager/Plugin.html#M000128","()","Activate the plugin (require the gem - enables/loads the plugin immediately at point of call, even if",2],["add_method_object_options","Pry::Helpers::OptionsHelpers","classes/Pry/Helpers/OptionsHelpers.html#M000081","(opt)","Add the method object options to an unused Slop instance. ",2],["alias?","Pry::Method","classes/Pry/Method.html#M000148","()","@return [Boolean] Is the method definitely an alias? ",2],["alias_command","Pry::CommandSet","classes/Pry/CommandSet.html#M000025","(new_name, old_name, desc=\"\")","Aliases a command @param [String] new_name New name of the command. @param [String] old_name Old name",2],["all_from_class","Pry::Method","classes/Pry/Method.html#M000116","(klass)","Get all of the instance methods of a `Class` or `Module` @param [Class,Module] klass @return [Array[Pry::Method]]",2],["all_from_common","Pry::Method","classes/Pry/Method.html#M000120","(obj, method_type)","See all_from_class and all_from_obj. If method_type is :instance_method, obj must be a `Class` or a `Module`",2],["all_from_obj","Pry::Method","classes/Pry/Method.html#M000117","(obj)","Get all of the methods on an `Object` @param [Object] obj @return [Array[Pry::Method]] ",2],["below_ceiling","Pry::DefaultCommands","classes/Pry/DefaultCommands.html#M000040","(obj, opts)","Get a lambda that can be used with .take_while to prevent over-eager traversal of the Object's ancestry",2],["binding_for","Pry","classes/Pry.html#M000176","(target)","Return a `Binding` object for `target` or return `target` if it is already a `Binding`. In the case where",2],["bold","Pry::Helpers::Text","classes/Pry/Helpers/Text.html#M000085","(text)","Returns _text_ as bold text for use on a terminal. _Pry.color_ must be true for this method to perform",2],["build_completion_proc","Pry::InputCompleter","classes/Pry/InputCompleter.html#M000031","(target, commands=[\"\"])","Return a new completion proc for use by Readline. @param [Binding] target The current binding context.",2],["call","Pry::CommandSet::Command","classes/Pry/CommandSet/Command.html#M000016","(context, *args)","",2],["class_name","Pry::DefaultCommands","classes/Pry/DefaultCommands.html#M000039","(klass)","Get the name of the klass for pretty display in the title column of ls -m as there can only ever be one",2],["clear","Pry::History","classes/Pry/History.html#M000094","()","Clears all history. Anything the user entered before this point won't be saved, but anything they put",2],["color","Pry::DefaultCommands","classes/Pry/DefaultCommands.html#M000047","(type, str)","Color output based on config.ls.*_color ",2],["colorize_code","Pry::Helpers::BaseHelpers","classes/Pry/Helpers/BaseHelpers.html#M000059","(code)","",2],["command","Pry::CommandSet","classes/Pry/CommandSet.html#M000020","(name, description=\"No description.\", options={}, &block)","Defines a new Pry command. @param [String, Regexp] name The name of the command. Can be Regexp as well",2],["command?","Pry::CommandProcessor::Result","classes/Pry/CommandProcessor/Result.html#M000006","()","Is the result a command? @return [Boolean] ",2],["command_dependencies_met?","Pry::Helpers::BaseHelpers","classes/Pry/Helpers/BaseHelpers.html#M000051","(options)","",2],["command_error","Pry::Helpers::CommandHelpers","classes/Pry/Helpers/CommandHelpers.html#M000062","(message, omit_help)","",2],["command_matched","Pry::CommandProcessor","classes/Pry/CommandProcessor.html#M000013","(val, target)","Determine whether a Pry command was matched and return command data and argument string. This method",2],["commands","Pry::CommandContext","classes/Pry/CommandContext.html#M000002","()","",2],["convert_index","Pry::HistoryArray","classes/Pry/HistoryArray.html#M000104","(n)","",2],["convert_path_to_full","Pry::RbxPath","classes/Pry/RbxPath.html#M000193","(path)","",2],["convert_range","Pry::HistoryArray","classes/Pry/HistoryArray.html#M000105","(range)","",2],["convert_to_regex","Pry::CommandProcessor","classes/Pry/CommandProcessor.html#M000011","(obj)","Convert the object to a form that can be interpolated into a Regexp cleanly. @return [String] The string",2],["core?","Pry::RbxMethod","classes/Pry/RbxMethod.html#M000184","()","",2],["core_code","Pry::RbxMethod","classes/Pry/RbxMethod.html#M000185","()","",2],["core_doc","Pry::RbxMethod","classes/Pry/RbxMethod.html#M000186","()","",2],["core_path_line","Pry::RbxMethod","classes/Pry/RbxMethod.html#M000187","()","",2],["correct_arg_arity","Pry::CommandSet::Command","classes/Pry/CommandSet/Command.html#M000018","(arity, args)","",2],["correct_indentation","Pry::Indent","classes/Pry/Indent.html#M000112","(full_line, overhang=0)","Return a string which, when printed, will rewrite the previous line with the correct indentation. Mostly",2],["create_command_stub","Pry::Helpers::BaseHelpers","classes/Pry/Helpers/BaseHelpers.html#M000055","(names, description, options, block)","",2],["default","Pry::Helpers::Text","classes/Pry/Helpers/Text.html#M000086","(text)","Returns _text_ in the default foreground colour. Use this instead of \"black\" or \"white\" when you mean",2],["default_editor_for_platform","Pry","classes/Pry.html#M000169","()","",2],["define_default_commands","Pry::CommandSet","classes/Pry/CommandSet.html#M000030","()","",2],["delegate_accessors","Pry","classes/Pry.html#M000153","(delagatee, *names)","convenience method ",2],["delete","Pry::CommandSet","classes/Pry/CommandSet.html#M000022","(*names)","Removes some commands from the set @param [Array<String>] names name of the commands to remove ",2],["desc","Pry::CommandSet","classes/Pry/CommandSet.html#M000027","(name, description)","Sets the description for a command (replacing the old description.) @param [String] name The command",2],["disable!","Pry::PluginManager::Plugin","classes/Pry/PluginManager/Plugin.html#M000126","()","Disable a plugin. (prevents plugin from being loaded, cannot disable an already activated plugin) ",2],["doc","Pry::Method","classes/Pry/Method.html#M000135","()","@return [String, nil] The documentation for the method, or `nil` if it's unavailable. @raise [CommandError]",2],["dynamically_defined?","Pry::Method","classes/Pry/Method.html#M000146","()","@return [Boolean] Was the method defined outside a source file? ",2],["each","Pry::CommandSet","classes/Pry/CommandSet.html#M000021","(&block)","",2],["each","Pry::HistoryArray","classes/Pry/HistoryArray.html#M000101","()","",2],["empty?","Pry::HistoryArray","classes/Pry/HistoryArray.html#M000100","()","",2],["enable!","Pry::PluginManager::Plugin","classes/Pry/PluginManager/Plugin.html#M000127","()","Enable a plugin. (does not load it immediately but puts on 'white list' to be loaded) ",2],["end_of_statement?","Pry::Indent","classes/Pry/Indent.html#M000110","(last_token, last_kind)","If the code just before an \"if\" or \"while\" token on a line looks like the end of a statement, then we",2],["exec_hook","Pry","classes/Pry.html#M000182","(hook_name, *args, &block)","Execute the hook `hook_name`, if it is defined. @param [Symbol] hook_name The hook to execute @param",2],["execute_command","Pry::CommandProcessor","classes/Pry/CommandProcessor.html#M000017","(target, command, options, *args)","Execute a Pry command. This method should not need to be invoked directly. @param [Binding] target The",2],["file_map","Pry::Helpers::CommandHelpers","classes/Pry/Helpers/CommandHelpers.html#M000068","()","",2],["find_command","Pry::Helpers::BaseHelpers","classes/Pry/Helpers/BaseHelpers.html#M000049","(name)","",2],["fix_coderay_colors","Pry","classes/Pry.html#M000172","()","To avoid mass-confusion, we change the default colour of \"white\" to \"blue\" enabling global legibility",2],["format_constants","Pry::DefaultCommands","classes/Pry/DefaultCommands.html#M000043","(mod, constants)","",2],["format_globals","Pry::DefaultCommands","classes/Pry/DefaultCommands.html#M000044","(globals)","",2],["format_locals","Pry::DefaultCommands","classes/Pry/DefaultCommands.html#M000045","(locals)","",2],["format_methods","Pry::DefaultCommands","classes/Pry/DefaultCommands.html#M000041","(methods)","Format and colourise a list of methods. ",2],["format_variables","Pry::DefaultCommands","classes/Pry/DefaultCommands.html#M000042","(type, vars)","",2],["from_binding","Pry::Method","classes/Pry/Method.html#M000113","(b)","Given a `Binding`, try to extract the `::Method` it originated from and use it to instantiate a `Pry::Method`.",2],["from_class","Pry::Method","classes/Pry/Method.html#M000114","(klass, name)","Given a `Class` or `Module` and the name of a method, try to instantiate a `Pry::Method` containing the",2],["from_obj","Pry::Method","classes/Pry/Method.html#M000115","(obj, name)","Given an object and the name of a method, try to instantiate a `Pry::Method` containing the method of",2],["from_str","Pry::Method","classes/Pry/Method.html#M000111","(name, target=TOPLEVEL_BINDING, options={})","Given a string representing a method name and optionally a binding to search in, find and return the",2],["gem_installed?","Pry::Helpers::BaseHelpers","classes/Pry/Helpers/BaseHelpers.html#M000050","(gem_name)","",2],["gem_located?","Pry::PluginManager","classes/Pry/PluginManager.html#M000138","(gem_name)","",2],["get_method_or_raise","Pry::Helpers::CommandHelpers","classes/Pry/Helpers/CommandHelpers.html#M000057","(name, target, opts={}, omit_help=false)","",2],["handle_read_errors","Pry","classes/Pry.html#M000210","()","Manage switching of input objects on encountering EOFErrors ",2],["heading","Pry::Helpers::BaseHelpers","classes/Pry/Helpers/BaseHelpers.html#M000061","(text)","formatting ",2],["helpers","Pry::CommandSet","classes/Pry/CommandSet.html#M000028","(&block)","Defines helpers methods for this command sets. Those helpers are only defined in this command set. @yield",2],["highlight","Pry::Helpers::BaseHelpers","classes/Pry/Helpers/BaseHelpers.html#M000060","(string, regexp, highlight_color=:bright_yellow)","",2],["history_file","Pry","classes/Pry.html#M000166","()","Get the full path of the history_path for pry. ",2],["import","Pry::CommandSet","classes/Pry/CommandSet.html#M000023","(*sets)","Imports all the commands from one or more sets. @param [Array<CommandSet>] sets Command sets, all of",2],["import_from","Pry::CommandSet","classes/Pry/CommandSet.html#M000024","(set, *names)","Imports some commands from a set @param [CommandSet] set Set to import commands from @param [Array<String>]",2],["indent","Pry::Indent","classes/Pry/Indent.html#M000108","(input)","Indents a string and returns it. This string can either be a single line or multiple ones. @example str",2],["indentation_delta","Pry::Indent","classes/Pry/Indent.html#M000109","(tokens)","Get the change in indentation indicated by the line. By convention, you remove indent from the line containing",2],["init","Pry","classes/Pry.html#M000175","()","Basic initialization. ",2],["initial_session?","Pry","classes/Pry.html#M000167","()","@return [Boolean] Whether this is the first time a Pry session has been started since loading the Pry",2],["initialize_special_locals","Pry","classes/Pry.html#M000183","(target)","Make sure special locals exist at start of session ",2],["inject_local","Pry","classes/Pry.html#M000179","(name, value, b)","Injects a local variable into the provided binding. @param [String] name The name of the local to inject.",2],["inject_special_locals","Pry","classes/Pry.html#M000188","(target)","",2],["inspect","Pry::CommandContext::VOID_VALUE","classes/Pry/CommandContext/VOID_VALUE.html#M000000","()","give it a nice inspect ",2],["inspect","Pry::HistoryArray","classes/Pry/HistoryArray.html#M000103","()","",2],["instance_resolution_order","Pry::Method","classes/Pry/Method.html#M000119","(klass)","Get every `Class` and `Module`, in order, that will be checked when looking for methods on instances",2],["interpolate_string","Pry::CommandProcessor","classes/Pry/CommandProcessor.html#M000012","(str, target)","Revaluate the string (str) and perform interpolation. @param [String] str The string to reevaluate with",2],["invoke_editor","Pry::Helpers::CommandHelpers","classes/Pry/Helpers/CommandHelpers.html#M000078","(file, line)","",2],["is_a?","Pry::Method","classes/Pry/Method.html#M000150","(klass)","@param [Class] klass @return [Boolean] ",2],["is_core_path?","Pry::RbxPath","classes/Pry/RbxPath.html#M000192","(path)","",2],["jruby?","Pry::Helpers::BaseHelpers","classes/Pry/Helpers/BaseHelpers.html#M000065","()","are we on Jruby platform? ",2],["keep_retval?","Pry::CommandProcessor::Result","classes/Pry/CommandProcessor/Result.html#M000008","()","Is the return value kept for this command? (i.e :keep_retval => true) @return [Boolean] ",2],["kind_of?","Pry::Method","classes/Pry/Method.html#M000151","(klass)","Alias for #is_a?",2],["last_result_is_exception?","Pry","classes/Pry.html#M000209","()","@return [Boolean] True if the last result is an exception that was raised, as opposed to simply an instance",2],["lesspipe","Pry::Helpers::BaseHelpers","classes/Pry/Helpers/BaseHelpers.html#M000071","(*args)","Create scrollable output via less! This command runs `less` in a subprocess, and gives you the IO to",2],["list_commands","Pry::CommandSet","classes/Pry/CommandSet.html#M000029","()","@return [Array] The list of commands provided by the command set. ",2],["load","Pry::History","classes/Pry/History.html#M000090","(filename)","Loads a file's contents into the input history. @param [String] filename @return [Integer] The number",2],["load_history","Pry","classes/Pry.html#M000164","()","Load Readline history if required. ",2],["load_plugins","Pry::PluginManager","classes/Pry/PluginManager.html#M000137","()","Require all enabled plugins, disabled plugins are skipped. ",2],["load_rc","Pry","classes/Pry.html#M000160","()","Load the rc files given in the `Pry::RC_FILES` array. This method can also be used to reload the files",2],["load_requires","Pry","classes/Pry.html#M000161","()","Load any Ruby files specified with the -r flag on the command line. ",2],["locate_plugins","Pry::PluginManager","classes/Pry/PluginManager.html#M000134","()","Find all installed Pry plugins and store them in an internal array. ",2],["make_header","Pry::Helpers::CommandHelpers","classes/Pry/Helpers/CommandHelpers.html#M000063","(meth, content=meth.source)","",2],["memory_size","Pry","classes/Pry.html#M000180","()","@return [Integer] The maximum amount of objects remembered by the inp and out arrays. Defaults to 100.",2],["memory_size=","Pry","classes/Pry.html#M000181","(size)","",2],["method_missing","Pry::Method","classes/Pry/Method.html#M000154","(method_name, *args, &block)","Delegate any unknown calls to the wrapped method. ",2],["method_missing","Pry::PluginManager::NoPlugin","classes/Pry/PluginManager/NoPlugin.html#M000123","(*args)","",2],["name","Pry::Method","classes/Pry/Method.html#M000131","()","Get the name of the method as a String, regardless of the underlying Method#name type. @return [String]",2],["new","Pry","classes/Pry.html#M000173","(options={})","Create a new `Pry` object. @param [Hash] options The optional configuration parameters. @option options",2],["new","Pry::CommandProcessor","classes/Pry/CommandProcessor.html#M000009","(pry_instance)","",2],["new","Pry::CommandProcessor::Result","classes/Pry/CommandProcessor/Result.html#M000005","(is_command, keep_retval = false, retval = nil)","",2],["new","Pry::CommandSet","classes/Pry/CommandSet.html#M000019","(*imported_sets, &block)","@param [Array<CommandSet>] imported_sets Sets which will be imported automatically @yield Optional block",2],["new","Pry::History","classes/Pry/History.html#M000089","()","",2],["new","Pry::HistoryArray","classes/Pry/HistoryArray.html#M000096","(size)","@param [Integer] size Maximum amount of objects in the array ",2],["new","Pry::Indent","classes/Pry/Indent.html#M000106","()","",2],["new","Pry::Method","classes/Pry/Method.html#M000130","(method, known_info={})","A new instance of `Pry::Method` wrapping the given `::Method`, `UnboundMethod`, or `Proc`. @param [::Method,",2],["new","Pry::NoCommandError","classes/Pry/NoCommandError.html#M000015","(name, owner)","",2],["new","Pry::PluginManager","classes/Pry/PluginManager.html#M000133","()","",2],["new","Pry::PluginManager::NoPlugin","classes/Pry/PluginManager/NoPlugin.html#M000122","(name)","",2],["new","Pry::PluginManager::Plugin","classes/Pry/PluginManager/Plugin.html#M000124","(name, gem_name, spec, enabled)","",2],["no_color","Pry::Helpers::Text","classes/Pry/Helpers/Text.html#M000087","(&block)","Executes _block_ with _Pry.color_ set to false. @param [Proc] @return [void] ",2],["normalized_line_number","Pry::Helpers::CommandHelpers","classes/Pry/Helpers/CommandHelpers.html#M000072","(line_number, total_lines)","convert negative line numbers to positive by wrapping around last line (as per array indexing with negative",2],["one_index_number","Pry","classes/Pry.html#M000035","(line_number)","",2],["one_index_range","Pry","classes/Pry.html#M000036","(range)","",2],["one_index_range_or_number","Pry","classes/Pry.html#M000037","(range_or_number)","",2],["original_name","Pry::Method","classes/Pry/Method.html#M000145","()","@return [Symbol, nil] The original name the method was defined under, before any aliasing, or `nil` if",2],["output_section","Pry::DefaultCommands","classes/Pry/DefaultCommands.html#M000046","(heading, body)","Add a new section to the output. Outputs nothing if the section would be empty. ",2],["page_size","Pry::Helpers::BaseHelpers","classes/Pry/Helpers/BaseHelpers.html#M000064","()","",2],["parse_options!","Pry::Helpers::OptionsHelpers","classes/Pry/Helpers/OptionsHelpers.html#M000079","(args, *extras, &block)","Use Slop to parse the arguments given. @param [Array] args  The options are stripped out by Slop. @param",2],["plugins","Pry::PluginManager","classes/Pry/PluginManager.html#M000136","()","@return [Hash] A hash with all plugin names (minus the 'pry-') as keys and Plugin objects as values.",2],["pop_prompt","Pry","classes/Pry.html#M000216","()","Pops the current prompt off of the prompt stack. If the prompt you are popping is the last prompt, it",2],["process_commands","Pry::CommandProcessor","classes/Pry/CommandProcessor.html#M000014","(val, eval_string, target)","Process Pry commands. Pry commands are not Ruby methods and are evaluated prior to Ruby expressions.",2],["process_comment_markup","Pry::Helpers::CommandHelpers","classes/Pry/Helpers/CommandHelpers.html#M000077","(comment, code_type)","",2],["process_line","Pry","classes/Pry.html#M000203","(val, eval_string, target)","Process the line received. This method should not need to be invoked directly. @param [String] val The",2],["process_method_object_options","Pry::Helpers::OptionsHelpers","classes/Pry/Helpers/OptionsHelpers.html#M000083","(args, opts)","Add the derived :method_object option to a used Slop instance. ",2],["process_rdoc","Pry::Helpers::CommandHelpers","classes/Pry/Helpers/CommandHelpers.html#M000074","(comment, code_type)","",2],["process_yardoc","Pry::Helpers::CommandHelpers","classes/Pry/Helpers/CommandHelpers.html#M000076","(comment)","",2],["process_yardoc_tag","Pry::Helpers::CommandHelpers","classes/Pry/Helpers/CommandHelpers.html#M000075","(comment, tag)","",2],["prompt","Pry","classes/Pry.html#M000177","()","The current prompt. This is the prompt at the top of the prompt stack. @example self.prompt = Pry::SIMPLE_PROMPT",2],["prompt=","Pry","classes/Pry.html#M000178","(new_prompt)","",2],["prompt_stack","Pry","classes/Pry.html#M000214","()","the array that the prompt stack is stored in ",2],["pry","Object","classes/Object.html#M000033","(target=self)","Start a Pry REPL. This method differs from `Pry.start` in that it does not support an options hash. Also,",2],["pry_doc_info","Pry::Method","classes/Pry/Method.html#M000155","()","@return [YARD::CodeObjects::MethodObject] @raise [CommandError] Raises when the method can't be found",2],["pry_method?","Pry::Method","classes/Pry/Method.html#M000147","()","@return [Boolean] Was the method defined within the Pry REPL? ",2],["push","Pry::History","classes/Pry/History.html#M000092","(line)","Adds a line to the input history, ignoring blank and duplicate lines. @param [String] line @return [String]",2],["push_prompt","Pry","classes/Pry.html#M000215","(new_prompt)","Pushes the current prompt onto a stack that it can be restored from later. Use this if you wish to temporarily",2],["r","Pry","classes/Pry.html#M000200","(target=TOPLEVEL_BINDING, eval_string=\"\")","Perform a read. If no parameter is given, default to top-level (main). This is a multi-line read; so",2],["rbx?","Pry::Helpers::BaseHelpers","classes/Pry/Helpers/BaseHelpers.html#M000066","()","are we on rbx platform? ",2],["re","Pry","classes/Pry.html#M000199","(target=TOPLEVEL_BINDING)","Perform a read-eval If no parameter is given, default to top-level (main). @param [Object, Binding] target",2],["read_between_the_lines","Pry::Helpers::CommandHelpers","classes/Pry/Helpers/CommandHelpers.html#M000073","(file_name, start_line, end_line)","returns the file content between the lines and the normalized start and end line numbers. ",2],["readline","Pry","classes/Pry.html#M000211","(current_prompt=\"> \")","Returns the next line of input to be used by the pry instance. This method should not need to be invoked",2],["refresh","Pry","classes/Pry.html#M000174","(options={})","Refresh the Pry instance settings from the Pry class. Allows options to be specified to override settings",2],["render_output","Pry::Helpers::CommandHelpers","classes/Pry/Helpers/CommandHelpers.html#M000054","(should_flood, start_line, text, color=:blue)","if start_line is not false then add line numbers starting with start_line ",2],["rep","Pry","classes/Pry.html#M000198","(target=TOPLEVEL_BINDING)","Perform a read-eval-print. If no parameter is given, default to top-level (main). @param [Object, Binding]",2],["repl","Pry","classes/Pry.html#M000196","(target=TOPLEVEL_BINDING)","Start a read-eval-print-loop. If no parameter is given, default to top-level (main). @param [Object,",2],["repl_epilogue","Pry","classes/Pry.html#M000191","(target)","Clean-up after the repl session. @param [Binding] target The target binding for the session. ",2],["repl_prologue","Pry","classes/Pry.html#M000190","(target)","Initialize the repl session. @param [Binding] target The target binding for the session. ",2],["reset","Pry::Indent","classes/Pry/Indent.html#M000107","()","reset internal state ",2],["reset_defaults","Pry","classes/Pry.html#M000171","()","Set all the configurable options back to their default values ",2],["resolution_order","Pry::Method","classes/Pry/Method.html#M000118","(obj)","Get every `Class` and `Module`, in order, that will be checked when looking for an instance method to",2],["respond_to?","Pry::Method","classes/Pry/Method.html#M000152","(method_name)","@param [String, Symbol] method_name @return [Boolean] ",2],["retrieve_line","Pry","classes/Pry.html#M000202","(eval_string, target)","Read a line of input and check for ^d, also determine prompt to use. This method should not need to be",2],["run","Pry::CommandContext","classes/Pry/CommandContext.html#M000001","(command_string, *args)","Run a command from another command. @param [String] command_string The string that invokes the command",2],["run_command","Pry","classes/Pry.html#M000204","(val, eval_string = \"\", target = binding_stack.last)","Run the specified command. @param [String] val The command (and its params) to execute. @param [String]",2],["run_command","Pry","classes/Pry.html#M000168","(command_string, options={})","Run a Pry command from outside a session. The commands available are those referenced by `Pry.commands`",2],["run_command","Pry::CommandSet","classes/Pry/CommandSet.html#M000026","(context, name, *args)","Runs a command. @param [Object] context Object which will be used as self during the command. @param",2],["rvm_convert_path_to_full","Pry::RbxPath","classes/Pry/RbxPath.html#M000195","(path)","",2],["rvm_ruby?","Pry::RbxPath","classes/Pry/RbxPath.html#M000194","(path)","",2],["safe_send","Pry::Method","classes/Pry/Method.html#M000121","(obj, method, *args, &block)","Acts like send but ignores any methods defined below Object or Class in the inheritance heirarchy. This",2],["save","Pry::History","classes/Pry/History.html#M000091","(filename)","Appends input history from this session to a file. @param [String] filename @return [Integer] The number",2],["save_history","Pry","classes/Pry.html#M000165","()","Save new lines of Readline history if required. ",2],["select_message","Pry::InputCompleter","classes/Pry/InputCompleter.html#M000032","(receiver, message, candidates)","",2],["select_prompt","Pry","classes/Pry.html#M000213","(first_line, target_self)","Returns the appropriate prompt to use. This method should not need to be invoked directly. @param [Boolean]",2],["set_config_defaults","Pry","classes/Pry.html#M000170","()","",2],["set_file_and_dir_locals","Pry::Helpers::BaseHelpers","classes/Pry/Helpers/BaseHelpers.html#M000052","(file_name)","",2],["set_last_exception","Pry","classes/Pry.html#M000206","(ex, target)","Set the last exception for a session. This method should not need to be invoked directly. @param [Exception]",2],["set_last_result","Pry","classes/Pry.html#M000205","(result, target)","Set the last result of an eval. This method should not need to be invoked directly. @param [Object] result",2],["should_print?","Pry","classes/Pry.html#M000212","()","Whether the print proc should be invoked. Currently only invoked if the output is not suppressed OR the",2],["show_result","Pry","classes/Pry.html#M000201","(result)","Output the result or pass to an exception handler (if result is an exception). ",2],["signature","Pry::Method","classes/Pry/Method.html#M000143","()","@return [String] A representation of the method's signature, including its name and parameters. Optional",2],["silence_warnings","Pry::Helpers::BaseHelpers","classes/Pry/Helpers/BaseHelpers.html#M000048","()","",2],["simple_pager","Pry::Helpers::BaseHelpers","classes/Pry/Helpers/BaseHelpers.html#M000067","(text, output=output())","a simple pager for systems without `less`. A la windows. ",2],["singleton_class","Pry::Method","classes/Pry/Method.html#M000129","(obj)","",2],["singleton_class_resolution_order","Pry::Method","classes/Pry/Method.html#M000125","(klass)","Get the singleton classes of superclasses that could define methods on the given class object, and any",2],["size","Pry::HistoryArray","classes/Pry/HistoryArray.html#M000099","()","@return [Integer] Amount of objects in the array ",2],["source","Pry::Method","classes/Pry/Method.html#M000132","()","@return [String, nil] The source code of the method, or `nil` if it's unavailable. ",2],["source_file","Pry::Method","classes/Pry/Method.html#M000140","()","@return [String, nil] The name of the file the method is defined in, or `nil` if the filename is unavailable.",2],["source_line","Pry::Method","classes/Pry/Method.html#M000141","()","@return [Fixnum, nil] The line of code in `source_file` which begins the method's definition, or `nil`",2],["source_type","Pry::Method","classes/Pry/Method.html#M000139","()","@return [Symbol] The source type of the method. The options are `:ruby` for ordinary Ruby methods, `:c`",2],["special_locals","Pry","classes/Pry.html#M000189","()","",2],["stagger_output","Pry::Helpers::BaseHelpers","classes/Pry/Helpers/BaseHelpers.html#M000069","(text, output=output())","Try to use `less` for paging, if it fails then use simple_pager. Also do not page if Pry.pager is falsey",2],["start","Pry","classes/Pry.html#M000162","(target=TOPLEVEL_BINDING, options={})","Start a Pry REPL. This method also loads the files specified in `Pry::RC_FILES` the first time it is",2],["start_line_syntax_for_editor","Pry::Helpers::CommandHelpers","classes/Pry/Helpers/CommandHelpers.html#M000080","(file_name, line_number)","Return the syntax for a given editor for starting the editor and moving to a particular line within that",2],["std_convert_path_to_full","Pry::RbxPath","classes/Pry/RbxPath.html#M000197","(path)","",2],["strip_color","Pry::Helpers::Text","classes/Pry/Helpers/Text.html#M000084","(text)","Remove any color codes from _text_. @param  [String, #to_s] text @return [String] _text_ stripped of",2],["strip_comments_from_c_code","Pry::Method","classes/Pry/Method.html#M000156","(code)","@param [String] code @return [String] ",2],["strip_leading_hash_and_whitespace_from_ruby_comments","Pry::Method","classes/Pry/Method.html#M000157","(comment)","@param [String] comment @return [String] ",2],["strip_leading_whitespace","Pry::Method","classes/Pry/Method.html#M000158","(text)","@param [String] text @return [String] ",2],["stub_proc","Pry::Helpers::BaseHelpers","classes/Pry/Helpers/BaseHelpers.html#M000053","(name, options)","",2],["super","Pry::Method","classes/Pry/Method.html#M000144","(times=1)","@return [Pry::Method, nil] The wrapped method that is called when you use \"super\" in the body of this",2],["super_using_ancestors","Pry::Method","classes/Pry/Method.html#M000159","(ancestors, times=1)","@param [Class,Module] the ancestors to investigate @return [Method] the unwrapped super-method ",2],["syntax_highlight_by_file_type_or_specified","Pry::Helpers::CommandHelpers","classes/Pry/Helpers/CommandHelpers.html#M000070","(contents, file_name, file_type)","",2],["temp_file","Pry::Helpers::CommandHelpers","classes/Pry/Helpers/CommandHelpers.html#M000056","()","Open a temp file and yield it to the block, closing it after @return [String] The path of the temp file",2],["text","Pry::CommandContext","classes/Pry/CommandContext.html#M000003","()","",2],["to_a","Pry::History","classes/Pry/History.html#M000095","()","Returns an Array containing all stored history. @return [Array<String>] An Array containing all lines",2],["to_a","Pry::HistoryArray","classes/Pry/HistoryArray.html#M000102","()","",2],["unindent","Pry::Helpers::CommandHelpers","classes/Pry/Helpers/CommandHelpers.html#M000082","(text)","Remove any common leading whitespace from every line in `text`. This can be used to make a HEREDOC line",2],["update_input_history","Pry","classes/Pry.html#M000208","(code)","Update Pry's internal state after evalling code. This method should not need to be invoked directly.",2],["use_ansi_codes?","Pry::Helpers::BaseHelpers","classes/Pry/Helpers/BaseHelpers.html#M000058","()","",2],["valid_command?","Pry::CommandProcessor","classes/Pry/CommandProcessor.html#M000010","(val, target=binding)","Is the string a valid command? @param [String] val The string passed in from the Pry prompt. @param [Binding]",2],["valid_expression?","Pry","classes/Pry.html#M000218","(code)","JRuby doesn't have Ripper, so use its native parser for 1.9 mode. ",2],["valid_expression?","Pry","classes/Pry.html#M000219","(code)","Determine if a string of code is a valid Ruby expression. Ruby 1.9 uses Ripper, Ruby 1.8 uses RubyParser.",2],["valid_expression?","Pry","classes/Pry.html#M000217","(code)","Determine if a string of code is a valid Ruby expression. Ruby 1.9 uses Ripper, Ruby 1.8 uses RubyParser.",2],["view_clip","Pry","classes/Pry.html#M000163","(obj, max_length = 60)","An inspector that clips the output to `max_length` chars. In case of > `max_length` chars the `#<Object...>",2],["visibility","Pry::Method","classes/Pry/Method.html#M000142","()","@return [Symbol] The visibility of the method. May be `:public`, `:protected`, or `:private`. ",2],["void","Pry::CommandContext","classes/Pry/CommandContext.html#M000004","()","",2],["void_command?","Pry::CommandProcessor::Result","classes/Pry/CommandProcessor/Result.html#M000007","()","Is the result a command and if it is, is it a void command? (one that does not return a value) @return",2],["with_line_numbers","Pry::Helpers::Text","classes/Pry/Helpers/Text.html#M000088","(text, offset, color=:blue)","Returns _text_ in a numbered list, beginning at _offset_. @param  [#each_line] text @param  [Fixnum]",2],["with_method_transaction","Pry::DefaultCommands","classes/Pry/DefaultCommands.html#M000038","(meth_name, target=TOPLEVEL_BINDING)","",2],["CHANGELOG","files/CHANGELOG.html","files/CHANGELOG.html","","5/11/2011 version 0.9.7.4 hotfix * ls -M now works in modules (bugfix) * added exception msg for bad",3],["LICENSE","files/LICENSE.html","files/LICENSE.html","","License -------  (The MIT License)   Copyright (c) 2011 John Mair (banisterfiend)  Permission is hereby",3],["README.markdown","files/README_markdown.html","files/README_markdown.html","","[![Build Status](https://secure.travis-ci.org/pry/pry.png)](http://travis-ci.org/pry/pry) <center> ![Alt",3],["TODO","files/TODO.html","files/TODO.html","","0.9.5 * include method visiblity in show-doc and stat output * tempfile should end in .rb (for edit -t)",3],["pry.rb","files/lib/pry_rb.html","files/lib/pry_rb.html","","(C) John Mair (banisterfiend) 2011 MIT License ",3],["command_context.rb","files/lib/pry/command_context_rb.html","files/lib/pry/command_context_rb.html","","",3],["command_processor.rb","files/lib/pry/command_processor_rb.html","files/lib/pry/command_processor_rb.html","","",3],["command_set.rb","files/lib/pry/command_set_rb.html","files/lib/pry/command_set_rb.html","","",3],["commands.rb","files/lib/pry/commands_rb.html","files/lib/pry/commands_rb.html","","",3],["completion.rb","files/lib/pry/completion_rb.html","files/lib/pry/completion_rb.html","","taken from irb ",3],["config.rb","files/lib/pry/config_rb.html","files/lib/pry/config_rb.html","","",3],["core_extensions.rb","files/lib/pry/core_extensions_rb.html","files/lib/pry/core_extensions_rb.html","","",3],["custom_completions.rb","files/lib/pry/custom_completions_rb.html","files/lib/pry/custom_completions_rb.html","","",3],["basic.rb","files/lib/pry/default_commands/basic_rb.html","files/lib/pry/default_commands/basic_rb.html","","",3],["context.rb","files/lib/pry/default_commands/context_rb.html","files/lib/pry/default_commands/context_rb.html","","",3],["documentation.rb","files/lib/pry/default_commands/documentation_rb.html","files/lib/pry/default_commands/documentation_rb.html","","",3],["easter_eggs.rb","files/lib/pry/default_commands/easter_eggs_rb.html","files/lib/pry/default_commands/easter_eggs_rb.html","","",3],["gems.rb","files/lib/pry/default_commands/gems_rb.html","files/lib/pry/default_commands/gems_rb.html","","",3],["input.rb","files/lib/pry/default_commands/input_rb.html","files/lib/pry/default_commands/input_rb.html","","",3],["introspection.rb","files/lib/pry/default_commands/introspection_rb.html","files/lib/pry/default_commands/introspection_rb.html","","",3],["ls.rb","files/lib/pry/default_commands/ls_rb.html","files/lib/pry/default_commands/ls_rb.html","","",3],["shell.rb","files/lib/pry/default_commands/shell_rb.html","files/lib/pry/default_commands/shell_rb.html","","",3],["experimental.rb","files/lib/pry/extended_commands/experimental_rb.html","files/lib/pry/extended_commands/experimental_rb.html","","",3],["user_command_api.rb","files/lib/pry/extended_commands/user_command_api_rb.html","files/lib/pry/extended_commands/user_command_api_rb.html","","",3],["helpers.rb","files/lib/pry/helpers_rb.html","files/lib/pry/helpers_rb.html","","",3],["base_helpers.rb","files/lib/pry/helpers/base_helpers_rb.html","files/lib/pry/helpers/base_helpers_rb.html","","",3],["command_helpers.rb","files/lib/pry/helpers/command_helpers_rb.html","files/lib/pry/helpers/command_helpers_rb.html","","",3],["options_helpers.rb","files/lib/pry/helpers/options_helpers_rb.html","files/lib/pry/helpers/options_helpers_rb.html","","",3],["text.rb","files/lib/pry/helpers/text_rb.html","files/lib/pry/helpers/text_rb.html","","",3],["history.rb","files/lib/pry/history_rb.html","files/lib/pry/history_rb.html","","",3],["history_array.rb","files/lib/pry/history_array_rb.html","files/lib/pry/history_array_rb.html","","",3],["indent.rb","files/lib/pry/indent_rb.html","files/lib/pry/indent_rb.html","","",3],["method.rb","files/lib/pry/method_rb.html","files/lib/pry/method_rb.html","","",3],["plugins.rb","files/lib/pry/plugins_rb.html","files/lib/pry/plugins_rb.html","","",3],["pry_class.rb","files/lib/pry/pry_class_rb.html","files/lib/pry/pry_class_rb.html","","",3],["pry_instance.rb","files/lib/pry/pry_instance_rb.html","files/lib/pry/pry_instance_rb.html","","",3],["rbx_method.rb","files/lib/pry/rbx_method_rb.html","files/lib/pry/rbx_method_rb.html","","",3],["rbx_path.rb","files/lib/pry/rbx_path_rb.html","files/lib/pry/rbx_path_rb.html","","",3],["version.rb","files/lib/pry/version_rb.html","files/lib/pry/version_rb.html","","",3]],"searchIndex":["object","pry","commandcontext","void_value","commandprocessor","result","commandset","command","config","defaultcommands","extendedcommands","helpers","basehelpers","commandhelpers","optionshelpers","text","history","historyarray","indent","inputcompleter","method","nocommanderror","pluginmanager","noplugin","plugin","rbxmethod","rbxpath","<<()","<<()","==()","[]()","__binding__()","activate!()","add_method_object_options()","alias?()","alias_command()","all_from_class()","all_from_common()","all_from_obj()","below_ceiling()","binding_for()","bold()","build_completion_proc()","call()","class_name()","clear()","color()","colorize_code()","command()","command?()","command_dependencies_met?()","command_error()","command_matched()","commands()","convert_index()","convert_path_to_full()","convert_range()","convert_to_regex()","core?()","core_code()","core_doc()","core_path_line()","correct_arg_arity()","correct_indentation()","create_command_stub()","default()","default_editor_for_platform()","define_default_commands()","delegate_accessors()","delete()","desc()","disable!()","doc()","dynamically_defined?()","each()","each()","empty?()","enable!()","end_of_statement?()","exec_hook()","execute_command()","file_map()","find_command()","fix_coderay_colors()","format_constants()","format_globals()","format_locals()","format_methods()","format_variables()","from_binding()","from_class()","from_obj()","from_str()","gem_installed?()","gem_located?()","get_method_or_raise()","handle_read_errors()","heading()","helpers()","highlight()","history_file()","import()","import_from()","indent()","indentation_delta()","init()","initial_session?()","initialize_special_locals()","inject_local()","inject_special_locals()","inspect()","inspect()","instance_resolution_order()","interpolate_string()","invoke_editor()","is_a?()","is_core_path?()","jruby?()","keep_retval?()","kind_of?()","last_result_is_exception?()","lesspipe()","list_commands()","load()","load_history()","load_plugins()","load_rc()","load_requires()","locate_plugins()","make_header()","memory_size()","memory_size=()","method_missing()","method_missing()","name()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","no_color()","normalized_line_number()","one_index_number()","one_index_range()","one_index_range_or_number()","original_name()","output_section()","page_size()","parse_options!()","plugins()","pop_prompt()","process_commands()","process_comment_markup()","process_line()","process_method_object_options()","process_rdoc()","process_yardoc()","process_yardoc_tag()","prompt()","prompt=()","prompt_stack()","pry()","pry_doc_info()","pry_method?()","push()","push_prompt()","r()","rbx?()","re()","read_between_the_lines()","readline()","refresh()","render_output()","rep()","repl()","repl_epilogue()","repl_prologue()","reset()","reset_defaults()","resolution_order()","respond_to?()","retrieve_line()","run()","run_command()","run_command()","run_command()","rvm_convert_path_to_full()","rvm_ruby?()","safe_send()","save()","save_history()","select_message()","select_prompt()","set_config_defaults()","set_file_and_dir_locals()","set_last_exception()","set_last_result()","should_print?()","show_result()","signature()","silence_warnings()","simple_pager()","singleton_class()","singleton_class_resolution_order()","size()","source()","source_file()","source_line()","source_type()","special_locals()","stagger_output()","start()","start_line_syntax_for_editor()","std_convert_path_to_full()","strip_color()","strip_comments_from_c_code()","strip_leading_hash_and_whitespace_from_ruby_comments()","strip_leading_whitespace()","stub_proc()","super()","super_using_ancestors()","syntax_highlight_by_file_type_or_specified()","temp_file()","text()","to_a()","to_a()","unindent()","update_input_history()","use_ansi_codes?()","valid_command?()","valid_expression?()","valid_expression?()","valid_expression?()","view_clip()","visibility()","void()","void_command?()","with_line_numbers()","with_method_transaction()","changelog","license","readme.markdown","todo","pry.rb","command_context.rb","command_processor.rb","command_set.rb","commands.rb","completion.rb","config.rb","core_extensions.rb","custom_completions.rb","basic.rb","context.rb","documentation.rb","easter_eggs.rb","gems.rb","input.rb","introspection.rb","ls.rb","shell.rb","experimental.rb","user_command_api.rb","helpers.rb","base_helpers.rb","command_helpers.rb","options_helpers.rb","text.rb","history.rb","history_array.rb","indent.rb","method.rb","plugins.rb","pry_class.rb","pry_instance.rb","rbx_method.rb","rbx_path.rb","version.rb"],"longSearchIndex":["lib/pry/core_extensions.rb","lib/pry.rb","pry","pry::commandcontext","pry","pry::commandprocessor","pry","pry::commandset","pry","pry","pry","pry","pry::helpers","pry::helpers","pry::helpers","pry::helpers","pry","pry","pry","pry","pry","pry","pry","pry::pluginmanager","pry::pluginmanager","pry","pry","pry::history","pry::historyarray","pry::method","pry::historyarray","object","pry::pluginmanager::plugin","pry::helpers::optionshelpers","pry::method","pry::commandset","pry::method","pry::method","pry::method","pry::defaultcommands","pry","pry::helpers::text","pry::inputcompleter","pry::commandset::command","pry::defaultcommands","pry::history","pry::defaultcommands","pry::helpers::basehelpers","pry::commandset","pry::commandprocessor::result","pry::helpers::basehelpers","pry::helpers::commandhelpers","pry::commandprocessor","pry::commandcontext","pry::historyarray","pry::rbxpath","pry::historyarray","pry::commandprocessor","pry::rbxmethod","pry::rbxmethod","pry::rbxmethod","pry::rbxmethod","pry::commandset::command","pry::indent","pry::helpers::basehelpers","pry::helpers::text","pry","pry::commandset","pry","pry::commandset","pry::commandset","pry::pluginmanager::plugin","pry::method","pry::method","pry::commandset","pry::historyarray","pry::historyarray","pry::pluginmanager::plugin","pry::indent","pry","pry::commandprocessor","pry::helpers::commandhelpers","pry::helpers::basehelpers","pry","pry::defaultcommands","pry::defaultcommands","pry::defaultcommands","pry::defaultcommands","pry::defaultcommands","pry::method","pry::method","pry::method","pry::method","pry::helpers::basehelpers","pry::pluginmanager","pry::helpers::commandhelpers","pry","pry::helpers::basehelpers","pry::commandset","pry::helpers::basehelpers","pry","pry::commandset","pry::commandset","pry::indent","pry::indent","pry","pry","pry","pry","pry","pry::commandcontext::void_value","pry::historyarray","pry::method","pry::commandprocessor","pry::helpers::commandhelpers","pry::method","pry::rbxpath","pry::helpers::basehelpers","pry::commandprocessor::result","pry::method","pry","pry::helpers::basehelpers","pry::commandset","pry::history","pry","pry::pluginmanager","pry","pry","pry::pluginmanager","pry::helpers::commandhelpers","pry","pry","pry::method","pry::pluginmanager::noplugin","pry::method","pry","pry::commandprocessor","pry::commandprocessor::result","pry::commandset","pry::history","pry::historyarray","pry::indent","pry::method","pry::nocommanderror","pry::pluginmanager","pry::pluginmanager::noplugin","pry::pluginmanager::plugin","pry::helpers::text","pry::helpers::commandhelpers","pry","pry","pry","pry::method","pry::defaultcommands","pry::helpers::basehelpers","pry::helpers::optionshelpers","pry::pluginmanager","pry","pry::commandprocessor","pry::helpers::commandhelpers","pry","pry::helpers::optionshelpers","pry::helpers::commandhelpers","pry::helpers::commandhelpers","pry::helpers::commandhelpers","pry","pry","pry","object","pry::method","pry::method","pry::history","pry","pry","pry::helpers::basehelpers","pry","pry::helpers::commandhelpers","pry","pry","pry::helpers::commandhelpers","pry","pry","pry","pry","pry::indent","pry","pry::method","pry::method","pry","pry::commandcontext","pry","pry","pry::commandset","pry::rbxpath","pry::rbxpath","pry::method","pry::history","pry","pry::inputcompleter","pry","pry","pry::helpers::basehelpers","pry","pry","pry","pry","pry::method","pry::helpers::basehelpers","pry::helpers::basehelpers","pry::method","pry::method","pry::historyarray","pry::method","pry::method","pry::method","pry::method","pry","pry::helpers::basehelpers","pry","pry::helpers::commandhelpers","pry::rbxpath","pry::helpers::text","pry::method","pry::method","pry::method","pry::helpers::basehelpers","pry::method","pry::method","pry::helpers::commandhelpers","pry::helpers::commandhelpers","pry::commandcontext","pry::history","pry::historyarray","pry::helpers::commandhelpers","pry","pry::helpers::basehelpers","pry::commandprocessor","pry","pry","pry","pry","pry::method","pry::commandcontext","pry::commandprocessor::result","pry::helpers::text","pry::defaultcommands","files/changelog.html","files/license.html","files/readme_markdown.html","files/todo.html","files/lib/pry_rb.html","files/lib/pry/command_context_rb.html","files/lib/pry/command_processor_rb.html","files/lib/pry/command_set_rb.html","files/lib/pry/commands_rb.html","files/lib/pry/completion_rb.html","files/lib/pry/config_rb.html","files/lib/pry/core_extensions_rb.html","files/lib/pry/custom_completions_rb.html","files/lib/pry/default_commands/basic_rb.html","files/lib/pry/default_commands/context_rb.html","files/lib/pry/default_commands/documentation_rb.html","files/lib/pry/default_commands/easter_eggs_rb.html","files/lib/pry/default_commands/gems_rb.html","files/lib/pry/default_commands/input_rb.html","files/lib/pry/default_commands/introspection_rb.html","files/lib/pry/default_commands/ls_rb.html","files/lib/pry/default_commands/shell_rb.html","files/lib/pry/extended_commands/experimental_rb.html","files/lib/pry/extended_commands/user_command_api_rb.html","files/lib/pry/helpers_rb.html","files/lib/pry/helpers/base_helpers_rb.html","files/lib/pry/helpers/command_helpers_rb.html","files/lib/pry/helpers/options_helpers_rb.html","files/lib/pry/helpers/text_rb.html","files/lib/pry/history_rb.html","files/lib/pry/history_array_rb.html","files/lib/pry/indent_rb.html","files/lib/pry/method_rb.html","files/lib/pry/plugins_rb.html","files/lib/pry/pry_class_rb.html","files/lib/pry/pry_instance_rb.html","files/lib/pry/rbx_method_rb.html","files/lib/pry/rbx_path_rb.html","files/lib/pry/version_rb.html"]}}