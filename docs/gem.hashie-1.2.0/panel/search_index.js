var search_data = {"index":{"info":[["Hashie","lib/hashie/clash.rb","classes/Hashie.html"," < ","",1],["Clash","Hashie","classes/Hashie/Clash.html"," < ::Hash","A Clash is a \"Chainable Lazy Hash\". Inspired by libraries such as Arel, a Clash allows you to chain together",1],["ChainError","Hashie::Clash","classes/Hashie/Clash/ChainError.html"," < ::StandardError","",1],["Dash","Hashie","classes/Hashie/Dash.html"," < Hashie::Hash","A Dash is a 'defined' or 'discrete' Hash, that is, a Hash that has a set of defined keys that are accessible",1],["Hash","Hashie","classes/Hashie/Hash.html"," < Hash","A Hashie Hash is simply a Hash that has convenience functions baked in such as stringify_keys that may",1],["HashExtensions","Hashie","classes/Hashie/HashExtensions.html"," < ","",1],["Mash","Hashie","classes/Hashie/Mash.html"," < Hashie::Hash","Mash allows you to create pseudo-objects that have method-like accessors for hash keys. This is useful",1],["PrettyInspect","Hashie","classes/Hashie/PrettyInspect.html"," < ","",1],["Trash","Hashie","classes/Hashie/Trash.html"," < Hashie::Dash","A Trash is a 'translated' Dash where the keys can be remapped from a source hash. Trashes are useful",1],["[]","Hashie::Dash","classes/Hashie/Dash.html#M000010","(property)","Retrieve a value from the Dash (will return the property's default value if it hasn't been set). ",2],["[]","Hashie::Mash","classes/Hashie/Mash.html#M000029","(key)","Retrieves an attribute set in the Mash. Will convert any key passed in to a string before retrieving.",2],["[]=","Hashie::Dash","classes/Hashie/Dash.html#M000012","(property, value)","Set a value on the Dash in a Hash-like way. Only works on pre-existing properties. ",2],["[]=","Hashie::Trash","classes/Hashie/Trash.html#M000048","(property, value)","Set a value on the Dash in a Hash-like way. Only works on pre-existing properties. ",2],["_end!","Hashie::Clash","classes/Hashie/Clash.html#M000001","()","Jump back up a level if you are using bang method chaining. For example: c = Hashie::Clash.new.foo('bar')",2],["_regular_reader","Hashie::Dash","classes/Hashie/Dash.html#M000011","(property)","Alias for #[]",2],["assert_property_exists!","Hashie::Dash","classes/Hashie/Dash.html#M000013","(property)","",2],["assert_property_required!","Hashie::Dash","classes/Hashie/Dash.html#M000016","(property, value)","",2],["assert_property_set!","Hashie::Dash","classes/Hashie/Dash.html#M000015","(property)","",2],["assert_required_properties_set!","Hashie::Dash","classes/Hashie/Dash.html#M000014","()","",2],["deep_merge","Hashie::Mash","classes/Hashie/Mash.html#M000040","(other_hash)","Performs a deep_update on a duplicate of the current mash. ",2],["deep_merge!","Hashie::Mash","classes/Hashie/Mash.html#M000044","(other_hash)","Alias for #deep_update",2],["deep_update","Hashie::Mash","classes/Hashie/Mash.html#M000042","(other_hash)","Recursively merges this mash with the passed in hash, merging each hash in the hierarchy. ",2],["delete","Hashie::Mash","classes/Hashie/Mash.html#M000033","(key)","",2],["dup","Hashie::Mash","classes/Hashie/Mash.html#M000034","()","Duplicates the current mash as a new mash. ",2],["has_key?","Hashie::Mash","classes/Hashie/Mash.html#M000037","(key)","Alias for #key?",2],["hashie_inspect","Hashie::PrettyInspect","classes/Hashie/PrettyInspect.html#M000028","()","",2],["hashie_stringify_keys","Hashie::HashExtensions","classes/Hashie/HashExtensions.html#M000022","()","Convert all of the keys of a Hash to their string representations. ",2],["hashie_stringify_keys!","Hashie::HashExtensions","classes/Hashie/HashExtensions.html#M000021","()","Destructively convert all of the keys of a Hash to their string representations. ",2],["include?","Hashie::Mash","classes/Hashie/Mash.html#M000038","(key)","Alias for #key?",2],["included","Hashie::HashExtensions","classes/Hashie/HashExtensions.html#M000019","(base)","",2],["included","Hashie::PrettyInspect","classes/Hashie/PrettyInspect.html#M000027","(base)","",2],["inherited","Hashie::Dash","classes/Hashie/Dash.html#M000006","(klass)","",2],["initializing_reader","Hashie::Mash","classes/Hashie/Mash.html#M000032","(key)","This is the bang method reader, it will return a new Mash if there isn't a value already assigned to",2],["key?","Hashie::Mash","classes/Hashie/Mash.html#M000036","(key)","",2],["member?","Hashie::Mash","classes/Hashie/Mash.html#M000039","(key)","Alias for #key?",2],["merge","Hashie::Mash","classes/Hashie/Mash.html#M000041","(other_hash)","Alias for #deep_merge",2],["merge!","Hashie::Mash","classes/Hashie/Mash.html#M000046","(other_hash)","Alias for #update",2],["method_missing","Hashie::Mash","classes/Hashie/Mash.html#M000053","(method_name, *args, &blk)","",2],["new","Hashie::Clash","classes/Hashie/Clash.html#M000000","(other_hash = {}, parent = nil)","Initialize a new clash by passing in a Hash to convert and, optionally, the parent to which this Clash",2],["new","Hashie::Dash","classes/Hashie/Dash.html#M000009","(attributes = {}, &block)","You may initialize a Dash with an attributes hash just like you would many other kinds of data objects.",2],["new","Hashie::Mash","classes/Hashie/Mash.html#M000020","(source_hash = nil, default = nil, &blk)","If you pass in an existing hash, it will convert it to a Mash including recursively descending into arrays",2],["property","Hashie::Dash","classes/Hashie/Dash.html#M000005","(property_name, options = {})","Defines a property on the Dash. Options are as follows: * <tt>:default</tt> - Specify a default value",2],["property","Hashie::Trash","classes/Hashie/Trash.html#M000043","(property_name, options = {})","Defines a property on the Trash. Options are as follows: * <tt>:default</tt> - Specify a default value",2],["property?","Hashie::Dash","classes/Hashie/Dash.html#M000007","(name)","Check to see if the specified property has already been defined. ",2],["property_exists?","Hashie::Trash","classes/Hashie/Trash.html#M000050","(property)","Raises an NoMethodError if the property doesn't exist ",2],["regular_dup","Hashie::Mash","classes/Hashie/Mash.html#M000035","()","Alias for #dup",2],["regular_reader","Hashie::Mash","classes/Hashie/Mash.html#M000030","(key)","Alias for #[]",2],["required?","Hashie::Dash","classes/Hashie/Dash.html#M000008","(name)","Check to see if the specified property is required. ",2],["respond_to?","Hashie::Mash","classes/Hashie/Mash.html#M000052","(method_name, include_private=false)","Will return true if the Mash has had a key set in addition to normal respond_to? functionality. ",2],["shallow_merge","Hashie::Mash","classes/Hashie/Mash.html#M000047","(other_hash)","Performs a shallow_update on a duplicate of the current mash ",2],["shallow_update","Hashie::Mash","classes/Hashie/Mash.html#M000051","(other_hash)","Merges (non-recursively) the hash from the argument, changing the receiving hash ",2],["subkey_class","Hashie::Mash","classes/Hashie/Mash.html#M000024","()","",2],["to_hash","Hashie::Hash","classes/Hashie/Hash.html#M000017","(options = {})","Converts a mash back to a hash. ",2],["to_json","Hashie::Hash","classes/Hashie/Hash.html#M000018","(*args)","The C geneartor for the json gem doesn't like mashies ",2],["to_mash","Hashie::HashExtensions","classes/Hashie/HashExtensions.html#M000023","()","Convert this hash into a Mash ",2],["translations","Hashie::Trash","classes/Hashie/Trash.html#M000049","()","",2],["update","Hashie::Mash","classes/Hashie/Mash.html#M000045","(other_hash)","Alias for #deep_update",2],["LICENSE","files/LICENSE.html","files/LICENSE.html","","Copyright (c) 2009 Intridea, Inc.  Permission is hereby granted, free of charge, to any person obtaining",3],["README.rdoc","files/README_rdoc.html","files/README_rdoc.html","","= Hashie  Hashie is a growing collection of tools that extend Hashes and make them more useful.  == Installation",3],["hashie.rb","files/lib/hashie_rb.html","files/lib/hashie_rb.html","","",3],["clash.rb","files/lib/hashie/clash_rb.html","files/lib/hashie/clash_rb.html","","",3],["dash.rb","files/lib/hashie/dash_rb.html","files/lib/hashie/dash_rb.html","","",3],["hash.rb","files/lib/hashie/hash_rb.html","files/lib/hashie/hash_rb.html","","",3],["hash_extensions.rb","files/lib/hashie/hash_extensions_rb.html","files/lib/hashie/hash_extensions_rb.html","","",3],["mash.rb","files/lib/hashie/mash_rb.html","files/lib/hashie/mash_rb.html","","",3],["trash.rb","files/lib/hashie/trash_rb.html","files/lib/hashie/trash_rb.html","","",3],["version.rb","files/lib/hashie/version_rb.html","files/lib/hashie/version_rb.html","","",3]],"searchIndex":["hashie","clash","chainerror","dash","hash","hashextensions","mash","prettyinspect","trash","[]()","[]()","[]=()","[]=()","_end!()","_regular_reader()","assert_property_exists!()","assert_property_required!()","assert_property_set!()","assert_required_properties_set!()","deep_merge()","deep_merge!()","deep_update()","delete()","dup()","has_key?()","hashie_inspect()","hashie_stringify_keys()","hashie_stringify_keys!()","include?()","included()","included()","inherited()","initializing_reader()","key?()","member?()","merge()","merge!()","method_missing()","new()","new()","new()","property()","property()","property?()","property_exists?()","regular_dup()","regular_reader()","required?()","respond_to?()","shallow_merge()","shallow_update()","subkey_class()","to_hash()","to_json()","to_mash()","translations()","update()","license","readme.rdoc","hashie.rb","clash.rb","dash.rb","hash.rb","hash_extensions.rb","mash.rb","trash.rb","version.rb"],"longSearchIndex":["lib/hashie.rb","hashie","hashie::clash","hashie","hashie","hashie","hashie","hashie","hashie","hashie::dash","hashie::mash","hashie::dash","hashie::trash","hashie::clash","hashie::dash","hashie::dash","hashie::dash","hashie::dash","hashie::dash","hashie::mash","hashie::mash","hashie::mash","hashie::mash","hashie::mash","hashie::mash","hashie::prettyinspect","hashie::hashextensions","hashie::hashextensions","hashie::mash","hashie::hashextensions","hashie::prettyinspect","hashie::dash","hashie::mash","hashie::mash","hashie::mash","hashie::mash","hashie::mash","hashie::mash","hashie::clash","hashie::dash","hashie::mash","hashie::dash","hashie::trash","hashie::dash","hashie::trash","hashie::mash","hashie::mash","hashie::dash","hashie::mash","hashie::mash","hashie::mash","hashie::mash","hashie::hash","hashie::hash","hashie::hashextensions","hashie::trash","hashie::mash","files/license.html","files/readme_rdoc.html","files/lib/hashie_rb.html","files/lib/hashie/clash_rb.html","files/lib/hashie/dash_rb.html","files/lib/hashie/hash_rb.html","files/lib/hashie/hash_extensions_rb.html","files/lib/hashie/mash_rb.html","files/lib/hashie/trash_rb.html","files/lib/hashie/version_rb.html"]}}