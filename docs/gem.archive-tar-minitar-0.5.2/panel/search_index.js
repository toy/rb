var search_data = {"index":{"longSearchIndex":["lib/archive/tar/minitar.rb","archive","archive::tar","archive::tar::minitar","archive::tar::minitar","archive::tar::minitar","archive::tar::minitar::command","archive::tar::minitar::command","archive::tar::minitar::command","archive::tar::minitar::command","archive::tar::minitar::command","archive::tar::minitar::command::commandpattern","archive::tar::minitar::command::commandpattern","archive::tar::minitar::command::commandpattern","archive::tar::minitar::command","archive::tar::minitar","archive::tar::minitar","archive::tar::minitar","archive::tar::minitar","archive::tar::minitar","archive::tar::minitar::reader","archive::tar::minitar::reader","archive::tar::minitar","archive::tar::minitar","archive::tar::minitar::writer","archive::tar::minitar::writer::boundedstream","archive::tar::minitar::writer","archive::tar","archive::tar::minitar::command::commandpattern","archive::tar::minitar::command::commandpattern","archive::tar::minitar::command::commandpattern","archive::tar::minitar::command::commandpattern","archive::tar::minitar::writer","archive::tar::minitar::writer","archive::tar::minitar::command::commandcreate","archive::tar::minitar::command::commandextract","archive::tar::minitar::command::commandlist","archive::tar::minitar::command::progressbar","archive::tar::minitar::command::progressbar","archive::tar::minitar::reader::entrystream","archive::tar::posixheader","archive::tar::minitar::command::commandcreate","archive::tar::minitar::command::commandextract","archive::tar::minitar::command::commandhelp","archive::tar::minitar::command::commandlist","archive::tar::minitar::command::commandpattern","archive::tar::minitar::input","archive::tar::minitar::output","archive::tar::minitar::reader","archive::tar::minitar::reader::entrystream","archive::tar::minitar::writer","archive::tar::minitar::command::commandpattern","archive::tar::minitar::command::commandpattern","archive::tar::minitar::command::progressbar","archive::tar::minitar::command::commandpattern","archive::tar::minitar","archive::tar::minitar::reader::entrystream","archive::tar::minitar::reader::entrystream","archive::tar::minitar::input","archive::tar::minitar::reader","archive::tar::minitar::reader","archive::tar::minitar::command::progressbar","archive::tar::posixheader","archive::tar::minitar::reader::entrystream","archive::tar::minitar::command::progressbar","archive::tar::minitar::command::progressbar","archive::tar::minitar::input","archive::tar::minitar::reader::entrystream","archive::tar::minitar::reader::entrystream","archive::tar::minitar::command::progressbar","archive::tar::minitar::command::progressbar","archive::tar::minitar::writer","archive::tar::minitar::command::progressbar","archive::tar::minitar::command::progressbar","archive::tar::minitar::command::progressbar","archive::tar::minitar::input","archive::tar::minitar::reader::entrystream","archive::tar::minitar::command::progressbar","archive::tar::minitar::reader::entrystream","archive::tar::minitar::reader::invalidentrystream","archive::tar::minitar::command::progressbar","archive::tar::posixheader","archive::tar::minitar::command::commandcreate","archive::tar::minitar::command::commandextract","archive::tar::minitar::command::commandhelp","archive::tar::minitar::command::commandlist","archive::tar::minitar::command::commandpattern","archive::tar::minitar::command::progressbar","archive::tar::minitar::command::progressbar","archive::tar::minitar::reader::entrystream","archive::tar::minitar::writer","archive::tar::minitar::command::commandlist","archive::tar::minitar::command::commandcreate","archive::tar::minitar::command::commandextract","archive::tar::minitar::command::commandhelp","archive::tar::minitar::command::commandlist","archive::tar::minitar::command::commandpattern","archive::tar::minitar::command::progressbar","archive::tar::minitar::input","archive::tar::minitar::output","archive::tar::minitar::reader","archive::tar::minitar::reader::entrystream","archive::tar::minitar::writer","archive::tar::minitar::writer::boundedstream","archive::tar::minitar::writer::restrictedstream","archive::tar::posixheader","archive::tar::posixheader","archive::tar::posixheader","archive::tar::minitar","archive::tar::minitar::input","archive::tar::minitar::output","archive::tar::minitar::reader","archive::tar::minitar::writer","archive::tar::minitar","archive::tar::minitar","archive::tar::minitar::command::progressbar","archive::tar::minitar::reader::entrystream","archive::tar::minitar::reader::entrystream","archive::tar::minitar::reader::invalidentrystream","archive::tar::minitar::reader","archive::tar::minitar::reader::entrystream","archive::tar::minitar::reader::invalidentrystream","archive::tar::minitar::command","archive::tar::minitar::command::progressbar","archive::tar::minitar::command::progressbar","archive::tar::minitar::command::progressbar","archive::tar::minitar::writer","archive::tar::minitar::command::progressbar","archive::tar::minitar::command::progressbar","archive::tar::minitar::input","archive::tar::minitar::output","archive::tar::minitar::command::progressbar","archive::tar::posixheader","archive::tar::minitar::command::progressbar","archive::tar::minitar","archive::tar::posixheader","archive::tar::minitar::writer::boundedstream","archive::tar::minitar::writer::restrictedstream","files/changelog.html","files/install.html","files/readme.html","files/lib/archive/tar/minitar_rb.html","files/lib/archive/tar/minitar/command_rb.html"],"info":[["Archive","lib/archive/tar/minitar.rb","classes/Archive.html"," < "," ",1],["Tar","Archive","classes/Archive/Tar.html"," < ","",1],["Minitar","Archive::Tar","classes/Archive/Tar/Minitar.html"," < ","= Archive::Tar::Minitar 0.5.2 Archive::Tar::Minitar is a pure-Ruby library and command-line utility that",1],["BlockRequired","Archive::Tar::Minitar","classes/Archive/Tar/Minitar/BlockRequired.html"," < ArgumentError","The exception raised when a block is required for proper operation of the method. ",1],["ClosedStream","Archive::Tar::Minitar","classes/Archive/Tar/Minitar/ClosedStream.html"," < StandardError","The exception raised when operations are performed on a stream that has previously been closed. ",1],["Command","Archive::Tar::Minitar","classes/Archive/Tar/Minitar/Command.html"," < ","",1],["CommandCreate","Archive::Tar::Minitar::Command","classes/Archive/Tar/Minitar/Command/CommandCreate.html"," < CommandPattern","",1],["CommandExtract","Archive::Tar::Minitar::Command","classes/Archive/Tar/Minitar/Command/CommandExtract.html"," < CommandPattern","",1],["CommandHelp","Archive::Tar::Minitar::Command","classes/Archive/Tar/Minitar/Command/CommandHelp.html"," < CommandPattern","",1],["CommandList","Archive::Tar::Minitar::Command","classes/Archive/Tar/Minitar/Command/CommandList.html"," < CommandPattern","",1],["CommandPattern","Archive::Tar::Minitar::Command","classes/Archive/Tar/Minitar/Command/CommandPattern.html"," < Object","",1],["AbstractCommandError","Archive::Tar::Minitar::Command::CommandPattern","classes/Archive/Tar/Minitar/Command/CommandPattern/AbstractCommandError.html"," < Exception","",1],["CommandAlreadyExists","Archive::Tar::Minitar::Command::CommandPattern","classes/Archive/Tar/Minitar/Command/CommandPattern/CommandAlreadyExists.html"," < RuntimeError","",1],["UnknownCommandError","Archive::Tar::Minitar::Command::CommandPattern","classes/Archive/Tar/Minitar/Command/CommandPattern/UnknownCommandError.html"," < RuntimeError","",1],["ProgressBar","Archive::Tar::Minitar::Command","classes/Archive/Tar/Minitar/Command/ProgressBar.html"," < Object","",1],["FileNameTooLong","Archive::Tar::Minitar","classes/Archive/Tar/Minitar/FileNameTooLong.html"," < StandardError","The exception raised when a filename exceeds 256 bytes in length, the maximum supported by the standard",1],["Input","Archive::Tar::Minitar","classes/Archive/Tar/Minitar/Input.html"," < Object","Wraps a Archive::Tar::Minitar::Reader with convenience methods and wrapped stream management; Input only",1],["NonSeekableStream","Archive::Tar::Minitar","classes/Archive/Tar/Minitar/NonSeekableStream.html"," < StandardError","The exception raised when a wrapped data stream class is expected to respond to #rewind or #pos but does",1],["Output","Archive::Tar::Minitar","classes/Archive/Tar/Minitar/Output.html"," < Object","Wraps a Archive::Tar::Minitar::Writer with convenience methods and wrapped stream management; Output",1],["Reader","Archive::Tar::Minitar","classes/Archive/Tar/Minitar/Reader.html"," < Object","The class that reads a tar format archive from a data stream. The data stream may be sequential or random",1],["EntryStream","Archive::Tar::Minitar::Reader","classes/Archive/Tar/Minitar/Reader/EntryStream.html"," < Object","EntryStreams are pseudo-streams on top of the main data stream. ",1],["InvalidEntryStream","Archive::Tar::Minitar::Reader","classes/Archive/Tar/Minitar/Reader/InvalidEntryStream.html"," < ","This marks the EntryStream closed for reading without closing the actual data stream. ",1],["UnexpectedEOF","Archive::Tar::Minitar","classes/Archive/Tar/Minitar/UnexpectedEOF.html"," < StandardError","The exception raised when a data stream ends before the amount of data expected in the archive's PosixHeader.",1],["Writer","Archive::Tar::Minitar","classes/Archive/Tar/Minitar/Writer.html"," < Object","The class that writes a tar format archive to a data stream. ",1],["BoundedStream","Archive::Tar::Minitar::Writer","classes/Archive/Tar/Minitar/Writer/BoundedStream.html"," < Archive::Tar::Minitar::Writer::RestrictedStream","A RestrictedStream that also has a size limit. ",1],["FileOverflow","Archive::Tar::Minitar::Writer::BoundedStream","classes/Archive/Tar/Minitar/Writer/BoundedStream/FileOverflow.html"," < RuntimeError","The exception raised when the user attempts to write more data to a BoundedStream than has been allocated.",1],["RestrictedStream","Archive::Tar::Minitar::Writer","classes/Archive/Tar/Minitar/Writer/RestrictedStream.html"," < Object","A stream wrapper that can only be written to. Any attempt to read from this restricted stream will result",1],["PosixHeader","Archive::Tar","classes/Archive/Tar/PosixHeader.html"," < Object","= Archive::Tar::PosixHeader Implements the POSIX tar header as a Ruby class. The structure of the POSIX",1],["<<","Archive::Tar::Minitar::Command::CommandPattern","classes/Archive/Tar/Minitar/Command/CommandPattern.html#M000026","(command)","",2],["[]","Archive::Tar::Minitar::Command::CommandPattern","classes/Archive/Tar/Minitar/Command/CommandPattern.html#M000031","(cmd)","",2],["[]","Archive::Tar::Minitar::Command::CommandPattern","classes/Archive/Tar/Minitar/Command/CommandPattern.html#M000037","(args, opts = {}, ioe = {})","",2],["add","Archive::Tar::Minitar::Command::CommandPattern","classes/Archive/Tar/Minitar/Command/CommandPattern.html#M000025","(command)","",2],["add_file","Archive::Tar::Minitar::Writer","classes/Archive/Tar/Minitar/Writer.html#M000060","(name, opts = {})","Adds a file to the archive as +name+. +opts+ must contain the following value: <tt>:mode</tt>::  The",2],["add_file_simple","Archive::Tar::Minitar::Writer","classes/Archive/Tar/Minitar/Writer.html#M000056","(name, opts = {})","Adds a file to the archive as +name+. +opts+ must contain the following values: <tt>:mode</tt>::  The",2],["altname","Archive::Tar::Minitar::Command::CommandCreate","classes/Archive/Tar/Minitar/Command/CommandCreate.html#M000047","()","",2],["altname","Archive::Tar::Minitar::Command::CommandExtract","classes/Archive/Tar/Minitar/Command/CommandExtract.html#M000058","()","",2],["altname","Archive::Tar::Minitar::Command::CommandList","classes/Archive/Tar/Minitar/Command/CommandList.html#M000067","()","",2],["bar","Archive::Tar::Minitar::Command::ProgressBar","classes/Archive/Tar/Minitar/Command/ProgressBar.html#M000010","()","",2],["bytes","Archive::Tar::Minitar::Command::ProgressBar","classes/Archive/Tar/Minitar/Command/ProgressBar.html#M000003","()","",2],["bytes_read","Archive::Tar::Minitar::Reader::EntryStream","classes/Archive/Tar/Minitar/Reader/EntryStream.html#M000083","()","",2],["calculate_checksum","Archive::Tar::PosixHeader","classes/Archive/Tar/PosixHeader.html#M000042","(hdr)","",2],["call","Archive::Tar::Minitar::Command::CommandCreate","classes/Archive/Tar/Minitar/Command/CommandCreate.html#M000048","(args, opts = {}, ioe = {})","",2],["call","Archive::Tar::Minitar::Command::CommandExtract","classes/Archive/Tar/Minitar/Command/CommandExtract.html#M000059","(args, opts = {}, ioe = {})","",2],["call","Archive::Tar::Minitar::Command::CommandHelp","classes/Archive/Tar/Minitar/Command/CommandHelp.html#M000044","(args, opts = {}, ioe = {})","",2],["call","Archive::Tar::Minitar::Command::CommandList","classes/Archive/Tar/Minitar/Command/CommandList.html#M000069","(args, opts = {}, ioe = {})","",2],["call","Archive::Tar::Minitar::Command::CommandPattern","classes/Archive/Tar/Minitar/Command/CommandPattern.html#M000039","(args, opts = {}, ioe = {})","",2],["close","Archive::Tar::Minitar::Input","classes/Archive/Tar/Minitar/Input.html#M000100","()","Closes the Reader object and the wrapped data stream. ",2],["close","Archive::Tar::Minitar::Output","classes/Archive/Tar/Minitar/Output.html#M000105","()","Closes the Writer object and the wrapped data stream. ",2],["close","Archive::Tar::Minitar::Reader","classes/Archive/Tar/Minitar/Reader.html#M000094","()","",2],["close","Archive::Tar::Minitar::Reader::EntryStream","classes/Archive/Tar/Minitar/Reader/EntryStream.html#M000085","()","Closes the entry. ",2],["close","Archive::Tar::Minitar::Writer","classes/Archive/Tar/Minitar/Writer.html#M000063","()","Closes the Writer. ",2],["command","Archive::Tar::Minitar::Command::CommandPattern","classes/Archive/Tar/Minitar/Command/CommandPattern.html#M000030","(command)","",2],["command?","Archive::Tar::Minitar::Command::CommandPattern","classes/Archive/Tar/Minitar/Command/CommandPattern.html#M000029","(command)","",2],["convert_bytes","Archive::Tar::Minitar::Command::ProgressBar","classes/Archive/Tar/Minitar/Command/ProgressBar.html#M000001","(bytes)","",2],["default_ioe","Archive::Tar::Minitar::Command::CommandPattern","classes/Archive/Tar/Minitar/Command/CommandPattern.html#M000032","(ioe = {})","",2],["dir?","Archive::Tar::Minitar","classes/Archive/Tar/Minitar.html#M000106","(path)","Tests if +path+ refers to a directory. Fixes an apparently corrupted <tt>stat()</tt> call on Windows.",2],["directory","Archive::Tar::Minitar::Reader::EntryStream","classes/Archive/Tar/Minitar/Reader/EntryStream.html#M000077","()","Alias for #directory?",2],["directory?","Archive::Tar::Minitar::Reader::EntryStream","classes/Archive/Tar/Minitar/Reader/EntryStream.html#M000076","()","Returns +true+ if the entry represents a directory. ",2],["each","Archive::Tar::Minitar::Input","classes/Archive/Tar/Minitar/Input.html#M000097","(&block)","Iterates through each entry and rewinds to the beginning of the stream when finished. ",2],["each","Archive::Tar::Minitar::Reader","classes/Archive/Tar/Minitar/Reader.html#M000089","(&block)","Iterates through each entry in the data stream. ",2],["each_entry","Archive::Tar::Minitar::Reader","classes/Archive/Tar/Minitar/Reader.html#M000091","()","Iterates through each entry in the data stream. ",2],["elapsed","Archive::Tar::Minitar::Command::ProgressBar","classes/Archive/Tar/Minitar/Command/ProgressBar.html#M000006","()","",2],["empty?","Archive::Tar::PosixHeader","classes/Archive/Tar/PosixHeader.html#M000033","()","",2],["eof?","Archive::Tar::Minitar::Reader::EntryStream","classes/Archive/Tar/Minitar/Reader/EntryStream.html#M000080","()","Returns +true+ if the current read pointer is at the end of the EntryStream data. ",2],["eol","Archive::Tar::Minitar::Command::ProgressBar","classes/Archive/Tar/Minitar/Command/ProgressBar.html#M000009","()","",2],["eta","Archive::Tar::Minitar::Command::ProgressBar","classes/Archive/Tar/Minitar/Command/ProgressBar.html#M000005","()","ETA stands for Estimated Time of Arrival. ",2],["extract_entry","Archive::Tar::Minitar::Input","classes/Archive/Tar/Minitar/Input.html#M000098","(destdir, entry)","Extracts the current +entry+ to +destdir+. If a block is provided, it yields an +action+ Symbol, the",2],["file","Archive::Tar::Minitar::Reader::EntryStream","classes/Archive/Tar/Minitar/Reader/EntryStream.html#M000079","()","Alias for #file?",2],["file?","Archive::Tar::Minitar::Reader::EntryStream","classes/Archive/Tar/Minitar/Reader/EntryStream.html#M000078","()","Returns +true+ if the entry represents a plain file. ",2],["file_transfer_mode","Archive::Tar::Minitar::Command::ProgressBar","classes/Archive/Tar/Minitar/Command/ProgressBar.html#M000017","()","",2],["finish","Archive::Tar::Minitar::Command::ProgressBar","classes/Archive/Tar/Minitar/Command/ProgressBar.html#M000020","()","",2],["flush","Archive::Tar::Minitar::Writer","classes/Archive/Tar/Minitar/Writer.html#M000062","()","Passes the #flush method to the wrapped stream, used for buffered streams. ",2],["format=","Archive::Tar::Minitar::Command::ProgressBar","classes/Archive/Tar/Minitar/Command/ProgressBar.html#M000018","(format)","",2],["format_arguments=","Archive::Tar::Minitar::Command::ProgressBar","classes/Archive/Tar/Minitar/Command/ProgressBar.html#M000019","(arguments)","",2],["format_time","Archive::Tar::Minitar::Command::ProgressBar","classes/Archive/Tar/Minitar/Command/ProgressBar.html#M000004","(t)","",2],["fsync_dir","Archive::Tar::Minitar::Input","classes/Archive/Tar/Minitar/Input.html#M000101","(dirname)","",2],["full_name","Archive::Tar::Minitar::Reader::EntryStream","classes/Archive/Tar/Minitar/Reader/EntryStream.html#M000084","()","Returns the full and proper name of the entry. ",2],["get_width","Archive::Tar::Minitar::Command::ProgressBar","classes/Archive/Tar/Minitar/Command/ProgressBar.html#M000013","()","",2],["getc","Archive::Tar::Minitar::Reader::EntryStream","classes/Archive/Tar/Minitar/Reader/EntryStream.html#M000075","()","Reads one byte from the entry. Returns +nil+ if there is no more data to read. ",2],["getc","Archive::Tar::Minitar::Reader::InvalidEntryStream","classes/Archive/Tar/Minitar/Reader/InvalidEntryStream.html#M000071","()","",2],["halt","Archive::Tar::Minitar::Command::ProgressBar","classes/Archive/Tar/Minitar/Command/ProgressBar.html#M000021","()","",2],["header","Archive::Tar::PosixHeader","classes/Archive/Tar/PosixHeader.html#M000043","(chksum)","",2],["help","Archive::Tar::Minitar::Command::CommandCreate","classes/Archive/Tar/Minitar/Command/CommandCreate.html#M000054","()","",2],["help","Archive::Tar::Minitar::Command::CommandExtract","classes/Archive/Tar/Minitar/Command/CommandExtract.html#M000065","()","",2],["help","Archive::Tar::Minitar::Command::CommandHelp","classes/Archive/Tar/Minitar/Command/CommandHelp.html#M000045","()","",2],["help","Archive::Tar::Minitar::Command::CommandList","classes/Archive/Tar/Minitar/Command/CommandList.html#M000092","()","",2],["help","Archive::Tar::Minitar::Command::CommandPattern","classes/Archive/Tar/Minitar/Command/CommandPattern.html#M000040","()","",2],["inc","Archive::Tar::Minitar::Command::ProgressBar","classes/Archive/Tar/Minitar/Command/ProgressBar.html#M000023","(step = 1)","",2],["inspect","Archive::Tar::Minitar::Command::ProgressBar","classes/Archive/Tar/Minitar/Command/ProgressBar.html#M000024","()","",2],["invalidate","Archive::Tar::Minitar::Reader::EntryStream","classes/Archive/Tar/Minitar/Reader/EntryStream.html#M000086","()","",2],["mkdir","Archive::Tar::Minitar::Writer","classes/Archive/Tar/Minitar/Writer.html#M000061","(name, opts = {})","Creates a directory in the tar. ",2],["modestr","Archive::Tar::Minitar::Command::CommandList","classes/Archive/Tar/Minitar/Command/CommandList.html#M000068","(mode)","",2],["name","Archive::Tar::Minitar::Command::CommandCreate","classes/Archive/Tar/Minitar/Command/CommandCreate.html#M000046","()","",2],["name","Archive::Tar::Minitar::Command::CommandExtract","classes/Archive/Tar/Minitar/Command/CommandExtract.html#M000057","()","",2],["name","Archive::Tar::Minitar::Command::CommandHelp","classes/Archive/Tar/Minitar/Command/CommandHelp.html#M000041","()","",2],["name","Archive::Tar::Minitar::Command::CommandList","classes/Archive/Tar/Minitar/Command/CommandList.html#M000066","()","",2],["name","Archive::Tar::Minitar::Command::CommandPattern","classes/Archive/Tar/Minitar/Command/CommandPattern.html#M000038","()","",2],["new","Archive::Tar::Minitar::Command::ProgressBar","classes/Archive/Tar/Minitar/Command/ProgressBar.html#M000000","(title, total, out = STDERR)","",2],["new","Archive::Tar::Minitar::Input","classes/Archive/Tar/Minitar/Input.html#M000096","(input)","Creates a new Input object. If +input+ is a stream object that responds to #read), then it will simply",2],["new","Archive::Tar::Minitar::Output","classes/Archive/Tar/Minitar/Output.html#M000103","(output)","Creates a new Output object. If +output+ is a stream object that responds to #read), then it will simply",2],["new","Archive::Tar::Minitar::Reader","classes/Archive/Tar/Minitar/Reader.html#M000088","(anIO)","Creates and returns a new Reader object. ",2],["new","Archive::Tar::Minitar::Reader::EntryStream","classes/Archive/Tar/Minitar/Reader/EntryStream.html#M000073","(header, anIO)","",2],["new","Archive::Tar::Minitar::Writer","classes/Archive/Tar/Minitar/Writer.html#M000055","(anIO)","Creates and returns a new Writer object. ",2],["new","Archive::Tar::Minitar::Writer::BoundedStream","classes/Archive/Tar/Minitar/Writer/BoundedStream.html#M000051","(io, limit)","",2],["new","Archive::Tar::Minitar::Writer::RestrictedStream","classes/Archive/Tar/Minitar/Writer/RestrictedStream.html#M000049","(anIO)","",2],["new","Archive::Tar::PosixHeader","classes/Archive/Tar/PosixHeader.html#M000027","(vals)","Creates a new PosixHeader. A PosixHeader cannot be created unless the #name, #size, #prefix, and #mode",2],["new_from_stream","Archive::Tar::PosixHeader","classes/Archive/Tar/PosixHeader.html#M000016","(stream)","Creates a new PosixHeader from a data stream. ",2],["oct","Archive::Tar::PosixHeader","classes/Archive/Tar/PosixHeader.html#M000036","(num, len)","",2],["open","Archive::Tar::Minitar","classes/Archive/Tar/Minitar.html#M000107","(dest, mode = \"r\", &block)","A convenience method for wrapping Archive::Tar::Minitar::Input.open (mode +r+) and Archive::Tar::Minitar::Output.open",2],["open","Archive::Tar::Minitar::Input","classes/Archive/Tar/Minitar/Input.html#M000095","(input)","With no associated block, +Input::open+ is a synonym for +Input::new+. If the optional code block is",2],["open","Archive::Tar::Minitar::Output","classes/Archive/Tar/Minitar/Output.html#M000102","(output)","With no associated block, +Output::open+ is a synonym for +Output::new+. If the optional code block is",2],["open","Archive::Tar::Minitar::Reader","classes/Archive/Tar/Minitar/Reader.html#M000087","(anIO)","With no associated block, +Reader::open+ is a synonym for +Reader::new+. If the optional code block is",2],["open","Archive::Tar::Minitar::Writer","classes/Archive/Tar/Minitar/Writer.html#M000053","(anIO)","With no associated block, +Writer::open+ is a synonym for +Writer::new+. If the optional code block is",2],["pack","Archive::Tar::Minitar","classes/Archive/Tar/Minitar.html#M000109","(src, dest, recurse_dirs = true, &block)","A convenience method to pack files specified by +src+ into +dest+. If +src+ is an Array, then each file",2],["pack_file","Archive::Tar::Minitar","classes/Archive/Tar/Minitar.html#M000108","(entry, outputter)","A convenience method to packs the file provided. +entry+ may either be a filename (in which case various",2],["percentage","Archive::Tar::Minitar::Command::ProgressBar","classes/Archive/Tar/Minitar/Command/ProgressBar.html#M000011","(value = nil)","",2],["pos","Archive::Tar::Minitar::Reader::EntryStream","classes/Archive/Tar/Minitar/Reader/EntryStream.html#M000081","()","Returns the current read pointer in the EntryStream. ",2],["read","Archive::Tar::Minitar::Reader::EntryStream","classes/Archive/Tar/Minitar/Reader/EntryStream.html#M000074","(len = nil)","Reads +len+ bytes (or all remaining data) from the entry. Returns +nil+ if there is no more data to read.",2],["read","Archive::Tar::Minitar::Reader::InvalidEntryStream","classes/Archive/Tar/Minitar/Reader/InvalidEntryStream.html#M000070","(len = nil)","",2],["rewind","Archive::Tar::Minitar::Reader","classes/Archive/Tar/Minitar/Reader.html#M000090","()","Resets the read pointer to the beginning of data stream. Do not call this during a #each or #each_entry",2],["rewind","Archive::Tar::Minitar::Reader::EntryStream","classes/Archive/Tar/Minitar/Reader/EntryStream.html#M000082","()","Sets the current read pointer to the beginning of the EntryStream. ",2],["rewind","Archive::Tar::Minitar::Reader::InvalidEntryStream","classes/Archive/Tar/Minitar/Reader/InvalidEntryStream.html#M000072","()","",2],["run","Archive::Tar::Minitar::Command","classes/Archive/Tar/Minitar/Command.html#M000093","(argv, input = $stdin, output = $stdout, error = $stderr)","CommandPattern << CommandAdd CommandPattern << CommandDelete ",2],["set","Archive::Tar::Minitar::Command::ProgressBar","classes/Archive/Tar/Minitar/Command/ProgressBar.html#M000022","(count)","",2],["show","Archive::Tar::Minitar::Command::ProgressBar","classes/Archive/Tar/Minitar/Command/ProgressBar.html#M000014","()","",2],["show_progress","Archive::Tar::Minitar::Command::ProgressBar","classes/Archive/Tar/Minitar/Command/ProgressBar.html#M000015","()","",2],["split_name","Archive::Tar::Minitar::Writer","classes/Archive/Tar/Minitar/Writer.html#M000064","(name)","",2],["stat","Archive::Tar::Minitar::Command::ProgressBar","classes/Archive/Tar/Minitar/Command/ProgressBar.html#M000007","()","",2],["stat_for_file_transfer","Archive::Tar::Minitar::Command::ProgressBar","classes/Archive/Tar/Minitar/Command/ProgressBar.html#M000008","()","",2],["tar","Archive::Tar::Minitar::Input","classes/Archive/Tar/Minitar/Input.html#M000099","()","Returns the Reader object for direct access. ",2],["tar","Archive::Tar::Minitar::Output","classes/Archive/Tar/Minitar/Output.html#M000104","()","Returns the Writer object for direct access. ",2],["title","Archive::Tar::Minitar::Command::ProgressBar","classes/Archive/Tar/Minitar/Command/ProgressBar.html#M000012","()","",2],["to_s","Archive::Tar::PosixHeader","classes/Archive/Tar/PosixHeader.html#M000034","()","",2],["transfer_rate","Archive::Tar::Minitar::Command::ProgressBar","classes/Archive/Tar/Minitar/Command/ProgressBar.html#M000002","()","",2],["unpack","Archive::Tar::Minitar","classes/Archive/Tar/Minitar.html#M000110","(src, dest, files = [], &block)","A convenience method to unpack files from +src+ into the directory specified by +dest+. Only those files",2],["update_checksum","Archive::Tar::PosixHeader","classes/Archive/Tar/PosixHeader.html#M000035","()","Update the checksum field. ",2],["write","Archive::Tar::Minitar::Writer::BoundedStream","classes/Archive/Tar/Minitar/Writer/BoundedStream.html#M000052","(data)","",2],["write","Archive::Tar::Minitar::Writer::RestrictedStream","classes/Archive/Tar/Minitar/Writer/RestrictedStream.html#M000050","(data)","",2],["ChangeLog","files/ChangeLog.html","files/ChangeLog.html","","Revision history for Ruby library Archive::Tar::Minitar. Unless explicitly noted otherwise, all changes",3],["Install","files/Install.html","files/Install.html","","Installing this package is as simple as:  % ruby install.rb  Alternatively, you can use the RubyGem version",3],["README","files/README.html","files/README.html","","Archive::Tar::Minitar README ============================ Archive::Tar::Minitar is a pure-Ruby library",3],["minitar.rb","files/lib/archive/tar/minitar_rb.html","files/lib/archive/tar/minitar_rb.html",""," ",3],["command.rb","files/lib/archive/tar/minitar/command_rb.html","files/lib/archive/tar/minitar/command_rb.html",""," ",3]],"searchIndex":["archive","tar","minitar","blockrequired","closedstream","command","commandcreate","commandextract","commandhelp","commandlist","commandpattern","abstractcommanderror","commandalreadyexists","unknowncommanderror","progressbar","filenametoolong","input","nonseekablestream","output","reader","entrystream","invalidentrystream","unexpectedeof","writer","boundedstream","fileoverflow","restrictedstream","posixheader","<<()","[]()","[]()","add()","add_file()","add_file_simple()","altname()","altname()","altname()","bar()","bytes()","bytes_read()","calculate_checksum()","call()","call()","call()","call()","call()","close()","close()","close()","close()","close()","command()","command?()","convert_bytes()","default_ioe()","dir?()","directory()","directory?()","each()","each()","each_entry()","elapsed()","empty?()","eof?()","eol()","eta()","extract_entry()","file()","file?()","file_transfer_mode()","finish()","flush()","format=()","format_arguments=()","format_time()","fsync_dir()","full_name()","get_width()","getc()","getc()","halt()","header()","help()","help()","help()","help()","help()","inc()","inspect()","invalidate()","mkdir()","modestr()","name()","name()","name()","name()","name()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new_from_stream()","oct()","open()","open()","open()","open()","open()","pack()","pack_file()","percentage()","pos()","read()","read()","rewind()","rewind()","rewind()","run()","set()","show()","show_progress()","split_name()","stat()","stat_for_file_transfer()","tar()","tar()","title()","to_s()","transfer_rate()","unpack()","update_checksum()","write()","write()","changelog","install","readme","minitar.rb","command.rb"]}}