var search_data = {"index":{"longSearchIndex":["lib/json/add/bigdecimal.rb","lib/json/common.rb","lib/json/add/complex.rb","lib/json/add/date.rb","lib/json/add/date_time.rb","lib/json/add/exception.rb","lib/json.rb","json","json::ext","json::ext::generator","json::ext::generator::generatormethods","json::ext::generator::generatormethods","json::ext::generator::generatormethods","json::ext::generator::generatormethods","json::ext::generator::generatormethods","json::ext::generator::generatormethods","json::ext::generator::generatormethods","json::ext::generator::generatormethods","json::ext::generator::generatormethods","json::ext::generator::generatormethods::string","json::ext::generator::generatormethods","json::ext::generator","json::ext","json","json","json","json","json","json","json::pure","json::pure::generator","json::pure::generator::generatormethods","json::pure::generator::generatormethods","json::pure::generator::generatormethods","json::pure::generator::generatormethods","json::pure::generator::generatormethods","json::pure::generator::generatormethods","json::pure::generator::generatormethods","json::pure::generator::generatormethods","json::pure::generator::generatormethods::string","json::pure::generator::generatormethods","json::pure::generator","json::pure","lib/json/common.rb","lib/json.rb","lib/json/add/ostruct.rb","lib/json/add/range.rb","lib/json/add/rational.rb","lib/json/add/regexp.rb","lib/json/add/struct.rb","lib/json/add/symbol.rb","lib/json/add/time.rb","kernel","json","json::ext::generator::state","json::ext::generator::state","json::pure::generator::state","json::ext::generator::state","json::ext::generator::state","json::pure::generator::state","json::ext::generator::state","json::ext::generator::state","json::ext::generator::state","json::ext::generator::state","bigdecimal","complex","date","datetime","exception","openstruct","range","rational","regexp","struct","symbol","time","json::ext::generator::state","json::ext::generator::state","json::pure::generator::state","json::ext::generator::state","json::ext::generator::state","json::ext::generator::state","json::ext::generator::state","json::ext::generator::state","json::ext::generator::state","json::pure::generator::state","json::ext::generator::state","json::ext::generator::state","json::pure::generator::state","json","json","json::pure::parser","json::ext::generator::state","json::ext::generator::state","json::ext::generator::state","json::ext::generator::state","json","json","json::ext::generator::state","json::ext::generator::state","json::pure::generator::state","json","json::ext::generator::state","json::ext::generator::state","json::pure::generator::state","json","json","json::ext::generator::generatormethods::string","json::ext::generator::generatormethods::string","json::pure::generator::generatormethods::string","json::ext::generator::state","json::ext::generator::state","json::ext::generator::state","json::ext::generator::state","json::ext::generator::state","json::ext::generator::state","kernel","kernel","object","class","bigdecimal","complex","date","datetime","exception","json::ext::generator::generatormethods::string::extend","json::ext::generator::generatormethods::string::extend","json::pure::generator::generatormethods::string::extend","openstruct","range","rational","regexp","struct","symbol","time","json::pure::generator::generatormethods::hash","json::pure::generator::generatormethods::array","json::pure::generator::generatormethods::hash","json","json::ext::generator::state","json::ext::generator::state","json::ext::generator::state","json::ext::generator::state","json::ext::generator::state","json::ext::generator::state","json::pure::generator::state","json::ext::generator::state","json::ext::generator::state","json::ext::parser","json::ext::parser","json::pure::generator::state","json::pure::parser","json::ext::generator::state","json::ext::generator::state","json::ext::generator::state","json::ext::generator::state","json","json::ext::parser","json::ext::parser","json::pure::parser","json","json::pure::parser","json::pure::parser","json::pure::parser","json::pure::parser","json","json::ext::generator::state","json::ext::generator::state","json::ext::generator::state","json::ext::generator::state","json::ext::generator::state","json::ext::generator::state","json::ext::parser","json::ext::parser","json::pure::generator::state","json::pure::parser","json","json::pure::parser","json","json","json::ext::parser","json::ext::parser","json::ext::generator::state","json::ext::generator::state","json::ext::generator::state","json::ext::generator::state","json::ext::generator::state","json::ext::generator::state","json::ext::generator::state","json::ext::generator::state","json::ext::generator::state","json::ext::generator::state","json::pure::generator::state","bigdecimal","complex","date","datetime","exception","json::ext::generator::generatormethods::array","json::ext::generator::generatormethods::array","json::ext::generator::generatormethods::bignum","json::ext::generator::generatormethods::bignum","json::ext::generator::generatormethods::falseclass","json::ext::generator::generatormethods::falseclass","json::ext::generator::generatormethods::fixnum","json::ext::generator::generatormethods::fixnum","json::ext::generator::generatormethods::float","json::ext::generator::generatormethods::float","json::ext::generator::generatormethods::hash","json::ext::generator::generatormethods::hash","json::ext::generator::generatormethods::nilclass","json::ext::generator::generatormethods::nilclass","json::ext::generator::generatormethods::object","json::ext::generator::generatormethods::object","json::ext::generator::generatormethods::string","json::ext::generator::generatormethods::string","json::ext::generator::generatormethods::trueclass","json::ext::generator::generatormethods::trueclass","json::pure::generator::generatormethods::array","json::pure::generator::generatormethods::falseclass","json::pure::generator::generatormethods::float","json::pure::generator::generatormethods::hash","json::pure::generator::generatormethods::integer","json::pure::generator::generatormethods::nilclass","json::pure::generator::generatormethods::object","json::pure::generator::generatormethods::string","json::pure::generator::generatormethods::string","json::pure::generator::generatormethods::trueclass","openstruct","range","rational","regexp","struct","symbol","time","json::ext::generator::generatormethods::string","json::ext::generator::generatormethods::string","json::pure::generator::generatormethods::string","json::ext::generator::generatormethods::string","json::ext::generator::generatormethods::string","json::pure::generator::generatormethods::string","files/changes.html","files/copying.html","files/readme_rdoc.html","files/todo.html","files/ext/json/ext/fbuffer/fbuffer_h.html","files/ext/json/ext/fbuffer/fbuffer_h.html","files/ext/json/ext/generator/makefile.html","files/ext/json/ext/generator/makefile.html","files/ext/json/ext/generator/extconf_rb.html","files/ext/json/ext/generator/extconf_rb.html","files/ext/json/ext/generator/generator_c.html","files/ext/json/ext/generator/generator_c.html","files/ext/json/ext/generator/generator_h.html","files/ext/json/ext/generator/generator_h.html","files/ext/json/ext/parser/makefile.html","files/ext/json/ext/parser/makefile.html","files/ext/json/ext/parser/extconf_rb.html","files/ext/json/ext/parser/extconf_rb.html","files/ext/json/ext/parser/parser_c.html","files/ext/json/ext/parser/parser_c.html","files/ext/json/ext/parser/parser_h.html","files/ext/json/ext/parser/parser_h.html","files/ext/json/ext/parser/parser_rl.html","files/ext/json/ext/parser/parser_rl.html","files/lib/json_rb.html","files/lib/json/add/bigdecimal_rb.html","files/lib/json/add/complex_rb.html","files/lib/json/add/core_rb.html","files/lib/json/add/date_rb.html","files/lib/json/add/date_time_rb.html","files/lib/json/add/exception_rb.html","files/lib/json/add/ostruct_rb.html","files/lib/json/add/range_rb.html","files/lib/json/add/rational_rb.html","files/lib/json/add/regexp_rb.html","files/lib/json/add/struct_rb.html","files/lib/json/add/symbol_rb.html","files/lib/json/add/time_rb.html","files/lib/json/common_rb.html","files/lib/json/ext_rb.html","files/lib/json/pure_rb.html","files/lib/json/pure/generator_rb.html","files/lib/json/pure/parser_rb.html","files/lib/json/version_rb.html"],"info":[["BigDecimal","lib/json/add/bigdecimal.rb","classes/BigDecimal.html"," < Object","",1],["Class","lib/json/common.rb","classes/Class.html"," < Object","Extends any Class to include _json_creatable?_ method. ",1],["Complex","lib/json/add/complex.rb","classes/Complex.html"," < Object","",1],["Date","lib/json/add/date.rb","classes/Date.html"," < Object","Date serialization/deserialization ",1],["DateTime","lib/json/add/date_time.rb","classes/DateTime.html"," < Object","DateTime serialization/deserialization ",1],["Exception","lib/json/add/exception.rb","classes/Exception.html"," < Object","Exception serialization/deserialization ",1],["JSON","ext/json/ext/generator/generator.c","classes/JSON.html"," < ","          # ---       call-seq: quirks_mode?()       Returns a true, if this parser is in quirks_mode,",1],["Ext","JSON","classes/JSON/Ext.html"," < ","          # ---       call-seq: quirks_mode?()       Returns a true, if this parser is in quirks_mode,",1],["Generator","JSON::Ext","classes/JSON/Ext/Generator.html"," < ","      This is the JSON generator implemented as a C extension. It can be    configured to be used by",1],["GeneratorMethods","JSON::Ext::Generator","classes/JSON/Ext/Generator/GeneratorMethods.html"," < ","---          ",1],["Array","JSON::Ext::Generator::GeneratorMethods","classes/JSON/Ext/Generator/GeneratorMethods/Array.html"," < ","---          ",1],["Bignum","JSON::Ext::Generator::GeneratorMethods","classes/JSON/Ext/Generator/GeneratorMethods/Bignum.html"," < ","---          ",1],["FalseClass","JSON::Ext::Generator::GeneratorMethods","classes/JSON/Ext/Generator/GeneratorMethods/FalseClass.html"," < ","---          ",1],["Fixnum","JSON::Ext::Generator::GeneratorMethods","classes/JSON/Ext/Generator/GeneratorMethods/Fixnum.html"," < ","---          ",1],["Float","JSON::Ext::Generator::GeneratorMethods","classes/JSON/Ext/Generator/GeneratorMethods/Float.html"," < ","---          ",1],["Hash","JSON::Ext::Generator::GeneratorMethods","classes/JSON/Ext/Generator/GeneratorMethods/Hash.html"," < ","---          ",1],["NilClass","JSON::Ext::Generator::GeneratorMethods","classes/JSON/Ext/Generator/GeneratorMethods/NilClass.html"," < ","---          ",1],["Object","JSON::Ext::Generator::GeneratorMethods","classes/JSON/Ext/Generator/GeneratorMethods/Object.html"," < ","---          ",1],["String","JSON::Ext::Generator::GeneratorMethods","classes/JSON/Ext/Generator/GeneratorMethods/String.html"," < ","---          ",1],["Extend","JSON::Ext::Generator::GeneratorMethods::String","classes/JSON/Ext/Generator/GeneratorMethods/String/Extend.html"," < ","---          ",1],["TrueClass","JSON::Ext::Generator::GeneratorMethods","classes/JSON/Ext/Generator/GeneratorMethods/TrueClass.html"," < ","---          ",1],["State","JSON::Ext::Generator","classes/JSON/Ext/Generator/State.html"," < Object","         ",1],["Parser","JSON::Ext","classes/JSON/Ext/Parser.html"," < Object","      This is the JSON parser implemented as a C extension. It can be configured    to be used by setting",1],["GeneratorError","JSON","classes/JSON/GeneratorError.html"," < JSONError","This exception is raised if a generator or unparser error occurs. ",1],["JSONError","JSON","classes/JSON/JSONError.html"," < StandardError","The base exception for JSON errors. ",1],["MissingUnicodeSupport","JSON","classes/JSON/MissingUnicodeSupport.html"," < JSONError","This exception is raised if the required unicode support is missing on the system. Usually this means",1],["NestingError","JSON","classes/JSON/NestingError.html"," < ParserError","This exception is raised if the nesting of parsed data structures is too deep. ",1],["ParserError","JSON","classes/JSON/ParserError.html"," < JSONError","This exception is raised if a parser error occurs. ",1],["Pure","JSON","classes/JSON/Pure.html"," < ","This module holds all the modules/classes that implement JSON's functionality in pure ruby. ",1],["Generator","JSON::Pure","classes/JSON/Pure/Generator.html"," < ","",1],["GeneratorMethods","JSON::Pure::Generator","classes/JSON/Pure/Generator/GeneratorMethods.html"," < ","",1],["Array","JSON::Pure::Generator::GeneratorMethods","classes/JSON/Pure/Generator/GeneratorMethods/Array.html"," < ","",1],["FalseClass","JSON::Pure::Generator::GeneratorMethods","classes/JSON/Pure/Generator/GeneratorMethods/FalseClass.html"," < ","",1],["Float","JSON::Pure::Generator::GeneratorMethods","classes/JSON/Pure/Generator/GeneratorMethods/Float.html"," < ","",1],["Hash","JSON::Pure::Generator::GeneratorMethods","classes/JSON/Pure/Generator/GeneratorMethods/Hash.html"," < ","",1],["Integer","JSON::Pure::Generator::GeneratorMethods","classes/JSON/Pure/Generator/GeneratorMethods/Integer.html"," < ","",1],["NilClass","JSON::Pure::Generator::GeneratorMethods","classes/JSON/Pure/Generator/GeneratorMethods/NilClass.html"," < ","",1],["Object","JSON::Pure::Generator::GeneratorMethods","classes/JSON/Pure/Generator/GeneratorMethods/Object.html"," < ","",1],["String","JSON::Pure::Generator::GeneratorMethods","classes/JSON/Pure/Generator/GeneratorMethods/String.html"," < ","",1],["Extend","JSON::Pure::Generator::GeneratorMethods::String","classes/JSON/Pure/Generator/GeneratorMethods/String/Extend.html"," < ","Module that holds the extinding methods if, the String module is included. ",1],["TrueClass","JSON::Pure::Generator::GeneratorMethods","classes/JSON/Pure/Generator/GeneratorMethods/TrueClass.html"," < ","",1],["State","JSON::Pure::Generator","classes/JSON/Pure/Generator/State.html"," < Object","This class is used to create State instances, that are use to hold data while generating a JSON text",1],["Parser","JSON::Pure","classes/JSON/Pure/Parser.html"," < StringScanner","This class implements the JSON parser that is used to parse a JSON string into a Ruby data structure.",1],["Kernel","lib/json/common.rb","classes/Kernel.html"," < ","",1],["Object","lib/json.rb","classes/Object.html"," < Object","",1],["OpenStruct","lib/json/add/ostruct.rb","classes/OpenStruct.html"," < Object","OpenStruct serialization/deserialization ",1],["Range","lib/json/add/range.rb","classes/Range.html"," < Object","Range serialization/deserialization ",1],["Rational","lib/json/add/rational.rb","classes/Rational.html"," < Object","",1],["Regexp","lib/json/add/regexp.rb","classes/Regexp.html"," < Object","Regexp serialization/deserialization ",1],["Struct","lib/json/add/struct.rb","classes/Struct.html"," < Object","Struct serialization/deserialization ",1],["Symbol","lib/json/add/symbol.rb","classes/Symbol.html"," < Object","Symbol serialization/deserialization ",1],["Time","lib/json/add/time.rb","classes/Time.html"," < Object","Time serialization/deserialization ",1],["JSON","Kernel","classes/Kernel.html#M000174","(object, *args)","If _object_ is string-like, parse the string and return the parsed result as a Ruby data structure. Otherwise,",2],["[]","JSON","classes/JSON.html#M000132","(object, opts = {})","If _object_ is string-like, parse the string and return the parsed result as a Ruby data structure. Otherwise",2],["[]","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#M000075","(p1)","        Return the value returned by method +name+.    ",2],["[]","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#M000027","(p1)","        Return the value returned by method +name+.    ",2],["[]","JSON::Pure::Generator::State","classes/JSON/Pure/Generator/State.html#M000160","(name)","Return the value returned by method +name+. ",2],["allow_nan?","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#M000016","()","          Returns true, if NaN, Infinity, and -Infinity should be generated, otherwise    returns false.",2],["allow_nan?","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#M000064","()","          Returns true, if NaN, Infinity, and -Infinity should be generated, otherwise    returns false.",2],["allow_nan?","JSON::Pure::Generator::State","classes/JSON/Pure/Generator/State.html#M000149","()","Returns true if NaN, Infinity, and -Infinity should be considered as valid JSON and output. ",2],["array_nl","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#M000011","()","          This string is put at the end of a line that holds a JSON array.     ",2],["array_nl","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#M000059","()","          This string is put at the end of a line that holds a JSON array.     ",2],["array_nl=","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#M000060","(p1)","          This string is put at the end of a line that holds a JSON array.     ",2],["array_nl=","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#M000012","(p1)","          This string is put at the end of a line that holds a JSON array.     ",2],["as_json","BigDecimal","classes/BigDecimal.html#M000097","(*)","",2],["as_json","Complex","classes/Complex.html#M000100","(*)","",2],["as_json","Date","classes/Date.html#M000104","(*)","Returns a hash, that will be turned into a JSON object and represent this object. ",2],["as_json","DateTime","classes/DateTime.html#M000105","(*)","Returns a hash, that will be turned into a JSON object and represent this object. ",2],["as_json","Exception","classes/Exception.html#M000109","(*)","Returns a hash, that will be turned into a JSON object and represent this object. ",2],["as_json","OpenStruct","classes/OpenStruct.html#M000112","(*)","Returns a hash, that will be turned into a JSON object and represent this object. ",2],["as_json","Range","classes/Range.html#M000115","(*)","Returns a hash, that will be turned into a JSON object and represent this object. ",2],["as_json","Rational","classes/Rational.html#M000118","(*)","",2],["as_json","Regexp","classes/Regexp.html#M000121","(*)","Returns a hash, that will be turned into a JSON object and represent this object. ",2],["as_json","Struct","classes/Struct.html#M000124","(*)","Returns a hash, that will be turned into a JSON object and represent this object. ",2],["as_json","Symbol","classes/Symbol.html#M000127","(*)","Returns a hash, that will be turned into a JSON object and represent this object. ",2],["as_json","Time","classes/Time.html#M000130","(*)","Returns a hash, that will be turned into a JSON object and represent this object. ",2],["ascii_only?","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#M000017","()","          Returns true, if NaN, Infinity, and -Infinity should be generated, otherwise    returns false.",2],["ascii_only?","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#M000065","()","          Returns true, if NaN, Infinity, and -Infinity should be generated, otherwise    returns false.",2],["ascii_only?","JSON::Pure::Generator::State","classes/JSON/Pure/Generator/State.html#M000150","()","Returns true, if only ASCII characters should be generated. Otherwise returns false. ",2],["buffer_initial_length","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#M000023","()","          This integer returns the current inital length of the buffer.     ",2],["buffer_initial_length","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#M000071","()","          This integer returns the current inital length of the buffer.     ",2],["buffer_initial_length=","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#M000072","(p1)","          This sets the initial length of the buffer to +length+, if +length+ > 0,    otherwise its value",2],["buffer_initial_length=","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#M000024","(p1)","          This sets the initial length of the buffer to +length+, if +length+ > 0,    otherwise its value",2],["check_circular?","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#M000063","()","        Returns true, if circular data structures should be checked,   otherwise returns false.    ",2],["check_circular?","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#M000015","()","        Returns true, if circular data structures should be checked,   otherwise returns false.    ",2],["check_circular?","JSON::Pure::Generator::State","classes/JSON/Pure/Generator/State.html#M000148","()","Returns true, if circular data structures are checked, otherwise returns false. ",2],["configure","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#M000025","(p1)","          Configure this State instance with the Hash _opts_, and return    itself.     ",2],["configure","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#M000073","(p1)","          Configure this State instance with the Hash _opts_, and return    itself.     ",2],["configure","JSON::Pure::Generator::State","classes/JSON/Pure/Generator/State.html#M000153","(opts)","Configure this State instance with the Hash _opts_, and return itself. ",2],["const_defined_in?","JSON","classes/JSON.html#M000168","(modul, constant)","",2],["const_defined_in?","JSON","classes/JSON.html#M000169","(modul, constant)","",2],["convert_encoding","JSON::Pure::Parser","classes/JSON/Pure/Parser.html#M000191","(source)","",2],["depth","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#M000021","()","          This integer returns the current depth of data structure nesting.     ",2],["depth","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#M000069","()","          This integer returns the current depth of data structure nesting.     ",2],["depth=","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#M000070","(p1)","          This sets the maximum level of data structure nesting in the generated JSON    to the integer",2],["depth=","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#M000022","(p1)","          This sets the maximum level of data structure nesting in the generated JSON    to the integer",2],["dump","JSON","classes/JSON.html#M000159","(obj, anIO = nil, limit = nil)","Dumps _obj_ as a JSON string, i.e. calls generate on the object and returns the result. If anIO (an IO-like",2],["fast_generate","JSON","classes/JSON.html#M000144","(obj, opts = nil)","Generate a JSON document from the Ruby data structure _obj_ and return it. This method disables the checks",2],["from_state","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#M000048","(p1)","          Creates a State object from _opts_, which ought to be Hash to create a    new State instance",2],["from_state","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#M000000","(p1)","          Creates a State object from _opts_, which ought to be Hash to create a    new State instance",2],["from_state","JSON::Pure::Generator::State","classes/JSON/Pure/Generator/State.html#M000143","(opts)","Creates a State object from _opts_, which ought to be Hash to create a new State instance configured",2],["generate","JSON","classes/JSON.html#M000142","(obj, opts = nil)","Generate a JSON document from the Ruby data structure _obj_ and return it. _state_ is * a JSON::State",2],["generate","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#M000076","(p1)","          Generates a valid JSON document from object +obj+ and returns the    result. If no valid JSON",2],["generate","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#M000028","(p1)","          Generates a valid JSON document from object +obj+ and returns the    result. If no valid JSON",2],["generate","JSON::Pure::Generator::State","classes/JSON/Pure/Generator/State.html#M000158","(obj)","Generates a valid JSON document from object +obj+ and returns the result. If no valid JSON document can",2],["iconv","JSON","classes/JSON.html#M000166","(to, from, string)","Encodes string using Ruby's _String.encode_ ",2],["iconv","JSON","classes/JSON.html#M000167","(to, from, string)","Encodes string using _iconv_ library ",2],["included","JSON::Ext::Generator::GeneratorMethods::String","classes/JSON/Ext/Generator/GeneratorMethods/String.html#M000083","(p1)","          Extends _modul_ with the String::Extend module.     ",2],["included","JSON::Ext::Generator::GeneratorMethods::String","classes/JSON/Ext/Generator/GeneratorMethods/String.html#M000035","(p1)","          Extends _modul_ with the String::Extend module.     ",2],["included","JSON::Pure::Generator::GeneratorMethods::String","classes/JSON/Pure/Generator/GeneratorMethods/String.html#M000181","(modul)","Extends _modul_ with the String::Extend module. ",2],["indent","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#M000051","()","          This string is used to indent levels in the JSON text.     ",2],["indent","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#M000003","()","          This string is used to indent levels in the JSON text.     ",2],["indent=","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#M000052","(p1)","          This string is used to indent levels in the JSON text.     ",2],["indent=","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#M000004","(p1)","          This string is used to indent levels in the JSON text.     ",2],["initialize_copy","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#M000002","(p1)","          Initializes this object from orig if it to be duplicated/cloned and returns    it.    ",2],["initialize_copy","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#M000050","(p1)","          Initializes this object from orig if it to be duplicated/cloned and returns    it.    ",2],["j","Kernel","classes/Kernel.html#M000170","(*objs)","Outputs _objs_ to STDOUT as JSON strings in the shortest form, that is in one line. ",2],["jj","Kernel","classes/Kernel.html#M000173","(*objs)","Ouputs _objs_ to STDOUT as JSON strings in a pretty format, with indentation and over many lines. ",2],["json/common","Object","classes/Object.html#M000192","","= JavaScript Object Notation (JSON) JSON is a lightweight data-interchange format. It is easy for us",2],["json_creatable?","Class","classes/Class.html#M000175","()","Returns true if this class can be used to create an instance from a serialised JSON string. The class",2],["json_create","BigDecimal","classes/BigDecimal.html#M000096","(object)","",2],["json_create","Complex","classes/Complex.html#M000099","(object)","",2],["json_create","Date","classes/Date.html#M000103","(object)","Deserializes JSON string by converting Julian year <tt>y</tt>, month <tt>m</tt>, day <tt>d</tt> and Day",2],["json_create","DateTime","classes/DateTime.html#M000102","(object)","Deserializes JSON string by converting year <tt>y</tt>, month <tt>m</tt>, day <tt>d</tt>, hour <tt>H</tt>,",2],["json_create","Exception","classes/Exception.html#M000108","(object)","Deserializes JSON string by constructing new Exception object with message <tt>m</tt> and backtrace <tt>b</tt>",2],["json_create","JSON::Ext::Generator::GeneratorMethods::String::Extend","classes/JSON/Ext/Generator/GeneratorMethods/String/Extend.html#M000039","(p1)","          Raw Strings are JSON Objects (the raw bytes are stored in an array for the    key \"raw\"). The",2],["json_create","JSON::Ext::Generator::GeneratorMethods::String::Extend","classes/JSON/Ext/Generator/GeneratorMethods/String/Extend.html#M000087","(p1)","          Raw Strings are JSON Objects (the raw bytes are stored in an array for the    key \"raw\"). The",2],["json_create","JSON::Pure::Generator::GeneratorMethods::String::Extend","classes/JSON/Pure/Generator/GeneratorMethods/String/Extend.html#M000180","(o)","Raw Strings are JSON Objects (the raw bytes are stored in an array for the key \"raw\"). The Ruby String",2],["json_create","OpenStruct","classes/OpenStruct.html#M000111","(object)","Deserializes JSON string by constructing new Struct object with values <tt>v</tt> serialized by <tt>to_json</tt>.",2],["json_create","Range","classes/Range.html#M000114","(object)","Deserializes JSON string by constructing new Range object with arguments <tt>a</tt> serialized by <tt>to_json</tt>.",2],["json_create","Rational","classes/Rational.html#M000117","(object)","",2],["json_create","Regexp","classes/Regexp.html#M000120","(object)","Deserializes JSON string by constructing new Regexp object with source <tt>s</tt> (Regexp or String)",2],["json_create","Struct","classes/Struct.html#M000123","(object)","Deserializes JSON string by constructing new Struct object with values <tt>v</tt> serialized by <tt>to_json</tt>.",2],["json_create","Symbol","classes/Symbol.html#M000129","(o)","Deserializes JSON string by converting the <tt>string</tt> value stored in the object to a Symbol ",2],["json_create","Time","classes/Time.html#M000126","(object)","Deserializes JSON string by converting time since epoch to Time ",2],["json_shift","JSON::Pure::Generator::GeneratorMethods::Hash","classes/JSON/Pure/Generator/GeneratorMethods/Hash.html#M000164","(state)","",2],["json_transform","JSON::Pure::Generator::GeneratorMethods::Array","classes/JSON/Pure/Generator/GeneratorMethods/Array.html#M000172","(state)","",2],["json_transform","JSON::Pure::Generator::GeneratorMethods::Hash","classes/JSON/Pure/Generator/GeneratorMethods/Hash.html#M000165","(state)","",2],["load","JSON","classes/JSON.html#M000151","(source, proc = nil)","Load a ruby data structure from a JSON _source_ and return it. A source can either be a string-like object,",2],["max_nesting","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#M000013","()","          This integer returns the maximum level of data structure nesting in    the generated JSON,",2],["max_nesting","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#M000061","()","          This integer returns the maximum level of data structure nesting in    the generated JSON,",2],["max_nesting=","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#M000014","(p1)","          This sets the maximum level of data structure nesting in the generated JSON    to the integer",2],["max_nesting=","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#M000062","(p1)","          This sets the maximum level of data structure nesting in the generated JSON    to the integer",2],["merge","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#M000043","(p1)","Alias for #configure",2],["merge","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#M000091","(p1)","Alias for #configure",2],["merge","JSON::Pure::Generator::State","classes/JSON/Pure/Generator/State.html#M000156","(opts)","Alias for #configure",2],["new","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#M000001","(...)","          Instantiates a new State object, configured by _opts_.       _opts_ can have the following",2],["new","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#M000049","(...)","          Instantiates a new State object, configured by _opts_.       _opts_ can have the following",2],["new","JSON::Ext::Parser","classes/JSON/Ext/Parser.html#M000092","(...)","          Creates a new JSON::Ext::Parser instance for the string _source_.       Creates a new JSON::Ext::Parser",2],["new","JSON::Ext::Parser","classes/JSON/Ext/Parser.html#M000044","(...)","          Creates a new JSON::Ext::Parser instance for the string _source_.       Creates a new JSON::Ext::Parser",2],["new","JSON::Pure::Generator::State","classes/JSON/Pure/Generator/State.html#M000145","(opts = {})","Instantiates a new State object, configured by _opts_. _opts_ can have the following keys: * *indent*:",2],["new","JSON::Pure::Parser","classes/JSON/Pure/Parser.html#M000187","(source, opts = {})","Creates a new JSON::Pure::Parser instance for the string _source_. It will be configured by the _opts_",2],["object_nl","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#M000057","()","          This string is put at the end of a line that holds a JSON object (or    Hash).     ",2],["object_nl","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#M000009","()","          This string is put at the end of a line that holds a JSON object (or    Hash).     ",2],["object_nl=","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#M000010","(p1)","          This string is put at the end of a line that holds a JSON object (or    Hash).     ",2],["object_nl=","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#M000058","(p1)","          This string is put at the end of a line that holds a JSON object (or    Hash).     ",2],["parse","JSON","classes/JSON.html#M000138","(source, opts = {})","Parse the JSON document _source_ into a Ruby data structure and return it. _opts_ can have the following",2],["parse","JSON::Ext::Parser","classes/JSON/Ext/Parser.html#M000045","()","           Parses the current JSON text _source_ and returns the complete data     structure as a result.",2],["parse","JSON::Ext::Parser","classes/JSON/Ext/Parser.html#M000093","()","           Parses the current JSON text _source_ and returns the complete data     structure as a result.",2],["parse","JSON::Pure::Parser","classes/JSON/Pure/Parser.html#M000190","()","Parses the current JSON string _source_ and returns the complete data structure as a result. ",2],["parse!","JSON","classes/JSON.html#M000139","(source, opts = {})","Parse the JSON document _source_ into a Ruby data structure and return it. The bang version of the parse",2],["parse_array","JSON::Pure::Parser","classes/JSON/Pure/Parser.html#M000195","()","",2],["parse_object","JSON::Pure::Parser","classes/JSON/Pure/Parser.html#M000196","()","",2],["parse_string","JSON::Pure::Parser","classes/JSON/Pure/Parser.html#M000193","()","",2],["parse_value","JSON::Pure::Parser","classes/JSON/Pure/Parser.html#M000194","()","",2],["pretty_generate","JSON","classes/JSON.html#M000146","(obj, opts = nil)","Generate a JSON document from the Ruby data structure _obj_ and return it. The returned document is a",2],["quirks_mode","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#M000019","()","          Returns true, if quirks mode is enabled. Otherwise returns false.     ",2],["quirks_mode","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#M000067","()","          Returns true, if quirks mode is enabled. Otherwise returns false.     ",2],["quirks_mode=","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#M000020","(p1)","          If set to true, enables the quirks_mode mode.     ",2],["quirks_mode=","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#M000068","(p1)","          If set to true, enables the quirks_mode mode.     ",2],["quirks_mode?","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#M000018","()","          Returns true, if quirks mode is enabled. Otherwise returns false.     ",2],["quirks_mode?","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#M000066","()","          Returns true, if quirks mode is enabled. Otherwise returns false.     ",2],["quirks_mode?","JSON::Ext::Parser","classes/JSON/Ext/Parser.html#M000047","()","          Returns a true, if this parser is in quirks_mode, false otherwise.     ",2],["quirks_mode?","JSON::Ext::Parser","classes/JSON/Ext/Parser.html#M000095","()","          Returns a true, if this parser is in quirks_mode, false otherwise.     ",2],["quirks_mode?","JSON::Pure::Generator::State","classes/JSON/Pure/Generator/State.html#M000152","()","Returns true, if quirks mode is enabled. Otherwise returns false. ",2],["quirks_mode?","JSON::Pure::Parser","classes/JSON/Pure/Parser.html#M000188","()","",2],["recurse_proc","JSON","classes/JSON.html#M000154","(result, &proc)","Recursively calls passed _Proc_ if the parsed data structure is an _Array_ or _Hash_ ",2],["reset","JSON::Pure::Parser","classes/JSON/Pure/Parser.html#M000189","()","",2],["restore","JSON","classes/JSON.html#M000155","(source, proc = nil)","Alias for #load",2],["restore","JSON","classes/JSON.html#M000155","(source, proc = nil)","Alias for #load",2],["source","JSON::Ext::Parser","classes/JSON/Ext/Parser.html#M000094","()","          Returns a copy of the current _source_ string, that was used to construct    this Parser. ",2],["source","JSON::Ext::Parser","classes/JSON/Ext/Parser.html#M000046","()","          Returns a copy of the current _source_ string, that was used to construct    this Parser. ",2],["space","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#M000005","()","          This string is used to insert a space between the tokens in a JSON    string.     ",2],["space","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#M000053","()","          This string is used to insert a space between the tokens in a JSON    string.     ",2],["space=","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#M000006","(p1)","          This string is used to insert a space between the tokens in a JSON    string.     ",2],["space=","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#M000054","(p1)","          This string is used to insert a space between the tokens in a JSON    string.     ",2],["space_before","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#M000055","()","          This string is used to insert a space before the ':' in JSON objects.     ",2],["space_before","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#M000007","()","          This string is used to insert a space before the ':' in JSON objects.     ",2],["space_before=","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#M000056","(p1)","          This string is used to insert a space before the ':' in JSON objects.     ",2],["space_before=","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#M000008","(p1)","          This string is used to insert a space before the ':' in JSON objects.     ",2],["to_h","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#M000074","()","          Returns the configuration instance variables as a hash, that can be    passed to the configure",2],["to_h","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#M000026","()","          Returns the configuration instance variables as a hash, that can be    passed to the configure",2],["to_h","JSON::Pure::Generator::State","classes/JSON/Pure/Generator/State.html#M000157","()","Returns the configuration instance variables as a hash, that can be passed to the configure method. ",2],["to_json","BigDecimal","classes/BigDecimal.html#M000098","(*)","",2],["to_json","Complex","classes/Complex.html#M000101","(*)","",2],["to_json","Date","classes/Date.html#M000106","(*args)","Stores class name (Date) with Julian year <tt>y</tt>, month <tt>m</tt>, day <tt>d</tt> and Day of Calendar",2],["to_json","DateTime","classes/DateTime.html#M000107","(*args)","Stores class name (DateTime) with Julian year <tt>y</tt>, month <tt>m</tt>, day <tt>d</tt>, hour <tt>H</tt>,",2],["to_json","Exception","classes/Exception.html#M000110","(*args)","Stores class name (Exception) with message <tt>m</tt> and backtrace array <tt>b</tt> as JSON string ",2],["to_json","JSON::Ext::Generator::GeneratorMethods::Array","classes/JSON/Ext/Generator/GeneratorMethods/Array.html#M000031","(...)","          Returns a JSON string containing a JSON array, that is generated from    this Array instance.",2],["to_json","JSON::Ext::Generator::GeneratorMethods::Array","classes/JSON/Ext/Generator/GeneratorMethods/Array.html#M000079","(...)","          Returns a JSON string containing a JSON array, that is generated from    this Array instance.",2],["to_json","JSON::Ext::Generator::GeneratorMethods::Bignum","classes/JSON/Ext/Generator/GeneratorMethods/Bignum.html#M000081","(...)","          Returns a JSON string representation for this Integer number.     ",2],["to_json","JSON::Ext::Generator::GeneratorMethods::Bignum","classes/JSON/Ext/Generator/GeneratorMethods/Bignum.html#M000033","(...)","          Returns a JSON string representation for this Integer number.     ",2],["to_json","JSON::Ext::Generator::GeneratorMethods::FalseClass","classes/JSON/Ext/Generator/GeneratorMethods/FalseClass.html#M000041","(...)","          Returns a JSON string for false: 'false'.     ",2],["to_json","JSON::Ext::Generator::GeneratorMethods::FalseClass","classes/JSON/Ext/Generator/GeneratorMethods/FalseClass.html#M000089","(...)","          Returns a JSON string for false: 'false'.     ",2],["to_json","JSON::Ext::Generator::GeneratorMethods::Fixnum","classes/JSON/Ext/Generator/GeneratorMethods/Fixnum.html#M000080","(...)","          Returns a JSON string representation for this Integer number.     ",2],["to_json","JSON::Ext::Generator::GeneratorMethods::Fixnum","classes/JSON/Ext/Generator/GeneratorMethods/Fixnum.html#M000032","(...)","          Returns a JSON string representation for this Integer number.     ",2],["to_json","JSON::Ext::Generator::GeneratorMethods::Float","classes/JSON/Ext/Generator/GeneratorMethods/Float.html#M000082","(...)","          Returns a JSON string representation for this Float number.     ",2],["to_json","JSON::Ext::Generator::GeneratorMethods::Float","classes/JSON/Ext/Generator/GeneratorMethods/Float.html#M000034","(...)","          Returns a JSON string representation for this Float number.     ",2],["to_json","JSON::Ext::Generator::GeneratorMethods::Hash","classes/JSON/Ext/Generator/GeneratorMethods/Hash.html#M000078","(...)","          Returns a JSON string containing a JSON object, that is generated from    this Hash instance.",2],["to_json","JSON::Ext::Generator::GeneratorMethods::Hash","classes/JSON/Ext/Generator/GeneratorMethods/Hash.html#M000030","(...)","          Returns a JSON string containing a JSON object, that is generated from    this Hash instance.",2],["to_json","JSON::Ext::Generator::GeneratorMethods::NilClass","classes/JSON/Ext/Generator/GeneratorMethods/NilClass.html#M000042","(...)","          Returns a JSON string for nil: 'null'.     ",2],["to_json","JSON::Ext::Generator::GeneratorMethods::NilClass","classes/JSON/Ext/Generator/GeneratorMethods/NilClass.html#M000090","(...)","          Returns a JSON string for nil: 'null'.     ",2],["to_json","JSON::Ext::Generator::GeneratorMethods::Object","classes/JSON/Ext/Generator/GeneratorMethods/Object.html#M000029","(...)","          Converts this object to a string (calling #to_s), converts    it to a JSON string, and returns",2],["to_json","JSON::Ext::Generator::GeneratorMethods::Object","classes/JSON/Ext/Generator/GeneratorMethods/Object.html#M000077","(...)","          Converts this object to a string (calling #to_s), converts    it to a JSON string, and returns",2],["to_json","JSON::Ext::Generator::GeneratorMethods::String","classes/JSON/Ext/Generator/GeneratorMethods/String.html#M000084","(...)","          This string should be encoded with UTF-8 A call to this method    returns a JSON string encoded",2],["to_json","JSON::Ext::Generator::GeneratorMethods::String","classes/JSON/Ext/Generator/GeneratorMethods/String.html#M000036","(...)","          This string should be encoded with UTF-8 A call to this method    returns a JSON string encoded",2],["to_json","JSON::Ext::Generator::GeneratorMethods::TrueClass","classes/JSON/Ext/Generator/GeneratorMethods/TrueClass.html#M000040","(...)","          Returns a JSON string for true: 'true'.     ",2],["to_json","JSON::Ext::Generator::GeneratorMethods::TrueClass","classes/JSON/Ext/Generator/GeneratorMethods/TrueClass.html#M000088","(...)","          Returns a JSON string for true: 'true'.     ",2],["to_json","JSON::Pure::Generator::GeneratorMethods::Array","classes/JSON/Pure/Generator/GeneratorMethods/Array.html#M000171","(state = nil, *)","Returns a JSON string containing a JSON array, that is unparsed from this Array instance. _state_ is",2],["to_json","JSON::Pure::Generator::GeneratorMethods::FalseClass","classes/JSON/Pure/Generator/GeneratorMethods/FalseClass.html#M000185","(*)","Returns a JSON string for false: 'false'. ",2],["to_json","JSON::Pure::Generator::GeneratorMethods::Float","classes/JSON/Pure/Generator/GeneratorMethods/Float.html#M000177","(state = nil, *)","Returns a JSON string representation for this Float number. ",2],["to_json","JSON::Pure::Generator::GeneratorMethods::Hash","classes/JSON/Pure/Generator/GeneratorMethods/Hash.html#M000162","(state = nil, *)","Returns a JSON string containing a JSON object, that is unparsed from this Hash instance. _state_ is",2],["to_json","JSON::Pure::Generator::GeneratorMethods::Integer","classes/JSON/Pure/Generator/GeneratorMethods/Integer.html#M000176","(*)","Returns a JSON string representation for this Integer number. ",2],["to_json","JSON::Pure::Generator::GeneratorMethods::NilClass","classes/JSON/Pure/Generator/GeneratorMethods/NilClass.html#M000186","(*)","Returns a JSON string for nil: 'null'. ",2],["to_json","JSON::Pure::Generator::GeneratorMethods::Object","classes/JSON/Pure/Generator/GeneratorMethods/Object.html#M000161","(*)","Converts this object to a string (calling #to_s), converts it to a JSON string, and returns the result.",2],["to_json","JSON::Pure::Generator::GeneratorMethods::String","classes/JSON/Pure/Generator/GeneratorMethods/String.html#M000178","(state = nil, *args)","This string should be encoded with UTF-8 A call to this method returns a JSON string encoded with UTF16",2],["to_json","JSON::Pure::Generator::GeneratorMethods::String","classes/JSON/Pure/Generator/GeneratorMethods/String.html#M000179","(state = nil, *args)","This string should be encoded with UTF-8 A call to this method returns a JSON string encoded with UTF16",2],["to_json","JSON::Pure::Generator::GeneratorMethods::TrueClass","classes/JSON/Pure/Generator/GeneratorMethods/TrueClass.html#M000184","(*)","Returns a JSON string for true: 'true'. ",2],["to_json","OpenStruct","classes/OpenStruct.html#M000113","(*args)","Stores class name (OpenStruct) with this struct's values <tt>v</tt> as a JSON string. ",2],["to_json","Range","classes/Range.html#M000116","(*args)","Stores class name (Range) with JSON array of arguments <tt>a</tt> which include <tt>first</tt> (integer),",2],["to_json","Rational","classes/Rational.html#M000119","(*)","",2],["to_json","Regexp","classes/Regexp.html#M000122","(*)","Stores class name (Regexp) with options <tt>o</tt> and source <tt>s</tt> (Regexp or String) as JSON string",2],["to_json","Struct","classes/Struct.html#M000125","(*args)","Stores class name (Struct) with Struct values <tt>v</tt> as a JSON string. Only named structs are supported.",2],["to_json","Symbol","classes/Symbol.html#M000128","(*a)","Stores class name (Symbol) with String representation of Symbol as a JSON string. ",2],["to_json","Time","classes/Time.html#M000131","(*args)","Stores class name (Time) with number of seconds since epoch and number of microseconds for Time as JSON",2],["to_json_raw","JSON::Ext::Generator::GeneratorMethods::String","classes/JSON/Ext/Generator/GeneratorMethods/String.html#M000037","(...)","          This method creates a JSON text from the result of a call to    to_json_raw_object of this",2],["to_json_raw","JSON::Ext::Generator::GeneratorMethods::String","classes/JSON/Ext/Generator/GeneratorMethods/String.html#M000085","(...)","          This method creates a JSON text from the result of a call to    to_json_raw_object of this",2],["to_json_raw","JSON::Pure::Generator::GeneratorMethods::String","classes/JSON/Pure/Generator/GeneratorMethods/String.html#M000183","(*args)","This method creates a JSON text from the result of a call to to_json_raw_object of this String. ",2],["to_json_raw_object","JSON::Ext::Generator::GeneratorMethods::String","classes/JSON/Ext/Generator/GeneratorMethods/String.html#M000086","()","          This method creates a raw object hash, that can be nested into    other data structures and",2],["to_json_raw_object","JSON::Ext::Generator::GeneratorMethods::String","classes/JSON/Ext/Generator/GeneratorMethods/String.html#M000038","()","          This method creates a raw object hash, that can be nested into    other data structures and",2],["to_json_raw_object","JSON::Pure::Generator::GeneratorMethods::String","classes/JSON/Pure/Generator/GeneratorMethods/String.html#M000182","()","This method creates a raw object hash, that can be nested into other data structures and will be unparsed",2],["CHANGES","files/CHANGES.html","files/CHANGES.html","","2012-01-15 (1.6.5)   * Vit Ondruch <v.ondruch@tiscali.cz> reported a bug that shows up when using   ",3],["COPYING","files/COPYING.html","files/COPYING.html","","Ruby is copyrighted free software by Yukihiro Matsumoto <matz@netlab.co.jp>. You can redistribute it",3],["README.rdoc","files/README_rdoc.html","files/README_rdoc.html","","= JSON implementation for Ruby http://travis-ci.org/flori/json.png?branch=master  == Description  This",3],["TODO","files/TODO.html","files/TODO.html",""," ",3],["fbuffer.h","files/ext/json/ext/fbuffer/fbuffer_h.html","files/ext/json/ext/fbuffer/fbuffer_h.html","","",3],["fbuffer.h","files/ext/json/ext/fbuffer/fbuffer_h.html","files/ext/json/ext/fbuffer/fbuffer_h.html","","",3],["Makefile","files/ext/json/ext/generator/Makefile.html","files/ext/json/ext/generator/Makefile.html",""," SHELL = /bin/sh  #### Start of system configuration section. ####  srcdir = . topdir = /opt/local/lib/ruby/1.8/x86_64-darwin11",3],["Makefile","files/ext/json/ext/generator/Makefile.html","files/ext/json/ext/generator/Makefile.html",""," SHELL = /bin/sh  #### Start of system configuration section. ####  srcdir = . topdir = /opt/local/lib/ruby/1.8/x86_64-darwin11",3],["extconf.rb","files/ext/json/ext/generator/extconf_rb.html","files/ext/json/ext/generator/extconf_rb.html","","",3],["extconf.rb","files/ext/json/ext/generator/extconf_rb.html","files/ext/json/ext/generator/extconf_rb.html","","",3],["generator.c","files/ext/json/ext/generator/generator_c.html","files/ext/json/ext/generator/generator_c.html","","",3],["generator.c","files/ext/json/ext/generator/generator_c.html","files/ext/json/ext/generator/generator_c.html","","",3],["generator.h","files/ext/json/ext/generator/generator_h.html","files/ext/json/ext/generator/generator_h.html","","",3],["generator.h","files/ext/json/ext/generator/generator_h.html","files/ext/json/ext/generator/generator_h.html","","",3],["Makefile","files/ext/json/ext/parser/Makefile.html","files/ext/json/ext/parser/Makefile.html",""," SHELL = /bin/sh  #### Start of system configuration section. ####  srcdir = . topdir = /opt/local/lib/ruby/1.8/x86_64-darwin11",3],["Makefile","files/ext/json/ext/parser/Makefile.html","files/ext/json/ext/parser/Makefile.html",""," SHELL = /bin/sh  #### Start of system configuration section. ####  srcdir = . topdir = /opt/local/lib/ruby/1.8/x86_64-darwin11",3],["extconf.rb","files/ext/json/ext/parser/extconf_rb.html","files/ext/json/ext/parser/extconf_rb.html","","",3],["extconf.rb","files/ext/json/ext/parser/extconf_rb.html","files/ext/json/ext/parser/extconf_rb.html","","",3],["parser.c","files/ext/json/ext/parser/parser_c.html","files/ext/json/ext/parser/parser_c.html","","",3],["parser.c","files/ext/json/ext/parser/parser_c.html","files/ext/json/ext/parser/parser_c.html","","",3],["parser.h","files/ext/json/ext/parser/parser_h.html","files/ext/json/ext/parser/parser_h.html","","",3],["parser.h","files/ext/json/ext/parser/parser_h.html","files/ext/json/ext/parser/parser_h.html","","",3],["parser.rl","files/ext/json/ext/parser/parser_rl.html","files/ext/json/ext/parser/parser_rl.html","","#include \"../fbuffer/fbuffer.h\" #include \"parser.h\"  /* unicode */  static const char digit_values[256]",3],["parser.rl","files/ext/json/ext/parser/parser_rl.html","files/ext/json/ext/parser/parser_rl.html","","#include \"../fbuffer/fbuffer.h\" #include \"parser.h\"  /* unicode */  static const char digit_values[256]",3],["json.rb","files/lib/json_rb.html","files/lib/json_rb.html","","= JavaScript Object Notation (JSON) JSON is a lightweight data-interchange format. It is easy for us",3],["bigdecimal.rb","files/lib/json/add/bigdecimal_rb.html","files/lib/json/add/bigdecimal_rb.html","","",3],["complex.rb","files/lib/json/add/complex_rb.html","files/lib/json/add/complex_rb.html","","",3],["core.rb","files/lib/json/add/core_rb.html","files/lib/json/add/core_rb.html","","This file requires the implementations of ruby core's custom objects for serialisation/deserialisation.",3],["date.rb","files/lib/json/add/date_rb.html","files/lib/json/add/date_rb.html","","",3],["date_time.rb","files/lib/json/add/date_time_rb.html","files/lib/json/add/date_time_rb.html","","",3],["exception.rb","files/lib/json/add/exception_rb.html","files/lib/json/add/exception_rb.html","","",3],["ostruct.rb","files/lib/json/add/ostruct_rb.html","files/lib/json/add/ostruct_rb.html","","",3],["range.rb","files/lib/json/add/range_rb.html","files/lib/json/add/range_rb.html","","",3],["rational.rb","files/lib/json/add/rational_rb.html","files/lib/json/add/rational_rb.html","","",3],["regexp.rb","files/lib/json/add/regexp_rb.html","files/lib/json/add/regexp_rb.html","","",3],["struct.rb","files/lib/json/add/struct_rb.html","files/lib/json/add/struct_rb.html","","",3],["symbol.rb","files/lib/json/add/symbol_rb.html","files/lib/json/add/symbol_rb.html","","",3],["time.rb","files/lib/json/add/time_rb.html","files/lib/json/add/time_rb.html","","",3],["common.rb","files/lib/json/common_rb.html","files/lib/json/common_rb.html","","",3],["ext.rb","files/lib/json/ext_rb.html","files/lib/json/ext_rb.html","","",3],["pure.rb","files/lib/json/pure_rb.html","files/lib/json/pure_rb.html","","",3],["generator.rb","files/lib/json/pure/generator_rb.html","files/lib/json/pure/generator_rb.html","","",3],["parser.rb","files/lib/json/pure/parser_rb.html","files/lib/json/pure/parser_rb.html","","",3],["version.rb","files/lib/json/version_rb.html","files/lib/json/version_rb.html","","",3]],"searchIndex":["bigdecimal","class","complex","date","datetime","exception","json","ext","generator","generatormethods","array","bignum","falseclass","fixnum","float","hash","nilclass","object","string","extend","trueclass","state","parser","generatorerror","jsonerror","missingunicodesupport","nestingerror","parsererror","pure","generator","generatormethods","array","falseclass","float","hash","integer","nilclass","object","string","extend","trueclass","state","parser","kernel","object","openstruct","range","rational","regexp","struct","symbol","time","json()","[]()","[]()","[]()","[]()","allow_nan?()","allow_nan?()","allow_nan?()","array_nl()","array_nl()","array_nl=()","array_nl=()","as_json()","as_json()","as_json()","as_json()","as_json()","as_json()","as_json()","as_json()","as_json()","as_json()","as_json()","as_json()","ascii_only?()","ascii_only?()","ascii_only?()","buffer_initial_length()","buffer_initial_length()","buffer_initial_length=()","buffer_initial_length=()","check_circular?()","check_circular?()","check_circular?()","configure()","configure()","configure()","const_defined_in?()","const_defined_in?()","convert_encoding()","depth()","depth()","depth=()","depth=()","dump()","fast_generate()","from_state()","from_state()","from_state()","generate()","generate()","generate()","generate()","iconv()","iconv()","included()","included()","included()","indent()","indent()","indent=()","indent=()","initialize_copy()","initialize_copy()","j()","jj()","json/common()","json_creatable?()","json_create()","json_create()","json_create()","json_create()","json_create()","json_create()","json_create()","json_create()","json_create()","json_create()","json_create()","json_create()","json_create()","json_create()","json_create()","json_shift()","json_transform()","json_transform()","load()","max_nesting()","max_nesting()","max_nesting=()","max_nesting=()","merge()","merge()","merge()","new()","new()","new()","new()","new()","new()","object_nl()","object_nl()","object_nl=()","object_nl=()","parse()","parse()","parse()","parse()","parse!()","parse_array()","parse_object()","parse_string()","parse_value()","pretty_generate()","quirks_mode()","quirks_mode()","quirks_mode=()","quirks_mode=()","quirks_mode?()","quirks_mode?()","quirks_mode?()","quirks_mode?()","quirks_mode?()","quirks_mode?()","recurse_proc()","reset()","restore()","restore()","source()","source()","space()","space()","space=()","space=()","space_before()","space_before()","space_before=()","space_before=()","to_h()","to_h()","to_h()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json_raw()","to_json_raw()","to_json_raw()","to_json_raw_object()","to_json_raw_object()","to_json_raw_object()","changes","copying","readme.rdoc","todo","fbuffer.h","fbuffer.h","makefile","makefile","extconf.rb","extconf.rb","generator.c","generator.c","generator.h","generator.h","makefile","makefile","extconf.rb","extconf.rb","parser.c","parser.c","parser.h","parser.h","parser.rl","parser.rl","json.rb","bigdecimal.rb","complex.rb","core.rb","date.rb","date_time.rb","exception.rb","ostruct.rb","range.rb","rational.rb","regexp.rb","struct.rb","symbol.rb","time.rb","common.rb","ext.rb","pure.rb","generator.rb","parser.rb","version.rb"]}}