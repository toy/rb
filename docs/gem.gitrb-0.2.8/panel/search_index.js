var search_data = {"index":{"info":[["Fixnum","lib/gitrb/util.rb","classes/Fixnum.html"," < Object","",1],["Gitrb","lib/gitrb/commit.rb","classes/Gitrb.html"," < ","converted from the gitrb project authors: Matthias Lederhofer <matled@gmx.net> Simon 'corecode' Schubert",1],["Blob","Gitrb","classes/Gitrb/Blob.html"," < GitObject","This class stores the raw string data of a blob ",1],["CommandError","Gitrb","classes/Gitrb/CommandError.html"," < StandardError","",1],["Commit","Gitrb","classes/Gitrb/Commit.html"," < GitObject","",1],["FileWindow","Gitrb","classes/Gitrb/FileWindow.html"," < Object","",1],["GitObject","Gitrb","classes/Gitrb/GitObject.html"," < Object","Base class for blob, tree, commit and tag ",1],["NotFound","Gitrb","classes/Gitrb/NotFound.html"," < StandardError","",1],["Pack","Gitrb","classes/Gitrb/Pack.html"," < Object","",1],["PackFormatError","Gitrb","classes/Gitrb/PackFormatError.html"," < StandardError","",1],["Reference","Gitrb","classes/Gitrb/Reference.html"," < Object","Reference to GitObject to support lazy-loading of git-objects ",1],["Repository","Gitrb","classes/Gitrb/Repository.html"," < Object","",1],["Tag","Gitrb","classes/Gitrb/Tag.html"," < GitObject","",1],["Tree","Gitrb","classes/Gitrb/Tree.html"," < GitObject","",1],["Trie","Gitrb","classes/Gitrb/Trie.html"," < Object","Trie data structure to store sha1s ",1],["User","Gitrb","classes/Gitrb/User.html"," < Object","",1],["Util","Gitrb","classes/Gitrb/Util.html"," < ","",1],["==","Gitrb::GitObject","classes/Gitrb/GitObject.html#M000017","(other)","",2],["[]","Gitrb::FileWindow","classes/Gitrb/FileWindow.html#M000021","(offset, len)","",2],["[]","Gitrb::Tree","classes/Gitrb/Tree.html#M000074","(path)","Read an entry on specified path. ",2],["[]=","Gitrb::Tree","classes/Gitrb/Tree.html#M000075","(path, entry)","Write an entry on specified path. ",2],["bare?","Gitrb::Repository","classes/Gitrb/Repository.html#M000042","()","Bare repository? ",2],["branch=","Gitrb::Repository","classes/Gitrb/Repository.html#M000043","(branch)","Switch branch ",2],["changed?","Gitrb::Repository","classes/Gitrb/Repository.html#M000044","()","Has our repository been changed on disk? ",2],["check_git_version","Gitrb::Repository","classes/Gitrb/Repository.html#M000068","()","",2],["children","Gitrb::Tree","classes/Gitrb/Tree.html#M000089","()","Alias for #values",2],["children","Gitrb::Trie","classes/Gitrb/Trie.html#M000094","()","",2],["clear","Gitrb::Repository","classes/Gitrb/Repository.html#M000047","()","Clear cached objects ",2],["clear","Gitrb::Trie","classes/Gitrb/Trie.html#M000095","()","",2],["commit","Gitrb::Repository","classes/Gitrb/Repository.html#M000051","(message = '', author = nil, committer = nil)","Write a commit object to disk and set the head of the current branch. Returns the commit object ",2],["data=","Gitrb::Blob","classes/Gitrb/Blob.html#M000006","(data)","Set data ",2],["date","Gitrb::Commit","classes/Gitrb/Commit.html#M000005","()","",2],["default_user","Gitrb::Repository","classes/Gitrb/Repository.html#M000063","()","",2],["delete","Gitrb::Tree","classes/Gitrb/Tree.html#M000082","(path)","Delete an entry on specified path. ",2],["diff","Gitrb::Repository","classes/Gitrb/Repository.html#M000048","(opts)","Difference between versions Options: :to             - Required target commit :from           - Optional",2],["dump","Gitrb::Blob","classes/Gitrb/Blob.html#M000009","()","",2],["dump","Gitrb::Commit","classes/Gitrb/Commit.html#M000012","()","",2],["dump","Gitrb::Tree","classes/Gitrb/Tree.html#M000067","()","",2],["dump","Gitrb::User","classes/Gitrb/User.html#M000097","()","",2],["dup","Gitrb::Repository","classes/Gitrb/Repository.html#M000041","()","",2],["each","Gitrb::Tree","classes/Gitrb/Tree.html#M000086","(&block)","Iterate over all children ",2],["each","Gitrb::Trie","classes/Gitrb/Trie.html#M000100","(&block)","",2],["each_object","Gitrb::Pack","classes/Gitrb/Pack.html#M000025","()","",2],["empty?","Gitrb::Tree","classes/Gitrb/Tree.html#M000070","()","Are there no children? ",2],["empty?","Gitrb::Trie","classes/Gitrb/Trie.html#M000098","()","",2],["exists?","Gitrb::Tree","classes/Gitrb/Tree.html#M000072","(name)","Does this key exist in the children? ",2],["factory","Gitrb::GitObject","classes/Gitrb/GitObject.html#M000019","(type, *args)","",2],["find","Gitrb::Trie","classes/Gitrb/Trie.html#M000102","(key)","",2],["find_object","Gitrb::Pack","classes/Gitrb/Pack.html#M000032","(sha1)","",2],["get","Gitrb::Repository","classes/Gitrb/Repository.html#M000053","(id)","Get an object by its id. Returns a tree, blob, commit or tag object. ",2],["get_blob","Gitrb::Repository","classes/Gitrb/Repository.html#M000057","(id)","",2],["get_commit","Gitrb::Repository","classes/Gitrb/Repository.html#M000058","(id)","",2],["get_object","Gitrb::Pack","classes/Gitrb/Pack.html#M000027","(offset)","",2],["get_tree","Gitrb::Repository","classes/Gitrb/Repository.html#M000056","(id)","",2],["get_type","Gitrb::Repository","classes/Gitrb/Repository.html#M000076","(id, expected)","",2],["git_object","Gitrb::GitObject","classes/Gitrb/GitObject.html#M000016","()","",2],["git_path","Gitrb::Repository","classes/Gitrb/Repository.html#M000036","()","",2],["head_path","Gitrb::Repository","classes/Gitrb/Repository.html#M000079","()","Returns the path to the current head file. ",2],["id=","Gitrb::Blob","classes/Gitrb/Blob.html#M000007","(id)","Set new repository (modified flag is reset) ",2],["id=","Gitrb::Tree","classes/Gitrb/Tree.html#M000065","(id)","Set new repository (modified flag is reset) ",2],["index","Gitrb::Trie","classes/Gitrb/Trie.html#M000108","(key)","",2],["inherited","Gitrb::GitObject","classes/Gitrb/GitObject.html#M000018","(subclass)","",2],["init_pack","Gitrb::Pack","classes/Gitrb/Pack.html#M000030","()","",2],["insert","Gitrb::Trie","classes/Gitrb/Trie.html#M000103","(key, value)","",2],["inspect","Gitrb::Trie","classes/Gitrb/Trie.html#M000107","()","",2],["legacy_loose_object?","Gitrb::Repository","classes/Gitrb/Repository.html#M000084","(buf)","",2],["load","Gitrb::Repository","classes/Gitrb/Repository.html#M000078","()","",2],["load_packs","Gitrb::Repository","classes/Gitrb/Repository.html#M000077","()","",2],["log","Gitrb::Repository","classes/Gitrb/Repository.html#M000052","(opts = {})","Returns a list of commits starting from head commit. Options: :path      - Restrict to path/or paths",2],["method_missing","Gitrb::Reference","classes/Gitrb/Reference.html#M000023","(name, *args, &block)","",2],["method_missing","Gitrb::Repository","classes/Gitrb/Repository.html#M000060","(name, *args)","",2],["mode=","Gitrb::Blob","classes/Gitrb/Blob.html#M000002","(mode)","Set mode ",2],["mode=","Gitrb::Tree","classes/Gitrb/Tree.html#M000064","(mode)","Set mode ",2],["modified?","Gitrb::Blob","classes/Gitrb/Blob.html#M000001","()","",2],["modified?","Gitrb::Tree","classes/Gitrb/Tree.html#M000066","()","Has this tree been modified? ",2],["move","Gitrb::Tree","classes/Gitrb/Tree.html#M000085","(path, dest)","Move a entry ",2],["names","Gitrb::Tree","classes/Gitrb/Tree.html#M000087","()","",2],["new","Gitrb::Blob","classes/Gitrb/Blob.html#M000000","(options = {})","Initialize a Blob ",2],["new","Gitrb::CommandError","classes/Gitrb/CommandError.html#M000034","(command, args, output)","",2],["new","Gitrb::Commit","classes/Gitrb/Commit.html#M000003","(options = {})","",2],["new","Gitrb::FileWindow","classes/Gitrb/FileWindow.html#M000020","(file, version = 1)","",2],["new","Gitrb::GitObject","classes/Gitrb/GitObject.html#M000015","(options = {})","",2],["new","Gitrb::Pack","classes/Gitrb/Pack.html#M000024","(file)","",2],["new","Gitrb::Reference","classes/Gitrb/Reference.html#M000022","(properties = {})","",2],["new","Gitrb::Repository","classes/Gitrb/Repository.html#M000040","(options = {})","Initialize a repository. ",2],["new","Gitrb::Tag","classes/Gitrb/Tag.html#M000054","(options = {})","",2],["new","Gitrb::Tree","classes/Gitrb/Tree.html#M000061","(options = {})","Initialize a tree ",2],["new","Gitrb::Trie","classes/Gitrb/Trie.html#M000093","(key = nil, value = nil, children = [])","",2],["new","Gitrb::User","classes/Gitrb/User.html#M000096","(name, email, date = Time.now)","",2],["normalize_path","Gitrb::Tree","classes/Gitrb/Tree.html#M000091","(path)","",2],["object_path","Gitrb::Repository","classes/Gitrb/Repository.html#M000080","(id)","Returns the path to the object file for given id. ",2],["open_repository","Gitrb::Repository","classes/Gitrb/Repository.html#M000073","(create)","",2],["ord","Fixnum","classes/Fixnum.html#M000106","()","",2],["parse","Gitrb::Commit","classes/Gitrb/Commit.html#M000014","(data)","",2],["parse","Gitrb::Tag","classes/Gitrb/Tag.html#M000055","(data)","",2],["parse","Gitrb::Tree","classes/Gitrb/Tree.html#M000092","(data)","Read the contents of a raw git object. ",2],["parse","Gitrb::User","classes/Gitrb/User.html#M000099","(user)","",2],["patch_delta","Gitrb::Pack","classes/Gitrb/Pack.html#M000046","(base, delta)","",2],["patch_delta_header_size","Gitrb::Pack","classes/Gitrb/Pack.html#M000050","(delta, pos)","",2],["put","Gitrb::Repository","classes/Gitrb/Repository.html#M000059","(object)","Write a raw object to the repository. Returns the object. ",2],["read_bytes_until","Gitrb::Util","classes/Gitrb/Util.html#M000104","(io, char)","",2],["read_bytes_until","Gitrb::Util","classes/Gitrb/Util.html#M000105","(io, char)","",2],["read_data_v2","Gitrb::Pack","classes/Gitrb/Pack.html#M000031","(idx)","",2],["read_head_id","Gitrb::Repository","classes/Gitrb/Repository.html#M000081","()","Read the id of the head commit. Returns the object id of the last commit. ",2],["refresh","Gitrb::Repository","classes/Gitrb/Repository.html#M000045","()","Load the repository, if it has been changed on disk. ",2],["resolved?","Gitrb::Reference","classes/Gitrb/Reference.html#M000026","()","",2],["save","Gitrb::Blob","classes/Gitrb/Blob.html#M000010","()","Save the data to the git object repository ",2],["save","Gitrb::Commit","classes/Gitrb/Commit.html#M000011","()","",2],["save","Gitrb::Tree","classes/Gitrb/Tree.html#M000069","()","Save this tree back to the git repository. Returns the object id of the tree. ",2],["set_encoding","Gitrb::Repository","classes/Gitrb/Repository.html#M000037","(s)","",2],["set_encoding","Gitrb::Repository","classes/Gitrb/Repository.html#M000039","(s)","",2],["size","Gitrb::Tree","classes/Gitrb/Tree.html#M000071","()","Number of children ",2],["size","Gitrb::Trie","classes/Gitrb/Trie.html#M000101","()","",2],["sorted_children","Gitrb::Tree","classes/Gitrb/Tree.html#M000090","()","",2],["to_s","Gitrb::Commit","classes/Gitrb/Commit.html#M000013","()","",2],["transaction","Gitrb::Repository","classes/Gitrb/Repository.html#M000049","(message = '', author = nil, committer = nil)","All changes made inside a transaction are atomic. If some exception occurs the transaction will be rolled",2],["type","Gitrb::Blob","classes/Gitrb/Blob.html#M000008","()","",2],["type","Gitrb::Commit","classes/Gitrb/Commit.html#M000004","()","",2],["type","Gitrb::Tree","classes/Gitrb/Tree.html#M000062","()","",2],["unpack_compressed","Gitrb::Pack","classes/Gitrb/Pack.html#M000038","(offset, destsize)","",2],["unpack_deltified","Gitrb::Pack","classes/Gitrb/Pack.html#M000035","(packfile, type, offset, obj_offset, size)","",2],["unpack_object","Gitrb::Pack","classes/Gitrb/Pack.html#M000033","(packfile, offset)","",2],["values","Gitrb::Tree","classes/Gitrb/Tree.html#M000088","()","",2],["with_idx","Gitrb::Pack","classes/Gitrb/Pack.html#M000028","()","",2],["with_pack","Gitrb::Pack","classes/Gitrb/Pack.html#M000029","()","",2],["write_head_id","Gitrb::Repository","classes/Gitrb/Repository.html#M000083","(id)","",2],["LICENSE","files/LICENSE.html","files/LICENSE.html","","The MIT License  Copyright (c) 2009 Daniel Mendler  Permission is hereby granted, free of charge, to",3],["README.md","files/README_md.html","files/README_md.html","","GitRb - Native ruby interface to git ====================================  GitRb is a native interface",3],["gitrb.rb","files/lib/gitrb_rb.html","files/lib/gitrb_rb.html","","",3],["blob.rb","files/lib/gitrb/blob_rb.html","files/lib/gitrb/blob_rb.html","","",3],["commit.rb","files/lib/gitrb/commit_rb.html","files/lib/gitrb/commit_rb.html","","",3],["gitobject.rb","files/lib/gitrb/gitobject_rb.html","files/lib/gitrb/gitobject_rb.html","","",3],["pack.rb","files/lib/gitrb/pack_rb.html","files/lib/gitrb/pack_rb.html","","converted from the gitrb project authors: Matthias Lederhofer <matled@gmx.net> Simon 'corecode' Schubert",3],["reference.rb","files/lib/gitrb/reference_rb.html","files/lib/gitrb/reference_rb.html","","",3],["repository.rb","files/lib/gitrb/repository_rb.html","files/lib/gitrb/repository_rb.html","","",3],["tag.rb","files/lib/gitrb/tag_rb.html","files/lib/gitrb/tag_rb.html","","",3],["tree.rb","files/lib/gitrb/tree_rb.html","files/lib/gitrb/tree_rb.html","","",3],["trie.rb","files/lib/gitrb/trie_rb.html","files/lib/gitrb/trie_rb.html","","",3],["user.rb","files/lib/gitrb/user_rb.html","files/lib/gitrb/user_rb.html","","",3],["util.rb","files/lib/gitrb/util_rb.html","files/lib/gitrb/util_rb.html","","",3],["version.rb","files/lib/gitrb/version_rb.html","files/lib/gitrb/version_rb.html","","",3]],"searchIndex":["fixnum","gitrb","blob","commanderror","commit","filewindow","gitobject","notfound","pack","packformaterror","reference","repository","tag","tree","trie","user","util","==()","[]()","[]()","[]=()","bare?()","branch=()","changed?()","check_git_version()","children()","children()","clear()","clear()","commit()","data=()","date()","default_user()","delete()","diff()","dump()","dump()","dump()","dump()","dup()","each()","each()","each_object()","empty?()","empty?()","exists?()","factory()","find()","find_object()","get()","get_blob()","get_commit()","get_object()","get_tree()","get_type()","git_object()","git_path()","head_path()","id=()","id=()","index()","inherited()","init_pack()","insert()","inspect()","legacy_loose_object?()","load()","load_packs()","log()","method_missing()","method_missing()","mode=()","mode=()","modified?()","modified?()","move()","names()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","normalize_path()","object_path()","open_repository()","ord()","parse()","parse()","parse()","parse()","patch_delta()","patch_delta_header_size()","put()","read_bytes_until()","read_bytes_until()","read_data_v2()","read_head_id()","refresh()","resolved?()","save()","save()","save()","set_encoding()","set_encoding()","size()","size()","sorted_children()","to_s()","transaction()","type()","type()","type()","unpack_compressed()","unpack_deltified()","unpack_object()","values()","with_idx()","with_pack()","write_head_id()","license","readme.md","gitrb.rb","blob.rb","commit.rb","gitobject.rb","pack.rb","reference.rb","repository.rb","tag.rb","tree.rb","trie.rb","user.rb","util.rb","version.rb"],"longSearchIndex":["lib/gitrb/util.rb","lib/gitrb/version.rb","gitrb","gitrb","gitrb","gitrb","gitrb","gitrb","gitrb","gitrb","gitrb","gitrb","gitrb","gitrb","gitrb","gitrb","gitrb","gitrb::gitobject","gitrb::filewindow","gitrb::tree","gitrb::tree","gitrb::repository","gitrb::repository","gitrb::repository","gitrb::repository","gitrb::tree","gitrb::trie","gitrb::repository","gitrb::trie","gitrb::repository","gitrb::blob","gitrb::commit","gitrb::repository","gitrb::tree","gitrb::repository","gitrb::blob","gitrb::commit","gitrb::tree","gitrb::user","gitrb::repository","gitrb::tree","gitrb::trie","gitrb::pack","gitrb::tree","gitrb::trie","gitrb::tree","gitrb::gitobject","gitrb::trie","gitrb::pack","gitrb::repository","gitrb::repository","gitrb::repository","gitrb::pack","gitrb::repository","gitrb::repository","gitrb::gitobject","gitrb::repository","gitrb::repository","gitrb::blob","gitrb::tree","gitrb::trie","gitrb::gitobject","gitrb::pack","gitrb::trie","gitrb::trie","gitrb::repository","gitrb::repository","gitrb::repository","gitrb::repository","gitrb::reference","gitrb::repository","gitrb::blob","gitrb::tree","gitrb::blob","gitrb::tree","gitrb::tree","gitrb::tree","gitrb::blob","gitrb::commanderror","gitrb::commit","gitrb::filewindow","gitrb::gitobject","gitrb::pack","gitrb::reference","gitrb::repository","gitrb::tag","gitrb::tree","gitrb::trie","gitrb::user","gitrb::tree","gitrb::repository","gitrb::repository","fixnum","gitrb::commit","gitrb::tag","gitrb::tree","gitrb::user","gitrb::pack","gitrb::pack","gitrb::repository","gitrb::util","gitrb::util","gitrb::pack","gitrb::repository","gitrb::repository","gitrb::reference","gitrb::blob","gitrb::commit","gitrb::tree","gitrb::repository","gitrb::repository","gitrb::tree","gitrb::trie","gitrb::tree","gitrb::commit","gitrb::repository","gitrb::blob","gitrb::commit","gitrb::tree","gitrb::pack","gitrb::pack","gitrb::pack","gitrb::tree","gitrb::pack","gitrb::pack","gitrb::repository","files/license.html","files/readme_md.html","files/lib/gitrb_rb.html","files/lib/gitrb/blob_rb.html","files/lib/gitrb/commit_rb.html","files/lib/gitrb/gitobject_rb.html","files/lib/gitrb/pack_rb.html","files/lib/gitrb/reference_rb.html","files/lib/gitrb/repository_rb.html","files/lib/gitrb/tag_rb.html","files/lib/gitrb/tree_rb.html","files/lib/gitrb/trie_rb.html","files/lib/gitrb/user_rb.html","files/lib/gitrb/util_rb.html","files/lib/gitrb/version_rb.html"]}}