var search_data = {"index":{"info":[["BoolException","lib/graphviz/types/gv_bool.rb","classes/BoolException.html"," < RuntimeError","",1],["ColorException","lib/graphviz/types/color.rb","classes/ColorException.html"," < RuntimeError","",1],["Constants","lib/graphviz/constants.rb","classes/Constants.html"," < ","Constants for ruby-graphviz Constants::FORMATS: the possible output formats \"bmp\", \"canon\", \"dot\", \"xdot\",",1],["DoubleException","lib/graphviz/types/gv_double.rb","classes/DoubleException.html"," < RuntimeError","",1],["GVUtils","lib/graphviz/utils.rb","classes/GVUtils.html"," < ","",1],["GraphViz","lib/graphviz/attrs.rb","classes/GraphViz.html"," < Object","spliteType or point  spline ( ';' spline )* where spline =  (endp)? (startp)? point (triple)+ and triple",1],["Attrs","GraphViz","classes/GraphViz/Attrs.html"," < Object","",1],["DSL","GraphViz","classes/GraphViz/DSL.html"," < Object","",1],["Edge","GraphViz","classes/GraphViz/Edge.html"," < Object","",1],["Elements","GraphViz","classes/GraphViz/Elements.html"," < Object","",1],["Ext","GraphViz","classes/GraphViz/Ext.html"," < Object","",1],["FamilyTree","GraphViz","classes/GraphViz/FamilyTree.html"," < Object","",1],["Couple","GraphViz::FamilyTree","classes/GraphViz/FamilyTree/Couple.html"," < Object","",1],["Generation","GraphViz::FamilyTree","classes/GraphViz/FamilyTree/Generation.html"," < Object","",1],["Person","GraphViz::FamilyTree","classes/GraphViz/FamilyTree/Person.html"," < Object","",1],["Sibling","GraphViz::FamilyTree","classes/GraphViz/FamilyTree/Sibling.html"," < Object","",1],["GraphML","GraphViz","classes/GraphViz/GraphML.html"," < Object","",1],["Math","GraphViz","classes/GraphViz/Math.html"," < Object","",1],["CoordinateError","GraphViz::Math","classes/GraphViz/Math/CoordinateError.html"," < RuntimeError","",1],["Matrix","GraphViz::Math","classes/GraphViz/Math/Matrix.html"," < Object","",1],["ValueError","GraphViz::Math","classes/GraphViz/Math/ValueError.html"," < RuntimeError","",1],["Node","GraphViz","classes/GraphViz/Node.html"," < Object","",1],["Theory","GraphViz","classes/GraphViz/Theory.html"," < Object","",1],["Types","GraphViz","classes/GraphViz/Types.html"," < Object","",1],["ArrowType","GraphViz::Types","classes/GraphViz/Types/ArrowType.html"," < Common","",1],["Color","GraphViz::Types","classes/GraphViz/Types/Color.html"," < Common","",1],["ColorList","GraphViz::Types","classes/GraphViz/Types/ColorList.html"," < Common","",1],["Common","GraphViz::Types","classes/GraphViz/Types/Common.html"," < Object","",1],["EscString","GraphViz::Types","classes/GraphViz/Types/EscString.html"," < Common","",1],["GvBool","GraphViz::Types","classes/GraphViz/Types/GvBool.html"," < Common","",1],["GvDouble","GraphViz::Types","classes/GraphViz/Types/GvDouble.html"," < Common","",1],["HtmlString","GraphViz::Types","classes/GraphViz/Types/HtmlString.html"," < Common","",1],["LblString","GraphViz::Types","classes/GraphViz/Types/LblString.html"," < Common","",1],["Rect","GraphViz::Types","classes/GraphViz/Types/Rect.html"," < Common","",1],["SplineType","GraphViz::Types","classes/GraphViz/Types/SplineType.html"," < Common","",1],["Utils","GraphViz","classes/GraphViz/Utils.html"," < Object","",1],["Colors","GraphViz::Utils","classes/GraphViz/Utils/Colors.html"," < Object","",1],["XML","GraphViz","classes/GraphViz/XML.html"," < Object","",1],["Hash","lib/graphviz/core_ext.rb","classes/Hash.html"," < Object","From : http://www.geekmade.co.uk/2008/09/ruby-tip-normalizing-hash-keys-as-symbols/ ",1],["Object","lib/graphviz/core_ext.rb","classes/Object.html"," < Object","",1],["RectException","lib/graphviz/types/rect.rb","classes/RectException.html"," < RuntimeError","",1],["SplineTypeException","lib/graphviz/types/spline_type.rb","classes/SplineTypeException.html"," < RuntimeError","",1],["String","lib/graphviz/core_ext.rb","classes/String.html"," < Object","",1],["*","GraphViz::Math::Matrix","classes/GraphViz/Math/Matrix.html#M000105","(m)","",2],["-","GraphViz","classes/GraphViz.html#M000263","( oNode )","Alias for #<<",2],["-","GraphViz::Math::Matrix","classes/GraphViz/Math/Matrix.html#M000104","(m)","",2],["-","GraphViz::Node","classes/GraphViz/Node.html#M000126","( node )","Alias for #<<",2],["<<","GraphViz","classes/GraphViz.html#M000261","( oNode )","Create an edge between the current cluster and the node or cluster +oNode+ ",2],["<<","GraphViz::Node","classes/GraphViz/Node.html#M000124","( node )","Create an edge between the current node and the node +node+ ",2],["==","GraphViz::Math::Matrix","classes/GraphViz/Math/Matrix.html#M000109","(m)","",2],[">","GraphViz","classes/GraphViz.html#M000262","( oNode )","Alias for #<<",2],[">","GraphViz::Node","classes/GraphViz/Node.html#M000125","( node )","Alias for #<<",2],[">>","GraphViz","classes/GraphViz.html#M000264","( oNode )","Alias for #<<",2],[">>","GraphViz::Node","classes/GraphViz/Node.html#M000127","( node )","Alias for #<<",2],["Matrix","GraphViz::Math","classes/GraphViz/Math.html#M000090","( line, column = 0, val = 0 )","",2],["[]","GraphViz","classes/GraphViz.html#M000254","( xAttrName )","Get the value of the graph attribut +xAttrName+ ",2],["[]","GraphViz::Attrs","classes/GraphViz/Attrs.html#M000003","( key )","",2],["[]","GraphViz::Edge","classes/GraphViz/Edge.html#M000030","( attribut_name )","Set values for edge attributs or  get the value of the given edge attribut +attribut_name+ ",2],["[]","GraphViz::Elements","classes/GraphViz/Elements.html#M000042","( index, type = nil )","",2],["[]","GraphViz::Math::Matrix","classes/GraphViz/Math/Matrix.html#M000095","(line, column)","",2],["[]","GraphViz::Node","classes/GraphViz/Node.html#M000122","( attribut_name )","Get the value of the node attribut +attribut_name+ ",2],["[]=","GraphViz","classes/GraphViz.html#M000253","( xAttrName, xValue )","Set value +xValue+ to the graph attribut +xAttrName+ ",2],["[]=","GraphViz::Attrs","classes/GraphViz/Attrs.html#M000004","( key, value )","",2],["[]=","GraphViz::Edge","classes/GraphViz/Edge.html#M000029","( attribut_name, attribut_value )","Set value +attribut_value+ to the edge attribut +attribut_name+ ",2],["[]=","GraphViz::Math::Matrix","classes/GraphViz/Math/Matrix.html#M000096","( line, column, val )","",2],["[]=","GraphViz::Node","classes/GraphViz/Node.html#M000121","( attribut_name, attribut_value )","Set value +attribut_value+ to the node attribut +attribut_name+ ",2],["add","GraphViz","classes/GraphViz.html#M000249","(h)","Add nodes and edges defined by a Hash ",2],["add_edge","GraphViz","classes/GraphViz.html#M000240","( oNodeOne, oNodeTwo, hOpts = {} )","<b>DEPRECATED</b> ",2],["add_edges","GraphViz","classes/GraphViz.html#M000241","( node_one, node_two, options = {} )","Create a new edge In: * node_one : First node (or node list) * node_two : Second Node (or node list)",2],["add_graph","GraphViz","classes/GraphViz.html#M000245","( xGraphName = nil, hOpts = {}, &block )","Create a new graph In: * xGraphName : Graph name * hOpts : Graph attributs ",2],["add_hash_edge","GraphViz","classes/GraphViz.html#M000277","(node, hash)","Edge between a node and a Hash Used by GraphViz#add ",2],["add_node","GraphViz","classes/GraphViz.html#M000232","( xNodeName, hOpts = {} )","Create a new node In: * xNodeName : Name of the new node * hOpts : Node attributs Return the GraphViz::Node",2],["add_nodes","GraphViz","classes/GraphViz.html#M000233","(node_name, options = {})","",2],["adjancy_matrix","GraphViz::Theory","classes/GraphViz/Theory.html#M000139","()","Return the adjancy matrix of the graph ",2],["bfs","GraphViz::Theory","classes/GraphViz/Theory.html#M000160","(node, &b)","Breadth First Search ",2],["bigger","GraphViz::Math::Matrix","classes/GraphViz/Math/Matrix.html#M000120","()","",2],["biggestGenerationNumberAndSize","GraphViz::FamilyTree","classes/GraphViz/FamilyTree.html#M000081","()","",2],["check","GraphViz::Types::ArrowType","classes/GraphViz/Types/ArrowType.html#M000133","(data)","",2],["check","GraphViz::Types::Color","classes/GraphViz/Types/Color.html#M000142","(data)","",2],["check","GraphViz::Types::ColorList","classes/GraphViz/Types/ColorList.html#M000153","(data)","",2],["check","GraphViz::Types::EscString","classes/GraphViz/Types/EscString.html#M000165","(data)","",2],["check","GraphViz::Types::GvBool","classes/GraphViz/Types/GvBool.html#M000173","(data)","",2],["check","GraphViz::Types::GvDouble","classes/GraphViz/Types/GvDouble.html#M000178","(data)","",2],["check","GraphViz::Types::HtmlString","classes/GraphViz/Types/HtmlString.html#M000184","(data)","",2],["check","GraphViz::Types::LblString","classes/GraphViz/Types/LblString.html#M000189","(data)","",2],["check","GraphViz::Types::Rect","classes/GraphViz/Types/Rect.html#M000194","(data)","",2],["check","GraphViz::Types::SplineType","classes/GraphViz/Types/SplineType.html#M000199","(data)","",2],["cluster","GraphViz::DSL","classes/GraphViz/DSL.html#M000017","(name, &block)","Alias for #subgraph",2],["column","GraphViz::Math::Matrix","classes/GraphViz/Math/Matrix.html#M000107","( column )","",2],["columns","GraphViz::Math::Matrix","classes/GraphViz/Math/Matrix.html#M000100","()","",2],["complete","GraphViz","classes/GraphViz.html#M000273","()","Return a new completed graph  ",2],["complete!","GraphViz","classes/GraphViz.html#M000274","()","Complete the current graph ",2],["convert_base","String","classes/String.html#M000007","(from, to)","",2],["couple","GraphViz::FamilyTree","classes/GraphViz/FamilyTree.html#M000077","( x, y )","Get a couple (GraphViz::FamilyTree::Couple) ",2],["critical_path","GraphViz::Theory","classes/GraphViz/Theory.html#M000151","()","Return the critical path for a PERT network If the given graph is not a PERT network, return nul ",2],["critical_path_recursion","GraphViz::Theory","classes/GraphViz/Theory.html#M000172","( d, a, r, result, level )","",2],["default","GraphViz","classes/GraphViz.html#M000269","( hOpts )","Change default options (:use, :path, :errors and :output) ",2],["degree","GraphViz::Theory","classes/GraphViz/Theory.html#M000141","( node )","Return the degree of the given node ",2],["degree_matrix","GraphViz::Theory","classes/GraphViz/Theory.html#M000164","()","",2],["dfs","GraphViz::Theory","classes/GraphViz/Theory.html#M000161","(node, &b)","Depth First Search ",2],["digraph","GraphViz","classes/GraphViz.html#M000280","( xGraphName, hOpts = {}, &block )","Create a new directed graph See also GraphViz::new ",2],["digraph","Object","classes/Object.html#M000020","(name, options = {}, &block)","Create a new directed graph ",2],["directed?","GraphViz","classes/GraphViz.html#M000275","()","Return true if the graph is directed. ",2],["distance_matrix","GraphViz::Theory","classes/GraphViz/Theory.html#M000163","()","",2],["e","GraphViz::DSL","classes/GraphViz/DSL.html#M000015","(*args)","Create edges ",2],["each","GraphViz::Attrs","classes/GraphViz/Attrs.html#M000001","()","",2],["each","GraphViz::Elements","classes/GraphViz/Elements.html#M000039","( &b )","",2],["each_attribut","GraphViz","classes/GraphViz.html#M000255","(&b)","Calls block once for each attribut of the graph, passing the name and value to the  block as a two-element",2],["each_attribut","GraphViz::Edge","classes/GraphViz/Edge.html#M000031","(global = true, &b)","Calls block once for each attribut of the edge, passing the name and value to the  block as a two-element",2],["each_attribut","GraphViz::Node","classes/GraphViz/Node.html#M000123","(global = true, &b)","Calls block once for each attribut of the node, passing the name and value to the  block as a two-element",2],["each_edge","GraphViz","classes/GraphViz.html#M000242","( &block )","Allow you to traverse edges ",2],["each_except","Hash","classes/Hash.html#M000010","( e, &b )","x = { :none => String, :png => \"file.png\", :svg => \"file.svg\" } x.each_except( :key => [:none], :value",2],["each_graph","GraphViz","classes/GraphViz.html#M000248","( &block )","Allow you to traverse graphs ",2],["each_node","GraphViz","classes/GraphViz.html#M000238","( &block )","Allow you to traverse nodes ",2],["edge_count","GraphViz","classes/GraphViz.html#M000243","()","Get the number of edges ",2],["endp","GraphViz::Types::SplineType","classes/GraphViz/Types/SplineType.html#M000207","()","",2],["find","GraphViz::Ext","classes/GraphViz/Ext.html#M000044","( ext = nil )","",2],["find_node","GraphViz","classes/GraphViz.html#M000235","(name)","Returns the first node found in the entire graph, starting from the root graph ",2],["generate","GraphViz","classes/GraphViz.html#M000282","(num_nodes, num_edges, directed = false, weight_range = (1..1))","Create a random graph. ",2],["generation","GraphViz::FamilyTree","classes/GraphViz/FamilyTree.html#M000074","( &b )","Add a new generation in the tree require 'graphviz/family_tree' t = GraphViz::FamilyTree.new do generation",2],["getAttrsFor","Constants","classes/Constants.html#M000005","( x )","",2],["getKids","GraphViz::FamilyTree::Couple","classes/GraphViz/FamilyTree/Couple.html#M000048","()","",2],["getNodeNameAndPort","GraphViz::Edge","classes/GraphViz/Edge.html#M000043","( node )","",2],["get_edge_at_index","GraphViz","classes/GraphViz.html#M000244","( index )","Return the edge object for the given index ",2],["get_graph","GraphViz","classes/GraphViz.html#M000247","( xGraphName, &block )","Return the graph object for the given name (or nil) ",2],["get_node","GraphViz","classes/GraphViz.html#M000234","( xNodeName, &block )","Return the node object for the given name (or nil) in the current graph ",2],["get_node_at_index","GraphViz","classes/GraphViz.html#M000237","( index )","Return the node object for the given index ",2],["graph","GraphViz","classes/GraphViz.html#M000278","( xGraphName, hOpts = {}, &block )","Create a new undirected graph See also GraphViz::new ",2],["graph","GraphViz::FamilyTree","classes/GraphViz/FamilyTree.html#M000080","()","Get the graph ",2],["graph","Object","classes/Object.html#M000019","(name, options = {}, &block)","Create a new undirected graph ",2],["graph_attrs","GraphViz","classes/GraphViz.html#M000279","( xGraphName, hOpts = {}, &block )","Alias for #graph",2],["graph_count","GraphViz","classes/GraphViz.html#M000251","()","Get the number of graphs ",2],["head_node","GraphViz::Edge","classes/GraphViz/Edge.html#M000026","( with_port = true )","Alias for #node_two",2],["hsv","GraphViz::Utils::Colors","classes/GraphViz/Utils/Colors.html#M000221","(h, s, v)","",2],["hsv","GraphViz::Utils::Colors","classes/GraphViz/Utils/Colors.html#M000228","(h, s, v)","",2],["hsv_string","GraphViz::Utils::Colors","classes/GraphViz/Utils/Colors.html#M000224","(s = \", \")","",2],["hsv_to_rgb","GraphViz::Utils::Colors","classes/GraphViz/Utils/Colors.html#M000231","(h, s, v)","",2],["hsv_to_rgb","GraphViz::Utils::Colors","classes/GraphViz/Utils/Colors.html#M000226","(h, s, v)","",2],["id","GraphViz","classes/GraphViz.html#M000260","()","Alias for #name",2],["id","GraphViz::FamilyTree::Person","classes/GraphViz/FamilyTree/Person.html#M000057","()","",2],["id","GraphViz::Node","classes/GraphViz/Node.html#M000114","()","Get the node ID ",2],["incidence_matrix","GraphViz::Theory","classes/GraphViz/Theory.html#M000140","()","Return the incidence matrix of the graph ",2],["incidents","GraphViz::Theory","classes/GraphViz/Theory.html#M000159","(node)","Return the list of nodes that are incident to the given node (in a directed graph neighbors == incidents)",2],["index","GraphViz::Edge","classes/GraphViz/Edge.html#M000027","()","Return the index of the edge ",2],["index","GraphViz::Node","classes/GraphViz/Node.html#M000115","()","Return the node index ",2],["index_of_item","GraphViz::Theory","classes/GraphViz/Theory.html#M000171","( array, item )","",2],["is_a_boy","GraphViz::FamilyTree::Person","classes/GraphViz/FamilyTree/Person.html#M000064","( name )","Define the current person as a boy greg.is_a_boy( \"Greg\" ) ",2],["is_a_girl","GraphViz::FamilyTree::Person","classes/GraphViz/FamilyTree/Person.html#M000066","( name )","Define the current perdon as a girl maia.is_a_girl( \"Maia\" ) ",2],["is_a_man","GraphViz::FamilyTree::Person","classes/GraphViz/FamilyTree/Person.html#M000063","( name )","Define the current person as a man greg.is_a_man( \"Greg\" ) ",2],["is_a_woman","GraphViz::FamilyTree::Person","classes/GraphViz/FamilyTree/Person.html#M000065","( name )","Define the current perdon as a woman mu.is_a_woman( \"Muriel\" ) ",2],["is_dead","GraphViz::FamilyTree::Person","classes/GraphViz/FamilyTree/Person.html#M000071","()","Define the current person as dead jack.is_dead ",2],["is_divorced_with","GraphViz::FamilyTree::Person","classes/GraphViz/FamilyTree/Person.html#M000069","( x )","Define that's two persons are divorced sophie.is_divorced_with john ",2],["is_maried_with","GraphViz::FamilyTree::Person","classes/GraphViz/FamilyTree/Person.html#M000067","( x )","Define that's two persons are maried mu.is_maried_with greg ",2],["is_widower_of","GraphViz::FamilyTree::Person","classes/GraphViz/FamilyTree/Person.html#M000070","( x )","Define that's a person is widower of another simon.is_widower_of elisa ",2],["key","Hash","classes/Hash.html#M000011","(v)","Add Hash#key to Ruby < 1.9 ",2],["kids","GraphViz::FamilyTree::Couple","classes/GraphViz/FamilyTree/Couple.html#M000047","( *z )","Add kids to a couple ",2],["kids","GraphViz::FamilyTree::Person","classes/GraphViz/FamilyTree/Person.html#M000072","( *z )","Define the kids of a single person alice.kids( john, jack, julie ) ",2],["laplacian_matrix","GraphViz::Theory","classes/GraphViz/Theory.html#M000143","()","Return the laplacian matrix of the graph ",2],["line","GraphViz::Math::Matrix","classes/GraphViz/Math/Matrix.html#M000106","( line )","",2],["lines","GraphViz::Math::Matrix","classes/GraphViz/Math/Matrix.html#M000101","()","",2],["matrix","GraphViz::Math::Matrix","classes/GraphViz/Math/Matrix.html#M000098","()","",2],["moore_dijkstra","GraphViz::Theory","classes/GraphViz/Theory.html#M000145","( dep, arv )","moore_dijkstra(source, destination) ",2],["n","GraphViz::DSL","classes/GraphViz/DSL.html#M000014","(name)","Add a new node ",2],["name","GraphViz","classes/GraphViz.html#M000259","()","Get the graph name ",2],["name","GraphViz::FamilyTree::Person","classes/GraphViz/FamilyTree/Person.html#M000058","()","",2],["name","GraphViz::Utils::Colors","classes/GraphViz/Utils/Colors.html#M000222","(c = nil)","",2],["name","GraphViz::Utils::Colors","classes/GraphViz/Utils/Colors.html#M000229","(c)","",2],["neighbors","GraphViz::Theory","classes/GraphViz/Theory.html#M000158","(node)","Return the list of nodes that are directly accessible from given node  ",2],["new","GraphViz","classes/GraphViz.html#M000276","( xGraphName, hOpts = {}, &block )","Create a new graph object Options : * :output : Output format (Constants::FORMATS) (default : dot) *",2],["new","GraphViz::Attrs","classes/GraphViz/Attrs.html#M000000","( gviz, name, attributs )","",2],["new","GraphViz::DSL","classes/GraphViz/DSL.html#M000012","(name, options = {}, &block)","Create a new graph ",2],["new","GraphViz::Edge","classes/GraphViz/Edge.html#M000022","( vNodeOne, vNodeTwo, parent_graph )","Create a new edge In: * vNodeOne : First node (can be a GraphViz::Node or a node ID) * vNodeTwo : Second",2],["new","GraphViz::Elements","classes/GraphViz/Elements.html#M000037","()","",2],["new","GraphViz::FamilyTree","classes/GraphViz/FamilyTree.html#M000073","( &block )","Create a new family tree require 'graphviz/family_tree' t = GraphViz::FamilyTree.new do ... end ",2],["new","GraphViz::FamilyTree::Sibling","classes/GraphViz/FamilyTree/Sibling.html#M000068","( bns, parents )","",2],["new","GraphViz::GraphML","classes/GraphViz/GraphML.html#M000082","( file_or_str )","Create a new GraphViz object from a GraphML file of string ",2],["new","GraphViz::Math::Matrix","classes/GraphViz/Math/Matrix.html#M000091","( line_or_array, column = 0, val = 0 )","",2],["new","GraphViz::Node","classes/GraphViz/Node.html#M000112","( node_id, parent_graph )","Create a new node * node_id : ID of the node * parent_graph : Graph  ",2],["new","GraphViz::Theory","classes/GraphViz/Theory.html#M000138","( graph )","",2],["new","GraphViz::Types::Common","classes/GraphViz/Types/Common.html#M000201","( data )","",2],["new","GraphViz::Utils::Colors","classes/GraphViz/Utils/Colors.html#M000217","()","",2],["new","GraphViz::XML","classes/GraphViz/XML.html#M000219","( xml_file, *options )","Create a graph from a XML file In: * xml_file : XML File * *options : Graph options: * :text : show text",2],["node_count","GraphViz","classes/GraphViz.html#M000239","()","Get the number of nodes ",2],["node_one","GraphViz::Edge","classes/GraphViz/Edge.html#M000023","( with_port = true )","Return the node one as string (so with port if any) ",2],["node_two","GraphViz::Edge","classes/GraphViz/Edge.html#M000025","( with_port = true )","Return the node two as string (so with port if any) ",2],["nothugly","GraphViz","classes/GraphViz.html#M000132","( file, save = true )","Transform to pretty up the SVG output For more information, see http://www.hokstad.com/making-graphviz-output-pretty-with-xsl.html",2],["number","GraphViz::FamilyTree::Generation","classes/GraphViz/FamilyTree/Generation.html#M000054","()","Generation number ",2],["options","GraphViz","classes/GraphViz.html#M000270","( hOpts )","",2],["output","GraphViz","classes/GraphViz.html#M000256","( hOpts = {} )","Generate the graph Options : * :output : Output format (Constants::FORMATS) * :file : Output file name",2],["output","GraphViz::DSL","classes/GraphViz/DSL.html#M000018","(options = {})","Generate output ",2],["output","GraphViz::Types::ArrowType","classes/GraphViz/Types/ArrowType.html#M000134","()","",2],["output","GraphViz::Types::Color","classes/GraphViz/Types/Color.html#M000146","()","",2],["output","GraphViz::Types::ColorList","classes/GraphViz/Types/ColorList.html#M000154","()","",2],["output","GraphViz::Types::Common","classes/GraphViz/Types/Common.html#M000202","()","",2],["output","GraphViz::Types::EscString","classes/GraphViz/Types/EscString.html#M000166","()","",2],["output","GraphViz::Types::GvBool","classes/GraphViz/Types/GvBool.html#M000174","()","",2],["output","GraphViz::Types::GvDouble","classes/GraphViz/Types/GvDouble.html#M000179","()","",2],["output","GraphViz::Types::HtmlString","classes/GraphViz/Types/HtmlString.html#M000185","()","",2],["output","GraphViz::Types::LblString","classes/GraphViz/Types/LblString.html#M000190","()","",2],["output","GraphViz::Types::Rect","classes/GraphViz/Types/Rect.html#M000195","()","",2],["output","GraphViz::Types::SplineType","classes/GraphViz/Types/SplineType.html#M000200","()","",2],["output","GraphViz::XML","classes/GraphViz/XML.html#M000216","( *options )","Generate the graph THIS METHOD IS DEPRECATED, PLEASE USE GraphViz::XML.graph.output ",2],["pagerank","GraphViz::Theory","classes/GraphViz/Theory.html#M000152","(damping_factor = 0.85, max_iterations = 100, min_delta = 0.00001)","Return the PageRank in an directed graph. * damping_factor: PageRank dumping factor. * max_iterations:",2],["parse","GraphViz","classes/GraphViz.html#M000271","( xFile, hOpts = {}, &block )","Create a new graph from a GraphViz File Options : * :output : Output format (Constants::FORMATS) (default",2],["parse_string","GraphViz","classes/GraphViz.html#M000272","( str, hOpts = {}, &block )","Create a new graph from a GraphViz File Options : * :output : Output format (Constants::FORMATS) (default",2],["persons","GraphViz::FamilyTree::Generation","classes/GraphViz/FamilyTree/Generation.html#M000051","()","",2],["point","GraphViz::Types::SplineType","classes/GraphViz/Types/SplineType.html#M000206","()","",2],["point?","GraphViz::Types::SplineType","classes/GraphViz/Types/SplineType.html#M000210","()","",2],["push","GraphViz::Elements","classes/GraphViz/Elements.html#M000038","( obj )","",2],["random","String","classes/String.html#M000006","(size)","",2],["range","GraphViz::Theory","classes/GraphViz/Theory.html#M000150","()","Return a liste of range If the returned array include nil values, there is one or more circuits in the",2],["range_recursion","GraphViz::Theory","classes/GraphViz/Theory.html#M000170","(matrix, unseen, result, r)","",2],["recursive_dfs","GraphViz::Theory","classes/GraphViz/Theory.html#M000162","(node, visited_nodes, &b)","",2],["remove_column","GraphViz::Math::Matrix","classes/GraphViz/Math/Matrix.html#M000111","(n)","",2],["remove_line","GraphViz::Math::Matrix","classes/GraphViz/Math/Matrix.html#M000110","(n)","",2],["rgb","GraphViz::Utils::Colors","classes/GraphViz/Utils/Colors.html#M000218","(r, g, b, a = nil)","",2],["rgb","GraphViz::Utils::Colors","classes/GraphViz/Utils/Colors.html#M000227","(r, g, b, a = nil)","",2],["rgb_to_hsv","GraphViz::Utils::Colors","classes/GraphViz/Utils/Colors.html#M000225","(r, g, b)","",2],["rgb_to_hsv","GraphViz::Utils::Colors","classes/GraphViz/Utils/Colors.html#M000230","(r, g, b)","",2],["rgba_string","GraphViz::Utils::Colors","classes/GraphViz/Utils/Colors.html#M000223","(c = \"\")","",2],["root_graph","GraphViz","classes/GraphViz.html#M000266","()","Return the root graph ",2],["root_graph","GraphViz::Edge","classes/GraphViz/Edge.html#M000033","()","Return the root graph ",2],["root_graph","GraphViz::Node","classes/GraphViz/Node.html#M000117","()","Return the root graph ",2],["save","GraphViz","classes/GraphViz.html#M000257","( hOpts = {} )","Alias for #output",2],["search_node","GraphViz","classes/GraphViz.html#M000236","(name)","Return the first node found in the current graph, and it subgraphs ",2],["set","GraphViz::Edge","classes/GraphViz/Edge.html#M000035","( &b )","Set edge attributs Example : e = graph.add_edges( ... ) ... e.set { |_e| _e.color = \"blue\" _e.fontcolor",2],["set","GraphViz::Node","classes/GraphViz/Node.html#M000128","( &b )","Set node attributs Example : n = graph.add_nodes( ... ) ... n.set { |_n| _n.color = \"blue\" _n.fontcolor",2],["sibling","GraphViz::FamilyTree::Person","classes/GraphViz/FamilyTree/Person.html#M000059","()","",2],["sibling=","GraphViz::FamilyTree::Person","classes/GraphViz/FamilyTree/Person.html#M000060","(x)","",2],["size","GraphViz::FamilyTree","classes/GraphViz/FamilyTree.html#M000079","()","Family size ",2],["size","GraphViz::FamilyTree::Generation","classes/GraphViz/FamilyTree/Generation.html#M000055","()","Generation size ",2],["size_of","GraphViz::Elements","classes/GraphViz/Elements.html#M000041","( type )","",2],["source","GraphViz::Types::Common","classes/GraphViz/Types/Common.html#M000203","()","",2],["splite_type?","GraphViz::Types::SplineType","classes/GraphViz/Types/SplineType.html#M000211","()","",2],["startp","GraphViz::Types::SplineType","classes/GraphViz/Types/SplineType.html#M000208","()","",2],["strict","Object","classes/Object.html#M000021","(name, options = {}, &block)","Create a new strict directed graph ",2],["strict_digraph","GraphViz","classes/GraphViz.html#M000281","( xGraphName, hOpts = {}, &block )","Create a new strict directed graph See also GraphViz::new ",2],["subgraph","GraphViz","classes/GraphViz.html#M000246","( xGraphName = nil, hOpts = {}, &block )","Alias for #add_graph",2],["subgraph","GraphViz::DSL","classes/GraphViz/DSL.html#M000016","(name, &block)","Add a subgraph ",2],["sum_of_column","GraphViz::Math::Matrix","classes/GraphViz/Math/Matrix.html#M000113","(n)","",2],["sum_of_line","GraphViz::Math::Matrix","classes/GraphViz/Math/Matrix.html#M000118","(n)","",2],["symbolize_keys","Hash","classes/Hash.html#M000009","()","",2],["symmetric?","GraphViz::Theory","classes/GraphViz/Theory.html#M000144","()","Return <tt>true</tt> if the graph if symmetric, <tt>false</tt> otherwise    ",2],["tail_node","GraphViz::Edge","classes/GraphViz/Edge.html#M000024","( with_port = true )","Alias for #node_one",2],["to_a","GraphViz::Math::Matrix","classes/GraphViz/Math/Matrix.html#M000099","()","Alias for #matrix",2],["to_f","GraphViz::Types::GvDouble","classes/GraphViz/Types/GvDouble.html#M000180","()","",2],["to_gv","GraphViz::Types::ArrowType","classes/GraphViz/Types/ArrowType.html#M000135","()","Alias for #output",2],["to_gv","GraphViz::Types::Color","classes/GraphViz/Types/Color.html#M000147","()","Alias for #output",2],["to_gv","GraphViz::Types::ColorList","classes/GraphViz/Types/ColorList.html#M000155","()","Alias for #output",2],["to_gv","GraphViz::Types::EscString","classes/GraphViz/Types/EscString.html#M000167","()","Alias for #output",2],["to_gv","GraphViz::Types::GvBool","classes/GraphViz/Types/GvBool.html#M000175","()","Alias for #output",2],["to_gv","GraphViz::Types::GvDouble","classes/GraphViz/Types/GvDouble.html#M000181","()","Alias for #output",2],["to_gv","GraphViz::Types::HtmlString","classes/GraphViz/Types/HtmlString.html#M000186","()","Alias for #output",2],["to_gv","GraphViz::Types::LblString","classes/GraphViz/Types/LblString.html#M000191","()","Alias for #output",2],["to_gv","GraphViz::Types::Rect","classes/GraphViz/Types/Rect.html#M000196","()","Alias for #output",2],["to_gv","GraphViz::Types::SplineType","classes/GraphViz/Types/SplineType.html#M000204","()","Alias for #output",2],["to_h","GraphViz::Attrs","classes/GraphViz/Attrs.html#M000002","()","",2],["to_ruby","GraphViz::Types::ArrowType","classes/GraphViz/Types/ArrowType.html#M000137","()","",2],["to_ruby","GraphViz::Types::Color","classes/GraphViz/Types/Color.html#M000149","()","",2],["to_ruby","GraphViz::Types::ColorList","classes/GraphViz/Types/ColorList.html#M000157","()","",2],["to_ruby","GraphViz::Types::EscString","classes/GraphViz/Types/EscString.html#M000169","()","",2],["to_ruby","GraphViz::Types::GvBool","classes/GraphViz/Types/GvBool.html#M000177","()","",2],["to_ruby","GraphViz::Types::GvDouble","classes/GraphViz/Types/GvDouble.html#M000183","()","Alias for #to_f",2],["to_ruby","GraphViz::Types::HtmlString","classes/GraphViz/Types/HtmlString.html#M000188","()","Alias for #output",2],["to_ruby","GraphViz::Types::LblString","classes/GraphViz/Types/LblString.html#M000193","()","Alias for #output",2],["to_ruby","GraphViz::Types::Rect","classes/GraphViz/Types/Rect.html#M000198","()","",2],["to_ruby","Object","classes/Object.html#M000008","()","",2],["to_s","GraphViz","classes/GraphViz.html#M000258","()","",2],["to_s","GraphViz::Math::Matrix","classes/GraphViz/Math/Matrix.html#M000102","()","",2],["to_s","GraphViz::Types::ArrowType","classes/GraphViz/Types/ArrowType.html#M000136","()","Alias for #output",2],["to_s","GraphViz::Types::Color","classes/GraphViz/Types/Color.html#M000148","()","Alias for #output",2],["to_s","GraphViz::Types::ColorList","classes/GraphViz/Types/ColorList.html#M000156","()","Alias for #output",2],["to_s","GraphViz::Types::EscString","classes/GraphViz/Types/EscString.html#M000168","()","Alias for #output",2],["to_s","GraphViz::Types::GvBool","classes/GraphViz/Types/GvBool.html#M000176","()","Alias for #output",2],["to_s","GraphViz::Types::GvDouble","classes/GraphViz/Types/GvDouble.html#M000182","()","Alias for #output",2],["to_s","GraphViz::Types::HtmlString","classes/GraphViz/Types/HtmlString.html#M000187","()","Alias for #output",2],["to_s","GraphViz::Types::LblString","classes/GraphViz/Types/LblString.html#M000192","()","Alias for #output",2],["to_s","GraphViz::Types::Rect","classes/GraphViz/Types/Rect.html#M000197","()","Alias for #output",2],["to_s","GraphViz::Types::SplineType","classes/GraphViz/Types/SplineType.html#M000205","()","Alias for #output",2],["transpose","GraphViz::Math::Matrix","classes/GraphViz/Math/Matrix.html#M000108","()","",2],["triples","GraphViz::Types::SplineType","classes/GraphViz/Types/SplineType.html#M000209","()","",2],["type","GraphViz","classes/GraphViz.html#M000250","()","Return the graph type (graph digraph) ",2],["AUTHORS","files/AUTHORS.html","files/AUTHORS.html","","Gregoire Lejeune <glejeune.lejeune@free.fr> Brandon Coleman <metrix1978@gmail.com> Dave Burt <http://github.com/dburt>",3],["COPYING","files/COPYING.html","files/COPYING.html","","\t\t    GNU GENERAL PUBLIC LICENSE \t\t       Version 2, June 1991   Copyright (C) 1989, 1991 Free Software",3],["README.rdoc","files/README_rdoc.html","files/README_rdoc.html","","= Ruby/GraphViz  Copyright (C) 2004-2011 Gregoire Lejeune  * Doc : http://rdoc.info/projects/glejeune/Ruby-Graphviz",3],["dot2ruby.g","files/lib/ext/gvpr/dot2ruby_g.html","files/lib/ext/gvpr/dot2ruby_g.html","","// Copyright (c) 2010 Gregoire Lejeune <gregoire.lejeune@free.fr> //  // This program is free software;",3],["graphviz.rb","files/lib/graphviz_rb.html","files/lib/graphviz_rb.html","","Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010 Gregoire Lejeune <gregoire.lejeune@free.fr>",3],["attrs.rb","files/lib/graphviz/attrs_rb.html","files/lib/graphviz/attrs_rb.html","","Copyright (C) 2004, 2005, 2006, 2007, 2008, 2009, 2010 Gregoire Lejeune <gregoire.lejeune@free.fr> This",3],["constants.rb","files/lib/graphviz/constants_rb.html","files/lib/graphviz/constants_rb.html","","Copyright (C) 2004, 2005, 2006, 2007, 2008, 2009, 2010 Gregoire Lejeune <gregoire.lejeune@free.fr> This",3],["core_ext.rb","files/lib/graphviz/core_ext_rb.html","files/lib/graphviz/core_ext_rb.html","","",3],["dot2ruby.rb","files/lib/graphviz/dot2ruby_rb.html","files/lib/graphviz/dot2ruby_rb.html","","Copyright (C) 2010 Gregoire Lejeune <gregoire.lejeune@free.fr> This program is free software; you can",3],["dsl.rb","files/lib/graphviz/dsl_rb.html","files/lib/graphviz/dsl_rb.html","","",3],["edge.rb","files/lib/graphviz/edge_rb.html","files/lib/graphviz/edge_rb.html","","Copyright (C) 2004, 2005, 2006, 2007, 2008, 2009, 2010 Gregoire Lejeune <gregoire.lejeune@free.fr> This",3],["elements.rb","files/lib/graphviz/elements_rb.html","files/lib/graphviz/elements_rb.html","","",3],["ext.rb","files/lib/graphviz/ext_rb.html","files/lib/graphviz/ext_rb.html","","",3],["family_tree.rb","files/lib/graphviz/family_tree_rb.html","files/lib/graphviz/family_tree_rb.html","","",3],["couple.rb","files/lib/graphviz/family_tree/couple_rb.html","files/lib/graphviz/family_tree/couple_rb.html","","",3],["generation.rb","files/lib/graphviz/family_tree/generation_rb.html","files/lib/graphviz/family_tree/generation_rb.html","","",3],["person.rb","files/lib/graphviz/family_tree/person_rb.html","files/lib/graphviz/family_tree/person_rb.html","","",3],["sibling.rb","files/lib/graphviz/family_tree/sibling_rb.html","files/lib/graphviz/family_tree/sibling_rb.html","","",3],["graphml.rb","files/lib/graphviz/graphml_rb.html","files/lib/graphviz/graphml_rb.html","","Copyright (C) 2010 Gregoire Lejeune <gregoire.lejeune@free.fr> This program is free software; you can",3],["matrix.rb","files/lib/graphviz/math/matrix_rb.html","files/lib/graphviz/math/matrix_rb.html","","",3],["node.rb","files/lib/graphviz/node_rb.html","files/lib/graphviz/node_rb.html","","Copyright (C) 2004 - 2011 Gregoire Lejeune <gregoire.lejeune@free.fr> This program is free software;",3],["nothugly.rb","files/lib/graphviz/nothugly_rb.html","files/lib/graphviz/nothugly_rb.html","","This file use notugly.xsl: An XSL transform to pretty up the SVG output from Graphviz See: http://www.hokstad.com/making-graphviz-output-pretty-with-xsl.html",3],["nothugly.xsl","files/lib/graphviz/nothugly/nothugly_xsl.html","files/lib/graphviz/nothugly/nothugly_xsl.html","","<?xml version=\"1.0\" ?> <xsl:stylesheet xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" version=\"1.0\"",3],["theory.rb","files/lib/graphviz/theory_rb.html","files/lib/graphviz/theory_rb.html","","",3],["types.rb","files/lib/graphviz/types_rb.html","files/lib/graphviz/types_rb.html","","",3],["arrow_type.rb","files/lib/graphviz/types/arrow_type_rb.html","files/lib/graphviz/types/arrow_type_rb.html","",">> x = \"hello\\n\\t\\\\l\\\"world\\\"\" => \"hello\\n\\t\\\\l\\\"world\\\"\" >> puts x.inspect.gsub( \"\\\\\\\\\", \"\\\\\" ) \"hello\\n\\t\\l\\\"world\\\"\"",3],["color.rb","files/lib/graphviz/types/color_rb.html","files/lib/graphviz/types/color_rb.html","","",3],["color_list.rb","files/lib/graphviz/types/color_list_rb.html","files/lib/graphviz/types/color_list_rb.html","","",3],["esc_string.rb","files/lib/graphviz/types/esc_string_rb.html","files/lib/graphviz/types/esc_string_rb.html","","",3],["gv_bool.rb","files/lib/graphviz/types/gv_bool_rb.html","files/lib/graphviz/types/gv_bool_rb.html","","",3],["gv_double.rb","files/lib/graphviz/types/gv_double_rb.html","files/lib/graphviz/types/gv_double_rb.html","","",3],["html_string.rb","files/lib/graphviz/types/html_string_rb.html","files/lib/graphviz/types/html_string_rb.html","","TODO: Remove ",3],["lbl_string.rb","files/lib/graphviz/types/lbl_string_rb.html","files/lib/graphviz/types/lbl_string_rb.html","","",3],["rect.rb","files/lib/graphviz/types/rect_rb.html","files/lib/graphviz/types/rect_rb.html","","",3],["spline_type.rb","files/lib/graphviz/types/spline_type_rb.html","files/lib/graphviz/types/spline_type_rb.html","","",3],["utils.rb","files/lib/graphviz/utils_rb.html","files/lib/graphviz/utils_rb.html","","",3],["colors.rb","files/lib/graphviz/utils/colors_rb.html","files/lib/graphviz/utils/colors_rb.html","","",3],["xml.rb","files/lib/graphviz/xml_rb.html","files/lib/graphviz/xml_rb.html","","Copyright (C) 2004, 2005, 2006, 2007, 2008, 2009, 2010 Gregoire Lejeune <gregoire.lejeune@free.fr> This",3]],"searchIndex":["boolexception","colorexception","constants","doubleexception","gvutils","graphviz","attrs","dsl","edge","elements","ext","familytree","couple","generation","person","sibling","graphml","math","coordinateerror","matrix","valueerror","node","theory","types","arrowtype","color","colorlist","common","escstring","gvbool","gvdouble","htmlstring","lblstring","rect","splinetype","utils","colors","xml","hash","object","rectexception","splinetypeexception","string","*()","-()","-()","-()","<<()","<<()","==()",">()",">()",">>()",">>()","matrix()","[]()","[]()","[]()","[]()","[]()","[]()","[]=()","[]=()","[]=()","[]=()","[]=()","add()","add_edge()","add_edges()","add_graph()","add_hash_edge()","add_node()","add_nodes()","adjancy_matrix()","bfs()","bigger()","biggestgenerationnumberandsize()","check()","check()","check()","check()","check()","check()","check()","check()","check()","check()","cluster()","column()","columns()","complete()","complete!()","convert_base()","couple()","critical_path()","critical_path_recursion()","default()","degree()","degree_matrix()","dfs()","digraph()","digraph()","directed?()","distance_matrix()","e()","each()","each()","each_attribut()","each_attribut()","each_attribut()","each_edge()","each_except()","each_graph()","each_node()","edge_count()","endp()","find()","find_node()","generate()","generation()","getattrsfor()","getkids()","getnodenameandport()","get_edge_at_index()","get_graph()","get_node()","get_node_at_index()","graph()","graph()","graph()","graph_attrs()","graph_count()","head_node()","hsv()","hsv()","hsv_string()","hsv_to_rgb()","hsv_to_rgb()","id()","id()","id()","incidence_matrix()","incidents()","index()","index()","index_of_item()","is_a_boy()","is_a_girl()","is_a_man()","is_a_woman()","is_dead()","is_divorced_with()","is_maried_with()","is_widower_of()","key()","kids()","kids()","laplacian_matrix()","line()","lines()","matrix()","moore_dijkstra()","n()","name()","name()","name()","name()","neighbors()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","node_count()","node_one()","node_two()","nothugly()","number()","options()","output()","output()","output()","output()","output()","output()","output()","output()","output()","output()","output()","output()","output()","output()","pagerank()","parse()","parse_string()","persons()","point()","point?()","push()","random()","range()","range_recursion()","recursive_dfs()","remove_column()","remove_line()","rgb()","rgb()","rgb_to_hsv()","rgb_to_hsv()","rgba_string()","root_graph()","root_graph()","root_graph()","save()","search_node()","set()","set()","sibling()","sibling=()","size()","size()","size_of()","source()","splite_type?()","startp()","strict()","strict_digraph()","subgraph()","subgraph()","sum_of_column()","sum_of_line()","symbolize_keys()","symmetric?()","tail_node()","to_a()","to_f()","to_gv()","to_gv()","to_gv()","to_gv()","to_gv()","to_gv()","to_gv()","to_gv()","to_gv()","to_gv()","to_h()","to_ruby()","to_ruby()","to_ruby()","to_ruby()","to_ruby()","to_ruby()","to_ruby()","to_ruby()","to_ruby()","to_ruby()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","transpose()","triples()","type()","authors","copying","readme.rdoc","dot2ruby.g","graphviz.rb","attrs.rb","constants.rb","core_ext.rb","dot2ruby.rb","dsl.rb","edge.rb","elements.rb","ext.rb","family_tree.rb","couple.rb","generation.rb","person.rb","sibling.rb","graphml.rb","matrix.rb","node.rb","nothugly.rb","nothugly.xsl","theory.rb","types.rb","arrow_type.rb","color.rb","color_list.rb","esc_string.rb","gv_bool.rb","gv_double.rb","html_string.rb","lbl_string.rb","rect.rb","spline_type.rb","utils.rb","colors.rb","xml.rb"],"longSearchIndex":["lib/graphviz/types/gv_bool.rb","lib/graphviz/types/color.rb","lib/graphviz/constants.rb","lib/graphviz/types/gv_double.rb","lib/graphviz/utils.rb","lib/graphviz.rb","graphviz","graphviz","graphviz","graphviz","graphviz","graphviz","graphviz::familytree","graphviz::familytree","graphviz::familytree","graphviz::familytree","graphviz","graphviz","graphviz::math","graphviz::math","graphviz::math","graphviz","graphviz","graphviz","graphviz::types","graphviz::types","graphviz::types","graphviz::types","graphviz::types","graphviz::types","graphviz::types","graphviz::types","graphviz::types","graphviz::types","graphviz::types","graphviz","graphviz::utils","graphviz","lib/graphviz/core_ext.rb","lib/graphviz/core_ext.rb","lib/graphviz/types/rect.rb","lib/graphviz/types/spline_type.rb","lib/graphviz/core_ext.rb","graphviz::math::matrix","graphviz","graphviz::math::matrix","graphviz::node","graphviz","graphviz::node","graphviz::math::matrix","graphviz","graphviz::node","graphviz","graphviz::node","graphviz::math","graphviz","graphviz::attrs","graphviz::edge","graphviz::elements","graphviz::math::matrix","graphviz::node","graphviz","graphviz::attrs","graphviz::edge","graphviz::math::matrix","graphviz::node","graphviz","graphviz","graphviz","graphviz","graphviz","graphviz","graphviz","graphviz::theory","graphviz::theory","graphviz::math::matrix","graphviz::familytree","graphviz::types::arrowtype","graphviz::types::color","graphviz::types::colorlist","graphviz::types::escstring","graphviz::types::gvbool","graphviz::types::gvdouble","graphviz::types::htmlstring","graphviz::types::lblstring","graphviz::types::rect","graphviz::types::splinetype","graphviz::dsl","graphviz::math::matrix","graphviz::math::matrix","graphviz","graphviz","string","graphviz::familytree","graphviz::theory","graphviz::theory","graphviz","graphviz::theory","graphviz::theory","graphviz::theory","graphviz","object","graphviz","graphviz::theory","graphviz::dsl","graphviz::attrs","graphviz::elements","graphviz","graphviz::edge","graphviz::node","graphviz","hash","graphviz","graphviz","graphviz","graphviz::types::splinetype","graphviz::ext","graphviz","graphviz","graphviz::familytree","constants","graphviz::familytree::couple","graphviz::edge","graphviz","graphviz","graphviz","graphviz","graphviz","graphviz::familytree","object","graphviz","graphviz","graphviz::edge","graphviz::utils::colors","graphviz::utils::colors","graphviz::utils::colors","graphviz::utils::colors","graphviz::utils::colors","graphviz","graphviz::familytree::person","graphviz::node","graphviz::theory","graphviz::theory","graphviz::edge","graphviz::node","graphviz::theory","graphviz::familytree::person","graphviz::familytree::person","graphviz::familytree::person","graphviz::familytree::person","graphviz::familytree::person","graphviz::familytree::person","graphviz::familytree::person","graphviz::familytree::person","hash","graphviz::familytree::couple","graphviz::familytree::person","graphviz::theory","graphviz::math::matrix","graphviz::math::matrix","graphviz::math::matrix","graphviz::theory","graphviz::dsl","graphviz","graphviz::familytree::person","graphviz::utils::colors","graphviz::utils::colors","graphviz::theory","graphviz","graphviz::attrs","graphviz::dsl","graphviz::edge","graphviz::elements","graphviz::familytree","graphviz::familytree::sibling","graphviz::graphml","graphviz::math::matrix","graphviz::node","graphviz::theory","graphviz::types::common","graphviz::utils::colors","graphviz::xml","graphviz","graphviz::edge","graphviz::edge","graphviz","graphviz::familytree::generation","graphviz","graphviz","graphviz::dsl","graphviz::types::arrowtype","graphviz::types::color","graphviz::types::colorlist","graphviz::types::common","graphviz::types::escstring","graphviz::types::gvbool","graphviz::types::gvdouble","graphviz::types::htmlstring","graphviz::types::lblstring","graphviz::types::rect","graphviz::types::splinetype","graphviz::xml","graphviz::theory","graphviz","graphviz","graphviz::familytree::generation","graphviz::types::splinetype","graphviz::types::splinetype","graphviz::elements","string","graphviz::theory","graphviz::theory","graphviz::theory","graphviz::math::matrix","graphviz::math::matrix","graphviz::utils::colors","graphviz::utils::colors","graphviz::utils::colors","graphviz::utils::colors","graphviz::utils::colors","graphviz","graphviz::edge","graphviz::node","graphviz","graphviz","graphviz::edge","graphviz::node","graphviz::familytree::person","graphviz::familytree::person","graphviz::familytree","graphviz::familytree::generation","graphviz::elements","graphviz::types::common","graphviz::types::splinetype","graphviz::types::splinetype","object","graphviz","graphviz","graphviz::dsl","graphviz::math::matrix","graphviz::math::matrix","hash","graphviz::theory","graphviz::edge","graphviz::math::matrix","graphviz::types::gvdouble","graphviz::types::arrowtype","graphviz::types::color","graphviz::types::colorlist","graphviz::types::escstring","graphviz::types::gvbool","graphviz::types::gvdouble","graphviz::types::htmlstring","graphviz::types::lblstring","graphviz::types::rect","graphviz::types::splinetype","graphviz::attrs","graphviz::types::arrowtype","graphviz::types::color","graphviz::types::colorlist","graphviz::types::escstring","graphviz::types::gvbool","graphviz::types::gvdouble","graphviz::types::htmlstring","graphviz::types::lblstring","graphviz::types::rect","object","graphviz","graphviz::math::matrix","graphviz::types::arrowtype","graphviz::types::color","graphviz::types::colorlist","graphviz::types::escstring","graphviz::types::gvbool","graphviz::types::gvdouble","graphviz::types::htmlstring","graphviz::types::lblstring","graphviz::types::rect","graphviz::types::splinetype","graphviz::math::matrix","graphviz::types::splinetype","graphviz","files/authors.html","files/copying.html","files/readme_rdoc.html","files/lib/ext/gvpr/dot2ruby_g.html","files/lib/graphviz_rb.html","files/lib/graphviz/attrs_rb.html","files/lib/graphviz/constants_rb.html","files/lib/graphviz/core_ext_rb.html","files/lib/graphviz/dot2ruby_rb.html","files/lib/graphviz/dsl_rb.html","files/lib/graphviz/edge_rb.html","files/lib/graphviz/elements_rb.html","files/lib/graphviz/ext_rb.html","files/lib/graphviz/family_tree_rb.html","files/lib/graphviz/family_tree/couple_rb.html","files/lib/graphviz/family_tree/generation_rb.html","files/lib/graphviz/family_tree/person_rb.html","files/lib/graphviz/family_tree/sibling_rb.html","files/lib/graphviz/graphml_rb.html","files/lib/graphviz/math/matrix_rb.html","files/lib/graphviz/node_rb.html","files/lib/graphviz/nothugly_rb.html","files/lib/graphviz/nothugly/nothugly_xsl.html","files/lib/graphviz/theory_rb.html","files/lib/graphviz/types_rb.html","files/lib/graphviz/types/arrow_type_rb.html","files/lib/graphviz/types/color_rb.html","files/lib/graphviz/types/color_list_rb.html","files/lib/graphviz/types/esc_string_rb.html","files/lib/graphviz/types/gv_bool_rb.html","files/lib/graphviz/types/gv_double_rb.html","files/lib/graphviz/types/html_string_rb.html","files/lib/graphviz/types/lbl_string_rb.html","files/lib/graphviz/types/rect_rb.html","files/lib/graphviz/types/spline_type_rb.html","files/lib/graphviz/utils_rb.html","files/lib/graphviz/utils/colors_rb.html","files/lib/graphviz/xml_rb.html"]}}