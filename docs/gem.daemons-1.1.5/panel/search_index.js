var search_data = {"index":{"info":[["CurrentProcess","lib/daemons/change_privilege.rb","classes/CurrentProcess.html"," < Object","",1],["Daemonize","lib/daemons/daemonize.rb","classes/Daemonize.html"," < ","=Daemonize Library February. 4, 2005 Travis Whitton <whitton@atlantic.net> Daemonize allows you to easily",1],["Daemons","lib/daemons/application.rb","classes/Daemons.html"," < ","All functions and classes that Daemons provides reside in this module. Daemons is normally invoked by",1],["Application","Daemons","classes/Daemons/Application.html"," < Object","",1],["ApplicationGroup","Daemons","classes/Daemons/ApplicationGroup.html"," < Object","",1],["CmdException","Daemons","classes/Daemons/CmdException.html"," < Exception","",1],["Controller","Daemons","classes/Daemons/Controller.html"," < Object","",1],["Error","Daemons","classes/Daemons/Error.html"," < Exception","",1],["Exception","Daemons","classes/Daemons/Exception.html"," < ::RuntimeError","",1],["Monitor","Daemons","classes/Daemons/Monitor.html"," < Object","",1],["Optparse","Daemons","classes/Daemons/Optparse.html"," < Object","",1],["Pid","Daemons","classes/Daemons/Pid.html"," < Object","",1],["PidFile","Daemons","classes/Daemons/PidFile.html"," < Pid","=== What is a Pid-File? A <i>Pid-File</i> is a file containing the <i>process identification number</i>",1],["PidMem","Daemons","classes/Daemons/PidMem.html"," < Pid","",1],["RuntimeException","Daemons","classes/Daemons/RuntimeException.html"," < Exception","",1],["SystemError","Daemons","classes/Daemons/SystemError.html"," < Error","",1],["Object","lib/daemons/etc_extension.rb","classes/Object.html"," < Object","",1],["call","Daemons","classes/Daemons.html#M000078","(options = {}, &block)","Execute the block in a new daemon. <tt>Daemons.call</tt> will return immediately after spawning the daemon",2],["call","Daemons","classes/Daemons.html#M000078","(options = {}, &block)","Execute the block in a new daemon. <tt>Daemons.call</tt> will return immediately after spawning the daemon",2],["call_as_daemon","Daemonize","classes/Daemonize.html#M000045","(block, logfile_name = nil, app_name = nil)","",2],["call_as_daemon","Daemonize","classes/Daemonize.html#M000045","(block, logfile_name = nil, app_name = nil)","",2],["catch_exceptions","Daemons::Controller","classes/Daemons/Controller.html#M000039","(&block)","",2],["change_privilege","CurrentProcess","classes/CurrentProcess.html#M000030","(user, group=user)","",2],["change_privilege","Daemons::Application","classes/Daemons/Application.html#M000002","()","",2],["cleanup","Daemons::Pid","classes/Daemons/Pid.html#M000061","()","Cleanup method ",2],["cleanup","Daemons::PidFile","classes/Daemons/PidFile.html#M000074","()","",2],["controller","Daemons","classes/Daemons.html#M000081","()","Return the internal Controller instance. ",2],["controller","Daemons","classes/Daemons.html#M000081","()","Return the internal Controller instance. ",2],["create_monitor","Daemons::ApplicationGroup","classes/Daemons/ApplicationGroup.html#M000018","(an_app)","",2],["daemonize","Daemonize","classes/Daemonize.html#M000048","(logfile_name = nil, app_name = nil)","This method causes the current running process to become a daemon ",2],["daemonize","Daemonize","classes/Daemonize.html#M000048","(logfile_name = nil, app_name = nil)","This method causes the current running process to become a daemon ",2],["daemonize","Daemons","classes/Daemons.html#M000079","(options = {})","Daemonize the currently runnig process, i.e. the calling process will become a daemon. +options+:: A",2],["daemonize","Daemons","classes/Daemons.html#M000079","(options = {})","Daemonize the currently runnig process, i.e. the calling process will become a daemon. +options+:: A",2],["dir","Daemons::Pid","classes/Daemons/Pid.html#M000053","(dir_mode, dir, script)","Returns the directory that should be used to write the pid file to depending on the given mode. Some",2],["exception_log","Daemons::Application","classes/Daemons/Application.html#M000028","()","This is a nice little function for debugging purposes: In case a multi-threaded ruby script exits due",2],["exist?","Daemons::Pid","classes/Daemons/Pid.html#M000062","()","Exist? method ",2],["exist?","Daemons::PidFile","classes/Daemons/PidFile.html#M000072","()","",2],["existing","Daemons::PidFile","classes/Daemons/PidFile.html#M000067","(path)","",2],["existing","Daemons::PidMem","classes/Daemons/PidMem.html#M000071","(numeric_pid)","",2],["filename","Daemons::PidFile","classes/Daemons/PidFile.html#M000070","()","",2],["find","Daemons::Monitor","classes/Daemons/Monitor.html#M000052","(dir, app_name)","",2],["find_applications","Daemons::ApplicationGroup","classes/Daemons/ApplicationGroup.html#M000010","(dir)","",2],["find_applications_by_app_name","Daemons::ApplicationGroup","classes/Daemons/ApplicationGroup.html#M000011","(app_name)","TODO: identifiy the monitor process ",2],["find_applications_by_pidfiles","Daemons::ApplicationGroup","classes/Daemons/ApplicationGroup.html#M000014","(dir)","",2],["find_files","Daemons::PidFile","classes/Daemons/PidFile.html#M000066","(dir, progname, delete = false)","",2],["group","Daemons","classes/Daemons.html#M000080","()","Return the internal ApplicationGroup instance. ",2],["group","Daemons","classes/Daemons.html#M000080","()","Return the internal ApplicationGroup instance. ",2],["groupname","Object","classes/Object.html#M000046","(gid)","",2],["logdir","Daemons::Application","classes/Daemons/Application.html#M000005","()","",2],["logfile","Daemons::Application","classes/Daemons/Application.html#M000007","()","",2],["new","Daemons::Application","classes/Daemons/Application.html#M000000","(group, add_options = {}, pid = nil)","",2],["new","Daemons::ApplicationGroup","classes/Daemons/ApplicationGroup.html#M000001","(app_name, options = {})","",2],["new","Daemons::Controller","classes/Daemons/Controller.html#M000038","(options = {}, argv = [])","",2],["new","Daemons::Monitor","classes/Daemons/Monitor.html#M000054","(an_app)","",2],["new","Daemons::Optparse","classes/Daemons/Optparse.html#M000035","(controller)","",2],["new","Daemons::Pid","classes/Daemons/Pid.html#M000056","()","Initialization method ",2],["new","Daemons::PidFile","classes/Daemons/PidFile.html#M000069","(dir, progname, multiple = false)","",2],["new","Daemons::SystemError","classes/Daemons/SystemError.html#M000050","(msg, system_error)","",2],["new_application","Daemons::ApplicationGroup","classes/Daemons/ApplicationGroup.html#M000016","(add_options = {})","",2],["output_logfile","Daemons::Application","classes/Daemons/Application.html#M000006","()","",2],["parse","Daemons::Optparse","classes/Daemons/Optparse.html#M000036","(args)","Return a hash describing the options. ",2],["pid","Daemons::Pid","classes/Daemons/Pid.html#M000057","()","Get method ",2],["pid","Daemons::PidFile","classes/Daemons/PidFile.html#M000075","()","",2],["pid=","Daemons::Pid","classes/Daemons/Pid.html#M000058","(p)","Set method ",2],["pid=","Daemons::PidFile","classes/Daemons/PidFile.html#M000073","(p)","",2],["pidfile_dir","Daemons::Application","classes/Daemons/Application.html#M000004","()","",2],["pidfile_dir","Daemons::ApplicationGroup","classes/Daemons/ApplicationGroup.html#M000009","()","",2],["print_usage","Daemons::Controller","classes/Daemons/Controller.html#M000037","()","",2],["redirect_io","Daemonize","classes/Daemonize.html#M000049","(logfile_name)","Free file descriptors and point them somewhere sensible STDOUT/STDERR should go to a logfile ",2],["redirect_io","Daemonize","classes/Daemonize.html#M000049","(logfile_name)","Free file descriptors and point them somewhere sensible STDOUT/STDERR should go to a logfile ",2],["reload","Daemons::Application","classes/Daemons/Application.html#M000027","()","def run if @group.controller.options[:exec] run_via_exec() else run_via_load() end end def run_via_exec",2],["reload_all","Daemons::ApplicationGroup","classes/Daemons/ApplicationGroup.html#M000022","()","",2],["run","Daemons","classes/Daemons.html#M000076","(script, options = {})","Passes control to Daemons. This is used in wrapper-scripts that are supposed to control other ruby scripts",2],["run","Daemons","classes/Daemons.html#M000076","(script, options = {})","Passes control to Daemons. This is used in wrapper-scripts that are supposed to control other ruby scripts",2],["run","Daemons::Controller","classes/Daemons/Controller.html#M000041","()","",2],["run_proc","Daemons","classes/Daemons.html#M000077","(app_name, options = {}, &block)","Passes control to Daemons. This function does the same as Daemons.run except that not a script but a",2],["run_proc","Daemons","classes/Daemons.html#M000077","(app_name, options = {}, &block)","Passes control to Daemons. This function does the same as Daemons.run except that not a script but a",2],["running?","Daemons::Application","classes/Daemons/Application.html#M000034","()","This function implements a (probably too simle) method to detect whether the program with the pid found",2],["running?","Daemons::Pid","classes/Daemons/Pid.html#M000051","(pid)","",2],["running?","Daemons::Pid","classes/Daemons/Pid.html#M000060","()","Check whether the process is running ",2],["safefork","Daemonize","classes/Daemonize.html#M000043","()","Try to fork if at all possible retrying every 5 sec if the maximum process limit for the system has been",2],["safefork","Daemonize","classes/Daemonize.html#M000043","()","Try to fork if at all possible retrying every 5 sec if the maximum process limit for the system has been",2],["script","Daemons::Application","classes/Daemons/Application.html#M000003","()","",2],["setup","Daemons::ApplicationGroup","classes/Daemons/ApplicationGroup.html#M000008","()","Setup the application group. Currently this functions calls <tt>find_applications</tt> which finds all",2],["setup_app","Daemons::ApplicationGroup","classes/Daemons/ApplicationGroup.html#M000017","(app)","",2],["setup_options","Daemons::Controller","classes/Daemons/Controller.html#M000040","()","This function is used to do a final update of the options passed to the application before they are really",2],["show_status","Daemons::Application","classes/Daemons/Application.html#M000033","()","",2],["show_status","Daemons::ApplicationGroup","classes/Daemons/ApplicationGroup.html#M000024","()","",2],["simulate","Daemonize","classes/Daemonize.html#M000044","(logfile_name = nil)","",2],["simulate","Daemonize","classes/Daemonize.html#M000044","(logfile_name = nil)","",2],["split_argv","Daemons::Controller","classes/Daemons/Controller.html#M000042","(argv)","Split an _argv_ array. +argv+ is assumed to be in the following format: ['command', 'controller option",2],["start","Daemons::Application","classes/Daemons/Application.html#M000025","()","",2],["start","Daemons::Monitor","classes/Daemons/Monitor.html#M000064","(applications)","",2],["start_all","Daemons::ApplicationGroup","classes/Daemons/ApplicationGroup.html#M000019","()","",2],["start_exec","Daemons::Application","classes/Daemons/Application.html#M000013","()","",2],["start_load","Daemons::Application","classes/Daemons/Application.html#M000015","()","",2],["start_none","Daemons::Application","classes/Daemons/Application.html#M000012","()","this function is only used to daemonize the currently running process (Daemons.daemonize) ",2],["start_proc","Daemons::Application","classes/Daemons/Application.html#M000021","()","",2],["start_with_pidfile","Daemons::Monitor","classes/Daemons/Monitor.html#M000059","(applications)","",2],["start_without_pidfile","Daemons::Monitor","classes/Daemons/Monitor.html#M000063","(applications)","",2],["started","Daemons::Application","classes/Daemons/Application.html#M000026","()","",2],["stop","Daemons::Application","classes/Daemons/Application.html#M000029","(no_wait = false)","",2],["stop","Daemons::Monitor","classes/Daemons/Monitor.html#M000065","()","",2],["stop_all","Daemons::ApplicationGroup","classes/Daemons/ApplicationGroup.html#M000020","(no_wait = false)","",2],["username","Object","classes/Object.html#M000047","(uid)","",2],["watch","Daemons::Monitor","classes/Daemons/Monitor.html#M000055","(applications)","",2],["zap","Daemons::Application","classes/Daemons/Application.html#M000031","()","",2],["zap!","Daemons::Application","classes/Daemons/Application.html#M000032","()","",2],["zap_all","Daemons::ApplicationGroup","classes/Daemons/ApplicationGroup.html#M000023","()","",2],["LICENSE","files/LICENSE.html","files/LICENSE.html","","Copyright (c) 2005-2011 Thomas Uehlinger  Permission is hereby granted, free of charge, to any person",3],["README","files/README.html","files/README.html","","= Daemons Version 1.1.5  (See Releases for release-specific information)  == What is Daemons?  Daemons",3],["Releases","files/Releases.html","files/Releases.html","","= Daemons Release History  == Release 1.1.5: December 19, 2011  * Catch the case where the pidfile is",3],["TODO","files/TODO.html","files/TODO.html","","* put TODOS here  ",3],["daemons.rb","files/lib/daemons_rb.html","files/lib/daemons_rb.html","","",3],["application.rb","files/lib/daemons/application_rb.html","files/lib/daemons/application_rb.html","","",3],["application_group.rb","files/lib/daemons/application_group_rb.html","files/lib/daemons/application_group_rb.html","","",3],["change_privilege.rb","files/lib/daemons/change_privilege_rb.html","files/lib/daemons/change_privilege_rb.html","","",3],["cmdline.rb","files/lib/daemons/cmdline_rb.html","files/lib/daemons/cmdline_rb.html","","",3],["controller.rb","files/lib/daemons/controller_rb.html","files/lib/daemons/controller_rb.html","","",3],["daemonize.rb","files/lib/daemons/daemonize_rb.html","files/lib/daemons/daemonize_rb.html","","=Daemonize Library February. 4, 2005 Travis Whitton <whitton@atlantic.net> Daemonize allows you to easily",3],["etc_extension.rb","files/lib/daemons/etc_extension_rb.html","files/lib/daemons/etc_extension_rb.html","","",3],["exceptions.rb","files/lib/daemons/exceptions_rb.html","files/lib/daemons/exceptions_rb.html","","",3],["monitor.rb","files/lib/daemons/monitor_rb.html","files/lib/daemons/monitor_rb.html","","",3],["pid.rb","files/lib/daemons/pid_rb.html","files/lib/daemons/pid_rb.html","","",3],["pidfile.rb","files/lib/daemons/pidfile_rb.html","files/lib/daemons/pidfile_rb.html","","",3],["pidmem.rb","files/lib/daemons/pidmem_rb.html","files/lib/daemons/pidmem_rb.html","","",3]],"searchIndex":["currentprocess","daemonize","daemons","application","applicationgroup","cmdexception","controller","error","exception","monitor","optparse","pid","pidfile","pidmem","runtimeexception","systemerror","object","call()","call()","call_as_daemon()","call_as_daemon()","catch_exceptions()","change_privilege()","change_privilege()","cleanup()","cleanup()","controller()","controller()","create_monitor()","daemonize()","daemonize()","daemonize()","daemonize()","dir()","exception_log()","exist?()","exist?()","existing()","existing()","filename()","find()","find_applications()","find_applications_by_app_name()","find_applications_by_pidfiles()","find_files()","group()","group()","groupname()","logdir()","logfile()","new()","new()","new()","new()","new()","new()","new()","new()","new_application()","output_logfile()","parse()","pid()","pid()","pid=()","pid=()","pidfile_dir()","pidfile_dir()","print_usage()","redirect_io()","redirect_io()","reload()","reload_all()","run()","run()","run()","run_proc()","run_proc()","running?()","running?()","running?()","safefork()","safefork()","script()","setup()","setup_app()","setup_options()","show_status()","show_status()","simulate()","simulate()","split_argv()","start()","start()","start_all()","start_exec()","start_load()","start_none()","start_proc()","start_with_pidfile()","start_without_pidfile()","started()","stop()","stop()","stop_all()","username()","watch()","zap()","zap!()","zap_all()","license","readme","releases","todo","daemons.rb","application.rb","application_group.rb","change_privilege.rb","cmdline.rb","controller.rb","daemonize.rb","etc_extension.rb","exceptions.rb","monitor.rb","pid.rb","pidfile.rb","pidmem.rb"],"longSearchIndex":["lib/daemons/change_privilege.rb","lib/daemons/daemonize.rb","lib/daemons.rb","daemons","daemons","daemons","daemons","daemons","daemons","daemons","daemons","daemons","daemons","daemons","daemons","daemons","lib/daemons/etc_extension.rb","daemons","daemons","daemonize","daemonize","daemons::controller","currentprocess","daemons::application","daemons::pid","daemons::pidfile","daemons","daemons","daemons::applicationgroup","daemonize","daemonize","daemons","daemons","daemons::pid","daemons::application","daemons::pid","daemons::pidfile","daemons::pidfile","daemons::pidmem","daemons::pidfile","daemons::monitor","daemons::applicationgroup","daemons::applicationgroup","daemons::applicationgroup","daemons::pidfile","daemons","daemons","object","daemons::application","daemons::application","daemons::application","daemons::applicationgroup","daemons::controller","daemons::monitor","daemons::optparse","daemons::pid","daemons::pidfile","daemons::systemerror","daemons::applicationgroup","daemons::application","daemons::optparse","daemons::pid","daemons::pidfile","daemons::pid","daemons::pidfile","daemons::application","daemons::applicationgroup","daemons::controller","daemonize","daemonize","daemons::application","daemons::applicationgroup","daemons","daemons","daemons::controller","daemons","daemons","daemons::application","daemons::pid","daemons::pid","daemonize","daemonize","daemons::application","daemons::applicationgroup","daemons::applicationgroup","daemons::controller","daemons::application","daemons::applicationgroup","daemonize","daemonize","daemons::controller","daemons::application","daemons::monitor","daemons::applicationgroup","daemons::application","daemons::application","daemons::application","daemons::application","daemons::monitor","daemons::monitor","daemons::application","daemons::application","daemons::monitor","daemons::applicationgroup","object","daemons::monitor","daemons::application","daemons::application","daemons::applicationgroup","files/license.html","files/readme.html","files/releases.html","files/todo.html","files/lib/daemons_rb.html","files/lib/daemons/application_rb.html","files/lib/daemons/application_group_rb.html","files/lib/daemons/change_privilege_rb.html","files/lib/daemons/cmdline_rb.html","files/lib/daemons/controller_rb.html","files/lib/daemons/daemonize_rb.html","files/lib/daemons/etc_extension_rb.html","files/lib/daemons/exceptions_rb.html","files/lib/daemons/monitor_rb.html","files/lib/daemons/pid_rb.html","files/lib/daemons/pidfile_rb.html","files/lib/daemons/pidmem_rb.html"]}}