var search_data = {"index":{"info":[["ActionController","lib/new_relic/agent/instrumentation/rails3/action_controller.rb","classes/ActionController.html"," < ","",1],["Base","ActionController","classes/ActionController/Base.html"," < Object","",1],["ActionView","lib/new_relic/agent/instrumentation/rails3/action_controller.rb","classes/ActionView.html"," < ","",1],["Base","ActionView","classes/ActionView/Base.html"," < Object","",1],["Partials","ActionView","classes/ActionView/Partials.html"," < ","",1],["PartialRenderer","ActionView::Partials","classes/ActionView/Partials/PartialRenderer.html"," < Object","",1],["Agent","NewRelic","classes/NewRelic/Agent.html"," < ","== Ruby Agent APIs This module contains the public API methods for the Ruby Agent. For adding custom",1],["Agent","NewRelic::Agent","classes/NewRelic/Agent/Agent.html"," < Object","The Agent is a singleton that is instantiated when the plugin is activated.  It collects performance",1],["ClassMethods","NewRelic::Agent::Agent","classes/NewRelic/Agent/Agent/ClassMethods.html"," < ","contains all the class-level methods for NewRelic::Agent::Agent ",1],["InstanceMethods","NewRelic::Agent::Agent","classes/NewRelic/Agent/Agent/InstanceMethods.html"," < ","Holds all the methods defined on NewRelic::Agent::Agent instances ",1],["Connect","NewRelic::Agent::Agent::InstanceMethods","classes/NewRelic/Agent/Agent/InstanceMethods/Connect.html"," < ","This module is an artifact of a refactoring of the connect method - all of its methods are used in that",1],["Start","NewRelic::Agent::Agent::InstanceMethods","classes/NewRelic/Agent/Agent/InstanceMethods/Start.html"," < ","Herein lies the corpse of the former 'start' method. May it's unmatched flog score rest in pieces. ",1],["StartWorkerThread","NewRelic::Agent::Agent::InstanceMethods","classes/NewRelic/Agent/Agent/InstanceMethods/StartWorkerThread.html"," < ","All of this module used to be contained in the start_worker_thread method - this is an artifact of refactoring",1],["BackgroundLoadingError","NewRelic::Agent","classes/NewRelic/Agent/BackgroundLoadingError.html"," < StandardError","",1],["BeaconConfiguration","NewRelic::Agent","classes/NewRelic/Agent/BeaconConfiguration.html"," < Object","This class contains the configuration data for setting up RUM headers and footers - acts as a cache of",1],["BrowserMonitoring","NewRelic::Agent","classes/NewRelic/Agent/BrowserMonitoring.html"," < ","This module contains support for Real User Monitoring - the javascript generation and configuration ",1],["DummyMetricFrame","NewRelic::Agent::BrowserMonitoring","classes/NewRelic/Agent/BrowserMonitoring/DummyMetricFrame.html"," < Object","",1],["BusyCalculator","NewRelic::Agent","classes/NewRelic/Agent/BusyCalculator.html"," < ","This module supports calculation of actual time spent processing requests over the course of one harvest",1],["Database","NewRelic::Agent","classes/NewRelic/Agent/Database.html"," < ","",1],["ConnectionManager","NewRelic::Agent::Database","classes/NewRelic/Agent/Database/ConnectionManager.html"," < Object","",1],["Obfuscator","NewRelic::Agent::Database","classes/NewRelic/Agent/Database/Obfuscator.html"," < Object","",1],["ErrorCollector","NewRelic::Agent","classes/NewRelic/Agent/ErrorCollector.html"," < Object","This class collects errors from the parent application, storing them until they are harvested and transmitted",1],["NoticeError","NewRelic::Agent::ErrorCollector","classes/NewRelic/Agent/ErrorCollector/NoticeError.html"," < ","This module was extracted from the notice_error method - it is internally tested and can be refactored",1],["ForceDisconnectException","NewRelic::Agent","classes/NewRelic/Agent/ForceDisconnectException.html"," < StandardError","An exception that forces an agent to stop reporting until its mongrel is restarted. ",1],["ForceRestartException","NewRelic::Agent","classes/NewRelic/Agent/ForceRestartException.html"," < StandardError","An exception that forces an agent to restart. ",1],["Instrumentation","NewRelic::Agent","classes/NewRelic/Agent/Instrumentation.html"," < ","stub module that contains instrumentation defined in the instrumentation directory ",1],["ActiveRecord","NewRelic::Agent::Instrumentation","classes/NewRelic/Agent/Instrumentation/ActiveRecord.html"," < ","",1],["ControllerInstrumentation","NewRelic::Agent::Instrumentation","classes/NewRelic/Agent/Instrumentation/ControllerInstrumentation.html"," < ","== NewRelic instrumentation for controller actions and tasks This instrumentation is applied to the action",1],["ClassMethods","NewRelic::Agent::Instrumentation::ControllerInstrumentation","classes/NewRelic/Agent/Instrumentation/ControllerInstrumentation/ClassMethods.html"," < ","",1],["DataMapperInstrumentation","NewRelic::Agent::Instrumentation","classes/NewRelic/Agent/Instrumentation/DataMapperInstrumentation.html"," < ","",1],["Memcache","NewRelic::Agent::Instrumentation","classes/NewRelic/Agent/Instrumentation/Memcache.html"," < ","",1],["MetricFrame","NewRelic::Agent::Instrumentation","classes/NewRelic/Agent/Instrumentation/MetricFrame.html"," < Object","",1],["Pop","NewRelic::Agent::Instrumentation::MetricFrame","classes/NewRelic/Agent/Instrumentation/MetricFrame/Pop.html"," < ","",1],["QueueTime","NewRelic::Agent::Instrumentation","classes/NewRelic/Agent/Instrumentation/QueueTime.html"," < ","",1],["Rack","NewRelic::Agent::Instrumentation","classes/NewRelic/Agent/Instrumentation/Rack.html"," < ","== Instrumentation for Rack New Relic will instrument a #call method as if it were a controller action,",1],["Rails3","NewRelic::Agent::Instrumentation","classes/NewRelic/Agent/Instrumentation/Rails3.html"," < ","",1],["ActionController","NewRelic::Agent::Instrumentation::Rails3","classes/NewRelic/Agent/Instrumentation/Rails3/ActionController.html"," < ","",1],["ActionView","NewRelic::Agent::Instrumentation::Rails3","classes/NewRelic/Agent/Instrumentation/Rails3/ActionView.html"," < ","",1],["PartialRenderer","NewRelic::Agent::Instrumentation::Rails3::ActionView","classes/NewRelic/Agent/Instrumentation/Rails3/ActionView/PartialRenderer.html"," < ","",1],["Errors","NewRelic::Agent::Instrumentation::Rails3","classes/NewRelic/Agent/Instrumentation/Rails3/Errors.html"," < ","",1],["Sinatra","NewRelic::Agent::Instrumentation","classes/NewRelic/Agent/Instrumentation/Sinatra.html"," < ","NewRelic instrumentation for Sinatra applications.  Sinatra actions will appear in the UI similar to",1],["LicenseException","NewRelic::Agent","classes/NewRelic/Agent/LicenseException.html"," < StandardError","An exception that is thrown by the server if the agent license is invalid. ",1],["MethodTracer","NewRelic::Agent","classes/NewRelic/Agent/MethodTracer.html"," < ","This module contains class methods added to support installing custom metric tracers and executing for",1],["ClassMethods","NewRelic::Agent::MethodTracer","classes/NewRelic/Agent/MethodTracer/ClassMethods.html"," < ","Defines methods used at the class level, for adding instrumentation ",1],["AddMethodTracer","NewRelic::Agent::MethodTracer::ClassMethods","classes/NewRelic/Agent/MethodTracer/ClassMethods/AddMethodTracer.html"," < ","contains methods refactored out of the #add_method_tracer method ",1],["InstanceMethods","NewRelic::Agent::MethodTracer","classes/NewRelic/Agent/MethodTracer/InstanceMethods.html"," < ","Defines modules used at instrumentation runtime, to do the actual tracing of time spent ",1],["TraceExecutionScoped","NewRelic::Agent::MethodTracer::InstanceMethods","classes/NewRelic/Agent/MethodTracer/InstanceMethods/TraceExecutionScoped.html"," < ","Refactored out of the previous trace_execution_scoped method, most methods in this module relate to code",1],["PostTooBigException","NewRelic::Agent","classes/NewRelic/Agent/PostTooBigException.html"," < ServerConnectionException","Used for when a transaction trace or error report has too much data, so we reset the queue to clear the",1],["Sampler","NewRelic::Agent","classes/NewRelic/Agent/Sampler.html"," < Object","",1],["Unsupported","NewRelic::Agent::Sampler","classes/NewRelic/Agent/Sampler/Unsupported.html"," < StandardError","Exception denotes a sampler is not available and it will not be registered. ",1],["Samplers","NewRelic::Agent","classes/NewRelic/Agent/Samplers.html"," < ","",1],["CpuSampler","NewRelic::Agent::Samplers","classes/NewRelic/Agent/Samplers/CpuSampler.html"," < NewRelic::Agent::Sampler","",1],["DelayedJobLockSampler","NewRelic::Agent::Samplers","classes/NewRelic/Agent/Samplers/DelayedJobLockSampler.html"," < NewRelic::Agent::Sampler","",1],["MemorySampler","NewRelic::Agent::Samplers","classes/NewRelic/Agent/Samplers/MemorySampler.html"," < NewRelic::Agent::Sampler","",1],["Base","NewRelic::Agent::Samplers::MemorySampler","classes/NewRelic/Agent/Samplers/MemorySampler/Base.html"," < Object","",1],["JavaHeapSampler","NewRelic::Agent::Samplers::MemorySampler","classes/NewRelic/Agent/Samplers/MemorySampler/JavaHeapSampler.html"," < Base","",1],["ProcStatus","NewRelic::Agent::Samplers::MemorySampler","classes/NewRelic/Agent/Samplers/MemorySampler/ProcStatus.html"," < Base","ProcStatus A class that samples memory by reading the file /proc/$$/status, which is specific to linux",1],["ShellPS","NewRelic::Agent::Samplers::MemorySampler","classes/NewRelic/Agent/Samplers/MemorySampler/ShellPS.html"," < Base","",1],["ObjectSampler","NewRelic::Agent::Samplers","classes/NewRelic/Agent/Samplers/ObjectSampler.html"," < NewRelic::Agent::Sampler","",1],["ServerConnectionException","NewRelic::Agent","classes/NewRelic/Agent/ServerConnectionException.html"," < StandardError","Used to blow out of a periodic task without logging a an error, such as for routine failures. ",1],["ServerError","NewRelic::Agent","classes/NewRelic/Agent/ServerError.html"," < StandardError","Reserved for future use.  Meant to represent a problem on the server side. ",1],["ShimAgent","NewRelic::Agent","classes/NewRelic/Agent/ShimAgent.html"," < NewRelic::Agent::Agent","",1],["SlowSql","NewRelic::Agent","classes/NewRelic/Agent/SlowSql.html"," < Object","",1],["SqlSampler","NewRelic::Agent","classes/NewRelic/Agent/SqlSampler.html"," < Object","",1],["SqlTrace","NewRelic::Agent","classes/NewRelic/Agent/SqlTrace.html"," < MethodTraceStats","",1],["StatsEngine","NewRelic::Agent","classes/NewRelic/Agent/StatsEngine.html"," < Object","This class handles all the statistics gathering for the agent ",1],["GCProfiler","NewRelic::Agent::StatsEngine","classes/NewRelic/Agent/StatsEngine/GCProfiler.html"," < ","",1],["Profiler","NewRelic::Agent::StatsEngine::GCProfiler","classes/NewRelic/Agent/StatsEngine/GCProfiler/Profiler.html"," < Object","",1],["RailsBench","NewRelic::Agent::StatsEngine::GCProfiler","classes/NewRelic/Agent/StatsEngine/GCProfiler/RailsBench.html"," < Profiler","",1],["Rubinius","NewRelic::Agent::StatsEngine::GCProfiler","classes/NewRelic/Agent/StatsEngine/GCProfiler/Rubinius.html"," < Profiler","",1],["Ruby19","NewRelic::Agent::StatsEngine::GCProfiler","classes/NewRelic/Agent/StatsEngine/GCProfiler/Ruby19.html"," < Profiler","",1],["MetricStats","NewRelic::Agent::StatsEngine","classes/NewRelic/Agent/StatsEngine/MetricStats.html"," < ","Handles methods related to actual Metric collection ",1],["Harvest","NewRelic::Agent::StatsEngine::MetricStats","classes/NewRelic/Agent/StatsEngine/MetricStats/Harvest.html"," < ","This module was extracted from the harvest method and should be refactored ",1],["SynchronizedHash","NewRelic::Agent::StatsEngine::MetricStats","classes/NewRelic/Agent/StatsEngine/MetricStats/SynchronizedHash.html"," < ::Hash","A simple mutex-synchronized hash to make sure our statistics are internally consistent even in truly-threaded",1],["Samplers","NewRelic::Agent::StatsEngine","classes/NewRelic/Agent/StatsEngine/Samplers.html"," < ","Contains statistics engine extensions to support the concept of samplers ",1],["ScopeStackElement","NewRelic::Agent::StatsEngine","classes/NewRelic/Agent/StatsEngine/ScopeStackElement.html"," < Object","A simple stack element that tracks the current name and length of the executing stack ",1],["Transactions","NewRelic::Agent::StatsEngine","classes/NewRelic/Agent/StatsEngine/Transactions.html"," < ","Handles pushing and popping elements onto an internal stack that tracks where time should be allocated",1],["TransactionInfo","NewRelic::Agent","classes/NewRelic/Agent/TransactionInfo.html"," < Object","",1],["TransactionSampleBuilder","NewRelic::Agent","classes/NewRelic/Agent/TransactionSampleBuilder.html"," < Object","a builder is created with every sampled transaction, to dynamically generate the sampled data.  It is",1],["TransactionSampler","NewRelic::Agent","classes/NewRelic/Agent/TransactionSampler.html"," < Object","This class contains the logic of sampling a transaction - creation and modification of transaction samples",1],["TransactionSqlData","NewRelic::Agent","classes/NewRelic/Agent/TransactionSqlData.html"," < Object","",1],["WorkerLoop","NewRelic::Agent","classes/NewRelic/Agent/WorkerLoop.html"," < Object","A worker loop executes a set of registered tasks on a single thread. A task is a proc or block with a",1],["ApdexStats","NewRelic","classes/NewRelic/ApdexStats.html"," < StatsBase","",1],["BasicStats","NewRelic","classes/NewRelic/BasicStats.html"," < StatsBase","",1],["ChainedCall","NewRelic","classes/NewRelic/ChainedCall.html"," < Object","This class is used by NewRelic::Agent.set_sql_obfuscator to chain multiple obfuscation blocks when not",1],["CollectionHelper","NewRelic","classes/NewRelic/CollectionHelper.html"," < ","",1],["Command","NewRelic","classes/NewRelic/Command.html"," < Object","",1],["CommandFailure","NewRelic::Command","classes/NewRelic/Command/CommandFailure.html"," < StandardError","Capture a failure to execute the command. ",1],["Deployments","NewRelic::Command","classes/NewRelic/Command/Deployments.html"," < NewRelic::Command","",1],["Install","NewRelic::Command","classes/NewRelic/Command/Install.html"," < NewRelic::Command","",1],["Control","NewRelic","classes/NewRelic/Control.html"," < Object","The Control is a singleton responsible for the startup and initialization sequence.  The initializer",1],["ClassMethods","NewRelic::Control","classes/NewRelic/Control/ClassMethods.html"," < ","class-level methods for lazy creation of NewRelic::Control and NewRelic::LocalEnvironment instances.",1],["Configuration","NewRelic::Control","classes/NewRelic/Control/Configuration.html"," < ","used to contain methods to look up settings from the configuration located in newrelic.yml ",1],["Frameworks","NewRelic::Control","classes/NewRelic/Control/Frameworks.html"," < ","Contains subclasses of NewRelic::Control that are used when starting the agent within an application.",1],["External","NewRelic::Control::Frameworks","classes/NewRelic/Control/Frameworks/External.html"," < NewRelic::Control::Frameworks::Ruby","This is the control used when starting up in the context of The New Relic Infrastructure Agent.  We want",1],["Merb","NewRelic::Control::Frameworks","classes/NewRelic/Control/Frameworks/Merb.html"," < NewRelic::Control","Includes limited support for Merb ",1],["Rails","NewRelic::Control::Frameworks","classes/NewRelic/Control/Frameworks/Rails.html"," < NewRelic::Control::Frameworks::Ruby","Control subclass instantiated when Rails is detected.  Contains Rails specific configuration, instrumentation,",1],["Rails3","NewRelic::Control::Frameworks","classes/NewRelic/Control/Frameworks/Rails3.html"," < NewRelic::Control::Frameworks::Rails","Control subclass instantiated when Rails is detected.  Contains Rails 3.0+  specific configuration, instrumentation,",1],["Ruby","NewRelic::Control::Frameworks","classes/NewRelic/Control/Frameworks/Ruby.html"," < NewRelic::Control","A control used when no framework is detected - the default. Looks for a newrelic.yml file in several",1],["Sinatra","NewRelic::Control::Frameworks","classes/NewRelic/Control/Frameworks/Sinatra.html"," < NewRelic::Control::Frameworks::Ruby","Contains basic control logic for Sinatra ",1],["InstanceMethods","NewRelic::Control","classes/NewRelic/Control/InstanceMethods.html"," < ","Contains methods that relate to the runtime usage of the control object. Note that these are subject",1],["Instrumentation","NewRelic::Control","classes/NewRelic/Control/Instrumentation.html"," < ","Contains methods that relate to adding and executing files that contain instrumentation for the Ruby",1],["LoggingMethods","NewRelic::Control","classes/NewRelic/Control/LoggingMethods.html"," < ","Contains methods that relate to locating, creating, and writing to the log file and/or standard out ",1],["Profiling","NewRelic::Control","classes/NewRelic/Control/Profiling.html"," < ","",1],["ServerMethods","NewRelic::Control","classes/NewRelic/Control/ServerMethods.html"," < ","Contains methods that deal with connecting to the server ",1],["DataSerialization","NewRelic","classes/NewRelic/DataSerialization.html"," < Object","Handles serialization of data to disk, to save on contacting the server. Lowers both server and client",1],["ClassMethods","NewRelic::DataSerialization","classes/NewRelic/DataSerialization/ClassMethods.html"," < ","",1],["DelayedJobInjection","NewRelic","classes/NewRelic/DelayedJobInjection.html"," < ","",1],["Instrumentation","NewRelic","classes/NewRelic/Instrumentation.html"," < ","",1],["ActsAsSolrInstrumentation","NewRelic::Instrumentation","classes/NewRelic/Instrumentation/ActsAsSolrInstrumentation.html"," < ","",1],["ParserMethodsInstrumentation","NewRelic::Instrumentation::ActsAsSolrInstrumentation","classes/NewRelic/Instrumentation/ActsAsSolrInstrumentation/ParserMethodsInstrumentation.html"," < ","",1],["LanguageSupport","NewRelic","classes/NewRelic/LanguageSupport.html"," < ","",1],["Control","NewRelic::LanguageSupport","classes/NewRelic/LanguageSupport/Control.html"," < ","",1],["DataSerialization","NewRelic::LanguageSupport","classes/NewRelic/LanguageSupport/DataSerialization.html"," < ","",1],["SynchronizedHash","NewRelic::LanguageSupport","classes/NewRelic/LanguageSupport/SynchronizedHash.html"," < ","",1],["LocalEnvironment","NewRelic","classes/NewRelic/LocalEnvironment.html"," < Object","An instance of LocalEnvironment is responsible for determining three things: * Framework - :rails, :rails3,",1],["MerbBootLoader","NewRelic","classes/NewRelic/MerbBootLoader.html"," < Merb::BootLoader","",1],["MethodTraceStats","NewRelic","classes/NewRelic/MethodTraceStats.html"," < StatsBase","Statistics used to track the performance of traced methods ",1],["MetricData","NewRelic","classes/NewRelic/MetricData.html"," < Object","",1],["MetricSpec","NewRelic","classes/NewRelic/MetricSpec.html"," < Object","this struct uniquely defines a metric, optionally inside the call scope of another metric ",1],["Metrics","NewRelic","classes/NewRelic/Metrics.html"," < ","",1],["NoticedError","NewRelic","classes/NewRelic/NoticedError.html"," < Object","This class encapsulates an error that was noticed by New Relic in a managed app. ",1],["Rack","NewRelic","classes/NewRelic/Rack.html"," < ","",1],["BrowserMonitoring","NewRelic::Rack","classes/NewRelic/Rack/BrowserMonitoring.html"," < Object","",1],["DeveloperMode","NewRelic::Rack","classes/NewRelic/Rack/DeveloperMode.html"," < Object","",1],["Railtie","NewRelic","classes/NewRelic/Railtie.html"," < Rails::Railtie","",1],["ScopedMethodTraceStats","NewRelic","classes/NewRelic/ScopedMethodTraceStats.html"," < MethodTraceStats","",1],["Stats","NewRelic","classes/NewRelic/Stats.html"," < ","",1],["StatsBase","NewRelic","classes/NewRelic/StatsBase.html"," < Object","",1],["TransactionAnalysis","NewRelic","classes/NewRelic/TransactionAnalysis.html"," < ","",1],["SegmentSummary","NewRelic::TransactionAnalysis","classes/NewRelic/TransactionAnalysis/SegmentSummary.html"," < Object","summarizes performance data for all calls to segments with the same metric_name ",1],["TransactionSample","NewRelic","classes/NewRelic/TransactionSample.html"," < Object","",1],["CompositeSegment","NewRelic::TransactionSample","classes/NewRelic/TransactionSample/CompositeSegment.html"," < Segment","",1],["FakeSegment","NewRelic::TransactionSample","classes/NewRelic/TransactionSample/FakeSegment.html"," < Segment","",1],["Segment","NewRelic::TransactionSample","classes/NewRelic/TransactionSample/Segment.html"," < Object","",1],["SummarySegment","NewRelic::TransactionSample","classes/NewRelic/TransactionSample/SummarySegment.html"," < Segment","",1],["UrlRule","NewRelic","classes/NewRelic/UrlRule.html"," < Object","Represents url mapping rules stored on the server.  These rules should be applied to URLs which are not",1],["RuleSet","NewRelic::UrlRule","classes/NewRelic/UrlRule/RuleSet.html"," < Object","",1],["VersionNumber","NewRelic","classes/NewRelic/VersionNumber.html"," < Object","Helper class for managing version comparisons ",1],["Object","lib/new_relic/agent/instrumentation/active_record.rb","classes/Object.html"," < Object","",1],["<<","NewRelic::TransactionAnalysis::SegmentSummary","classes/NewRelic/TransactionAnalysis/SegmentSummary.html#M000865","(segment)","",2],["<=>","NewRelic::MetricSpec","classes/NewRelic/MetricSpec.html#M000795","(o)","",2],["<=>","NewRelic::VersionNumber","classes/NewRelic/VersionNumber.html#M000952","(other)","",2],["==","NewRelic::MetricSpec","classes/NewRelic/MetricSpec.html#M000783","(o)","",2],["[]","NewRelic::Control::Configuration","classes/NewRelic/Control/Configuration.html#M000626","(key)","",2],["[]","NewRelic::TransactionSample::Segment","classes/NewRelic/TransactionSample/Segment.html#M000917","(key)","",2],["[]=","NewRelic::Agent::StatsEngine::MetricStats::SynchronizedHash","classes/NewRelic/Agent/StatsEngine/MetricStats/SynchronizedHash.html#M000446","(*args)","",2],["[]=","NewRelic::Control::Configuration","classes/NewRelic/Control/Configuration.html#M000627","(key, value)","",2],["[]=","NewRelic::TransactionSample::Segment","classes/NewRelic/TransactionSample/Segment.html#M000916","(key, value)","",2],["_call","NewRelic::Rack::DeveloperMode","classes/NewRelic/Rack/DeveloperMode.html#M000812","(env)","",2],["_convert_args_to_path","NewRelic::Agent::Instrumentation::ControllerInstrumentation","classes/NewRelic/Agent/Instrumentation/ControllerInstrumentation.html#M000197","(args)","",2],["_detect_upstream_wait","NewRelic::Agent::Instrumentation::ControllerInstrumentation","classes/NewRelic/Agent/Instrumentation/ControllerInstrumentation.html#M000202","(now)","Return a Time instance representing the upstream start time. now is a Time instance to fall back on if",2],["_dispatch_stat","NewRelic::Agent::Instrumentation::ControllerInstrumentation","classes/NewRelic/Agent/Instrumentation/ControllerInstrumentation.html#M000204","()","returns the NewRelic::MethodTraceStats object associated with the dispatcher time measurement ",2],["_install_instrumentation","NewRelic::Control::Instrumentation","classes/NewRelic/Control/Instrumentation.html#M000692","()","",2],["_is_filtered?","NewRelic::Agent::Instrumentation::ControllerInstrumentation","classes/NewRelic/Agent/Instrumentation/ControllerInstrumentation.html#M000199","(key)","Filter out a request if it matches one of our parameters for ignoring it - the key is either 'do_not_trace'",2],["_record_queue_length","NewRelic::Agent::Instrumentation::ControllerInstrumentation","classes/NewRelic/Agent/Instrumentation/ControllerInstrumentation.html#M000200","()","Take a guess at a measure representing the number of requests waiting in mongrel or heroku. ",2],["_sanitize_name","NewRelic::Agent::MethodTracer::ClassMethods","classes/NewRelic/Agent/MethodTracer/ClassMethods.html#M000385","(name)","makes sure that method names do not contain characters that might break the interpreter, for example",2],["_traced_method_name","NewRelic::Agent::MethodTracer::ClassMethods","classes/NewRelic/Agent/MethodTracer/ClassMethods.html#M000384","(method_name, metric_name)","given a method and a metric, this method returns the traced alias of the method name ",2],["_untraced_method_name","NewRelic::Agent::MethodTracer::ClassMethods","classes/NewRelic/Agent/MethodTracer/ClassMethods.html#M000383","(method_name, metric_name)","given a method and a metric, this method returns the untraced alias of the method name ",2],["abort_transaction!","NewRelic::Agent","classes/NewRelic/Agent.html#M000580","()","Cancel the collection of the current transaction in progress, if any.  Only affects the transaction started",2],["abort_transaction!","NewRelic::Agent::Instrumentation::MetricFrame","classes/NewRelic/Agent/Instrumentation/MetricFrame.html#M000236","()","Call this to ensure that the current transaction is not saved ",2],["abort_transaction!","NewRelic::Agent::Instrumentation::MetricFrame","classes/NewRelic/Agent/Instrumentation/MetricFrame.html#M000233","()","Indicate that you don't want to keep the currently saved transaction information ",2],["absent?","NewRelic::Stats","classes/NewRelic/Stats.html#M000830","()","a stat is absent if its call count equals zero ",2],["add_called_segment","NewRelic::TransactionSample::Segment","classes/NewRelic/TransactionSample/Segment.html#M000902","(s)","",2],["add_custom_parameters","NewRelic::Agent","classes/NewRelic/Agent.html#M000589","(params)","Add parameters to the current transaction trace (and traced error if any) on the call stack. ",2],["add_custom_parameters","NewRelic::Agent::Instrumentation::MetricFrame","classes/NewRelic/Agent/Instrumentation/MetricFrame.html#M000243","(p)","Add context parameters to the metric frame.  This information will be passed in to errors and transaction",2],["add_custom_parameters","NewRelic::Agent::Instrumentation::MetricFrame","classes/NewRelic/Agent/Instrumentation/MetricFrame.html#M000254","(p)","",2],["add_data_to_send_unless_empty","NewRelic::Agent::StatsEngine::MetricStats::Harvest","classes/NewRelic/Agent/StatsEngine/MetricStats/Harvest.html#M000466","(data, stats, metric_spec, id)","",2],["add_end_time_header","NewRelic::Agent::Instrumentation::QueueTime","classes/NewRelic/Agent/Instrumentation/QueueTime.html#M000293","(end_time, env)","",2],["add_force_persist_to","NewRelic::Agent::TransactionSampler","classes/NewRelic/Agent/TransactionSampler.html#M000555","(result)","",2],["add_harvest_sampler","NewRelic::Agent::StatsEngine::Samplers","classes/NewRelic/Agent/StatsEngine/Samplers.html#M000476","(sampler)","Add a sampler to be invoked just before each harvest. ",2],["add_instrumentation","NewRelic::Agent","classes/NewRelic/Agent.html#M000574","(file_pattern)","Add instrumentation files to the agent.  The argument should be a glob matching ruby scripts which will",2],["add_instrumentation","NewRelic::Control::Instrumentation","classes/NewRelic/Control/Instrumentation.html#M000684","(pattern)","Add instrumentation.  Don't call this directly.  Use NewRelic::Agent#add_instrumentation. This will load",2],["add_method_tracer","NewRelic::Agent::MethodTracer::ClassMethods","classes/NewRelic/Agent/MethodTracer/ClassMethods.html#M000374","(method_name, metric_name_code=nil, options = {})","Add a method tracer to the specified method. === Common Options * <tt>:push_scope => false</tt> specifies",2],["add_random_sample_to","NewRelic::Agent::TransactionSampler","classes/NewRelic/Agent/TransactionSampler.html#M000554","(result)","Every 1/n harvests, adds the most recent sample to the harvest array if it exists. Makes sure that the",2],["add_request_parameters","NewRelic::Agent","classes/NewRelic/Agent.html#M000591","(params)","Alias for #add_custom_parameters",2],["add_sampler","NewRelic::Agent::StatsEngine::Samplers","classes/NewRelic/Agent/StatsEngine/Samplers.html#M000475","(sampler)","Add an instance of Sampler to be invoked about every 10 seconds on a background thread. ",2],["add_sampler_to","NewRelic::Agent::StatsEngine::Samplers","classes/NewRelic/Agent/StatsEngine/Samplers.html#M000473","(sampler_array, sampler)","",2],["add_samples_to","NewRelic::Agent::TransactionSampler","classes/NewRelic/Agent/TransactionSampler.html#M000556","(result, slow_threshold)","Returns an array of slow samples, with either one or two elements - one element unless random sampling",2],["add_segments","NewRelic::TransactionSample::SummarySegment","classes/NewRelic/TransactionSample/SummarySegment.html#M000904","(segments)","",2],["add_to_error_queue","NewRelic::Agent::ErrorCollector::NoticeError","classes/NewRelic/Agent/ErrorCollector/NoticeError.html#M000156","(noticed_error)","Synchronizes adding an error to the error queue, and checks if the error queue is too long - if so, we",2],["add_transaction_tracer","NewRelic::Agent::Instrumentation::ControllerInstrumentation::ClassMethods","classes/NewRelic/Agent/Instrumentation/ControllerInstrumentation/ClassMethods.html#M000184","(method, options={})","Add transaction tracing to the given method.  This will treat the given method as a main entrypoint for",2],["after_fork","NewRelic::Agent","classes/NewRelic/Agent.html#M000569","(options={})","Register this method as a callback for processes that fork jobs. If the master/parent connects to the",2],["after_fork","NewRelic::Agent::Agent::InstanceMethods","classes/NewRelic/Agent/Agent/InstanceMethods.html#M000029","(options={})","This method should be called in a forked process after a fork. It assumes the parent process initialized",2],["after_fork","NewRelic::Agent::ShimAgent","classes/NewRelic/Agent/ShimAgent.html#M000392","(*args;)","",2],["after_fork","Object","classes/Object.html#M000198","()","",2],["after_fork_with_newrelic","Object","classes/Object.html#M000196","()","",2],["agent","NewRelic::Agent::Instrumentation::MetricFrame","classes/NewRelic/Agent/Instrumentation/MetricFrame.html#M000228","()","",2],["agent","NewRelic::Agent::Instrumentation::MetricFrame","classes/NewRelic/Agent/Instrumentation/MetricFrame.html#M000226","()","",2],["agent_config","NewRelic::Agent::SqlTrace","classes/NewRelic/Agent/SqlTrace.html#M000449","()","",2],["agent_enabled?","NewRelic::Control::InstanceMethods","classes/NewRelic/Control/InstanceMethods.html#M000686","()","True if dev mode or monitor mode are enabled, and we are running inside a valid dispatcher like mongrel",2],["agent_instance","NewRelic::Agent::MethodTracer::InstanceMethods::TraceExecutionScoped","classes/NewRelic/Agent/MethodTracer/InstanceMethods/TraceExecutionScoped.html#M000327","()","Shorthand to return the NewRelic::Agent.instance ",2],["aggregate","NewRelic::Agent::SqlTrace","classes/NewRelic/Agent/SqlTrace.html#M000444","(slow_sql, path, uri)","",2],["already_started?","NewRelic::Agent::Agent::InstanceMethods::Start","classes/NewRelic/Agent/Agent/InstanceMethods/Start.html#M000041","()","Check whether we have already started, which is an error condition ",2],["any_unrecognized_keys?","NewRelic::Agent::MethodTracer::ClassMethods::AddMethodTracer","classes/NewRelic/Agent/MethodTracer/ClassMethods/AddMethodTracer.html#M000353","(expected, given)","used to verify that the keys passed to NewRelic::Agent::MethodTracer::ClassMethods#add_method_tracer",2],["apdex_f","NewRelic::Agent::Agent::InstanceMethods::Connect","classes/NewRelic/Agent/Agent/InstanceMethods/Connect.html#M000113","()","apdex_f is always 4 times the apdex_t ",2],["apdex_f_threshold?","NewRelic::Agent::Agent::InstanceMethods::Connect","classes/NewRelic/Agent/Agent/InstanceMethods/Connect.html#M000114","()","If the transaction threshold is set to the string 'apdex_f', we use 4 times the apdex_t value to record",2],["apdex_score","NewRelic::Stats","classes/NewRelic/Stats.html#M000873","()","",2],["apdex_t","NewRelic::Control::Configuration","classes/NewRelic/Control/Configuration.html#M000630","()","",2],["api_server","NewRelic::Control::ServerMethods","classes/NewRelic/Control/ServerMethods.html#M000716","()","the server we should contact for api requests, like uploading deployments and the like ",2],["app","NewRelic::Control::InstanceMethods","classes/NewRelic/Control/InstanceMethods.html#M000689","()","Asks the LocalEnvironment instance which framework should be loaded ",2],["app_names","NewRelic::Control::Configuration","classes/NewRelic/Control/Configuration.html#M000645","()","",2],["append_backtrace","NewRelic::Agent::TransactionSampler","classes/NewRelic/Agent/TransactionSampler.html#M000551","(segment, duration)","Appends a backtrace to a segment if that segment took longer than the specified duration ",2],["append_environment_info","NewRelic::Control::Frameworks::Rails","classes/NewRelic/Control/Frameworks/Rails.html#M000666","()","Collect the Rails::Info into an associative array as well as the list of plugins ",2],["append_environment_info","NewRelic::Control::Frameworks::Rails3","classes/NewRelic/Control/Frameworks/Rails3.html#M000672","()","Collect the Rails::Info into an associative array as well as the list of plugins ",2],["append_environment_info","NewRelic::Control::InstanceMethods","classes/NewRelic/Control/InstanceMethods.html#M000693","()","Append framework specific environment information for uploading to the server for change detection. ",2],["append_environment_value","NewRelic::LocalEnvironment","classes/NewRelic/LocalEnvironment.html#M000751","(name, value = nil)","Add the given key/value pair to the app environment settings.  Must pass either a value or a block. ",2],["append_gem_list","NewRelic::LocalEnvironment","classes/NewRelic/LocalEnvironment.html#M000752","()","yields to the block and appends the returned value to the list of gems - this catches errors that might",2],["append_new_message","NewRelic::Agent::TransactionSampler","classes/NewRelic/Agent/TransactionSampler.html#M000550","(old_message, message)","Allows the addition of multiple pieces of metadata to one segment - i.e. traced method calls multiple",2],["append_plugin_list","NewRelic::LocalEnvironment","classes/NewRelic/LocalEnvironment.html#M000753","()","yields to the block and appends the returned value to the list of plugins - this catches errors that",2],["apply","NewRelic::UrlRule","classes/NewRelic/UrlRule.html#M000941","(url)","",2],["as_percentage","NewRelic::Stats","classes/NewRelic/Stats.html#M000851","()","the stat total_call_time is a percent ",2],["as_percentage_of","NewRelic::Stats","classes/NewRelic/Stats.html#M000850","(other_stats)","",2],["assemble_code_header","NewRelic::Agent::MethodTracer::ClassMethods::AddMethodTracer","classes/NewRelic/Agent/MethodTracer/ClassMethods/AddMethodTracer.html#M000362","(method_name, metric_name_code, options)","Returns a code snippet to be eval'd that skips tracing when the agent is not tracing execution. turns",2],["autoinstrument_source","NewRelic::Rack::BrowserMonitoring","classes/NewRelic/Rack/BrowserMonitoring.html#M000809","(response, headers)","",2],["average_call_time","NewRelic::Stats","classes/NewRelic/Stats.html#M000833","()","",2],["average_exclusive_time","NewRelic::Stats","classes/NewRelic/Stats.html#M000834","()","",2],["average_exclusive_time","NewRelic::TransactionAnalysis::SegmentSummary","classes/NewRelic/TransactionAnalysis/SegmentSummary.html#M000868","()","",2],["average_response_time","NewRelic::Stats","classes/NewRelic/Stats.html#M000860","()","Alias for #average_call_time",2],["average_time","NewRelic::TransactionAnalysis::SegmentSummary","classes/NewRelic/TransactionAnalysis/SegmentSummary.html#M000867","()","",2],["average_value","NewRelic::Stats","classes/NewRelic/Stats.html#M000859","()","Alias for #average_call_time",2],["begin_time","NewRelic::StatsBase","classes/NewRelic/StatsBase.html#M000880","()","",2],["begin_time=","NewRelic::StatsBase","classes/NewRelic/StatsBase.html#M000878","(t)","In this class, we explicitly don't track begin and end time here, to save space during cross process",2],["breakdown_data","NewRelic::TransactionAnalysis","classes/NewRelic/TransactionAnalysis.html#M000890","(limit = nil)","return the data that breaks down the performance of the transaction as an array of SegmentSummary objects.",2],["browser_monitoring_app_time","NewRelic::Agent::BrowserMonitoring","classes/NewRelic/Agent/BrowserMonitoring.html#M000024","()","",2],["browser_monitoring_auto_instrument?","NewRelic::Control::Configuration","classes/NewRelic/Control/Configuration.html#M000635","()","whether we should install the NewRelic::Rack::BrowserMonitoring middleware automatically on Rails applications",2],["browser_monitoring_queue_time","NewRelic::Agent::BrowserMonitoring","classes/NewRelic/Agent/BrowserMonitoring.html#M000025","()","",2],["browser_monitoring_start_time","NewRelic::Agent::BrowserMonitoring","classes/NewRelic/Agent/BrowserMonitoring.html#M000015","()","",2],["browser_monitoring_transaction_name","NewRelic::Agent::BrowserMonitoring","classes/NewRelic/Agent/BrowserMonitoring.html#M000014","()","",2],["browser_timing_footer","NewRelic::Agent","classes/NewRelic/Agent.html#M000595","()","Returns a Javascript string which should be injected into the very bottom of the response body ",2],["browser_timing_footer","NewRelic::Agent::BrowserMonitoring","classes/NewRelic/Agent/BrowserMonitoring.html#M000010","()","This method returns a string suitable for inclusion in a page - known as 'manual instrumentation' for",2],["browser_timing_footer","NewRelic::Agent::ShimAgent","classes/NewRelic/Agent/ShimAgent.html#M000400","()","",2],["browser_timing_header","NewRelic::Agent","classes/NewRelic/Agent.html#M000594","()","Returns a Javascript string which should be injected into the very top of the response body ",2],["browser_timing_header","NewRelic::Agent::BrowserMonitoring","classes/NewRelic/Agent/BrowserMonitoring.html#M000009","()","This method returns a string suitable for inclusion in a page - known as 'manual instrumentation' for",2],["browser_timing_header","NewRelic::Agent::ShimAgent","classes/NewRelic/Agent/ShimAgent.html#M000399","()","",2],["build_browser_timing_header","NewRelic::Agent::BeaconConfiguration","classes/NewRelic/Agent/BeaconConfiguration.html#M000004","()","Returns the header string, properly html-safed if needed ",2],["build_load_file_js","NewRelic::Agent::BeaconConfiguration","classes/NewRelic/Agent/BeaconConfiguration.html#M000002","(connect_data)","returns a snippet of text that does not change per-transaction. Is empty when rum is disabled, or we",2],["build_segment_for_transfer","NewRelic::TransactionSample","classes/NewRelic/TransactionSample.html#M000955","(new_sample, source_segment, target_segment, options)","see prepare_to_send for what we do with options This is badly in need of refactoring ",2],["build_segment_with_omissions","NewRelic::TransactionSample","classes/NewRelic/TransactionSample.html#M000947","(new_sample, time_delta, source_segment, target_segment, regex)","This is badly in need of refactoring ",2],["builder","NewRelic::Agent::TransactionSampler","classes/NewRelic/Agent/TransactionSampler.html#M000566","()","The current thread-local transaction sample builder ",2],["bundler_gem_list","NewRelic::Control::InstanceMethods","classes/NewRelic/Control/InstanceMethods.html#M000694","()","Asks bundler to tell us which gemspecs are loaded in the current process ",2],["busy_count","NewRelic::Agent::BusyCalculator","classes/NewRelic/Agent/BusyCalculator.html#M000047","()","this returns the size of the entry point stack, which determines how many transactions are running ",2],["call","NewRelic::Agent::Instrumentation::Rack","classes/NewRelic/Agent/Instrumentation/Rack.html#M000284","(*args)","Alias for #call_with_newrelic",2],["call","NewRelic::Agent::Instrumentation::Rack","classes/NewRelic/Agent/Instrumentation/Rack.html#M000278","(*args)","Alias for #call_with_newrelic",2],["call","NewRelic::ChainedCall","classes/NewRelic/ChainedCall.html#M000068","(sql)","",2],["call","NewRelic::Rack::BrowserMonitoring","classes/NewRelic/Rack/BrowserMonitoring.html#M000807","(env)","method required by Rack interface ",2],["call","NewRelic::Rack::DeveloperMode","classes/NewRelic/Rack/DeveloperMode.html#M000811","(env)","",2],["call_count","NewRelic::Agent::StatsEngine::GCProfiler::RailsBench","classes/NewRelic/Agent/StatsEngine/GCProfiler/RailsBench.html#M000420","()","",2],["call_count","NewRelic::Agent::StatsEngine::GCProfiler::Rubinius","classes/NewRelic/Agent/StatsEngine/GCProfiler/Rubinius.html#M000432","()","",2],["call_count","NewRelic::Agent::StatsEngine::GCProfiler::Ruby19","classes/NewRelic/Agent/StatsEngine/GCProfiler/Ruby19.html#M000426","()","",2],["call_time","NewRelic::Agent::StatsEngine::GCProfiler::RailsBench","classes/NewRelic/Agent/StatsEngine/GCProfiler/RailsBench.html#M000419","()","microseconds spent in GC ",2],["call_time","NewRelic::Agent::StatsEngine::GCProfiler::Rubinius","classes/NewRelic/Agent/StatsEngine/GCProfiler/Rubinius.html#M000429","()","",2],["call_time","NewRelic::Agent::StatsEngine::GCProfiler::Ruby19","classes/NewRelic/Agent/StatsEngine/GCProfiler/Ruby19.html#M000422","()","microseconds spent in GC 1.9 total_time returns seconds.  Don't trust the docs.  It's seconds. ",2],["call_with_newrelic","NewRelic::Agent::Instrumentation::Rack","classes/NewRelic/Agent/Instrumentation/Rack.html#M000272","(*args)","",2],["call_without_newrelic","NewRelic::Agent::Instrumentation::Rack","classes/NewRelic/Agent/Instrumentation/Rack.html#M000279","(*args)","Alias for #call",2],["call_without_newrelic","NewRelic::Agent::Instrumentation::Rack","classes/NewRelic/Agent/Instrumentation/Rack.html#M000283","(*args)","Alias for #call",2],["called_segments","NewRelic::TransactionSample::Segment","classes/NewRelic/TransactionSample/Segment.html#M000910","()","",2],["called_segments=","NewRelic::TransactionSample::Segment","classes/NewRelic/TransactionSample/Segment.html#M000926","(segments)","",2],["calls_per_minute","NewRelic::Stats","classes/NewRelic/Stats.html#M000854","()","",2],["can_run?","NewRelic::Agent::Samplers::MemorySampler::Base","classes/NewRelic/Agent/Samplers/MemorySampler/Base.html#M000371","()","",2],["capture","NewRelic::Agent::StatsEngine::GCProfiler","classes/NewRelic/Agent/StatsEngine/GCProfiler.html#M000403","()","",2],["capture","NewRelic::Agent::StatsEngine::GCProfiler::Profiler","classes/NewRelic/Agent/StatsEngine/GCProfiler/Profiler.html#M000405","()","",2],["capture_params","NewRelic::Control::Configuration","classes/NewRelic/Control/Configuration.html#M000632","()","",2],["capture_segment_trace","NewRelic::Agent::TransactionSampler","classes/NewRelic/Agent/TransactionSampler.html#M000533","()","in developer mode, capture the stack trace with the segment. this is cpu and memory expensive and therefore",2],["catch_errors","NewRelic::Agent::Agent::InstanceMethods::StartWorkerThread","classes/NewRelic/Agent/Agent/InstanceMethods/StartWorkerThread.html#M000077","()","a wrapper method to handle all the errors that can happen in the connection and worker thread system.",2],["cert_file_path","NewRelic::Control::ServerMethods","classes/NewRelic/Control/ServerMethods.html#M000721","()","The path to the certificate file used to verify the SSL connection if verify_peer is enabled ",2],["check_config_and_start_agent","NewRelic::Agent::Agent::InstanceMethods::Start","classes/NewRelic/Agent/Agent/InstanceMethods/Start.html#M000063","()","Sanity-check the agent configuration and start the agent, setting up the worker thread and the exit handler",2],["check_for_alternate_queue_length","NewRelic::Agent::Instrumentation::QueueTime","classes/NewRelic/Agent/Instrumentation/QueueTime.html#M000269","(env)","",2],["check_for_exception","NewRelic::Agent::Agent::InstanceMethods","classes/NewRelic/Agent/Agent/InstanceMethods.html#M000164","(response)","unmarshals the response and raises it if it is an exception, so we can handle it in nonlocally ",2],["check_for_fastcgi","NewRelic::LocalEnvironment","classes/NewRelic/LocalEnvironment.html#M000796","()","",2],["check_for_glassfish","NewRelic::LocalEnvironment","classes/NewRelic/LocalEnvironment.html#M000787","()","",2],["check_for_heroku_queue_length","NewRelic::Agent::Instrumentation::QueueTime","classes/NewRelic/Agent/Instrumentation/QueueTime.html#M000270","(env)","",2],["check_for_illegal_keys!","NewRelic::Agent::MethodTracer::ClassMethods::AddMethodTracer","classes/NewRelic/Agent/MethodTracer/ClassMethods/AddMethodTracer.html#M000354","(options)","raises an error when the NewRelic::Agent::MethodTracer::ClassMethods#add_method_tracer method is called",2],["check_for_litespeed","NewRelic::LocalEnvironment","classes/NewRelic/LocalEnvironment.html#M000801","()","",2],["check_for_mongrel","NewRelic::LocalEnvironment","classes/NewRelic/LocalEnvironment.html#M000797","()","this case covers starting by mongrel_rails ",2],["check_for_passenger","NewRelic::LocalEnvironment","classes/NewRelic/LocalEnvironment.html#M000802","()","",2],["check_for_push_scope_and_metric","NewRelic::Agent::MethodTracer::ClassMethods::AddMethodTracer","classes/NewRelic/Agent/MethodTracer/ClassMethods/AddMethodTracer.html#M000356","(options)","validity checking - add_method_tracer must receive either push scope or metric, or else it would record",2],["check_for_sinatra","NewRelic::LocalEnvironment","classes/NewRelic/LocalEnvironment.html#M000799","()","",2],["check_for_thin","NewRelic::LocalEnvironment","classes/NewRelic/LocalEnvironment.html#M000800","()","",2],["check_for_torquebox","NewRelic::LocalEnvironment","classes/NewRelic/LocalEnvironment.html#M000786","()","",2],["check_for_trinidad","NewRelic::LocalEnvironment","classes/NewRelic/LocalEnvironment.html#M000789","()","",2],["check_for_unicorn","NewRelic::LocalEnvironment","classes/NewRelic/LocalEnvironment.html#M000798","()","",2],["check_for_webrick","NewRelic::LocalEnvironment","classes/NewRelic/LocalEnvironment.html#M000791","()","",2],["check_post_size","NewRelic::Agent::Agent::InstanceMethods","classes/NewRelic/Agent/Agent/InstanceMethods.html#M000159","(post_string)","Raises a PostTooBigException if the post_string is longer than the limit configured in the control object",2],["check_rails_version","NewRelic::LocalEnvironment","classes/NewRelic/LocalEnvironment.html#M000781","()","",2],["check_server_connection=","NewRelic::Agent::Instrumentation::MetricFrame","classes/NewRelic/Agent/Instrumentation/MetricFrame.html#M000222","(value)","",2],["check_sql_sampler_status","NewRelic::Agent::Agent::InstanceMethods::StartWorkerThread","classes/NewRelic/Agent/Agent/InstanceMethods/StartWorkerThread.html#M000070","()","",2],["check_transaction_sampler_status","NewRelic::Agent::Agent::InstanceMethods::StartWorkerThread","classes/NewRelic/Agent/Agent/InstanceMethods/StartWorkerThread.html#M000069","()","disable transaction sampling if disabled by the server and we're not in dev mode ",2],["checked_calculation","NewRelic::Stats","classes/NewRelic/Stats.html#M000832","(numerator, denominator)","makes sure we aren't dividing by zero ",2],["clamp_number_tts","NewRelic::Agent::TransactionSampler","classes/NewRelic/Agent/TransactionSampler.html#M000558","(tts, limit)","JON - THIS CODE NEEDS A UNIT TEST ",2],["clamp_to_positive","NewRelic::Agent::BrowserMonitoring","classes/NewRelic/Agent/BrowserMonitoring.html#M000023","(value)","",2],["clear","NewRelic::Agent::StatsEngine::MetricStats::SynchronizedHash","classes/NewRelic/Agent/StatsEngine/MetricStats/SynchronizedHash.html#M000447","(*args)","",2],["clear","NewRelic::Agent::TransactionInfo","classes/NewRelic/Agent/TransactionInfo.html#M000501","()","",2],["clear_builder","NewRelic::Agent::TransactionSampler","classes/NewRelic/Agent/TransactionSampler.html#M000567","()","Sets the thread local variable storing the transaction sample builder to nil to clear it ",2],["clear_stats","NewRelic::Agent::StatsEngine::MetricStats","classes/NewRelic/Agent/StatsEngine/MetricStats.html#M000469","()","Remove all stats.  For test code only. ",2],["clear_thread_metric_frame!","NewRelic::Agent::Instrumentation::MetricFrame::Pop","classes/NewRelic/Agent/Instrumentation/MetricFrame/Pop.html#M000208","()","",2],["clear_transaction_data","NewRelic::Agent::SqlSampler","classes/NewRelic/Agent/SqlSampler.html#M000424","()","",2],["clone_and_reset_stats","NewRelic::Agent::StatsEngine::MetricStats::Harvest","classes/NewRelic/Agent/StatsEngine/MetricStats/Harvest.html#M000464","(metric_spec, stats)","",2],["close_connections","NewRelic::Agent::Database","classes/NewRelic/Agent/Database.html#M000083","()","",2],["close_connections","NewRelic::Agent::Database::ConnectionManager","classes/NewRelic/Agent/Database/ConnectionManager.html#M000105","()","Closes all the connections in the internal connection cache ",2],["code_to_eval","NewRelic::Agent::MethodTracer::ClassMethods::AddMethodTracer","classes/NewRelic/Agent/MethodTracer/ClassMethods/AddMethodTracer.html#M000365","(method_name, metric_name_code, options)","Decides which code snippet we should be eval'ing in this context, based on the options. ",2],["coerce_to_metric_spec","NewRelic::Agent::StatsEngine::MetricStats::Harvest","classes/NewRelic/Agent/StatsEngine/MetricStats/Harvest.html#M000463","(metric_spec)","",2],["collector","NewRelic::Agent::Agent::InstanceMethods","classes/NewRelic/Agent/Agent/InstanceMethods.html#M000066","()","",2],["command","NewRelic::Command::Deployments","classes/NewRelic/Command/Deployments.html#M000602","()","",2],["command","NewRelic::Command::Install","classes/NewRelic/Command/Install.html#M000606","()","",2],["compare","NewRelic::VersionNumber","classes/NewRelic/VersionNumber.html#M000957","(parts1, parts2)","",2],["compress_data","NewRelic::Agent::Agent::InstanceMethods","classes/NewRelic/Agent/Agent/InstanceMethods.html#M000157","(object)","This method handles the compression of the request body that we are going to send to the server We currently",2],["config","NewRelic::Agent::SqlSampler","classes/NewRelic/Agent/SqlSampler.html#M000409","()","",2],["config","NewRelic::Agent::SqlSampler","classes/NewRelic/Agent/SqlSampler.html#M000410","()","",2],["config","NewRelic::Agent::TransactionSampler","classes/NewRelic/Agent/TransactionSampler.html#M000521","()","",2],["config_file","NewRelic::Control::Frameworks::Ruby","classes/NewRelic/Control/Frameworks/Ruby.html#M000678","()","Check a sequence of file locations for newrelic.yml ",2],["config_file","NewRelic::Control::InstanceMethods","classes/NewRelic/Control/InstanceMethods.html#M000695","()","path to the config file, defaults to the \"#{root}/config/newrelic.yml\" ",2],["config_transaction_tracer","NewRelic::Agent::Agent::InstanceMethods::Connect","classes/NewRelic/Agent/Agent/InstanceMethods/Connect.html#M000108","()","this entire method should be done on the transaction sampler object, rather than here. We should pass",2],["configure!","NewRelic::Agent::SqlSampler","classes/NewRelic/Agent/SqlSampler.html#M000406","()","",2],["configure!","NewRelic::Agent::TransactionSampler","classes/NewRelic/Agent/TransactionSampler.html#M000517","()","",2],["configure_error_collector!","NewRelic::Agent::Agent::InstanceMethods::Connect","classes/NewRelic/Agent/Agent/InstanceMethods/Connect.html#M000104","(server_enabled)","Configures the error collector if the server says that we are allowed to send errors. Pretty simple,",2],["configure_transaction_tracer!","NewRelic::Agent::Agent::InstanceMethods::Connect","classes/NewRelic/Agent/Agent/InstanceMethods/Connect.html#M000111","(server_enabled, sample_rate)","Enables or disables the transaction tracer and sets its options based on the options provided to the",2],["connect","NewRelic::Agent::Agent::InstanceMethods","classes/NewRelic/Agent/Agent/InstanceMethods.html#M000124","(options)","Connect to the server and validate the license.  If successful, @connected has true when finished.  If",2],["connect_in_foreground","NewRelic::Agent::Agent::InstanceMethods::Start","classes/NewRelic/Agent/Agent/InstanceMethods/Start.html#M000046","()","Connecting in the foreground blocks further startup of the agent until we have a connection - useful",2],["connect_settings","NewRelic::Agent::Agent::InstanceMethods::Connect","classes/NewRelic/Agent/Agent/InstanceMethods/Connect.html#M000101","()","Initializes the hash of settings that we send to the server. Returns a literal hash containing the options",2],["connect_to_server","NewRelic::Agent::Agent::InstanceMethods::Connect","classes/NewRelic/Agent/Agent/InstanceMethods/Connect.html#M000103","()","Does some simple logging to make sure that our seed and token for verification are correct, then returns",2],["connected?","NewRelic::Agent::Agent::InstanceMethods","classes/NewRelic/Agent/Agent/InstanceMethods.html#M000031","()","Return nil if not yet connected, true if successfully started and false if we failed to start. ",2],["consistent_hash","NewRelic::Agent::SqlTrace","classes/NewRelic/Agent/SqlTrace.html#M000458","(string)","",2],["content","NewRelic::Command::Install","classes/NewRelic/Command/Install.html#M000609","()","",2],["content_tag","NewRelic::Rack::DeveloperMode","classes/NewRelic/Rack/DeveloperMode.html#M000821","(tag, contents, opts={})","",2],["control","NewRelic::Agent::Agent::InstanceMethods","classes/NewRelic/Agent/Agent/InstanceMethods.html#M000085","()","A shorthand for NewRelic::Control.instance ",2],["control","NewRelic::Agent::ErrorCollector","classes/NewRelic/Agent/ErrorCollector.html#M000125","()","Helper method to get the NewRelic::Control.instance ",2],["convert_from_microseconds","NewRelic::Agent::Instrumentation::QueueTime","classes/NewRelic/Agent/Instrumentation/QueueTime.html#M000296","(int)","convert a time from the header value (time in microseconds) into a ruby time object ",2],["convert_to_ip_address","NewRelic::Control::ServerMethods","classes/NewRelic/Control/ServerMethods.html#M000719","(host)","Check to see if we need to look up the IP address If it's an IP address already, we pass it through.",2],["convert_to_microseconds","NewRelic::Agent::Instrumentation::QueueTime","classes/NewRelic/Agent/Instrumentation/QueueTime.html#M000295","(time)","convert a time to the value provided by the header, for convenience ",2],["convert_to_name_time_pair","NewRelic::Agent::Instrumentation::QueueTime","classes/NewRelic/Agent/Instrumentation/QueueTime.html#M000275","(name, time)","",2],["correct_license_length","NewRelic::Agent::Agent::InstanceMethods::Start","classes/NewRelic/Agent/Agent/InstanceMethods/Start.html#M000061","()","A license key is an arbitrary 40 character string, usually looks something like a SHA1 hash ",2],["count_segments","NewRelic::TransactionSample","classes/NewRelic/TransactionSample.html#M000928","()","",2],["count_segments","NewRelic::TransactionSample::Segment","classes/NewRelic/TransactionSample/Segment.html#M000913","()","",2],["cpu_burn","NewRelic::Agent::Instrumentation::MetricFrame::Pop","classes/NewRelic/Agent/Instrumentation/MetricFrame/Pop.html#M000216","()","",2],["create_and_run_worker_loop","NewRelic::Agent::Agent::InstanceMethods::StartWorkerThread","classes/NewRelic/Agent/Agent/InstanceMethods/StartWorkerThread.html#M000072","()","Creates the worker loop and loads it with the instructions it should run every @report_period seconds",2],["create_pid_file","NewRelic::DataSerialization::ClassMethods","classes/NewRelic/DataSerialization/ClassMethods.html#M000743","()","",2],["create_segment","NewRelic::TransactionSample","classes/NewRelic/TransactionSample.html#M000935","(relative_timestamp, metric_name, segment_id = nil)","",2],["create_transaction_data","NewRelic::Agent::SqlSampler","classes/NewRelic/Agent/SqlSampler.html#M000418","()","",2],["current","NewRelic::Agent::Instrumentation::MetricFrame","classes/NewRelic/Agent/Instrumentation/MetricFrame.html#M000223","(create_if_empty=nil)","Return the currently active metric frame, or nil.  Call with +true+ to create a new metric frame if one",2],["current_metric","NewRelic::Agent::Instrumentation::MetricFrame","classes/NewRelic/Agent/Instrumentation/MetricFrame.html#M000238","()","",2],["current_metric_frame","NewRelic::Agent::BrowserMonitoring","classes/NewRelic/Agent/BrowserMonitoring.html#M000017","()","",2],["current_sample_id","NewRelic::Agent::TransactionSampler","classes/NewRelic/Agent/TransactionSampler.html#M000522","()","Returns the current sample id, delegated from `builder` ",2],["current_stack_metric","NewRelic::Agent::Instrumentation::MetricFrame::Pop","classes/NewRelic/Agent/Instrumentation/MetricFrame/Pop.html#M000221","()","",2],["custom_parameters","NewRelic::Agent::Instrumentation::MetricFrame","classes/NewRelic/Agent/Instrumentation/MetricFrame.html#M000251","()","",2],["custom_parameters","NewRelic::Agent::Instrumentation::MetricFrame","classes/NewRelic/Agent/Instrumentation/MetricFrame.html#M000244","()","",2],["custom_params_from_opts","NewRelic::Agent::ErrorCollector::NoticeError","classes/NewRelic/Agent/ErrorCollector/NoticeError.html#M000142","(options)","If anything else is left over, we treat it like a custom param ",2],["database_metric_name","NewRelic::Agent::Instrumentation::MetricFrame","classes/NewRelic/Agent/Instrumentation/MetricFrame.html#M000224","()","This is the name of the model currently assigned to database measurements, overriding the default. ",2],["database_time","NewRelic::TransactionAnalysis","classes/NewRelic/TransactionAnalysis.html#M000888","()","",2],["decompress_response","NewRelic::Agent::Agent::InstanceMethods","classes/NewRelic/Agent/Agent/InstanceMethods.html#M000163","(response)","Decompresses the response from the server, if it is gzip encoded, otherwise returns it verbatim ",2],["default_metric_name_code","NewRelic::Agent::MethodTracer::ClassMethods::AddMethodTracer","classes/NewRelic/Agent/MethodTracer/ClassMethods/AddMethodTracer.html#M000358","(method_name)","Default to the class where the method is defined. Example: Foo.default_metric_name_code('bar') #=> \"Custom/#{Foo.name}/bar\"",2],["default_port","NewRelic::LocalEnvironment","classes/NewRelic/LocalEnvironment.html#M000803","()","",2],["default_sql_obfuscator","NewRelic::Agent::Database::Obfuscator","classes/NewRelic/Agent/Database/Obfuscator.html#M000112","(sql)","",2],["deferred_work!","NewRelic::Agent::Agent::InstanceMethods::StartWorkerThread","classes/NewRelic/Agent/Agent/InstanceMethods/StartWorkerThread.html#M000078","(connection_options)","This is the method that is run in a new thread in order to background the harvesting and sending of data",2],["delete","NewRelic::Agent::StatsEngine::MetricStats::SynchronizedHash","classes/NewRelic/Agent/StatsEngine/MetricStats/SynchronizedHash.html#M000452","(*args)","",2],["delete_if","NewRelic::Agent::StatsEngine::MetricStats::SynchronizedHash","classes/NewRelic/Agent/StatsEngine/MetricStats/SynchronizedHash.html#M000453","(*args)","",2],["detail_segments=","NewRelic::TransactionSample::CompositeSegment","classes/NewRelic/TransactionSample/CompositeSegment.html#M000899","(segments)","",2],["determine_home_directory","NewRelic::Agent::Agent::InstanceMethods","classes/NewRelic/Agent/Agent/InstanceMethods.html#M000132","()","Delegates to the control class to determine the root directory of this project ",2],["determine_host","NewRelic::Agent::Agent::InstanceMethods","classes/NewRelic/Agent/Agent/InstanceMethods.html#M000128","()","Who am I? Well, this method can tell you your hostname. ",2],["developer_mode?","NewRelic::Control::Configuration","classes/NewRelic/Control/Configuration.html#M000634","()","True if we are capturing data and displaying in /newrelic ",2],["disable","NewRelic::Agent::SqlSampler","classes/NewRelic/Agent/SqlSampler.html#M000414","()","Disable the sql sampler - this also deregisters it with the statistics engine. ",2],["disable","NewRelic::Agent::TransactionSampler","classes/NewRelic/Agent/TransactionSampler.html#M000525","()","Disable the transaction sampler - this also deregisters it with the statistics engine. ",2],["disable_all_tracing","NewRelic::Agent","classes/NewRelic/Agent.html#M000581","()","Yield to the block without collecting any metrics or traces in any of the subsequent calls.  If executed",2],["disable_backtrace_cleanup?","NewRelic::Control::Configuration","classes/NewRelic/Control/Configuration.html#M000655","()","",2],["disable_serialization=","NewRelic::Control::Configuration","classes/NewRelic/Control/Configuration.html#M000638","(b)","",2],["disable_serialization?","NewRelic::Control::Configuration","classes/NewRelic/Control/Configuration.html#M000637","()","",2],["disable_sql_recording","NewRelic::Agent","classes/NewRelic/Agent.html#M000577","()","This method sets the state of sql recording in the transaction sampler feature. Within the given block,",2],["disable_transaction_tracing","NewRelic::Agent","classes/NewRelic/Agent.html#M000578","()","This method disables the recording of transaction traces in the given block.  See also #disable_all_tracing",2],["disabled?","NewRelic::Agent::Agent::InstanceMethods::Start","classes/NewRelic/Agent/Agent/InstanceMethods/Start.html#M000042","()","The agent is disabled when it is not force enabled by the 'agent_enabled' option (e.g. in a manual start),",2],["disabled?","NewRelic::Agent::ErrorCollector::NoticeError","classes/NewRelic/Agent/ErrorCollector/NoticeError.html#M000129","()","Whether the error collector is disabled or not ",2],["disconnect","NewRelic::Agent::Agent::InstanceMethods::Connect","classes/NewRelic/Agent/Agent/InstanceMethods/Connect.html#M000086","()","Disconnect just sets connected to false, which prevents the agent from trying to connect again ",2],["discover_dispatcher","NewRelic::LocalEnvironment","classes/NewRelic/LocalEnvironment.html#M000778","()","Although you can override the framework with NEWRELIC_DISPATCHER this is not advisable since it implies",2],["discover_framework","NewRelic::LocalEnvironment","classes/NewRelic/LocalEnvironment.html#M000779","()","",2],["dispatcher","NewRelic::Control::Configuration","classes/NewRelic/Control/Configuration.html#M000644","()","",2],["dispatcher_finish","NewRelic::Agent::BusyCalculator","classes/NewRelic/Agent/BusyCalculator.html#M000043","(end_time = Time.now)","called when a transaction finishes, to add time to the instance variable accumulator. this is harvested",2],["dispatcher_instance_id","NewRelic::Control::Configuration","classes/NewRelic/Control/Configuration.html#M000643","()","",2],["dispatcher_instance_id","NewRelic::LocalEnvironment","classes/NewRelic/LocalEnvironment.html#M000754","()","An instance id pulled from either @dispatcher_instance_id or by splitting out the first part of the running",2],["dispatcher_start","NewRelic::Agent::BusyCalculator","classes/NewRelic/Agent/BusyCalculator.html#M000038","(time)","sets up busy calculations based on the start and end of transactions - used for a rough estimate of what",2],["do_not_trace?","NewRelic::Agent::Instrumentation::ControllerInstrumentation","classes/NewRelic/Agent/Instrumentation/ControllerInstrumentation.html#M000192","()","overrideable method to determine whether to trace an action or not - you may override this in your controller",2],["dump","NewRelic::DataSerialization::ClassMethods","classes/NewRelic/DataSerialization/ClassMethods.html#M000736","(object)","",2],["duration","NewRelic::Agent::TransactionInfo","classes/NewRelic/Agent/TransactionInfo.html#M000498","()","",2],["duration","NewRelic::Stats","classes/NewRelic/Stats.html#M000852","()","",2],["duration","NewRelic::TransactionSample","classes/NewRelic/TransactionSample.html#M000936","()","",2],["duration","NewRelic::TransactionSample::Segment","classes/NewRelic/TransactionSample/Segment.html#M000911","()","return the total duration of this segment ",2],["each","NewRelic::LanguageSupport::SynchronizedHash","classes/NewRelic/LanguageSupport/SynchronizedHash.html#M000747","(*args, &block)","",2],["each_segment","NewRelic::TransactionSample","classes/NewRelic/TransactionSample.html#M000937","(&block)","Iterates recursively over each segment in the entire transaction sample tree ",2],["each_segment","NewRelic::TransactionSample::Segment","classes/NewRelic/TransactionSample/Segment.html#M000919","(&block)","call the provided block for this segment and each of the called segments ",2],["each_segment_with_nest_tracking","NewRelic::TransactionSample","classes/NewRelic/TransactionSample.html#M000938","(&block)","Iterates recursively over each segment in the entire transaction sample tree while keeping track of nested",2],["each_segment_with_nest_tracking","NewRelic::TransactionSample::Segment","classes/NewRelic/TransactionSample/Segment.html#M000920","(&block)","call the provided block for this segment and each of the called segments while keeping track of nested",2],["enable","NewRelic::Agent::SqlSampler","classes/NewRelic/Agent/SqlSampler.html#M000411","()","Enable the sql sampler - this also registers it with the statistics engine. ",2],["enable","NewRelic::Agent::TransactionSampler","classes/NewRelic/Agent/TransactionSampler.html#M000524","()","Enable the transaction sampler - this also registers it with the statistics engine. ",2],["enable_random_samples!","NewRelic::Agent::Agent::InstanceMethods::Connect","classes/NewRelic/Agent/Agent/InstanceMethods/Connect.html#M000107","(sample_rate)","Random sampling is enabled based on a sample rate, which is the n in \"every 1/n transactions is added",2],["enabled?","NewRelic::Agent::SqlSampler","classes/NewRelic/Agent/SqlSampler.html#M000415","()","",2],["enabled?","NewRelic::Agent::StatsEngine::GCProfiler::RailsBench","classes/NewRelic/Agent/StatsEngine/GCProfiler/RailsBench.html#M000413","()","",2],["enabled?","NewRelic::Agent::StatsEngine::GCProfiler::Rubinius","classes/NewRelic/Agent/StatsEngine/GCProfiler/Rubinius.html#M000428","()","",2],["enabled?","NewRelic::Agent::StatsEngine::GCProfiler::Ruby19","classes/NewRelic/Agent/StatsEngine/GCProfiler/Ruby19.html#M000421","()","",2],["enabled?","NewRelic::Agent::TransactionSampler","classes/NewRelic/Agent/TransactionSampler.html#M000526","()","",2],["end_time","NewRelic::StatsBase","classes/NewRelic/StatsBase.html#M000881","()","",2],["end_time=","NewRelic::StatsBase","classes/NewRelic/StatsBase.html#M000879","(t)","",2],["end_trace","NewRelic::TransactionSample::Segment","classes/NewRelic/TransactionSample/Segment.html#M000901","(timestamp)","sets the final timestamp on a segment to indicate the exit point of the segment ",2],["end_transaction","NewRelic::Agent::Agent::InstanceMethods","classes/NewRelic/Agent/Agent/InstanceMethods.html#M000034","()","Tells the statistics engine we are ending a transaction ",2],["end_transaction","NewRelic::Agent::StatsEngine::Transactions","classes/NewRelic/Agent/StatsEngine/Transactions.html#M000491","()","Try to clean up gracefully, otherwise we leave things hanging around on thread locals. If it looks like",2],["end_transaction!","NewRelic::Agent::Instrumentation::MetricFrame::Pop","classes/NewRelic/Agent/Instrumentation/MetricFrame/Pop.html#M000217","()","",2],["ensure_segment_count_set","NewRelic::TransactionSample","classes/NewRelic/TransactionSample.html#M000930","(count)","makes sure that the parameter cache for segment count is set to the correct value ",2],["env","NewRelic::Control::Frameworks::Merb","classes/NewRelic/Control/Frameworks/Merb.html#M000623","()","",2],["env","NewRelic::Control::Frameworks::Rails","classes/NewRelic/Control/Frameworks/Rails.html#M000646","()","",2],["env","NewRelic::Control::Frameworks::Rails3","classes/NewRelic/Control/Frameworks/Rails3.html#M000664","()","",2],["env","NewRelic::Control::Frameworks::Ruby","classes/NewRelic/Control/Frameworks/Ruby.html#M000676","()","",2],["env","NewRelic::Control::Frameworks::Sinatra","classes/NewRelic/Control/Frameworks/Sinatra.html#M000674","()","",2],["environment_for_connect","NewRelic::Agent::Agent::InstanceMethods::Connect","classes/NewRelic/Agent/Agent/InstanceMethods/Connect.html#M000097","()","Checks whether we should send environment info, and if so, returns the snapshot from the local environment",2],["eql?","NewRelic::MetricData","classes/NewRelic/MetricData.html#M000759","(o)","",2],["eql?","NewRelic::MetricSpec","classes/NewRelic/MetricSpec.html#M000784","(o)","",2],["eql?","NewRelic::VersionNumber","classes/NewRelic/VersionNumber.html#M000956","(other)","",2],["err","NewRelic::Command","classes/NewRelic/Command.html#M000598","(message)","",2],["error_is_ignored?","NewRelic::Agent::ErrorCollector::NoticeError","classes/NewRelic/Agent/ErrorCollector/NoticeError.html#M000135","(error)","an error is ignored if it is nil or if it is filtered ",2],["error_params_from_options","NewRelic::Agent::ErrorCollector::NoticeError","classes/NewRelic/Agent/ErrorCollector/NoticeError.html#M000147","(options)","Merges together many of the options into something that can actually be attached to the error ",2],["exception_info","NewRelic::Agent::ErrorCollector::NoticeError","classes/NewRelic/Agent/ErrorCollector/NoticeError.html#M000152","(exception)","extracts a bunch of information from the exception to include in the noticed error - some may or may",2],["exclusive_duration","NewRelic::TransactionSample::Segment","classes/NewRelic/TransactionSample/Segment.html#M000912","()","return the duration of this segment without including the time in the called segments ",2],["exclusive_time_percentage","NewRelic::Stats","classes/NewRelic/Stats.html#M000858","()","",2],["exclusive_time_percentage","NewRelic::TransactionAnalysis::SegmentSummary","classes/NewRelic/TransactionAnalysis/SegmentSummary.html#M000869","()","",2],["expand_min_max_to","NewRelic::Stats","classes/NewRelic/Stats.html#M000843","(other)","",2],["explain","NewRelic::Agent::SlowSql","classes/NewRelic/Agent/SlowSql.html#M000441","()","",2],["explain_sql","NewRelic::Agent::Database","classes/NewRelic/Agent/Database.html#M000084","(sql, connection_config)","Perform this in the runtime environment of a managed application, to explain the sql statement executed",2],["explain_sql","NewRelic::Rack::DeveloperMode","classes/NewRelic/Rack/DeveloperMode.html#M000815","()","",2],["explain_sql","NewRelic::TransactionSample::Segment","classes/NewRelic/TransactionSample/Segment.html#M000922","()","",2],["explain_statement","NewRelic::Agent::Database","classes/NewRelic/Agent/Database.html#M000088","(statement, config)","",2],["extract_source","NewRelic::Agent::ErrorCollector::NoticeError","classes/NewRelic/Agent/ErrorCollector/NoticeError.html#M000150","(exception)","extracts source from the exception, if the exception supports that method ",2],["extract_stack_trace","NewRelic::Agent::ErrorCollector::NoticeError","classes/NewRelic/Agent/ErrorCollector/NoticeError.html#M000151","(exception)","extracts a stack trace from the exception for debugging purposes ",2],["fetch","NewRelic::Control::Configuration","classes/NewRelic/Control/Configuration.html#M000628","(key, default=nil)","",2],["fetch_from_options","NewRelic::Agent::ErrorCollector::NoticeError","classes/NewRelic/Agent/ErrorCollector/NoticeError.html#M000140","(options, key, default=nil)","acts just like Hash#fetch, but deletes the key from the hash ",2],["file_path","NewRelic::DataSerialization::ClassMethods","classes/NewRelic/DataSerialization/ClassMethods.html#M000744","()","",2],["fill_metric_id_cache","NewRelic::Agent::Agent::InstanceMethods","classes/NewRelic/Agent/Agent/InstanceMethods.html#M000136","(pairs_of_specs_and_ids)","takes an array of arrays of spec and id, adds it into the metric cache so we can save the collector some",2],["filtered_by_error_filter?","NewRelic::Agent::ErrorCollector::NoticeError","classes/NewRelic/Agent/ErrorCollector/NoticeError.html#M000130","(error)","Checks the provided error against the error filter, if there is an error filter ",2],["filtered_error?","NewRelic::Agent::ErrorCollector::NoticeError","classes/NewRelic/Agent/ErrorCollector/NoticeError.html#M000131","(error)","Checks the array of error names and the error filter against the provided error ",2],["find_class_in_object_space","NewRelic::LocalEnvironment","classes/NewRelic/LocalEnvironment.html#M000776","(klass)","Runs through all the objects in ObjectSpace to find the first one that match the provided class ",2],["find_oldest_time","NewRelic::Agent::Instrumentation::QueueTime","classes/NewRelic/Agent/Instrumentation/QueueTime.html#M000289","(matches)","searches for the first server to touch a request ",2],["find_or_create_file_path","NewRelic::Control::LoggingMethods","classes/NewRelic/Control/LoggingMethods.html#M000712","(path_setting)","",2],["find_segment","NewRelic::TransactionSample","classes/NewRelic/TransactionSample.html#M000940","(id)","Searches the tree recursively for the segment with the given id. note that this is an internal id, not",2],["find_segment","NewRelic::TransactionSample::Segment","classes/NewRelic/TransactionSample/Segment.html#M000921","(id)","",2],["finish_setup","NewRelic::Agent::Agent::InstanceMethods::Connect","classes/NewRelic/Agent/Agent/InstanceMethods/Connect.html#M000119","(config_data)","Takes a hash of configuration data returned from the server and uses it to set local variables and to",2],["finish_trace","NewRelic::Agent::TransactionSampleBuilder","classes/NewRelic/Agent/TransactionSampleBuilder.html#M000509","(time)","",2],["flatten","NewRelic::CollectionHelper","classes/NewRelic/CollectionHelper.html#M000583","(object)","Convert any kind of object to a short string. ",2],["footer_js_string","NewRelic::Agent::BrowserMonitoring","classes/NewRelic/Agent/BrowserMonitoring.html#M000026","(config, beacon, license_key, application_id)","",2],["force_persist_sample?","NewRelic::Agent::TransactionInfo","classes/NewRelic/Agent/TransactionInfo.html#M000494","(sample)","",2],["fraction_of","NewRelic::Stats","classes/NewRelic/Stats.html#M000866","(s)","calculate this set of stats to be a percentage fraction of the provided stats, which has an overlapping",2],["framework","NewRelic::Control::InstanceMethods","classes/NewRelic/Control/InstanceMethods.html#M000690","()","Alias for #app",2],["freeze","NewRelic::Agent::TransactionSampleBuilder","classes/NewRelic/Agent/TransactionSampleBuilder.html#M000511","()","",2],["freeze","NewRelic::StatsBase","classes/NewRelic/StatsBase.html#M000876","()","",2],["gather_ar_adapter_info","NewRelic::LocalEnvironment","classes/NewRelic/LocalEnvironment.html#M000770","()","The name of the AR database adapter for the current environment and the current schema version ",2],["gather_architecture_info","NewRelic::LocalEnvironment","classes/NewRelic/LocalEnvironment.html#M000760","()","Grabs the architecture string from either `uname -p` or the env variable PROCESSOR_ARCHITECTURE ",2],["gather_cpu_info","NewRelic::LocalEnvironment","classes/NewRelic/LocalEnvironment.html#M000757","()","See what the number of cpus is, works only on some linux variants ",2],["gather_db_info","NewRelic::LocalEnvironment","classes/NewRelic/LocalEnvironment.html#M000772","()","sensing for which adapter is defined, then appends the relevant config information ",2],["gather_dm_adapter_info","NewRelic::LocalEnvironment","classes/NewRelic/LocalEnvironment.html#M000771","()","Datamapper version ",2],["gather_environment_info","NewRelic::LocalEnvironment","classes/NewRelic/LocalEnvironment.html#M000773","()","Collect base statistics about the environment and record them for comparison and change detection. ",2],["gather_jruby_info","NewRelic::LocalEnvironment","classes/NewRelic/LocalEnvironment.html#M000756","()","like gather_ruby_info but for the special case of JRuby ",2],["gather_os_info","NewRelic::LocalEnvironment","classes/NewRelic/LocalEnvironment.html#M000761","()","gathers OS info from either `uname -v`, `uname -s`, or the OS env variable ",2],["gather_revision_info","NewRelic::LocalEnvironment","classes/NewRelic/LocalEnvironment.html#M000767","()","Looks for a capistrano file indicating the current revision ",2],["gather_ruby_info","NewRelic::LocalEnvironment","classes/NewRelic/LocalEnvironment.html#M000755","()","Interrogates some common ruby constants for useful information about what kind of ruby environment the",2],["gather_system_info","NewRelic::LocalEnvironment","classes/NewRelic/LocalEnvironment.html#M000766","()","Gathers the architecture and cpu info ",2],["generate_footer_js","NewRelic::Agent::BrowserMonitoring","classes/NewRelic/Agent/BrowserMonitoring.html#M000012","(config)","",2],["generate_guid","NewRelic::TransactionSample","classes/NewRelic/TransactionSample.html#M000946","()","",2],["get","NewRelic::Agent::TransactionInfo","classes/NewRelic/Agent/TransactionInfo.html#M000499","()","",2],["get_apdex","NewRelic::Stats","classes/NewRelic/Stats.html#M000872","()","returns s,t,f ",2],["get_connection","NewRelic::Agent::Database","classes/NewRelic/Agent/Database.html#M000082","(config)","",2],["get_connection","NewRelic::Agent::Database::ConnectionManager","classes/NewRelic/Agent/Database/ConnectionManager.html#M000102","(config)","Returns a cached connection for a given ActiveRecord configuration - these are stored or reopened as",2],["get_custom_stats","NewRelic::Agent::StatsEngine::MetricStats","classes/NewRelic/Agent/StatsEngine/MetricStats.html#M000456","(metric_name, stat_class)","This version allows a caller to pass a stat class to use ",2],["get_data_from_file","NewRelic::DataSerialization::ClassMethods","classes/NewRelic/DataSerialization/ClassMethods.html#M000732","(f)","",2],["get_matches","NewRelic::Agent::Instrumentation::QueueTime","classes/NewRelic/Agent/Instrumentation/QueueTime.html#M000274","(string)","",2],["get_matches_from_header","NewRelic::Agent::Instrumentation::QueueTime","classes/NewRelic/Agent/Instrumentation/QueueTime.html#M000273","(header, env)","",2],["get_memory","NewRelic::Agent::Samplers::MemorySampler::JavaHeapSampler","classes/NewRelic/Agent/Samplers/MemorySampler/JavaHeapSampler.html#M000373","()","",2],["get_memory","NewRelic::Agent::Samplers::MemorySampler::ProcStatus","classes/NewRelic/Agent/Samplers/MemorySampler/ProcStatus.html#M000380","()","Returns the amount of resident memory this process is using in MB ",2],["get_memory","NewRelic::Agent::Samplers::MemorySampler::ShellPS","classes/NewRelic/Agent/Samplers/MemorySampler/ShellPS.html#M000377","()","Returns the amount of resident memory this process is using in MB ",2],["get_metric_stats","NewRelic::Agent::MethodTracer::InstanceMethods::TraceExecutionScoped","classes/NewRelic/Agent/MethodTracer/InstanceMethods/TraceExecutionScoped.html#M000337","(metrics, options)","returns an array containing the first metric, and an array of other unscoped statistics we should also",2],["get_retry_period","NewRelic::Agent::Agent::InstanceMethods::Connect","classes/NewRelic/Agent/Agent/InstanceMethods/Connect.html#M000091","()","Retry period is a minute for each failed attempt that we've made. This should probably do some sort of",2],["get_sample","NewRelic::Agent::Samplers::MemorySampler::Base","classes/NewRelic/Agent/Samplers/MemorySampler/Base.html#M000372","()","",2],["get_sample","NewRelic::Rack::DeveloperMode","classes/NewRelic/Rack/DeveloperMode.html#M000828","()","",2],["get_samples","NewRelic::Rack::DeveloperMode","classes/NewRelic/Rack/DeveloperMode.html#M000827","()","",2],["get_segment","NewRelic::Rack::DeveloperMode","classes/NewRelic/Rack/DeveloperMode.html#M000829","()","",2],["get_stats","NewRelic::Agent","classes/NewRelic/Agent.html#M000561","(metric_name, use_scope=false)","Get or create a statistics gatherer that will aggregate numerical data under a metric name. +metric_name+",2],["get_stats","NewRelic::Agent::StatsEngine::MetricStats","classes/NewRelic/Agent/StatsEngine/MetricStats.html#M000459","(metric_name, use_scope = true, scoped_metric_only = false, scope = nil)","If use_scope is true, two chained metrics are created, one with scope and one without If scoped_metric_only",2],["get_stats_hash_from","NewRelic::Agent::StatsEngine::MetricStats::Harvest","classes/NewRelic/Agent/StatsEngine/MetricStats/Harvest.html#M000462","(engine_or_hash)","",2],["get_stats_no_scope","NewRelic::Agent","classes/NewRelic/Agent.html#M000563","(metric_name, use_scope=false)","Alias for #get_stats",2],["get_stats_no_scope","NewRelic::Agent::StatsEngine::MetricStats","classes/NewRelic/Agent/StatsEngine/MetricStats.html#M000455","(metric_name)","a simple accessor for looking up a stat with no scope - returns a new stats object if no stats object",2],["get_stats_scoped","NewRelic::Agent::MethodTracer::InstanceMethods::TraceExecutionScoped","classes/NewRelic/Agent/MethodTracer/InstanceMethods/TraceExecutionScoped.html#M000334","(first_name, scoped_metric_only)","returns a scoped metric stat for the specified name ",2],["get_stats_unscoped","NewRelic::Agent::MethodTracer::InstanceMethods::TraceExecutionScoped","classes/NewRelic/Agent/MethodTracer/InstanceMethods/TraceExecutionScoped.html#M000335","(name)","Shorthand method to get stats from the stat engine ",2],["graceful_disconnect","NewRelic::Agent::Agent::InstanceMethods","classes/NewRelic/Agent/Agent/InstanceMethods.html#M000169","()","This method contacts the server to send remaining data and let the server know that the agent is shutting",2],["guid","NewRelic::Agent::TransactionInfo","classes/NewRelic/Agent/TransactionInfo.html#M000496","()","",2],["guid=","NewRelic::Agent::TransactionInfo","classes/NewRelic/Agent/TransactionInfo.html#M000497","(value)","",2],["handle_empty_path_stack","NewRelic::Agent::Instrumentation::MetricFrame::Pop","classes/NewRelic/Agent/Instrumentation/MetricFrame/Pop.html#M000220","(metric)","",2],["handle_exception_in_explain","NewRelic::Agent::Database","classes/NewRelic/Agent/Database.html#M000098","()","",2],["handle_force_disconnect","NewRelic::Agent::Agent::InstanceMethods::StartWorkerThread","classes/NewRelic/Agent/Agent/InstanceMethods/StartWorkerThread.html#M000074","(error)","when a disconnect is requested, stop the current thread, which is the worker thread that gathers data",2],["handle_force_restart","NewRelic::Agent::Agent::InstanceMethods::StartWorkerThread","classes/NewRelic/Agent/Agent/InstanceMethods/StartWorkerThread.html#M000073","(error)","Handles the case where the server tells us to restart - this clears the data, clears connection attempts,",2],["handle_license_error","NewRelic::Agent::Agent::InstanceMethods::Connect","classes/NewRelic/Agent/Agent/InstanceMethods/Connect.html#M000095","(error)","When the server sends us an error with the license key, we want to tell the user that something went",2],["handle_other_error","NewRelic::Agent::Agent::InstanceMethods::StartWorkerThread","classes/NewRelic/Agent/Agent/InstanceMethods/StartWorkerThread.html#M000076","(error)","Handles an unknown error in the worker thread by logging it and disconnecting the agent, since we are",2],["handle_server_connection_problem","NewRelic::Agent::Agent::InstanceMethods::StartWorkerThread","classes/NewRelic/Agent/Agent/InstanceMethods/StartWorkerThread.html#M000075","(error)","there is a problem with connecting to the server, so we stop trying to connect and shut down the agent",2],["harvest","NewRelic::Agent::SqlSampler","classes/NewRelic/Agent/SqlSampler.html#M000434","()","",2],["harvest","NewRelic::Agent::TransactionSampler","classes/NewRelic/Agent/TransactionSampler.html#M000557","(previous = [], slow_threshold = 2.0)","get the set of collected samples, merging into previous samples, and clear the collected sample list.",2],["harvest_and_send_errors","NewRelic::Agent::Agent::InstanceMethods","classes/NewRelic/Agent/Agent/InstanceMethods.html#M000154","()","Handles getting the errors from the error collector and sending them to the server, and any error cases",2],["harvest_and_send_slowest_sample","NewRelic::Agent::Agent::InstanceMethods","classes/NewRelic/Agent/Agent/InstanceMethods.html#M000148","()","This handles getting the transaction traces and then sending them across the wire.  This includes gathering",2],["harvest_and_send_slowest_sql","NewRelic::Agent::Agent::InstanceMethods","classes/NewRelic/Agent/Agent/InstanceMethods.html#M000145","()","",2],["harvest_and_send_timeslice_data","NewRelic::Agent::Agent::InstanceMethods","classes/NewRelic/Agent/Agent/InstanceMethods.html#M000137","()","note - exceptions are logged in invoke_remote.  If an exception is encountered here, then the metric",2],["harvest_busy","NewRelic::Agent::BusyCalculator","classes/NewRelic/Agent/BusyCalculator.html#M000051","()","Called before uploading to to the server to collect current busy stats. ",2],["harvest_errors","NewRelic::Agent::Agent::InstanceMethods","classes/NewRelic/Agent/Agent/InstanceMethods.html#M000153","()","Gets the collection of unsent errors from the error collector. We pass back in an existing array of errors",2],["harvest_errors","NewRelic::Agent::ErrorCollector","classes/NewRelic/Agent/ErrorCollector.html#M000160","(unsent_errors)","Get the errors currently queued up.  Unsent errors are left over from a previous unsuccessful attempt",2],["harvest_samplers","NewRelic::Agent::StatsEngine::Samplers","classes/NewRelic/Agent/StatsEngine/Samplers.html#M000478","()","",2],["harvest_slow_sql","NewRelic::Agent::SqlSampler","classes/NewRelic/Agent/SqlSampler.html#M000430","(transaction_sql_data)","this should always be called under the @samples_lock ",2],["harvest_timeslice_data","NewRelic::Agent::Agent::InstanceMethods","classes/NewRelic/Agent/Agent/InstanceMethods.html#M000134","(time=Time.now)","calls the busy harvester and collects timeslice data to send later ",2],["harvest_timeslice_data","NewRelic::Agent::StatsEngine::MetricStats","classes/NewRelic/Agent/StatsEngine/MetricStats.html#M000468","(previous_timeslice_data, metric_ids)","Harvest the timeslice data.  First recombine current statss with any previously unsent metrics, clear",2],["harvest_transaction_traces","NewRelic::Agent::Agent::InstanceMethods","classes/NewRelic/Agent/Agent/InstanceMethods.html#M000144","()","Fills the traces array with the harvested transactions from the transaction sampler, subject to the setting",2],["has_correct_license_key?","NewRelic::Agent::Agent::InstanceMethods::Start","classes/NewRelic/Agent/Agent/InstanceMethods/Start.html#M000060","()","A correct license key exists and is of the proper length ",2],["has_license_key?","NewRelic::Agent::Agent::InstanceMethods::Start","classes/NewRelic/Agent/Agent/InstanceMethods/Start.html#M000059","()","Tell the user when the license key is missing so they can fix it by adding it to the file ",2],["has_slow_sql_config?","NewRelic::Control::Configuration","classes/NewRelic/Control/Configuration.html#M000656","()","",2],["hash","NewRelic::MetricData","classes/NewRelic/MetricData.html#M000764","()","",2],["hash","NewRelic::MetricSpec","classes/NewRelic/MetricSpec.html#M000785","()","",2],["hash","NewRelic::VersionNumber","classes/NewRelic/VersionNumber.html#M000954","()","",2],["html_safe_if_needed","NewRelic::Agent::BrowserMonitoring","classes/NewRelic/Agent/BrowserMonitoring.html#M000027","(string)","",2],["http_connection","NewRelic::Control::ServerMethods","classes/NewRelic/Control/ServerMethods.html#M000722","(host = nil)","Return the Net::HTTP with proxy configuration given the NewRelic::Control::Server object. Default is",2],["ignore","NewRelic::Agent::ErrorCollector","classes/NewRelic/Agent/ErrorCollector.html#M000127","(errors)","errors is an array of Exception Class Names ",2],["ignore_apdex?","NewRelic::Agent::Instrumentation::ControllerInstrumentation","classes/NewRelic/Agent/Instrumentation/ControllerInstrumentation.html#M000193","()","overrideable method to determine whether to trace an action for purposes of apdex measurement - you can",2],["ignore_error_filter","NewRelic::Agent","classes/NewRelic/Agent.html#M000586","(&block)","Set a filter to be applied to errors that the Ruby Agent will track.  The block should evalute to the",2],["ignore_error_filter","NewRelic::Agent::ErrorCollector","classes/NewRelic/Agent/ErrorCollector.html#M000126","(&block)","Returns the error filter proc that is used to check if an error should be reported. When given a block,",2],["ignore_transaction","NewRelic::Agent::TransactionSampleBuilder","classes/NewRelic/Agent/TransactionSampleBuilder.html#M000506","()","",2],["ignore_transaction","NewRelic::Agent::TransactionSampler","classes/NewRelic/Agent/TransactionSampler.html#M000545","()","Tells the builder to ignore a transaction, if we are currently creating one. Only causes the sample to",2],["ignored?","NewRelic::Agent::TransactionSampleBuilder","classes/NewRelic/Agent/TransactionSampleBuilder.html#M000505","()","",2],["include_guid?","NewRelic::Agent::TransactionInfo","classes/NewRelic/Agent/TransactionInfo.html#M000495","()","",2],["included","NewRelic::Agent::Instrumentation::ActiveRecord","classes/NewRelic/Agent/Instrumentation/ActiveRecord.html#M000170","(instrumented_class)","",2],["included","NewRelic::Agent::Instrumentation::DataMapperInstrumentation","classes/NewRelic/Agent/Instrumentation/DataMapperInstrumentation.html#M000186","(klass)","",2],["included","NewRelic::LanguageSupport::Control","classes/NewRelic/LanguageSupport/Control.html#M000740","(base)","",2],["included","NewRelic::LanguageSupport::DataSerialization","classes/NewRelic/LanguageSupport/DataSerialization.html#M000737","(base)","",2],["included","NewRelic::LanguageSupport::SynchronizedHash","classes/NewRelic/LanguageSupport/SynchronizedHash.html#M000746","(base)","",2],["increment_count","NewRelic::MethodTraceStats","classes/NewRelic/MethodTraceStats.html#M000891","(value = 1)","increments the call_count by one ",2],["increment_error_count!","NewRelic::Agent::ErrorCollector::NoticeError","classes/NewRelic/Agent/ErrorCollector/NoticeError.html#M000138","()","Increments a statistic that tracks total error rate ",2],["index","NewRelic::Rack::DeveloperMode","classes/NewRelic/Rack/DeveloperMode.html#M000813","()","",2],["info","NewRelic::Command","classes/NewRelic/Command.html#M000597","(message)","",2],["inherited","NewRelic::Agent::Sampler","classes/NewRelic/Agent/Sampler.html#M000311","(subclass)","",2],["inherited","NewRelic::Command","classes/NewRelic/Command.html#M000600","(subclass)","",2],["init","NewRelic::Agent::StatsEngine::GCProfiler","classes/NewRelic/Agent/StatsEngine/GCProfiler.html#M000401","()","",2],["init_config","NewRelic::Control::Frameworks::External","classes/NewRelic/Control/Frameworks/External.html#M000618","(options={})","",2],["init_config","NewRelic::Control::Frameworks::Merb","classes/NewRelic/Control/Frameworks/Merb.html#M000629","(options={})","",2],["init_config","NewRelic::Control::Frameworks::Rails","classes/NewRelic/Control/Frameworks/Rails.html#M000652","(options={})","In versions of Rails prior to 2.0, the rails config was only available to the init.rb, so it had to be",2],["init_config","NewRelic::Control::Frameworks::Ruby","classes/NewRelic/Control/Frameworks/Ruby.html#M000680","(options={})","",2],["init_config","NewRelic::Control::Frameworks::Sinatra","classes/NewRelic/Control/Frameworks/Sinatra.html#M000675","(options={})","",2],["init_plugin","NewRelic::Control::InstanceMethods","classes/NewRelic/Control/InstanceMethods.html#M000681","(options={})","Initialize the plugin/gem and start the agent.  This does the necessary configuration based on the framework",2],["initialize_with_new_relic","Object","classes/Object.html#M000723","(*args)","",2],["insert_instrumentation","Object","classes/Object.html#M000177","()","",2],["inspect","NewRelic::MethodTraceStats","classes/NewRelic/MethodTraceStats.html#M000892","()","outputs a human-readable version of the MethodTraceStats object ",2],["inspect","NewRelic::MetricData","classes/NewRelic/MetricData.html#M000769","()","",2],["inspect","NewRelic::MetricSpec","classes/NewRelic/MetricSpec.html#M000793","()","",2],["install_browser_monitoring","NewRelic::Control::Frameworks::Rails","classes/NewRelic/Control/Frameworks/Rails.html#M000657","(config)","",2],["install_developer_mode","NewRelic::Control::Frameworks::Rails","classes/NewRelic/Control/Frameworks/Rails.html#M000658","(rails_config)","",2],["install_exit_handler","NewRelic::Agent::Agent::InstanceMethods::Start","classes/NewRelic/Agent/Agent/InstanceMethods/Start.html#M000052","()","Installs our exit handler, which exploits the weird behavior of at_exit blocks to make sure it runs last,",2],["install_instrumentation","NewRelic::Control::Instrumentation","classes/NewRelic/Control/Instrumentation.html#M000687","()","Signals the agent that it's time to actually load the instrumentation files. May be overridden by subclasses",2],["install_shim","NewRelic::Control::Frameworks::Rails","classes/NewRelic/Control/Frameworks/Rails.html#M000673","()","",2],["install_shim","NewRelic::Control::Instrumentation","classes/NewRelic/Control/Instrumentation.html#M000683","()","Install stubs to the proper location so the app code will not fail if the agent is not running. ",2],["instance","NewRelic::Agent::Agent::ClassMethods","classes/NewRelic/Agent/Agent/ClassMethods.html#M000011","()","Should only be called by NewRelic::Control - returns a memoized singleton instance of the agent, creating",2],["instance","NewRelic::Agent::ShimAgent","classes/NewRelic/Agent/ShimAgent.html#M000386","()","",2],["instance","NewRelic::Control::ClassMethods","classes/NewRelic/Control/ClassMethods.html#M000611","(create=true)","Access the Control singleton, lazy initialized.  Default will instantiate a new instance or pass false",2],["instance_busy_stats","NewRelic::Agent::BusyCalculator","classes/NewRelic/Agent/BusyCalculator.html#M000054","()","",2],["instrument_methods","NewRelic::Agent::Instrumentation::Memcache","classes/NewRelic/Agent/Instrumentation/Memcache.html#M000201","(the_class, method_names)","",2],["invoke_remote","NewRelic::Agent::Agent::InstanceMethods","classes/NewRelic/Agent/Agent/InstanceMethods.html#M000167","(method, *args)","send a message via post to the actual server. This attempts to automatically compress the data via zlib",2],["is_application_spawner?","NewRelic::Agent::Agent::InstanceMethods","classes/NewRelic/Agent/Agent/InstanceMethods.html#M000133","()","Checks whether this process is a Passenger or Unicorn spawning server - if so, we probably don't intend",2],["is_execution_traced?","NewRelic::Agent","classes/NewRelic/Agent.html#M000582","()","Check to see if we are capturing metrics currently on this thread. ",2],["is_reset?","NewRelic::Stats","classes/NewRelic/Stats.html#M000848","()","",2],["is_select?","NewRelic::Agent::Database","classes/NewRelic/Agent/Database.html#M000099","(statement)","",2],["is_sql_recorded?","NewRelic::Agent","classes/NewRelic/Agent.html#M000585","()","helper method to check the thread local to determine whether sql is being recorded or not ",2],["is_transaction_traced?","NewRelic::Agent","classes/NewRelic/Agent.html#M000584","()","helper method to check the thread local to determine whether the transaction in progress is traced or",2],["is_web_transaction?","NewRelic::Agent::Instrumentation::MetricFrame","classes/NewRelic/Agent/Instrumentation/MetricFrame.html#M000258","(metric)","",2],["javascript_header","NewRelic::Agent::BeaconConfiguration","classes/NewRelic/Agent/BeaconConfiguration.html#M000003","()","returns a copy of the static javascript header, in case people are munging strings somewhere down the",2],["jruby_cpu_burn","NewRelic::Agent::Instrumentation::MetricFrame::Pop","classes/NewRelic/Agent/Instrumentation/MetricFrame/Pop.html#M000214","()","",2],["jruby_rack?","NewRelic::LocalEnvironment","classes/NewRelic/LocalEnvironment.html#M000790","()","",2],["keep_running","NewRelic::Agent::WorkerLoop","classes/NewRelic/Agent/WorkerLoop.html#M000528","()","a simple accessor for @should_run ",2],["license_bytes","NewRelic::Agent::BeaconConfiguration","classes/NewRelic/Agent/BeaconConfiguration.html#M000001","()","returns a memoized version of the bytes in the license key for obscuring transaction names in the javascript",2],["license_key","NewRelic::Control::Configuration","classes/NewRelic/Control/Configuration.html#M000631","()","",2],["load","NewRelic::DataSerialization::ClassMethods","classes/NewRelic/DataSerialization/ClassMethods.html#M000739","(dump)","",2],["load","NewRelic::LanguageSupport::DataSerialization","classes/NewRelic/LanguageSupport/DataSerialization.html#M000738","(*args)","",2],["load_data","NewRelic::Agent","classes/NewRelic/Agent.html#M000573","()","Note that only one transaction trace will be sent even if many are serialized, since the slowest is sent.",2],["load_framework_class","NewRelic::Control::ClassMethods","classes/NewRelic/Control/ClassMethods.html#M000615","(framework)","Loads the specified framework class from the NewRelic::Control::Frameworks module ",2],["load_instrumentation_files","NewRelic::Control::Instrumentation","classes/NewRelic/Control/Instrumentation.html#M000682","(pattern)","Adds a list of files in Dir.glob format (e.g. '/app/foo/**/*_instrumentation.rb') This requires the files",2],["load_newrelic_yml","NewRelic::Control::InstanceMethods","classes/NewRelic/Control/InstanceMethods.html#M000697","(path, binding)","",2],["load_newrelic_yml","NewRelic::LanguageSupport::Control","classes/NewRelic/LanguageSupport/Control.html#M000741","(*args)","",2],["load_samplers","NewRelic::Control::Instrumentation","classes/NewRelic/Control/Instrumentation.html#M000688","()","adds samplers to the stats engine so that they run every minute. This is dynamically recognized by any",2],["load_test_framework","NewRelic::Control::ClassMethods","classes/NewRelic/Control/ClassMethods.html#M000614","()","nb this does not 'load test' the framework, it loads the 'test framework' ",2],["local_env","NewRelic::Agent::Samplers::DelayedJobLockSampler","classes/NewRelic/Agent/Samplers/DelayedJobLockSampler.html#M000346","()","",2],["local_env","NewRelic::Control::ClassMethods","classes/NewRelic/Control/ClassMethods.html#M000612","()","Access the LocalEnvironment singleton, lazy initialized ",2],["lock","NewRelic::Agent::WorkerLoop","classes/NewRelic/Agent/WorkerLoop.html#M000519","()","returns a class-level memoized mutex to make sure we don't run overlapping ",2],["locked_jobs","NewRelic::Agent::Samplers::DelayedJobLockSampler","classes/NewRelic/Agent/Samplers/DelayedJobLockSampler.html#M000349","()","",2],["log","NewRelic::Agent::Agent::InstanceMethods","classes/NewRelic/Agent/Agent/InstanceMethods.html#M000040","()","Shorthand to the NewRelic::Agent.logger method ",2],["log","NewRelic::Agent::ErrorCollector","classes/NewRelic/Agent/ErrorCollector.html#M000161","()","",2],["log","NewRelic::Agent::StatsEngine","classes/NewRelic/Agent/StatsEngine.html#M000482","()","",2],["log","NewRelic::Agent::WorkerLoop","classes/NewRelic/Agent/WorkerLoop.html#M000520","()","a helper to access the NewRelic::Control.instance.log ",2],["log","NewRelic::Control::LoggingMethods","classes/NewRelic/Control/LoggingMethods.html#M000700","()","returns either the log set up with setup_log or else a new logger pointing to standard out, if we're",2],["log!","NewRelic::Control::Frameworks::Rails","classes/NewRelic/Control/Frameworks/Rails.html#M000659","(msg, level=:info)","",2],["log!","NewRelic::Control::Frameworks::Rails3","classes/NewRelic/Control/Frameworks/Rails3.html#M000668","(msg, level=:info)","",2],["log!","NewRelic::Control::LoggingMethods","classes/NewRelic/Control/LoggingMethods.html#M000701","(msg, level=:info)","send the given message to STDOUT so that it shows up in the console.  This should be used for important",2],["log_added_sampler","NewRelic::Agent::StatsEngine::Samplers","classes/NewRelic/Agent/StatsEngine/Samplers.html#M000474","(type, sampler)","",2],["log_app_names","NewRelic::Agent::Agent::InstanceMethods::Start","classes/NewRelic/Agent/Agent/InstanceMethods/Start.html#M000045","()","Logs the configured application names ",2],["log_connection!","NewRelic::Agent::Agent::InstanceMethods::Connect","classes/NewRelic/Agent/Agent/InstanceMethods/Connect.html#M000120","(config_data)","Logs when we connect to the server, for debugging purposes - makes sure we know if an agent has not connected",2],["log_dispatcher","NewRelic::Agent::Agent::InstanceMethods::Start","classes/NewRelic/Agent/Agent/InstanceMethods/Start.html#M000044","()","Logs the dispatcher to the log file to assist with debugging. When no debugger is present, logs this",2],["log_error","NewRelic::Agent::Agent::InstanceMethods::Connect","classes/NewRelic/Agent/Agent/InstanceMethods/Connect.html#M000094","(error)","When we have a problem connecting to the server, we need to tell the user what happened, since this is",2],["log_errors","NewRelic::Agent::MethodTracer::InstanceMethods::TraceExecutionScoped","classes/NewRelic/Agent/MethodTracer/InstanceMethods/TraceExecutionScoped.html#M000341","(code_area, metric)","helper for logging errors to the newrelic_agent.log properly. Logs the error at error level, and includes",2],["log_file_name","NewRelic::Control","classes/NewRelic/Control.html#M000714","()","Retrieves the log file's name from the config file option 'log_file_name', defaulting to 'newrelic_agent.log'",2],["log_file_path","NewRelic::Control::Configuration","classes/NewRelic/Control/Configuration.html#M000653","()","",2],["log_if","NewRelic::Agent::Agent::InstanceMethods::Start","classes/NewRelic/Agent/Agent/InstanceMethods/Start.html#M000056","(boolean, level, message)","A helper method that logs a condition if that condition is true. Mentally cleaner than having every method",2],["log_path","NewRelic::Control::LoggingMethods","classes/NewRelic/Control/LoggingMethods.html#M000711","()","Sets up and caches the log path, attempting to create it if it does not exist.  If it does not succeed,",2],["log_seed_token","NewRelic::Agent::Agent::InstanceMethods::Connect","classes/NewRelic/Agent/Agent/InstanceMethods/Connect.html#M000096","()","If we are using a seed and token to validate the agent, we should debug log that fact so that debug logs",2],["log_sql_transmission_warning?","NewRelic::Agent::Agent::InstanceMethods::Connect","classes/NewRelic/Agent/Agent/InstanceMethods/Connect.html#M000116","()","Warn the user when we are sending raw sql across the wire - they should probably be using ssl when this",2],["log_to_stdout?","NewRelic::Control","classes/NewRelic/Control.html#M000713","()","",2],["log_underflow","NewRelic::Agent::Instrumentation::MetricFrame::Pop","classes/NewRelic/Agent/Instrumentation/MetricFrame/Pop.html#M000210","()","",2],["log_unless","NewRelic::Agent::Agent::InstanceMethods::Start","classes/NewRelic/Agent/Agent/InstanceMethods/Start.html#M000057","(boolean, level, message)","A helper method that logs a condition unless that condition is true. Mentally cleaner than having every",2],["log_version_and_pid","NewRelic::Agent::Agent::InstanceMethods::Start","classes/NewRelic/Agent/Agent/InstanceMethods/Start.html#M000055","()","Classy logging of the agent version and the current pid, so we can disambiguate processes in the log",2],["log_with_newrelic_instrumentation","NewRelic::Agent::Instrumentation::ActiveRecord","classes/NewRelic/Agent/Instrumentation/ActiveRecord.html#M000171","(*args, &block)","",2],["log_with_newrelic_instrumentation","NewRelic::Agent::Instrumentation::DataMapperInstrumentation","classes/NewRelic/Agent/Instrumentation/DataMapperInstrumentation.html#M000187","(msg)","Unlike in AR, log is called in DM after the query actually ran, complete with metrics.  Since DO has",2],["log_worker_loop_start","NewRelic::Agent::Agent::InstanceMethods::StartWorkerThread","classes/NewRelic/Agent/Agent/InstanceMethods/StartWorkerThread.html#M000071","()","logs info about the worker loop so users can see when the agent actually begins running in the background",2],["logger","NewRelic::Agent","classes/NewRelic/Agent.html#M000564","()","Get the logger for the agent.  Available after the agent has initialized. This sends output to the agent",2],["logger","NewRelic::Control::Frameworks::Rails","classes/NewRelic/Control/Frameworks/Rails.html#M000651","()","",2],["logger","NewRelic::Control::Frameworks::Rails3","classes/NewRelic/Control/Frameworks/Rails3.html#M000667","()","",2],["lookup_stats","NewRelic::Agent::StatsEngine::MetricStats","classes/NewRelic/Agent/StatsEngine/MetricStats.html#M000460","(metric_name, scope_name = '')","Returns a stat if one exists, otherwise returns nil. If you want auto-initialization, use one of get_stats",2],["main_stat","NewRelic::Agent::MethodTracer::InstanceMethods::TraceExecutionScoped","classes/NewRelic/Agent/MethodTracer/InstanceMethods/TraceExecutionScoped.html#M000336","(metric, options)","the main statistic we should record in #trace_execution_scoped - a scoped metric provided by the first",2],["major_version","NewRelic::VersionNumber","classes/NewRelic/VersionNumber.html#M000949","()","",2],["manual_start","NewRelic::Agent","classes/NewRelic/Agent.html#M000568","(options={})","Call this to manually start the Agent in situations where the Agent does not auto-start. When the app",2],["max_size","NewRelic::DataSerialization::ClassMethods","classes/NewRelic/DataSerialization/ClassMethods.html#M000735","()","",2],["memcache_key_snippet","NewRelic::Agent::Instrumentation::Memcache","classes/NewRelic/Agent/Instrumentation/Memcache.html#M000203","(method_name)","",2],["merge","NewRelic::Agent::SqlSampler","classes/NewRelic/Agent/SqlSampler.html#M000433","(sql_traces)","",2],["merge","NewRelic::Stats","classes/NewRelic/Stats.html#M000846","(other_stats)","",2],["merge!","NewRelic::Stats","classes/NewRelic/Stats.html#M000845","(other_stats)","",2],["merge_attributes","NewRelic::Stats","classes/NewRelic/Stats.html#M000844","(other)","",2],["merge_data","NewRelic::Agent::StatsEngine::MetricStats::Harvest","classes/NewRelic/Agent/StatsEngine/MetricStats/Harvest.html#M000461","(metric_data_hash)","merge data from previous harvests into this stats engine - takes into account the case where there are",2],["merge_data_from","NewRelic::Agent::Agent::InstanceMethods","classes/NewRelic/Agent/Agent/InstanceMethods.html#M000122","(data)","Accepts data as provided by the serialize method and merges it into our current collection of data to",2],["merge_data_from","NewRelic::Agent::ShimAgent","classes/NewRelic/Agent/ShimAgent.html#M000396","(*args;)","",2],["merge_defaults","NewRelic::Control::Configuration","classes/NewRelic/Control/Configuration.html#M000619","(settings_hash)","",2],["merge_old_data!","NewRelic::Agent::StatsEngine::MetricStats::Harvest","classes/NewRelic/Agent/StatsEngine/MetricStats/Harvest.html#M000465","(metric_spec, stats, old_data)","if the previous timeslice data has not been reported (due to an error of some sort) then we need to merge",2],["merge_options","NewRelic::Control::Configuration","classes/NewRelic/Control/Configuration.html#M000620","(options, hash=self)","Merge the given options into the config options. They might be a nested hash ",2],["merge_server_side_config","NewRelic::Control::Configuration","classes/NewRelic/Control/Configuration.html#M000621","(data)","",2],["merge_stats","NewRelic::Agent::StatsEngine::MetricStats::Harvest","classes/NewRelic/Agent/StatsEngine/MetricStats/Harvest.html#M000467","(other_engine_or_hash, metric_ids)","",2],["method_with_push_scope","NewRelic::Agent::MethodTracer::ClassMethods::AddMethodTracer","classes/NewRelic/Agent/MethodTracer/ClassMethods/AddMethodTracer.html#M000364","(method_name, metric_name_code, options)","returns an eval-able string that contains the tracing code for a fully traced metric including scoping",2],["method_without_push_scope","NewRelic::Agent::MethodTracer::ClassMethods::AddMethodTracer","classes/NewRelic/Agent/MethodTracer/ClassMethods/AddMethodTracer.html#M000363","(method_name, metric_name_code, options)","returns an eval-able string that contains the traced method code used if the agent is not creating a",2],["metric_for_name","NewRelic::Agent::Instrumentation::ActiveRecord","classes/NewRelic/Agent/Instrumentation/ActiveRecord.html#M000173","(name)","",2],["metric_for_sql","NewRelic::Agent::Instrumentation::ActiveRecord","classes/NewRelic/Agent/Instrumentation/ActiveRecord.html#M000174","(sql)","",2],["metric_frame_attribute","NewRelic::Agent::BrowserMonitoring","classes/NewRelic/Agent/BrowserMonitoring.html#M000016","(key)","",2],["metric_name","NewRelic::Agent::Instrumentation::MetricFrame","classes/NewRelic/Agent/Instrumentation/MetricFrame.html#M000248","()","",2],["metric_spec=","NewRelic::MetricData","classes/NewRelic/MetricData.html#M000763","(new_spec)","assigns a new metric spec, and retains the old metric spec as @original_spec if it exists currently ",2],["metrics","NewRelic::Agent::StatsEngine::MetricStats","classes/NewRelic/Agent/StatsEngine/MetricStats.html#M000454","()","Returns all of the metric names of all the stats in the engine ",2],["midpoint","NewRelic::Stats","classes/NewRelic/Stats.html#M000853","()","",2],["min_time_less?","NewRelic::Stats","classes/NewRelic/Stats.html#M000842","(other)","",2],["minor_version","NewRelic::VersionNumber","classes/NewRelic/VersionNumber.html#M000950","()","",2],["mongrel","NewRelic::LocalEnvironment","classes/NewRelic/LocalEnvironment.html#M000777","()","Sets the @mongrel instance variable if we can find a Mongrel::HttpServer ",2],["monitor_mode?","NewRelic::Control::Configuration","classes/NewRelic/Control/Configuration.html#M000633","()","True if we are sending data to the server, monitoring production ",2],["monitoring?","NewRelic::Agent::Agent::InstanceMethods::Start","classes/NewRelic/Agent/Agent/InstanceMethods/Start.html#M000058","()","Warn the user if they have configured their agent not to send data, that way we can see this clearly",2],["multi_threaded?","NewRelic::Control::Configuration","classes/NewRelic/Control/Configuration.html#M000636","()","",2],["multiply_by","NewRelic::Stats","classes/NewRelic/Stats.html#M000871","(percentage)","multiply the total time and rate by the given percentage ",2],["need_to_explain?","NewRelic::Agent::SqlTrace","classes/NewRelic/Agent/SqlTrace.html#M000451","()","",2],["need_to_obfuscate?","NewRelic::Agent::SqlTrace","classes/NewRelic/Agent/SqlTrace.html#M000450","()","",2],["new","NewRelic::Agent::Agent","classes/NewRelic/Agent/Agent.html#M000005","()","14105: v8 (tag 2.10.3) (no v7) 10379: v6 (not tagged) 4078:  v5 (tag 2.5.4) 2292:  v4 (tag 2.3.6) 1754:",2],["new","NewRelic::Agent::BeaconConfiguration","classes/NewRelic/Agent/BeaconConfiguration.html#M000000","(connect_data)","Creates a new browser configuration data. Argument is a hash of configuration values from the server",2],["new","NewRelic::Agent::BrowserMonitoring::DummyMetricFrame","classes/NewRelic/Agent/BrowserMonitoring/DummyMetricFrame.html#M000006","()","",2],["new","NewRelic::Agent::Database::Obfuscator","classes/NewRelic/Agent/Database/Obfuscator.html#M000106","()","",2],["new","NewRelic::Agent::ErrorCollector","classes/NewRelic/Agent/ErrorCollector.html#M000123","()","Returns a new error collector ",2],["new","NewRelic::Agent::Instrumentation::MetricFrame","classes/NewRelic/Agent/Instrumentation/MetricFrame.html#M000227","()","",2],["new","NewRelic::Agent::Sampler","classes/NewRelic/Agent/Sampler.html#M000315","(id)","",2],["new","NewRelic::Agent::Samplers::CpuSampler","classes/NewRelic/Agent/Samplers/CpuSampler.html#M000322","()","",2],["new","NewRelic::Agent::Samplers::DelayedJobLockSampler","classes/NewRelic/Agent/Samplers/DelayedJobLockSampler.html#M000344","()","",2],["new","NewRelic::Agent::Samplers::MemorySampler","classes/NewRelic/Agent/Samplers/MemorySampler.html#M000361","()","",2],["new","NewRelic::Agent::Samplers::MemorySampler::ShellPS","classes/NewRelic/Agent/Samplers/MemorySampler/ShellPS.html#M000376","(command)","",2],["new","NewRelic::Agent::Samplers::ObjectSampler","classes/NewRelic/Agent/Samplers/ObjectSampler.html#M000388","()","",2],["new","NewRelic::Agent::ShimAgent","classes/NewRelic/Agent/ShimAgent.html#M000387","()","",2],["new","NewRelic::Agent::SlowSql","classes/NewRelic/Agent/SlowSql.html#M000438","(sql, metric_name, config, duration, backtrace = nil)","",2],["new","NewRelic::Agent::SqlSampler","classes/NewRelic/Agent/SqlSampler.html#M000402","()","",2],["new","NewRelic::Agent::SqlTrace","classes/NewRelic/Agent/SqlTrace.html#M000442","(normalized_query, slow_sql, path, uri)","",2],["new","NewRelic::Agent::StatsEngine","classes/NewRelic/Agent/StatsEngine.html#M000481","()","",2],["new","NewRelic::Agent::StatsEngine::GCProfiler::Profiler","classes/NewRelic/Agent/StatsEngine/GCProfiler/Profiler.html#M000404","()","",2],["new","NewRelic::Agent::StatsEngine::MetricStats::SynchronizedHash","classes/NewRelic/Agent/StatsEngine/MetricStats/SynchronizedHash.html#M000445","()","",2],["new","NewRelic::Agent::StatsEngine::ScopeStackElement","classes/NewRelic/Agent/StatsEngine/ScopeStackElement.html#M000480","(name, deduct_call_time)","",2],["new","NewRelic::Agent::TransactionInfo","classes/NewRelic/Agent/TransactionInfo.html#M000493","()","",2],["new","NewRelic::Agent::TransactionSampleBuilder","classes/NewRelic/Agent/TransactionSampleBuilder.html#M000503","(time=Time.now)","",2],["new","NewRelic::Agent::TransactionSampler","classes/NewRelic/Agent/TransactionSampler.html#M000516","()","",2],["new","NewRelic::Agent::TransactionSqlData","classes/NewRelic/Agent/TransactionSqlData.html#M000436","()","",2],["new","NewRelic::Agent::WorkerLoop","classes/NewRelic/Agent/WorkerLoop.html#M000518","()","",2],["new","NewRelic::ChainedCall","classes/NewRelic/ChainedCall.html#M000067","(block1, block2)","",2],["new","NewRelic::Command","classes/NewRelic/Command.html#M000599","(command_line_args)","",2],["new","NewRelic::Command::CommandFailure","classes/NewRelic/Command/CommandFailure.html#M000596","(message, opt_parser=nil)","",2],["new","NewRelic::Command::Deployments","classes/NewRelic/Command/Deployments.html#M000603","(command_line_args)","Initialize the deployment uploader with command line args. Use -h to see options. When command_line_args",2],["new","NewRelic::Command::Install","classes/NewRelic/Command/Install.html#M000607","(command_line_args={})","",2],["new","NewRelic::Control::InstanceMethods","classes/NewRelic/Control/InstanceMethods.html#M000696","(local_env, config_file_override=nil)","initializes the control instance with a local environment and an optional config file override. Checks",2],["new","NewRelic::LocalEnvironment","classes/NewRelic/LocalEnvironment.html#M000750","()","",2],["new","NewRelic::MetricData","classes/NewRelic/MetricData.html#M000758","(metric_spec, stats, metric_id)","",2],["new","NewRelic::MetricSpec","classes/NewRelic/MetricSpec.html#M000780","(metric_name = '', metric_scope = '')","Need a \"zero-arg\" constructor so it can be instantiated from java (using jruby) for sending responses",2],["new","NewRelic::NoticedError","classes/NewRelic/NoticedError.html#M000805","(path, data, exception, timestamp = Time.now)","",2],["new","NewRelic::Rack::BrowserMonitoring","classes/NewRelic/Rack/BrowserMonitoring.html#M000806","(app, options = {})","",2],["new","NewRelic::Rack::DeveloperMode","classes/NewRelic/Rack/DeveloperMode.html#M000810","(app)","",2],["new","NewRelic::ScopedMethodTraceStats","classes/NewRelic/ScopedMethodTraceStats.html#M000893","(unscoped_stats)","",2],["new","NewRelic::StatsBase","classes/NewRelic/StatsBase.html#M000875","()","",2],["new","NewRelic::TransactionAnalysis::SegmentSummary","classes/NewRelic/TransactionAnalysis/SegmentSummary.html#M000864","(metric_name, sample)","",2],["new","NewRelic::TransactionSample","classes/NewRelic/TransactionSample.html#M000923","(time = Time.now.to_f, sample_id = nil)","",2],["new","NewRelic::TransactionSample::CompositeSegment","classes/NewRelic/TransactionSample/CompositeSegment.html#M000898","(segments)","",2],["new","NewRelic::TransactionSample::Segment","classes/NewRelic/TransactionSample/Segment.html#M000900","(timestamp, metric_name, segment_id)","",2],["new","NewRelic::TransactionSample::SummarySegment","classes/NewRelic/TransactionSample/SummarySegment.html#M000903","(segment)","",2],["new","NewRelic::VersionNumber","classes/NewRelic/VersionNumber.html#M000948","(version_string)","",2],["new_instance","NewRelic::Control::ClassMethods","classes/NewRelic/Control/ClassMethods.html#M000613","()","Create the concrete class for environment specific behavior ",2],["newrelic_ignore","NewRelic::Agent::Instrumentation::ControllerInstrumentation::ClassMethods","classes/NewRelic/Agent/Instrumentation/ControllerInstrumentation/ClassMethods.html#M000179","(specifiers={})","Have NewRelic ignore actions in this controller.  Specify the actions as hash options using :except and",2],["newrelic_ignore_apdex","NewRelic::Agent::Instrumentation::ControllerInstrumentation::ClassMethods","classes/NewRelic/Agent/Instrumentation/ControllerInstrumentation/ClassMethods.html#M000180","(specifiers={})","Have NewRelic omit apdex measurements on the given actions.  Typically used for actions that are not",2],["newrelic_method_exists?","NewRelic::Agent::MethodTracer::ClassMethods::AddMethodTracer","classes/NewRelic/Agent/MethodTracer/ClassMethods/AddMethodTracer.html#M000359","(method_name)","Checks to see if the method we are attempting to trace actually exists or not. #add_method_tracer can't",2],["newrelic_metric_path","NewRelic::Agent::Instrumentation::Rails3::ActionController","classes/NewRelic/Agent/Instrumentation/Rails3/ActionController.html#M000304","(action_name_override = nil)","determine the path that is used in the metric name for the called controller action ",2],["newrelic_metric_path","Object","classes/Object.html#M000207","()","determine the path that is used in the metric name for the called controller action ",2],["newrelic_metric_path","Object","classes/Object.html#M000299","(action_name_override = nil)","determine the path that is used in the metric name for the called controller action ",2],["newrelic_notice_error","NewRelic::Agent::Instrumentation::Rails3::Errors","classes/NewRelic/Agent/Instrumentation/Rails3/Errors.html#M000309","(exception, custom_params = {})","",2],["newrelic_notice_error","Object","classes/Object.html#M000300","(exception, custom_params = {})","Make a note of an exception associated with the currently executing controller action.  Note that this",2],["newrelic_request","NewRelic::Agent::Instrumentation::ControllerInstrumentation","classes/NewRelic/Agent/Instrumentation/ControllerInstrumentation.html#M000189","(args)","",2],["newrelic_request_headers","NewRelic::Agent::Instrumentation::ControllerInstrumentation","classes/NewRelic/Agent/Instrumentation/ControllerInstrumentation.html#M000191","()","",2],["newrelic_request_headers","NewRelic::Agent::Instrumentation::Rack","classes/NewRelic/Agent/Instrumentation/Rack.html#M000271","()","",2],["newrelic_response_code","NewRelic::Agent::Instrumentation::ControllerInstrumentation","classes/NewRelic/Agent/Instrumentation/ControllerInstrumentation.html#M000190","()","Should be implemented in the dispatcher class ",2],["newrelic_root","NewRelic::Control::ClassMethods","classes/NewRelic/Control/ClassMethods.html#M000616","()","The root directory for the plugin or gem ",2],["newrelic_root","NewRelic::Control::InstanceMethods","classes/NewRelic/Control/InstanceMethods.html#M000699","()","Delegates to the class method newrelic_root, implemented by each subclass ",2],["normal_cpu_burn","NewRelic::Agent::Instrumentation::MetricFrame::Pop","classes/NewRelic/Agent/Instrumentation/MetricFrame/Pop.html#M000213","()","",2],["normalize","NewRelic::Agent::SlowSql","classes/NewRelic/Agent/SlowSql.html#M000440","()","",2],["normalize_params","NewRelic::CollectionHelper","classes/NewRelic/CollectionHelper.html#M000576","(params)","Transform parameter hash into a hash whose values are strictly strings ",2],["normalized_request_and_custom_params","NewRelic::Agent::ErrorCollector::NoticeError","classes/NewRelic/Agent/ErrorCollector/NoticeError.html#M000146","(options)","normalizes the request and custom parameters before attaching them to the error. See NewRelic::CollectionHelper#normalize_params",2],["notice_error","NewRelic::Agent","classes/NewRelic/Agent.html#M000588","(exception, options={})","Record the given error.  It will be passed through the #ignore_error_filter if there is one. * <tt>exception</tt>",2],["notice_error","NewRelic::Agent::ErrorCollector","classes/NewRelic/Agent/ErrorCollector.html#M000158","(exception, options={})","Notice the error with the given available options: * <tt>:uri</tt> => The request path, minus any request",2],["notice_error","NewRelic::Agent::Instrumentation::MetricFrame","classes/NewRelic/Agent/Instrumentation/MetricFrame.html#M000241","(e, options={})","If we have an active metric frame, notice the error and increment the error metric. Options: * <tt>:request</tt>",2],["notice_extra_data","NewRelic::Agent::TransactionSampler","classes/NewRelic/Agent/TransactionSampler.html#M000548","(message, duration, key, config=nil, config_key=nil)","This method is used to record metadata into the currently active segment like a sql query, memcache key,",2],["notice_first_scope_push","NewRelic::Agent::SqlSampler","classes/NewRelic/Agent/SqlSampler.html#M000417","(time)","",2],["notice_first_scope_push","NewRelic::Agent::TransactionSampler","classes/NewRelic/Agent/TransactionSampler.html#M000531","(time)","Creates a new transaction sample builder, unless the transaction sampler is disabled. Takes a time parameter",2],["notice_nosql","NewRelic::Agent::TransactionSampler","classes/NewRelic/Agent/TransactionSampler.html#M000553","(key, duration)","Adds non-sql metadata to a segment - generally the memcached key duration is seconds, float value. ",2],["notice_pop_scope","NewRelic::Agent::TransactionSampler","classes/NewRelic/Agent/TransactionSampler.html#M000535","(scope, time = Time.now)","Informs the transaction sample builder about the end of a traced scope ",2],["notice_profile","NewRelic::Agent::TransactionSampler","classes/NewRelic/Agent/TransactionSampler.html#M000546","(profile)","For developer mode profiling support - delegates to the builder ",2],["notice_push_scope","NewRelic::Agent::TransactionSampler","classes/NewRelic/Agent/TransactionSampler.html#M000532","(scope, time=Time.now)","This delegates to the builder to create a new open transaction segment for the specified scope, beginning",2],["notice_scope_empty","NewRelic::Agent::Instrumentation::MetricFrame::Pop","classes/NewRelic/Agent/Instrumentation/MetricFrame/Pop.html#M000211","()","",2],["notice_scope_empty","NewRelic::Agent::SqlSampler","classes/NewRelic/Agent/SqlSampler.html#M000425","(time=Time.now)","This is called when we are done with the transaction. ",2],["notice_scope_empty","NewRelic::Agent::TransactionSampler","classes/NewRelic/Agent/TransactionSampler.html#M000536","(time=Time.now)","This is called when we are done with the transaction.  We've unwound the stack to the top level. It also",2],["notice_sql","NewRelic::Agent::SqlSampler","classes/NewRelic/Agent/SqlSampler.html#M000431","(sql, metric_name, config, duration)","",2],["notice_sql","NewRelic::Agent::TransactionSampler","classes/NewRelic/Agent/TransactionSampler.html#M000552","(sql, config, duration)","some statements (particularly INSERTS with large BLOBS may be very large; we should trim them to a maximum",2],["notice_transaction","NewRelic::Agent::SqlSampler","classes/NewRelic/Agent/SqlSampler.html#M000416","(path, uri=nil, params={})","",2],["notice_transaction","NewRelic::Agent::TransactionSampler","classes/NewRelic/Agent/TransactionSampler.html#M000544","(path, uri=nil, params={})","Delegates to the builder to store the path, uri, and parameters if the sampler is active ",2],["notice_transaction_cpu_time","NewRelic::Agent::TransactionSampler","classes/NewRelic/Agent/TransactionSampler.html#M000547","(cpu_time)","Sets the CPU time used by a transaction, delegates to the builder ",2],["notify_log_file_location","NewRelic::Agent::Agent::InstanceMethods::Start","classes/NewRelic/Agent/Agent/InstanceMethods/Start.html#M000053","()","Tells us in the log file where the log file is located. This seems redundant, but can come in handy when",2],["notify_transaction_sampler","NewRelic::Agent::Instrumentation::MetricFrame::Pop","classes/NewRelic/Agent/Instrumentation/MetricFrame/Pop.html#M000218","(web_transaction)","",2],["obfuscate","NewRelic::Agent::BrowserMonitoring","classes/NewRelic/Agent/BrowserMonitoring.html#M000028","(config, text)","",2],["obfuscate","NewRelic::Agent::SlowSql","classes/NewRelic/Agent/SlowSql.html#M000439","()","",2],["obfuscate_sql","NewRelic::Agent::Database","classes/NewRelic/Agent/Database.html#M000079","(sql)","",2],["obfuscated_sql","NewRelic::TransactionSample::Segment","classes/NewRelic/TransactionSample/Segment.html#M000924","()","",2],["omit_segments_with","NewRelic::TransactionSample","classes/NewRelic/TransactionSample.html#M000943","(regex)","return a new transaction sample that treats segments with the given regular expression in their name",2],["open_arguments","NewRelic::DataSerialization::ClassMethods","classes/NewRelic/DataSerialization/ClassMethods.html#M000730","()","",2],["options","NewRelic::Command::Deployments","classes/NewRelic/Command/Deployments.html#M000605","()","",2],["options","NewRelic::Command::Install","classes/NewRelic/Command/Install.html#M000610","()","",2],["original_spec","NewRelic::MetricData","classes/NewRelic/MetricData.html#M000762","()","",2],["over_queue_limit?","NewRelic::Agent::ErrorCollector::NoticeError","classes/NewRelic/Agent/ErrorCollector/NoticeError.html#M000155","(message)","checks the size of the error queue to make sure we are under the maximum limit, and logs a warning if",2],["params","NewRelic::Rack::DeveloperMode","classes/NewRelic/Rack/DeveloperMode.html#M000823","()","",2],["params","NewRelic::TransactionSample::Segment","classes/NewRelic/TransactionSample/Segment.html#M000918","()","",2],["params=","NewRelic::TransactionSample","classes/NewRelic/TransactionSample.html#M000945","(params)","",2],["params=","NewRelic::TransactionSample::Segment","classes/NewRelic/TransactionSample/Segment.html#M000925","(p)","",2],["parent_segment=","NewRelic::TransactionSample::Segment","classes/NewRelic/TransactionSample/Segment.html#M000927","(s)","",2],["parse_end_time","NewRelic::Agent::Instrumentation::QueueTime","classes/NewRelic/Agent/Instrumentation/QueueTime.html#M000294","(env)","",2],["parse_frontend_headers","NewRelic::Agent::Instrumentation::QueueTime","classes/NewRelic/Agent/Instrumentation/QueueTime.html#M000265","(headers)","",2],["parse_middleware_time_from","NewRelic::Agent::Instrumentation::QueueTime","classes/NewRelic/Agent/Instrumentation/QueueTime.html#M000267","(env)","",2],["parse_query_with_newrelic","NewRelic::Instrumentation::ActsAsSolrInstrumentation::ParserMethodsInstrumentation","classes/NewRelic/Instrumentation/ActsAsSolrInstrumentation/ParserMethodsInstrumentation.html#M000176","(*args)","",2],["parse_queue_time_from","NewRelic::Agent::Instrumentation::QueueTime","classes/NewRelic/Agent/Instrumentation/QueueTime.html#M000268","(env)","",2],["parse_server_time_from","NewRelic::Agent::Instrumentation::QueueTime","classes/NewRelic/Agent/Instrumentation/QueueTime.html#M000266","(env)","main method to extract server time info from env hash, records individual server metrics and one roll-up",2],["path","NewRelic::Agent::Instrumentation::MetricFrame","classes/NewRelic/Agent/Instrumentation/MetricFrame.html#M000239","()","Return the path, the part of the metric after the category ",2],["path_string","NewRelic::TransactionSample","classes/NewRelic/TransactionSample.html#M000934","()","",2],["path_string","NewRelic::TransactionSample::Segment","classes/NewRelic/TransactionSample/Segment.html#M000907","()","",2],["peek_scope","NewRelic::Agent::StatsEngine::Transactions","classes/NewRelic/Agent/StatsEngine/Transactions.html#M000487","()","Returns the latest ScopeStackElement ",2],["perform_action_with_newrelic_profile","NewRelic::Agent::Instrumentation::ControllerInstrumentation","classes/NewRelic/Agent/Instrumentation/ControllerInstrumentation.html#M000194","(args)","Profile the instrumented call.  Dev mode only.  Experimental - should definitely not be used on production",2],["perform_action_with_newrelic_trace","NewRelic::Agent::Instrumentation::ControllerInstrumentation","classes/NewRelic/Agent/Instrumentation/ControllerInstrumentation.html#M000188","(*args, &block)","Yield to the given block with NewRelic tracing.  Used by default instrumentation on controller actions",2],["periodic_samplers","NewRelic::Agent::StatsEngine::Samplers","classes/NewRelic/Agent/StatsEngine/Samplers.html#M000479","()","",2],["pid_file_path","NewRelic::DataSerialization::ClassMethods","classes/NewRelic/DataSerialization/ClassMethods.html#M000745","()","",2],["pid_too_old?","NewRelic::DataSerialization::ClassMethods","classes/NewRelic/DataSerialization/ClassMethods.html#M000727","()","",2],["platform","NewRelic::Agent::Samplers::MemorySampler","classes/NewRelic/Agent/Samplers/MemorySampler.html#M000368","()","",2],["platform","NewRelic::Agent::Samplers::MemorySampler","classes/NewRelic/Agent/Samplers/MemorySampler.html#M000367","()","",2],["poll","NewRelic::Agent::Sampler","classes/NewRelic/Agent/Sampler.html#M000316","()","",2],["poll","NewRelic::Agent::Samplers::CpuSampler","classes/NewRelic/Agent/Samplers/CpuSampler.html#M000331","()","",2],["poll","NewRelic::Agent::Samplers::DelayedJobLockSampler","classes/NewRelic/Agent/Samplers/DelayedJobLockSampler.html#M000351","()","",2],["poll","NewRelic::Agent::Samplers::MemorySampler","classes/NewRelic/Agent/Samplers/MemorySampler.html#M000370","()","",2],["poll","NewRelic::Agent::Samplers::ObjectSampler","classes/NewRelic/Agent/Samplers/ObjectSampler.html#M000391","()","",2],["poll","NewRelic::Agent::StatsEngine::Samplers","classes/NewRelic/Agent/StatsEngine/Samplers.html#M000477","(samplers)","Call poll on each of the samplers.  Remove the sampler if it raises. ",2],["pop","NewRelic::Agent::Instrumentation::MetricFrame","classes/NewRelic/Agent/Instrumentation/MetricFrame.html#M000240","()","Unwind one stack level.  It knows if it's back at the outermost caller and does the appropriate wrapup",2],["pop_flag!","NewRelic::Agent::MethodTracer::InstanceMethods::TraceExecutionScoped","classes/NewRelic/Agent/MethodTracer/InstanceMethods/TraceExecutionScoped.html#M000340","(forced)","delegates to #agent_instance to pop the trace execution flag, only if execution of this metric is forced.",2],["pop_scope","NewRelic::Agent::StatsEngine::Transactions","classes/NewRelic/Agent/StatsEngine/Transactions.html#M000486","(expected_scope, duration, time=Time.now.to_f)","Pops a scope off the transaction stack - this updates the transaction sampler that we've finished execution",2],["pop_trace_execution_flag","NewRelic::Agent::Agent::InstanceMethods","classes/NewRelic/Agent/Agent/InstanceMethods.html#M000039","()","Pop the current trace execution status.  Restore trace execution status to what it was before we pushed",2],["pop_trace_execution_flag","NewRelic::Agent::ShimAgent","classes/NewRelic/Agent/ShimAgent.html#M000398","(*args;)","",2],["post_size_limit","NewRelic::Control::Configuration","classes/NewRelic/Control/Configuration.html#M000640","()","defaults to 2MiB ",2],["prepare_to_send","NewRelic::Agent::SqlTrace","classes/NewRelic/Agent/SqlTrace.html#M000448","()","",2],["prepare_to_send","NewRelic::TransactionSample","classes/NewRelic/TransactionSample.html#M000944","(options={})","Return a new transaction sample that can be sent to the New Relic service. This involves potentially",2],["proc_status_file","NewRelic::Agent::Samplers::MemorySampler::ProcStatus","classes/NewRelic/Agent/Samplers/MemorySampler/ProcStatus.html#M000381","()","",2],["process_action","NewRelic::Agent::Instrumentation::Rails3::ActionController","classes/NewRelic/Agent/Instrumentation/Rails3/ActionController.html#M000305","(*args)","",2],["process_cpu","NewRelic::Agent::Instrumentation::MetricFrame","classes/NewRelic/Agent/Instrumentation/MetricFrame.html#M000263","()","",2],["process_resultset","NewRelic::Agent::Database","classes/NewRelic/Agent/Database.html#M000089","(items)","",2],["profile","NewRelic::Rack::DeveloperMode","classes/NewRelic/Rack/DeveloperMode.html#M000816","()","",2],["profiling=","NewRelic::Control::Profiling","classes/NewRelic/Control/Profiling.html#M000706","(val)","Set the flag for capturing profiles in dev mode.  If RubyProf is not loaded a true value is ignored.",2],["profiling?","NewRelic::Control::Profiling","classes/NewRelic/Control/Profiling.html#M000704","()","A flag used in dev mode to indicate if profiling is available ",2],["profiling_available?","NewRelic::Control::Profiling","classes/NewRelic/Control/Profiling.html#M000705","()","",2],["proxy_server","NewRelic::Control::ServerMethods","classes/NewRelic/Control/ServerMethods.html#M000717","()","a new instances of the proxy server - this passes through if there is no proxy, otherwise it has proxy",2],["push","NewRelic::Agent::Instrumentation::MetricFrame","classes/NewRelic/Agent/Instrumentation/MetricFrame.html#M000232","(m)","Indicate that we are entering a measured controller action or task. Make sure you unwind every push with",2],["push_flag!","NewRelic::Agent::MethodTracer::InstanceMethods::TraceExecutionScoped","classes/NewRelic/Agent/MethodTracer/InstanceMethods/TraceExecutionScoped.html#M000339","(forced)","delegates to #agent_instance to push a trace execution flag, only if execution of this metric is forced.",2],["push_scope","NewRelic::Agent::StatsEngine::Transactions","classes/NewRelic/Agent/StatsEngine/Transactions.html#M000485","(metric, time = Time.now.to_f, deduct_call_time_from_parent = true)","Pushes a scope onto the transaction stack - this generates a TransactionSample::Segment at the end of",2],["push_trace_execution_flag","NewRelic::Agent::Agent::InstanceMethods","classes/NewRelic/Agent/Agent/InstanceMethods.html#M000037","(should_trace=false)","Push flag indicating whether we should be tracing in this thread. This uses a stack which allows us to",2],["push_trace_execution_flag","NewRelic::Agent::ShimAgent","classes/NewRelic/Agent/ShimAgent.html#M000397","(*args;)","",2],["query_server_for_configuration","NewRelic::Agent::Agent::InstanceMethods::Connect","classes/NewRelic/Agent/Agent/InstanceMethods/Connect.html#M000118","()","Sets the collector host and connects to the server, then invokes the final configuration with the returned",2],["queue_time","NewRelic::Agent::BrowserMonitoring::DummyMetricFrame","classes/NewRelic/Agent/BrowserMonitoring/DummyMetricFrame.html#M000008","()","",2],["queue_time","NewRelic::Agent::Instrumentation::MetricFrame","classes/NewRelic/Agent/Instrumentation/MetricFrame.html#M000253","()","",2],["rails_gem_list","NewRelic::Control::Frameworks::Rails","classes/NewRelic/Control/Frameworks/Rails.html#M000663","()","",2],["rails_vendor_root","NewRelic::Control::Frameworks::Rails","classes/NewRelic/Control/Frameworks/Rails.html#M000662","()","",2],["rails_version","NewRelic::Control::Frameworks::Rails","classes/NewRelic/Control/Frameworks/Rails.html#M000661","()","",2],["read_and_write_to_file","NewRelic::DataSerialization::ClassMethods","classes/NewRelic/DataSerialization/ClassMethods.html#M000725","()","A combined locked read/write from the store file - reduces contention by not acquiring the lock and file",2],["read_until_eof_error","NewRelic::DataSerialization::ClassMethods","classes/NewRelic/DataSerialization/ClassMethods.html#M000734","(f)","",2],["record_apdex","NewRelic::Agent::Instrumentation::MetricFrame","classes/NewRelic/Agent/Instrumentation/MetricFrame.html#M000261","(current_metric, action_duration, total_duration, is_error)","",2],["record_apdex","NewRelic::Agent::Instrumentation::MetricFrame","classes/NewRelic/Agent/Instrumentation/MetricFrame.html#M000247","()","",2],["record_apdex_f","NewRelic::ApdexStats","classes/NewRelic/ApdexStats.html#M000884","()","",2],["record_apdex_s","NewRelic::ApdexStats","classes/NewRelic/ApdexStats.html#M000882","()","",2],["record_apdex_t","NewRelic::ApdexStats","classes/NewRelic/ApdexStats.html#M000883","()","",2],["record_data_point","NewRelic::MethodTraceStats","classes/NewRelic/MethodTraceStats.html#M000885","(value, exclusive_time = value)","record a single data point into the statistical gatherer.  The gatherer will aggregate all data points",2],["record_gc_metric","NewRelic::Agent::StatsEngine::GCProfiler::Profiler","classes/NewRelic/Agent/StatsEngine/GCProfiler/Profiler.html#M000408","(num_calls, elapsed)","",2],["record_individual_middleware_stats","NewRelic::Agent::Instrumentation::QueueTime","classes/NewRelic/Agent/Instrumentation/QueueTime.html#M000282","(end_time, matches)","",2],["record_individual_server_stats","NewRelic::Agent::Instrumentation::QueueTime","classes/NewRelic/Agent/Instrumentation/QueueTime.html#M000281","(end_time, matches)","goes through the list of servers and records each one in reverse order, subtracting the time for each",2],["record_individual_stat_of_type","NewRelic::Agent::Instrumentation::QueueTime","classes/NewRelic/Agent/Instrumentation/QueueTime.html#M000276","(type, end_time, matches)","",2],["record_jruby_cpu_burn","NewRelic::Agent::Instrumentation::MetricFrame::Pop","classes/NewRelic/Agent/Instrumentation/MetricFrame/Pop.html#M000215","(burn)","we need to do this here because the normal cpu sampler process doesn't work on JRuby. See the cpu_sampler.rb",2],["record_middleware_time_for","NewRelic::Agent::Instrumentation::QueueTime","classes/NewRelic/Agent/Instrumentation/QueueTime.html#M000291","(name, start_time, end_time)","",2],["record_multiple_data_points","NewRelic::MethodTraceStats","classes/NewRelic/MethodTraceStats.html#M000887","(total_value, count=1)","Records multiple data points as one method call - this handles all the aggregation that would be done",2],["record_multiple_data_points","NewRelic::ScopedMethodTraceStats","classes/NewRelic/ScopedMethodTraceStats.html#M000895","(total_value, count=1)","Records multiple data points as one method call - this handles all the aggregation that would be done",2],["record_rollup_middleware_stat","NewRelic::Agent::Instrumentation::QueueTime","classes/NewRelic/Agent/Instrumentation/QueueTime.html#M000286","(end_time, matches)","",2],["record_rollup_queue_stat","NewRelic::Agent::Instrumentation::QueueTime","classes/NewRelic/Agent/Instrumentation/QueueTime.html#M000287","(end_time, matches)","",2],["record_rollup_server_stat","NewRelic::Agent::Instrumentation::QueueTime","classes/NewRelic/Agent/Instrumentation/QueueTime.html#M000285","(end_time, matches)","records the total time for all servers in a rollup metric ",2],["record_rollup_stat_of_type","NewRelic::Agent::Instrumentation::QueueTime","classes/NewRelic/Agent/Instrumentation/QueueTime.html#M000288","(metric, end_time, matches)","",2],["record_server_time_for","NewRelic::Agent::Instrumentation::QueueTime","classes/NewRelic/Agent/Instrumentation/QueueTime.html#M000290","(name, start_time, end_time)","basically just assembles the metric name ",2],["record_time_stat","NewRelic::Agent::Instrumentation::QueueTime","classes/NewRelic/Agent/Instrumentation/QueueTime.html#M000292","(name, start_time, end_time)","Checks that the time is not negative, and does the actual data recording ",2],["record_transaction","NewRelic::Agent","classes/NewRelic/Agent.html#M000593","(response_sec, options = {})","Record a web transaction from an external source.  This will process the response time, error, and score",2],["record_transaction","NewRelic::Agent::Agent::InstanceMethods","classes/NewRelic/Agent/Agent/InstanceMethods.html#M000021","(duration_seconds, options={})","fakes out a transaction that did not happen in this process by creating apdex, summary metrics, and recording",2],["record_transaction_cpu","NewRelic::Agent::Instrumentation::MetricFrame::Pop","classes/NewRelic/Agent/Instrumentation/MetricFrame/Pop.html#M000212","()","",2],["recorded_metrics","NewRelic::Agent::Instrumentation::MetricFrame","classes/NewRelic/Agent/Instrumentation/MetricFrame.html#M000249","()","Return the array of metrics to record for the current metric frame. ",2],["recording_web_transaction?","NewRelic::Agent::Instrumentation::MetricFrame","classes/NewRelic/Agent/Instrumentation/MetricFrame.html#M000257","()","",2],["recording_web_transaction?","NewRelic::Agent::Instrumentation::MetricFrame","classes/NewRelic/Agent/Instrumentation/MetricFrame.html#M000256","()","",2],["referer","NewRelic::Agent::Instrumentation::MetricFrame","classes/NewRelic/Agent/Instrumentation/MetricFrame.html#M000235","()","For the current web transaction, return the full referer, minus the host string, or nil. ",2],["referer","NewRelic::Agent::Instrumentation::MetricFrame","classes/NewRelic/Agent/Instrumentation/MetricFrame.html#M000225","()","",2],["referer_from_request","NewRelic::Agent::Instrumentation::MetricFrame","classes/NewRelic/Agent/Instrumentation/MetricFrame.html#M000259","(request)","Make a safe attempt to get the referer from a request object, generally successful when it's a Rack request.",2],["remote_method_uri","NewRelic::Agent::Agent::InstanceMethods","classes/NewRelic/Agent/Agent/InstanceMethods.html#M000165","(method)","The path on the server that we should post our data to ",2],["remote_service_metric","NewRelic::Agent::Instrumentation::ActiveRecord","classes/NewRelic/Agent/Instrumentation/ActiveRecord.html#M000172","()","",2],["remove_server_controlled_configs","NewRelic::Control::Configuration","classes/NewRelic/Control/Configuration.html#M000622","()","",2],["remove_transaction_sampler","NewRelic::Agent::StatsEngine::Transactions","classes/NewRelic/Agent/StatsEngine/Transactions.html#M000484","(l)","removes a transaction sampler ",2],["render","NewRelic::Rack::DeveloperMode","classes/NewRelic/Rack/DeveloperMode.html#M000818","(view, layout=true)","",2],["render_collection","ActionView::Partials::PartialRenderer","classes/ActionView/Partials/PartialRenderer.html#M000308","(*args)","",2],["render_partial","ActionView::Partials::PartialRenderer","classes/ActionView/Partials/PartialRenderer.html#M000307","(*args)","",2],["render_time","NewRelic::TransactionAnalysis","classes/NewRelic/TransactionAnalysis.html#M000889","()","",2],["render_with_layout","NewRelic::Rack::DeveloperMode","classes/NewRelic/Rack/DeveloperMode.html#M000819","(view)","You have to call this with a block - the contents returned from that block are interpolated into the",2],["render_without_layout","NewRelic::Rack::DeveloperMode","classes/NewRelic/Rack/DeveloperMode.html#M000820","(view, binding)","you have to pass a binding to this (a proc) so that ERB can have access to helper functions and local",2],["request_params_from_opts","NewRelic::Agent::ErrorCollector::NoticeError","classes/NewRelic/Agent/ErrorCollector/NoticeError.html#M000143","(options)","takes the request parameters out of the options hash, and returns them if we are capturing parameters,",2],["request_with_newrelic_trace","Object","classes/Object.html#M000230","(*args, &block)","",2],["requests_per_minute","NewRelic::Stats","classes/NewRelic/Stats.html#M000861","()","Alias for #calls_per_minute",2],["rescue_action_with_newrelic_trace","Object","classes/Object.html#M000301","(exception)","",2],["reset","NewRelic::Agent::BusyCalculator","classes/NewRelic/Agent/BusyCalculator.html#M000048","()","Reset the state of the information accumulated by all threads, but only reset the recursion counter for",2],["reset","NewRelic::Agent::Database::Obfuscator","classes/NewRelic/Agent/Database/Obfuscator.html#M000109","()","",2],["reset","NewRelic::Agent::StatsEngine::GCProfiler::Profiler","classes/NewRelic/Agent/StatsEngine/GCProfiler/Profiler.html#M000407","()","",2],["reset","NewRelic::Agent::StatsEngine::GCProfiler::Ruby19","classes/NewRelic/Agent/StatsEngine/GCProfiler/Ruby19.html#M000427","()","",2],["reset","NewRelic::Agent::TransactionInfo","classes/NewRelic/Agent/TransactionInfo.html#M000502","(request=nil)","clears any existing transaction info object and initializes a new one. This starts the timer for the",2],["reset","NewRelic::Rack::DeveloperMode","classes/NewRelic/Rack/DeveloperMode.html#M000814","()","",2],["reset","NewRelic::Stats","classes/NewRelic/Stats.html#M000849","()","",2],["reset!","NewRelic::Agent::SqlSampler","classes/NewRelic/Agent/SqlSampler.html#M000435","()","reset samples without rebooting the web server ",2],["reset!","NewRelic::Agent::TransactionSampler","classes/NewRelic/Agent/TransactionSampler.html#M000562","()","reset samples without rebooting the web server ",2],["reset_stats","NewRelic::Agent","classes/NewRelic/Agent.html#M000570","()","Clear out any unsent metric data. See NewRelic::Agent::Agent#reset_stats ",2],["reset_stats","NewRelic::Agent::Agent::InstanceMethods","classes/NewRelic/Agent/Agent/InstanceMethods.html#M000065","()","Clear out the metric data, errors, and transaction traces, making sure the agent is in a fresh state",2],["reset_stats","NewRelic::Agent::StatsEngine::MetricStats","classes/NewRelic/Agent/StatsEngine/MetricStats.html#M000470","()","Reset each of the stats, such as when a new passenger instance starts up. ",2],["resolve_ip_address","NewRelic::Control::ServerMethods","classes/NewRelic/Control/ServerMethods.html#M000720","(host)","Look up the ip address of the host using the pure ruby lookup to prevent blocking.  If that fails, fall",2],["rollup_metrics_for","NewRelic::Agent::Instrumentation::ActiveRecord","classes/NewRelic/Agent/Instrumentation/ActiveRecord.html#M000175","(metric)","",2],["root","NewRelic::Control::Frameworks::Merb","classes/NewRelic/Control/Frameworks/Merb.html#M000624","()","",2],["root","NewRelic::Control::Frameworks::Rails","classes/NewRelic/Control/Frameworks/Rails.html#M000647","()","",2],["root","NewRelic::Control::Frameworks::Rails3","classes/NewRelic/Control/Frameworks/Rails3.html#M000665","()","Rails can return an empty string from this method, causing the agent not to start even when it is properly",2],["root","NewRelic::Control::Frameworks::Ruby","classes/NewRelic/Control/Frameworks/Ruby.html#M000677","()","",2],["root","NewRelic::Control::InstanceMethods","classes/NewRelic/Control/InstanceMethods.html#M000698","()","",2],["route_eval_with_newrelic","NewRelic::Agent::Instrumentation::Sinatra","classes/NewRelic/Agent/Instrumentation/Sinatra.html#M000310","(&block_arg)","",2],["run","NewRelic::Agent::WorkerLoop","classes/NewRelic/Agent/WorkerLoop.html#M000523","(period=nil, &block)","Run infinitely, calling the registered tasks at their specified call periods.  The caller is responsible",2],["run","NewRelic::Command","classes/NewRelic/Command.html#M000601","()","",2],["run","NewRelic::Command::Deployments","classes/NewRelic/Command/Deployments.html#M000604","()","Run the Deployment upload in New Relic via Active Resource. Will possibly print errors and exit the VM",2],["run","NewRelic::Command::Install","classes/NewRelic/Command/Install.html#M000608","()","",2],["run","NewRelic::MerbBootLoader","classes/NewRelic/MerbBootLoader.html#M000958","()","",2],["run_task","NewRelic::Agent::WorkerLoop","classes/NewRelic/Agent/WorkerLoop.html#M000530","()","Executes the block given to the worker loop, and handles many possible errors. Also updates the execution",2],["sample","NewRelic::Agent::TransactionSampleBuilder","classes/NewRelic/Agent/TransactionSampleBuilder.html#M000515","()","",2],["sample","NewRelic::Rack::DeveloperMode","classes/NewRelic/Rack/DeveloperMode.html#M000822","()","",2],["sample_id","NewRelic::Agent::TransactionSampleBuilder","classes/NewRelic/Agent/TransactionSampleBuilder.html#M000504","()","",2],["sampler_classes","NewRelic::Agent::Sampler","classes/NewRelic/Agent/Sampler.html#M000314","()","",2],["sampling_rate=","NewRelic::Agent::TransactionSampler","classes/NewRelic/Agent/TransactionSampler.html#M000527","(val)","Set with an integer value n, this takes one in every n harvested samples. It also resets the harvest",2],["save_data","NewRelic::Agent","classes/NewRelic/Agent.html#M000572","()","a method used to serialize short-running processes to disk, so we don't incur the overhead of reporting",2],["save_or_transmit_data","NewRelic::Agent::Agent::InstanceMethods","classes/NewRelic/Agent/Agent/InstanceMethods.html#M000168","()","",2],["scope_depth","NewRelic::Agent::TransactionSampleBuilder","classes/NewRelic/Agent/TransactionSampleBuilder.html#M000510","()","",2],["scope_depth","NewRelic::Agent::TransactionSampler","classes/NewRelic/Agent/TransactionSampler.html#M000534","()","Defaults to zero, otherwise delegated to the transaction sample builder ",2],["scope_name","NewRelic::Agent::StatsEngine::Transactions","classes/NewRelic/Agent/StatsEngine/Transactions.html#M000489","()","Returns the current scope name from the thread local ",2],["scope_name=","NewRelic::Agent::StatsEngine::Transactions","classes/NewRelic/Agent/StatsEngine/Transactions.html#M000488","(transaction)","set the name of the transaction for the current thread, which will be used to define the scope of all",2],["scope_stack","NewRelic::Agent::StatsEngine::GCProfiler::Profiler","classes/NewRelic/Agent/StatsEngine/GCProfiler/Profiler.html#M000412","()","",2],["scope_stack","NewRelic::Agent::StatsEngine::Transactions","classes/NewRelic/Agent/StatsEngine/Transactions.html#M000492","()","Returns the current scope stack, memoized to a thread local variable ",2],["segment","NewRelic::Rack::DeveloperMode","classes/NewRelic/Rack/DeveloperMode.html#M000824","()","",2],["send_data_on_exit","NewRelic::Control::Configuration","classes/NewRelic/Control/Configuration.html#M000642","()","Configuration option of the same name to indicate that we should flush data to the server on exiting.",2],["send_request","NewRelic::Agent::Agent::InstanceMethods","classes/NewRelic/Agent/Agent/InstanceMethods.html#M000162","(opts)","Posts to the specified server Options: - :uri => the path to request on the server (a misnomer of course)",2],["sense_method","NewRelic::Agent::ErrorCollector::NoticeError","classes/NewRelic/Agent/ErrorCollector/NoticeError.html#M000149","(object, method)","calls a method on an object, if it responds to it - used for detection and soft fail-safe. Returns nil",2],["serialize","NewRelic::Agent::Agent::InstanceMethods","classes/NewRelic/Agent/Agent/InstanceMethods.html#M000121","()","Serialize all the important data that the agent might want to send to the server. We could be sending",2],["serialize","NewRelic::Agent::ShimAgent","classes/NewRelic/Agent/ShimAgent.html#M000395","()","",2],["server","NewRelic::Control::ServerMethods","classes/NewRelic/Control/ServerMethods.html#M000715","()","",2],["server_from_host","NewRelic::Control::ServerMethods","classes/NewRelic/Control/ServerMethods.html#M000718","(hostname=nil)","turns a hostname into an ip address and returns a NewRelic::Control::Server that contains the configuration",2],["set","NewRelic::Agent::TransactionInfo","classes/NewRelic/Agent/TransactionInfo.html#M000500","(instance)","",2],["set_collector_host!","NewRelic::Agent::Agent::InstanceMethods::Connect","classes/NewRelic/Agent/Agent/InstanceMethods/Connect.html#M000117","()","Asks the collector to tell us which sub-collector we should be reporting to, and then does the name resolution",2],["set_deduct_call_time_based_on_metric","NewRelic::Agent::MethodTracer::ClassMethods::AddMethodTracer","classes/NewRelic/Agent/MethodTracer/ClassMethods/AddMethodTracer.html#M000355","(options)","Sets the options for deducting call time from parents. This defaults to true if we are recording a metric,",2],["set_if_nil","NewRelic::Agent::MethodTracer::InstanceMethods::TraceExecutionScoped","classes/NewRelic/Agent/MethodTracer/InstanceMethods/TraceExecutionScoped.html#M000338","(hash, key)","Helper for setting a hash key if the hash key is nil, instead of the default ||= behavior which sets",2],["set_log_format!","NewRelic::Control::LoggingMethods","classes/NewRelic/Control/LoggingMethods.html#M000707","(logger)","patches the logger's format_message method to change the format just for our logger ",2],["set_log_level!","NewRelic::Control::LoggingMethods","classes/NewRelic/Control/LoggingMethods.html#M000703","(logger)","set the log level as specified in the config file Possible values are from the Logger class: debug, info,",2],["set_new_scope!","NewRelic::Agent::Instrumentation::MetricFrame::Pop","classes/NewRelic/Agent/Instrumentation/MetricFrame/Pop.html#M000209","(metric)","",2],["set_primary","NewRelic::Agent::SqlTrace","classes/NewRelic/Agent/SqlTrace.html#M000443","(slow_sql, path, uri)","",2],["set_profile","NewRelic::Agent::TransactionSampleBuilder","classes/NewRelic/Agent/TransactionSampleBuilder.html#M000512","(profile)","",2],["set_record_sql","NewRelic::Agent::Agent::InstanceMethods","classes/NewRelic/Agent/Agent/InstanceMethods.html#M000035","(should_record)","Sets a thread local variable as to whether we should or should not record sql in the current thread.",2],["set_record_tt","NewRelic::Agent::Agent::InstanceMethods","classes/NewRelic/Agent/Agent/InstanceMethods.html#M000036","(should_record)","Sets a thread local variable as to whether we should or should not record transaction traces in the current",2],["set_sql_obfuscator","NewRelic::Agent","classes/NewRelic/Agent.html#M000575","(type = :replace, &block)","This method sets the block sent to this method as a sql obfuscator.  The block will be called with a",2],["set_sql_obfuscator","NewRelic::Agent::Database","classes/NewRelic/Agent/Database.html#M000080","(type, &block)","",2],["set_sql_obfuscator","NewRelic::Agent::Database::Obfuscator","classes/NewRelic/Agent/Database/Obfuscator.html#M000110","(type, &block)","Sets the sql obfuscator used to clean up sql when sending it to the server. Possible types are: :before",2],["set_sql_recording!","NewRelic::Agent::Agent::InstanceMethods::Connect","classes/NewRelic/Agent/Agent/InstanceMethods/Connect.html#M000115","()","Sets the sql recording configuration by trying to detect any attempt to disable the sql collection -",2],["set_transaction_cpu_time","NewRelic::Agent::TransactionSampleBuilder","classes/NewRelic/Agent/TransactionSampleBuilder.html#M000514","(cpu_time)","",2],["set_transaction_info","NewRelic::Agent::TransactionSampleBuilder","classes/NewRelic/Agent/TransactionSampleBuilder.html#M000513","(path, uri, params)","",2],["set_transaction_info","NewRelic::Agent::TransactionSqlData","classes/NewRelic/Agent/TransactionSqlData.html#M000437","(path, uri, params, guid)","",2],["set_user_attributes","NewRelic::Agent","classes/NewRelic/Agent.html#M000590","(attributes)","Set attributes about the user making this request. These attributes will be automatically appended to",2],["set_user_attributes","NewRelic::Agent::Instrumentation::MetricFrame","classes/NewRelic/Agent/Instrumentation/MetricFrame.html#M000245","(attributes)","",2],["set_user_attributes","NewRelic::Agent::Instrumentation::MetricFrame","classes/NewRelic/Agent/Instrumentation/MetricFrame.html#M000255","(attributes)","",2],["settings","NewRelic::Control::Configuration","classes/NewRelic/Control/Configuration.html#M000617","()","",2],["setup_log","NewRelic::Control::LoggingMethods","classes/NewRelic/Control/LoggingMethods.html#M000709","()","Create the logger using the configuration variables Control subclasses may override this, but it can",2],["should_exit_notice_error?","NewRelic::Agent::ErrorCollector::NoticeError","classes/NewRelic/Agent/ErrorCollector/NoticeError.html#M000139","(exception)","whether we should return early from the notice_error process - based on whether the error is ignored",2],["should_instrument?","NewRelic::Rack::BrowserMonitoring","classes/NewRelic/Rack/BrowserMonitoring.html#M000808","(status, headers)","",2],["should_keep_retrying?","NewRelic::Agent::Agent::InstanceMethods::Connect","classes/NewRelic/Agent/Agent/InstanceMethods/Connect.html#M000090","(options)","We keep trying by default, but you can disable it with the :keep_retrying option set to false ",2],["should_log?","NewRelic::Control::LoggingMethods","classes/NewRelic/Control/LoggingMethods.html#M000702","()","true if the agent has settings, and the agent is enabled, otherwise false ",2],["should_replace_begin_time?","NewRelic::Stats","classes/NewRelic/Stats.html#M000840","(other)","",2],["should_replace_end_time?","NewRelic::Stats","classes/NewRelic/Stats.html#M000839","(other)","",2],["should_retry?","NewRelic::Agent::Agent::InstanceMethods::Connect","classes/NewRelic/Agent/Agent/InstanceMethods/Connect.html#M000093","()","We should only retry when there has not been a more serious condition that would prevent it. We increment",2],["should_send_data?","NewRelic::DataSerialization::ClassMethods","classes/NewRelic/DataSerialization/ClassMethods.html#M000724","()","Check whether the store is too large, too old, or the pid file is too old. If so, we should send the",2],["show_sample_data","NewRelic::Rack::DeveloperMode","classes/NewRelic/Rack/DeveloperMode.html#M000826","()","",2],["show_source","NewRelic::Rack::DeveloperMode","classes/NewRelic/Rack/DeveloperMode.html#M000825","()","show the selected source file with the highlighted selected line ",2],["shutdown","NewRelic::Agent","classes/NewRelic/Agent.html#M000571","(options={})","Shutdown the agent.  Call this before exiting.  Sends any queued data and kills the background thread.",2],["shutdown","NewRelic::Agent::Agent::InstanceMethods","classes/NewRelic/Agent/Agent/InstanceMethods.html#M000032","(options={})","Attempt a graceful shutdown of the agent, running the worker loop if it exists and is running. Options:",2],["shutdown","NewRelic::Agent::ShimAgent","classes/NewRelic/Agent/ShimAgent.html#M000394","(*args;)","",2],["slowest_sample?","NewRelic::Agent::TransactionSampler","classes/NewRelic/Agent/TransactionSampler.html#M000542","(old_sample, new_sample)","Checks to see if the old sample exists, or if it's duration is less than the new sample ",2],["snapshot","NewRelic::LocalEnvironment","classes/NewRelic/LocalEnvironment.html#M000774","()","Take a snapshot of the environment information for this application Returns an associative array ",2],["split","NewRelic::Stats","classes/NewRelic/Stats.html#M000847","(rollup_begin_time, rollup_period)","split into an array of timeslices whose time boundaries start on (begin_time + (n * duration)) and whose",2],["sql_sampler","NewRelic::Agent::Instrumentation::MetricFrame","classes/NewRelic/Agent/Instrumentation/MetricFrame.html#M000231","()","",2],["sql_segments","NewRelic::TransactionAnalysis","classes/NewRelic/TransactionAnalysis.html#M000896","(show_non_sql_segments = true)","return an array of sql statements executed by this transaction each element in the array contains [sql,",2],["stack_min_max_from","NewRelic::Stats","classes/NewRelic/Stats.html#M000837","(other)","",2],["standard_deviation","NewRelic::Stats","classes/NewRelic/Stats.html#M000856","()","",2],["start","NewRelic::Agent::Agent::InstanceMethods","classes/NewRelic/Agent/Agent/InstanceMethods.html#M000064","()","Logs a bunch of data and starts the agent, if needed ",2],["start","NewRelic::Agent::ShimAgent","classes/NewRelic/Agent/ShimAgent.html#M000393","(*args;)","",2],["start_agent","NewRelic::Control::InstanceMethods","classes/NewRelic/Control/InstanceMethods.html#M000685","()","Install the real agent into the Agent module, and issue the start command. ",2],["start_builder","NewRelic::Agent::TransactionSampler","classes/NewRelic/Agent/TransactionSampler.html#M000565","(time=nil)","Checks to see if the transaction sampler is disabled, if transaction trace recording is disabled by a",2],["start_sampler_thread","NewRelic::Agent::StatsEngine::Samplers","classes/NewRelic/Agent/StatsEngine/Samplers.html#M000472","()","starts the sampler thread which runs periodically, rather than at harvest time. This is deprecated, and",2],["start_time","NewRelic::TransactionSample","classes/NewRelic/TransactionSample.html#M000933","()","",2],["start_transaction","NewRelic::Agent::Agent::InstanceMethods","classes/NewRelic/Agent/Agent/InstanceMethods.html#M000033","()","Tells the statistics engine we are starting a new transaction ",2],["start_transaction","NewRelic::Agent::Instrumentation::MetricFrame","classes/NewRelic/Agent/Instrumentation/MetricFrame.html#M000237","()","This needs to be called after entering the call to trace the controller action, otherwise the controller",2],["start_transaction","NewRelic::Agent::StatsEngine::Transactions","classes/NewRelic/Agent/StatsEngine/Transactions.html#M000490","(name = nil)","Start a new transaction, unless one is already in progress ",2],["start_worker_thread","NewRelic::Agent::Agent::InstanceMethods","classes/NewRelic/Agent/Agent/InstanceMethods.html#M000081","(connection_options = {})","Try to launch the worker thread and connect to the server. See #connect for a description of connection_options.",2],["started?","NewRelic::Agent::Agent::InstanceMethods","classes/NewRelic/Agent/Agent/InstanceMethods.html#M000030","()","True if we have initialized and completed 'start' ",2],["stat_engine","NewRelic::Agent::MethodTracer::InstanceMethods::TraceExecutionScoped","classes/NewRelic/Agent/MethodTracer/InstanceMethods/TraceExecutionScoped.html#M000333","()","Shorthand to return the current statistics engine ",2],["stats","NewRelic::Agent::Samplers::DelayedJobLockSampler","classes/NewRelic/Agent/Samplers/DelayedJobLockSampler.html#M000345","()","",2],["stats","NewRelic::Agent::Samplers::MemorySampler","classes/NewRelic/Agent/Samplers/MemorySampler.html#M000369","()","",2],["stats","NewRelic::Agent::Samplers::ObjectSampler","classes/NewRelic/Agent/Samplers/ObjectSampler.html#M000389","()","",2],["stats_hash","NewRelic::Agent::StatsEngine::MetricStats","classes/NewRelic/Agent/StatsEngine/MetricStats.html#M000471","()","returns a memoized SynchronizedHash that holds the actual instances of Stats keyed off their MetricName",2],["stop","NewRelic::Agent::WorkerLoop","classes/NewRelic/Agent/WorkerLoop.html#M000529","()","Sets @should_run to false. Returns false ",2],["store_force_persist","NewRelic::Agent::TransactionSampler","classes/NewRelic/Agent/TransactionSampler.html#M000539","(sample)","",2],["store_random_sample","NewRelic::Agent::TransactionSampler","classes/NewRelic/Agent/TransactionSampler.html#M000538","(sample)","Only active when random sampling is true - this is very rarely used. Always store the most recent sample",2],["store_sample","NewRelic::Agent::TransactionSampler","classes/NewRelic/Agent/TransactionSampler.html#M000537","(sample)","Samples can be stored in three places: the random sample variable, when random sampling is active, the",2],["store_sample_for_developer_mode","NewRelic::Agent::TransactionSampler","classes/NewRelic/Agent/TransactionSampler.html#M000540","(sample)","Samples take up a ton of memory, so we only store a lot of them in developer mode - we truncate to @max_samples",2],["store_slowest_sample","NewRelic::Agent::TransactionSampler","classes/NewRelic/Agent/TransactionSampler.html#M000541","(sample)","Sets @slowest_sample to the passed in sample if it is slower than the current sample in @slowest_sample",2],["store_too_large?","NewRelic::DataSerialization::ClassMethods","classes/NewRelic/DataSerialization/ClassMethods.html#M000729","()","",2],["store_too_old?","NewRelic::DataSerialization::ClassMethods","classes/NewRelic/DataSerialization/ClassMethods.html#M000728","()","",2],["strip_nr_from_backtrace","NewRelic::CollectionHelper","classes/NewRelic/CollectionHelper.html#M000579","(backtrace)","Return an array of strings (backtrace), cleaned up for readability Return nil if there is no backtrace",2],["sub","NewRelic::MetricSpec","classes/NewRelic/MetricSpec.html#M000788","(pattern, replacement, apply_to_scope = true)","return a new metric spec if the given regex matches the name or scope. ",2],["sum_attributes","NewRelic::Stats","classes/NewRelic/Stats.html#M000836","(other)","",2],["sum_merge!","NewRelic::Stats","classes/NewRelic/Stats.html#M000835","(other_stats)","merge by adding to average response time - used to compose multiple metrics e.g. dispatcher time + mongrel",2],["summary","NewRelic::Stats","classes/NewRelic/Stats.html#M000863","()","Summary string to facilitate testing ",2],["supported_on_this_platform?","NewRelic::Agent::Sampler","classes/NewRelic/Agent/Sampler.html#M000312","()","Override with check.  Called before instantiating. ",2],["supported_on_this_platform?","NewRelic::Agent::Samplers::CpuSampler","classes/NewRelic/Agent/Samplers/CpuSampler.html#M000330","()","",2],["supported_on_this_platform?","NewRelic::Agent::Samplers::DelayedJobLockSampler","classes/NewRelic/Agent/Samplers/DelayedJobLockSampler.html#M000350","()","",2],["supported_on_this_platform?","NewRelic::Agent::Samplers::MemorySampler","classes/NewRelic/Agent/Samplers/MemorySampler.html#M000366","()","",2],["supported_on_this_platform?","NewRelic::Agent::Samplers::ObjectSampler","classes/NewRelic/Agent/Samplers/ObjectSampler.html#M000390","()","",2],["sync_startup","NewRelic::Control::Configuration","classes/NewRelic/Control/Configuration.html#M000641","()","Configuration option of the same name to indicate that we should connect to New Relic synchronously on",2],["system_util_stats","NewRelic::Agent::Samplers::CpuSampler","classes/NewRelic/Agent/Samplers/CpuSampler.html#M000324","()","",2],["systemtime_stats","NewRelic::Agent::Samplers::CpuSampler","classes/NewRelic/Agent/Samplers/CpuSampler.html#M000329","()","",2],["threads","NewRelic::Rack::DeveloperMode","classes/NewRelic/Rack/DeveloperMode.html#M000817","()","",2],["time_percentage","NewRelic::Stats","classes/NewRelic/Stats.html#M000857","()","returns the time spent in this component as a percentage of the total time window. ",2],["time_percentage","NewRelic::TransactionAnalysis","classes/NewRelic/TransactionAnalysis.html#M000897","(regex)","",2],["time_str","NewRelic::Stats","classes/NewRelic/Stats.html#M000831","(value_ms)","outputs a useful human-readable time given a value in milliseconds ",2],["timestamp","NewRelic::TransactionSample","classes/NewRelic/TransactionSample.html#M000931","()","offset from start of app ",2],["tiny_version","NewRelic::VersionNumber","classes/NewRelic/VersionNumber.html#M000951","()","",2],["to_debug_str","NewRelic::TransactionSample::Segment","classes/NewRelic/TransactionSample/Segment.html#M000909","(depth)","",2],["to_json","NewRelic::Agent::SqlTrace","classes/NewRelic/Agent/SqlTrace.html#M000457","(*a)","",2],["to_json","NewRelic::MetricData","classes/NewRelic/MetricData.html#M000765","(*a)","Serialize with all attributes, but if the metric id is not nil, then don't send the metric spec ",2],["to_json","NewRelic::MetricSpec","classes/NewRelic/MetricSpec.html#M000794","(*a)","",2],["to_json","NewRelic::StatsBase","classes/NewRelic/StatsBase.html#M000877","(*a)","",2],["to_json","NewRelic::TransactionSample::Segment","classes/NewRelic/TransactionSample/Segment.html#M000906","(options={})","",2],["to_s","NewRelic::Agent::Samplers::MemorySampler::JavaHeapSampler","classes/NewRelic/Agent/Samplers/MemorySampler/JavaHeapSampler.html#M000375","()","",2],["to_s","NewRelic::Agent::Samplers::MemorySampler::ProcStatus","classes/NewRelic/Agent/Samplers/MemorySampler/ProcStatus.html#M000382","()","",2],["to_s","NewRelic::Agent::Samplers::MemorySampler::ShellPS","classes/NewRelic/Agent/Samplers/MemorySampler/ShellPS.html#M000378","()","",2],["to_s","NewRelic::LocalEnvironment","classes/NewRelic/LocalEnvironment.html#M000804","()","outputs a human-readable description ",2],["to_s","NewRelic::MetricData","classes/NewRelic/MetricData.html#M000768","()","",2],["to_s","NewRelic::MetricSpec","classes/NewRelic/MetricSpec.html#M000792","()","",2],["to_s","NewRelic::Stats","classes/NewRelic/Stats.html#M000862","()","",2],["to_s","NewRelic::TransactionSample","classes/NewRelic/TransactionSample.html#M000942","()","",2],["to_s","NewRelic::TransactionSample::Segment","classes/NewRelic/TransactionSample/Segment.html#M000905","()","",2],["to_s","NewRelic::VersionNumber","classes/NewRelic/VersionNumber.html#M000953","()","",2],["to_s_compact","NewRelic::TransactionSample","classes/NewRelic/TransactionSample.html#M000939","()","",2],["to_s_compact","NewRelic::TransactionSample::Segment","classes/NewRelic/TransactionSample/Segment.html#M000908","()","",2],["to_stdout","NewRelic::Control::Frameworks::Merb","classes/NewRelic/Control/Frameworks/Merb.html#M000625","(msg)","",2],["to_stdout","NewRelic::Control::Frameworks::Rails","classes/NewRelic/Control/Frameworks/Rails.html#M000660","(message)","",2],["to_stdout","NewRelic::Control::Frameworks::Rails3","classes/NewRelic/Control/Frameworks/Rails3.html#M000669","(msg)","",2],["to_stdout","NewRelic::Control::Frameworks::Ruby","classes/NewRelic/Control/Frameworks/Ruby.html#M000679","(msg)","",2],["to_stdout","NewRelic::Control::LoggingMethods","classes/NewRelic/Control/LoggingMethods.html#M000710","(msg)","simply puts a message to standard out, prepended with the '** [NewRelic]' sigil to make sure people know",2],["total_call_time_per_minute","NewRelic::Stats","classes/NewRelic/Stats.html#M000855","()","",2],["total_time_percentage","NewRelic::TransactionAnalysis::SegmentSummary","classes/NewRelic/TransactionAnalysis/SegmentSummary.html#M000870","()","",2],["trace_call","NewRelic::MethodTraceStats","classes/NewRelic/MethodTraceStats.html#M000886","(value, exclusive_time = value)","Alias for #record_data_point",2],["trace_call","NewRelic::ScopedMethodTraceStats","classes/NewRelic/ScopedMethodTraceStats.html#M000894","(call_time, exclusive_time = call_time)","",2],["trace_disabled?","NewRelic::Agent::MethodTracer::InstanceMethods::TraceExecutionScoped","classes/NewRelic/Agent/MethodTracer/InstanceMethods/TraceExecutionScoped.html#M000332","(options)","Tracing is disabled if we are not in a traced context and no force option is supplied ",2],["trace_entry","NewRelic::Agent::TransactionSampleBuilder","classes/NewRelic/Agent/TransactionSampleBuilder.html#M000507","(metric_name, time)","",2],["trace_execution_scoped","NewRelic::Agent::MethodTracer::InstanceMethods::TraceExecutionScoped","classes/NewRelic/Agent/MethodTracer/InstanceMethods/TraceExecutionScoped.html#M000347","(metric_names, options={})","Trace a given block with stats and keep track of the caller. See NewRelic::Agent::MethodTracer::ClassMethods#add_method_tracer",2],["trace_execution_scoped_footer","NewRelic::Agent::MethodTracer::InstanceMethods::TraceExecutionScoped","classes/NewRelic/Agent/MethodTracer/InstanceMethods/TraceExecutionScoped.html#M000343","(t0, first_name, metric_stats, expected_scope, forced, t1=Time.now.to_f)","Handles the end of the #trace_execution_scoped method - calculating the time taken, popping the tracing",2],["trace_execution_scoped_header","NewRelic::Agent::MethodTracer::InstanceMethods::TraceExecutionScoped","classes/NewRelic/Agent/MethodTracer/InstanceMethods/TraceExecutionScoped.html#M000342","(metric, options, t0=Time.now.to_f)","provides the header for our traced execution scoped method - gets the initial time, sets the tracing",2],["trace_execution_unscoped","NewRelic::Agent::MethodTracer::InstanceMethods","classes/NewRelic/Agent/MethodTracer/InstanceMethods.html#M000320","(metric_names, options={})","Trace a given block with stats assigned to the given metric_name.  It does not provide scoped measurements,",2],["trace_exit","NewRelic::Agent::TransactionSampleBuilder","classes/NewRelic/Agent/TransactionSampleBuilder.html#M000508","(metric_name, time)","",2],["trace_method_execution_no_scope","NewRelic::Agent::MethodTracer::InstanceMethods","classes/NewRelic/Agent/MethodTracer/InstanceMethods.html#M000326","(metric_names, options={})","Alias for #trace_execution_unscoped",2],["traced?","NewRelic::Agent::Instrumentation::MetricFrame::Pop","classes/NewRelic/Agent/Instrumentation/MetricFrame/Pop.html#M000219","()","",2],["traced?","NewRelic::Agent::MethodTracer::InstanceMethods::TraceExecutionScoped","classes/NewRelic/Agent/MethodTracer/InstanceMethods/TraceExecutionScoped.html#M000328","()","Shorthand to return the status of tracing ",2],["traced_method_exists?","NewRelic::Agent::MethodTracer::ClassMethods::AddMethodTracer","classes/NewRelic/Agent/MethodTracer/ClassMethods/AddMethodTracer.html#M000360","(method_name, metric_name_code)","Checks to see if we have already traced a method with a given metric by checking to see if the traced",2],["transaction_data","NewRelic::Agent::SqlSampler","classes/NewRelic/Agent/SqlSampler.html#M000423","()","",2],["transaction_sampler","NewRelic::Agent::Instrumentation::MetricFrame","classes/NewRelic/Agent/Instrumentation/MetricFrame.html#M000229","()","",2],["transaction_sampler=","NewRelic::Agent::StatsEngine::Transactions","classes/NewRelic/Agent/StatsEngine/Transactions.html#M000483","(sampler)","add a new transaction sampler, unless we're currently in a transaction (then we fail) ",2],["tried_to_connect?","NewRelic::Agent::Agent::InstanceMethods::Connect","classes/NewRelic/Agent/Agent/InstanceMethods/Connect.html#M000087","(options)","We've tried to connect if @connected is not nil, or if we are forcing reconnection (i.e. in the case",2],["truncate","NewRelic::CollectionHelper","classes/NewRelic/CollectionHelper.html#M000587","(string, len=DEFAULT_TRUNCATION_SIZE)","",2],["truncate","NewRelic::TransactionSample","classes/NewRelic/TransactionSample.html#M000929","(max)","Truncates the transaction sample to a maximum length determined by the passed-in parameter. Operates",2],["truncate","NewRelic::TransactionSample::Segment","classes/NewRelic/TransactionSample/Segment.html#M000914","(max)","Walk through the tree and truncate the segments in a depth-first manner ",2],["truncate!","NewRelic::MetricSpec","classes/NewRelic/MetricSpec.html#M000782","()","truncates the name and scope to the MAX_LENGTH ",2],["truncate_each_child","NewRelic::TransactionSample::Segment","classes/NewRelic/TransactionSample/Segment.html#M000915","(max)","",2],["truncate_file","NewRelic::DataSerialization::ClassMethods","classes/NewRelic/DataSerialization/ClassMethods.html#M000742","()","",2],["truncate_message","NewRelic::Agent::TransactionSampler","classes/NewRelic/Agent/TransactionSampler.html#M000549","(message)","Truncates the message to `MAX_DATA_LENGTH` if needed, and appends an ellipsis because it makes the trucation",2],["truncate_samples","NewRelic::Agent::TransactionSampler","classes/NewRelic/Agent/TransactionSampler.html#M000543","()","Smashes the @samples array down to the length of @max_samples by taking the last @max_samples elements",2],["tt_guid","NewRelic::Agent::BrowserMonitoring","classes/NewRelic/Agent/BrowserMonitoring.html#M000018","()","",2],["tt_token","NewRelic::Agent::BrowserMonitoring","classes/NewRelic/Agent/BrowserMonitoring.html#M000022","()","",2],["ui_name","NewRelic::TransactionAnalysis::SegmentSummary","classes/NewRelic/TransactionAnalysis/SegmentSummary.html#M000874","()","",2],["unrecognized_keys","NewRelic::Agent::MethodTracer::ClassMethods::AddMethodTracer","classes/NewRelic/Agent/MethodTracer/ClassMethods/AddMethodTracer.html#M000352","(expected, given)","used to verify that the keys passed to NewRelic::Agent::MethodTracer::ClassMethods#add_method_tracer",2],["unsent_errors_size","NewRelic::Agent::Agent::InstanceMethods","classes/NewRelic/Agent/Agent/InstanceMethods.html#M000013","()","Returns the length of the unsent errors array, if it exists, otherwise nil ",2],["unsent_timeslice_data","NewRelic::Agent::Agent::InstanceMethods","classes/NewRelic/Agent/Agent/InstanceMethods.html#M000020","()","Initializes the unsent timeslice data hash, if needed, and returns the number of keys it contains ",2],["unsent_traces_size","NewRelic::Agent::Agent::InstanceMethods","classes/NewRelic/Agent/Agent/InstanceMethods.html#M000019","()","Returns the length of the traces array, if it exists, otherwise nil ",2],["update_apdex","NewRelic::Agent::Instrumentation::MetricFrame","classes/NewRelic/Agent/Instrumentation/MetricFrame.html#M000262","(stat, duration, failed)","Record an apdex value for the given stat.  when `failed` the apdex should be recorded as a failure regardless",2],["update_boundaries","NewRelic::Stats","classes/NewRelic/Stats.html#M000838","(other)","",2],["update_last_sent!","NewRelic::DataSerialization::ClassMethods","classes/NewRelic/DataSerialization/ClassMethods.html#M000726","()","touches the age file that determines whether we should send data now or not ",2],["update_totals","NewRelic::Stats","classes/NewRelic/Stats.html#M000841","(other)","",2],["uri","NewRelic::Agent::Instrumentation::MetricFrame","classes/NewRelic/Agent/Instrumentation/MetricFrame.html#M000234","()","For the current web transaction, return the path of the URI minus the host part and query string, or",2],["uri_from_request","NewRelic::Agent::Instrumentation::MetricFrame","classes/NewRelic/Agent/Instrumentation/MetricFrame.html#M000260","(request)","Make a safe attempt to get the URI, without the host and query string. ",2],["uri_ref_and_root","NewRelic::Agent::ErrorCollector::NoticeError","classes/NewRelic/Agent/ErrorCollector/NoticeError.html#M000141","(options)","returns some basic option defaults pulled from the provided options hash ",2],["use_harvest_sampler?","NewRelic::Agent::Sampler","classes/NewRelic/Agent/Sampler.html#M000313","()","Override to use the periodic sampler instead of running the sampler on the minute during harvests. ",2],["use_ssl?","NewRelic::Control::Configuration","classes/NewRelic/Control/Configuration.html#M000650","()","",2],["use_textmate?","NewRelic::Control::Configuration","classes/NewRelic/Control/Configuration.html#M000639","()","True if we should view files in textmate ",2],["user_agent","NewRelic::Agent::Agent::InstanceMethods","classes/NewRelic/Agent/Agent/InstanceMethods.html#M000166","()","Sets the user agent for connections to the server, to conform with the HTTP spec and allow for debugging.",2],["user_attributes","NewRelic::Agent::BrowserMonitoring::DummyMetricFrame","classes/NewRelic/Agent/BrowserMonitoring/DummyMetricFrame.html#M000007","()","",2],["user_attributes","NewRelic::Agent::Instrumentation::MetricFrame","classes/NewRelic/Agent/Instrumentation/MetricFrame.html#M000246","()","",2],["user_attributes","NewRelic::Agent::Instrumentation::MetricFrame","classes/NewRelic/Agent/Instrumentation/MetricFrame.html#M000252","()","",2],["user_util_stats","NewRelic::Agent::Samplers::CpuSampler","classes/NewRelic/Agent/Samplers/CpuSampler.html#M000323","()","",2],["usertime_stats","NewRelic::Agent::Samplers::CpuSampler","classes/NewRelic/Agent/Samplers/CpuSampler.html#M000325","()","",2],["using_engine?","NewRelic::LanguageSupport","classes/NewRelic/LanguageSupport.html#M000748","(engine)","",2],["using_forking_dispatcher?","NewRelic::Agent::Agent::InstanceMethods::Start","classes/NewRelic/Agent/Agent/InstanceMethods/Start.html#M000062","()","If we're using a dispatcher that forks before serving requests, we need to wait until the children are",2],["using_sinatra?","NewRelic::Agent::Agent::InstanceMethods::Start","classes/NewRelic/Agent/Agent/InstanceMethods/Start.html#M000049","()","If we're using sinatra, old versions run in an at_exit block so we should probably know that ",2],["using_version?","NewRelic::LanguageSupport","classes/NewRelic/LanguageSupport.html#M000749","(version)","",2],["validate_options","NewRelic::Agent::MethodTracer::ClassMethods::AddMethodTracer","classes/NewRelic/Agent/MethodTracer/ClassMethods/AddMethodTracer.html#M000357","(options)","Checks the provided options to make sure that they make sense. Raises an error if the options are incorrect",2],["validate_seed","NewRelic::Control::Configuration","classes/NewRelic/Control/Configuration.html#M000648","()","",2],["validate_settings","NewRelic::Agent::Agent::InstanceMethods::Connect","classes/NewRelic/Agent/Agent/InstanceMethods/Connect.html#M000100","()","These validation settings are used for cases where a dynamic server is spun up for clients - partners",2],["validate_token","NewRelic::Control::Configuration","classes/NewRelic/Control/Configuration.html#M000649","()","",2],["vendor_root","NewRelic::Control::Frameworks::Rails3","classes/NewRelic/Control/Frameworks/Rails3.html#M000670","()","",2],["verify_certificate?","NewRelic::Control::Configuration","classes/NewRelic/Control/Configuration.html#M000654","()","only verify certificates if you're very sure you want this level of security, it includes possibly app-crashing",2],["version","NewRelic::Control::Frameworks::Rails3","classes/NewRelic/Control/Frameworks/Rails3.html#M000671","()","",2],["weird_ruby?","NewRelic::Agent::Agent::InstanceMethods::Start","classes/NewRelic/Agent/Agent/InstanceMethods/Start.html#M000050","()","we should not set an at_exit block if people are using these as they don't do standard at_exit behavior",2],["with_database_metric_name","NewRelic::Agent","classes/NewRelic/Agent.html#M000592","(model, method, &block)","Yield to a block that is run with a database metric name context.  This means the Database instrumentation",2],["with_database_metric_name","NewRelic::Agent::Instrumentation::MetricFrame","classes/NewRelic/Agent/Instrumentation/MetricFrame.html#M000250","(model, method)","Yield to a block that is run with a database metric name context.  This means the Database instrumentation",2],["with_locked_store","NewRelic::DataSerialization::ClassMethods","classes/NewRelic/DataSerialization/ClassMethods.html#M000731","()","",2],["worker_name","NewRelic::Agent::Samplers::DelayedJobLockSampler","classes/NewRelic/Agent/Samplers/DelayedJobLockSampler.html#M000348","()","",2],["working_jruby?","NewRelic::LocalEnvironment","classes/NewRelic/LocalEnvironment.html#M000775","()","it's a working jruby if it has the runtime method, and object space is enabled ",2],["write_contents_nonblockingly","NewRelic::DataSerialization::ClassMethods","classes/NewRelic/DataSerialization/ClassMethods.html#M000733","(f, string)","",2],["CHANGELOG","files/CHANGELOG.html","files/CHANGELOG.html","","v3.3.1   * improved Ruby 1.8.6 support   * fix for issues with RAILS_ROOT deprecation warnings   * fixed",3],["LICENSE","files/LICENSE.html","files/LICENSE.html","","This product includes jquery written by John Resig and distributed under an MIT license. See https://github.com/jquery/jquery/blob/master/MIT-LICENSE.txt",3],["README.rdoc","files/README_rdoc.html","files/README_rdoc.html","","= New Relic Ruby Agent  New Relic is a performance management system, developed by New Relic, Inc (http://www.newrelic.com).",3],["conditional_vendored_dependency_detection.rb","files/lib/conditional_vendored_dependency_detection_rb.html","files/lib/conditional_vendored_dependency_detection_rb.html","","",3],["conditional_vendored_metric_parser.rb","files/lib/conditional_vendored_metric_parser_rb.html","files/lib/conditional_vendored_metric_parser_rb.html","","",3],["agent.rb","files/lib/new_relic/agent_rb.html","files/lib/new_relic/agent_rb.html","","",3],["agent.rb","files/lib/new_relic/agent/agent_rb.html","files/lib/new_relic/agent/agent_rb.html","","",3],["beacon_configuration.rb","files/lib/new_relic/agent/beacon_configuration_rb.html","files/lib/new_relic/agent/beacon_configuration_rb.html","","",3],["browser_monitoring.rb","files/lib/new_relic/agent/browser_monitoring_rb.html","files/lib/new_relic/agent/browser_monitoring_rb.html","","",3],["busy_calculator.rb","files/lib/new_relic/agent/busy_calculator_rb.html","files/lib/new_relic/agent/busy_calculator_rb.html","","",3],["chained_call.rb","files/lib/new_relic/agent/chained_call_rb.html","files/lib/new_relic/agent/chained_call_rb.html","","This class is used by NewRelic::Agent.set_sql_obfuscator to chain multiple obfuscation blocks when not",3],["database.rb","files/lib/new_relic/agent/database_rb.html","files/lib/new_relic/agent/database_rb.html","","",3],["error_collector.rb","files/lib/new_relic/agent/error_collector_rb.html","files/lib/new_relic/agent/error_collector_rb.html","","",3],["instrumentation.rb","files/lib/new_relic/agent/instrumentation_rb.html","files/lib/new_relic/agent/instrumentation_rb.html","","",3],["active_merchant.rb","files/lib/new_relic/agent/instrumentation/active_merchant_rb.html","files/lib/new_relic/agent/instrumentation/active_merchant_rb.html","","",3],["active_record.rb","files/lib/new_relic/agent/instrumentation/active_record_rb.html","files/lib/new_relic/agent/instrumentation/active_record_rb.html","","",3],["acts_as_solr.rb","files/lib/new_relic/agent/instrumentation/acts_as_solr_rb.html","files/lib/new_relic/agent/instrumentation/acts_as_solr_rb.html","","",3],["authlogic.rb","files/lib/new_relic/agent/instrumentation/authlogic_rb.html","files/lib/new_relic/agent/instrumentation/authlogic_rb.html","","",3],["controller_instrumentation.rb","files/lib/new_relic/agent/instrumentation/controller_instrumentation_rb.html","files/lib/new_relic/agent/instrumentation/controller_instrumentation_rb.html","","",3],["data_mapper.rb","files/lib/new_relic/agent/instrumentation/data_mapper_rb.html","files/lib/new_relic/agent/instrumentation/data_mapper_rb.html","","NewRelic instrumentation for DataMapper Instrumenting DM has different key challenges versus AR: 1. The",3],["delayed_job_instrumentation.rb","files/lib/new_relic/agent/instrumentation/delayed_job_instrumentation_rb.html","files/lib/new_relic/agent/instrumentation/delayed_job_instrumentation_rb.html","","",3],["memcache.rb","files/lib/new_relic/agent/instrumentation/memcache_rb.html","files/lib/new_relic/agent/instrumentation/memcache_rb.html","","NOTE there are multiple implementations of the MemCache client in Ruby, each with slightly different",3],["controller.rb","files/lib/new_relic/agent/instrumentation/merb/controller_rb.html","files/lib/new_relic/agent/instrumentation/merb/controller_rb.html","","",3],["errors.rb","files/lib/new_relic/agent/instrumentation/merb/errors_rb.html","files/lib/new_relic/agent/instrumentation/merb/errors_rb.html","","",3],["metric_frame.rb","files/lib/new_relic/agent/instrumentation/metric_frame_rb.html","files/lib/new_relic/agent/instrumentation/metric_frame_rb.html","","",3],["pop.rb","files/lib/new_relic/agent/instrumentation/metric_frame/pop_rb.html","files/lib/new_relic/agent/instrumentation/metric_frame/pop_rb.html","","",3],["net.rb","files/lib/new_relic/agent/instrumentation/net_rb.html","files/lib/new_relic/agent/instrumentation/net_rb.html","","",3],["passenger_instrumentation.rb","files/lib/new_relic/agent/instrumentation/passenger_instrumentation_rb.html","files/lib/new_relic/agent/instrumentation/passenger_instrumentation_rb.html","","",3],["queue_time.rb","files/lib/new_relic/agent/instrumentation/queue_time_rb.html","files/lib/new_relic/agent/instrumentation/queue_time_rb.html","","",3],["rack.rb","files/lib/new_relic/agent/instrumentation/rack_rb.html","files/lib/new_relic/agent/instrumentation/rack_rb.html","","",3],["action_controller.rb","files/lib/new_relic/agent/instrumentation/rails/action_controller_rb.html","files/lib/new_relic/agent/instrumentation/rails/action_controller_rb.html","","",3],["action_web_service.rb","files/lib/new_relic/agent/instrumentation/rails/action_web_service_rb.html","files/lib/new_relic/agent/instrumentation/rails/action_web_service_rb.html","","",3],["errors.rb","files/lib/new_relic/agent/instrumentation/rails/errors_rb.html","files/lib/new_relic/agent/instrumentation/rails/errors_rb.html","","",3],["action_controller.rb","files/lib/new_relic/agent/instrumentation/rails3/action_controller_rb.html","files/lib/new_relic/agent/instrumentation/rails3/action_controller_rb.html","","",3],["errors.rb","files/lib/new_relic/agent/instrumentation/rails3/errors_rb.html","files/lib/new_relic/agent/instrumentation/rails3/errors_rb.html","","",3],["sinatra.rb","files/lib/new_relic/agent/instrumentation/sinatra_rb.html","files/lib/new_relic/agent/instrumentation/sinatra_rb.html","","",3],["sunspot.rb","files/lib/new_relic/agent/instrumentation/sunspot_rb.html","files/lib/new_relic/agent/instrumentation/sunspot_rb.html","","",3],["unicorn_instrumentation.rb","files/lib/new_relic/agent/instrumentation/unicorn_instrumentation_rb.html","files/lib/new_relic/agent/instrumentation/unicorn_instrumentation_rb.html","","",3],["method_tracer.rb","files/lib/new_relic/agent/method_tracer_rb.html","files/lib/new_relic/agent/method_tracer_rb.html","","",3],["sampler.rb","files/lib/new_relic/agent/sampler_rb.html","files/lib/new_relic/agent/sampler_rb.html","","A Sampler is used to capture meaningful metrics in a background thread periodically.  They will either",3],["cpu_sampler.rb","files/lib/new_relic/agent/samplers/cpu_sampler_rb.html","files/lib/new_relic/agent/samplers/cpu_sampler_rb.html","","",3],["delayed_job_lock_sampler.rb","files/lib/new_relic/agent/samplers/delayed_job_lock_sampler_rb.html","files/lib/new_relic/agent/samplers/delayed_job_lock_sampler_rb.html","","",3],["memory_sampler.rb","files/lib/new_relic/agent/samplers/memory_sampler_rb.html","files/lib/new_relic/agent/samplers/memory_sampler_rb.html","","",3],["object_sampler.rb","files/lib/new_relic/agent/samplers/object_sampler_rb.html","files/lib/new_relic/agent/samplers/object_sampler_rb.html","","",3],["shim_agent.rb","files/lib/new_relic/agent/shim_agent_rb.html","files/lib/new_relic/agent/shim_agent_rb.html","","This agent is loaded by the plug when the plug-in is disabled It recreates just enough of the API to",3],["sql_sampler.rb","files/lib/new_relic/agent/sql_sampler_rb.html","files/lib/new_relic/agent/sql_sampler_rb.html","","",3],["stats_engine.rb","files/lib/new_relic/agent/stats_engine_rb.html","files/lib/new_relic/agent/stats_engine_rb.html","","",3],["gc_profiler.rb","files/lib/new_relic/agent/stats_engine/gc_profiler_rb.html","files/lib/new_relic/agent/stats_engine/gc_profiler_rb.html","","",3],["metric_stats.rb","files/lib/new_relic/agent/stats_engine/metric_stats_rb.html","files/lib/new_relic/agent/stats_engine/metric_stats_rb.html","","",3],["samplers.rb","files/lib/new_relic/agent/stats_engine/samplers_rb.html","files/lib/new_relic/agent/stats_engine/samplers_rb.html","","",3],["transactions.rb","files/lib/new_relic/agent/stats_engine/transactions_rb.html","files/lib/new_relic/agent/stats_engine/transactions_rb.html","","",3],["transaction_info.rb","files/lib/new_relic/agent/transaction_info_rb.html","files/lib/new_relic/agent/transaction_info_rb.html","","",3],["transaction_sample_builder.rb","files/lib/new_relic/agent/transaction_sample_builder_rb.html","files/lib/new_relic/agent/transaction_sample_builder_rb.html","","",3],["transaction_sampler.rb","files/lib/new_relic/agent/transaction_sampler_rb.html","files/lib/new_relic/agent/transaction_sampler_rb.html","","",3],["worker_loop.rb","files/lib/new_relic/agent/worker_loop_rb.html","files/lib/new_relic/agent/worker_loop_rb.html","","",3],["collection_helper.rb","files/lib/new_relic/collection_helper_rb.html","files/lib/new_relic/collection_helper_rb.html","","",3],["command.rb","files/lib/new_relic/command_rb.html","files/lib/new_relic/command_rb.html","","",3],["deployments.rb","files/lib/new_relic/commands/deployments_rb.html","files/lib/new_relic/commands/deployments_rb.html","","This is a class for executing commands related to deployment events.  It runs without loading the rails",3],["install.rb","files/lib/new_relic/commands/install_rb.html","files/lib/new_relic/commands/install_rb.html","","",3],["control.rb","files/lib/new_relic/control_rb.html","files/lib/new_relic/control_rb.html","","",3],["class_methods.rb","files/lib/new_relic/control/class_methods_rb.html","files/lib/new_relic/control/class_methods_rb.html","","",3],["configuration.rb","files/lib/new_relic/control/configuration_rb.html","files/lib/new_relic/control/configuration_rb.html","","",3],["frameworks.rb","files/lib/new_relic/control/frameworks_rb.html","files/lib/new_relic/control/frameworks_rb.html","","",3],["external.rb","files/lib/new_relic/control/frameworks/external_rb.html","files/lib/new_relic/control/frameworks/external_rb.html","","",3],["merb.rb","files/lib/new_relic/control/frameworks/merb_rb.html","files/lib/new_relic/control/frameworks/merb_rb.html","","",3],["rails.rb","files/lib/new_relic/control/frameworks/rails_rb.html","files/lib/new_relic/control/frameworks/rails_rb.html","","",3],["rails3.rb","files/lib/new_relic/control/frameworks/rails3_rb.html","files/lib/new_relic/control/frameworks/rails3_rb.html","","",3],["ruby.rb","files/lib/new_relic/control/frameworks/ruby_rb.html","files/lib/new_relic/control/frameworks/ruby_rb.html","","",3],["sinatra.rb","files/lib/new_relic/control/frameworks/sinatra_rb.html","files/lib/new_relic/control/frameworks/sinatra_rb.html","","",3],["instance_methods.rb","files/lib/new_relic/control/instance_methods_rb.html","files/lib/new_relic/control/instance_methods_rb.html","","",3],["instrumentation.rb","files/lib/new_relic/control/instrumentation_rb.html","files/lib/new_relic/control/instrumentation_rb.html","","",3],["logging_methods.rb","files/lib/new_relic/control/logging_methods_rb.html","files/lib/new_relic/control/logging_methods_rb.html","","",3],["profiling.rb","files/lib/new_relic/control/profiling_rb.html","files/lib/new_relic/control/profiling_rb.html","","",3],["server_methods.rb","files/lib/new_relic/control/server_methods_rb.html","files/lib/new_relic/control/server_methods_rb.html","","",3],["data_serialization.rb","files/lib/new_relic/data_serialization_rb.html","files/lib/new_relic/data_serialization_rb.html","","",3],["delayed_job_injection.rb","files/lib/new_relic/delayed_job_injection_rb.html","files/lib/new_relic/delayed_job_injection_rb.html","","",3],["language_support.rb","files/lib/new_relic/language_support_rb.html","files/lib/new_relic/language_support_rb.html","","",3],["local_environment.rb","files/lib/new_relic/local_environment_rb.html","files/lib/new_relic/local_environment_rb.html","","",3],["merbtasks.rb","files/lib/new_relic/merbtasks_rb.html","files/lib/new_relic/merbtasks_rb.html","","",3],["metric_data.rb","files/lib/new_relic/metric_data_rb.html","files/lib/new_relic/metric_data_rb.html","","",3],["metric_spec.rb","files/lib/new_relic/metric_spec_rb.html","files/lib/new_relic/metric_spec_rb.html","","this struct uniquely defines a metric, optionally inside the call scope of another metric ",3],["metrics.rb","files/lib/new_relic/metrics_rb.html","files/lib/new_relic/metrics_rb.html","","",3],["noticed_error.rb","files/lib/new_relic/noticed_error_rb.html","files/lib/new_relic/noticed_error_rb.html","","This class encapsulates an error that was noticed by New Relic in a managed app. ",3],["browser_monitoring.rb","files/lib/new_relic/rack/browser_monitoring_rb.html","files/lib/new_relic/rack/browser_monitoring_rb.html","","",3],["developer_mode.rb","files/lib/new_relic/rack/developer_mode_rb.html","files/lib/new_relic/rack/developer_mode_rb.html","","",3],["recipes.rb","files/lib/new_relic/recipes_rb.html","files/lib/new_relic/recipes_rb.html","","When installed as a plugin this is loaded automatically. When installed as a gem, you need to add require",3],["stats.rb","files/lib/new_relic/stats_rb.html","files/lib/new_relic/stats_rb.html","","",3],["timer_lib.rb","files/lib/new_relic/timer_lib_rb.html","files/lib/new_relic/timer_lib_rb.html","","Copyright:  (C) 2008 David Vollbracht & Philippe Hanrigou ",3],["transaction_analysis.rb","files/lib/new_relic/transaction_analysis_rb.html","files/lib/new_relic/transaction_analysis_rb.html","","",3],["segment_summary.rb","files/lib/new_relic/transaction_analysis/segment_summary_rb.html","files/lib/new_relic/transaction_analysis/segment_summary_rb.html","","",3],["transaction_sample.rb","files/lib/new_relic/transaction_sample_rb.html","files/lib/new_relic/transaction_sample_rb.html","","",3],["composite_segment.rb","files/lib/new_relic/transaction_sample/composite_segment_rb.html","files/lib/new_relic/transaction_sample/composite_segment_rb.html","","",3],["fake_segment.rb","files/lib/new_relic/transaction_sample/fake_segment_rb.html","files/lib/new_relic/transaction_sample/fake_segment_rb.html","","",3],["segment.rb","files/lib/new_relic/transaction_sample/segment_rb.html","files/lib/new_relic/transaction_sample/segment_rb.html","","",3],["summary_segment.rb","files/lib/new_relic/transaction_sample/summary_segment_rb.html","files/lib/new_relic/transaction_sample/summary_segment_rb.html","","",3],["url_rule.rb","files/lib/new_relic/url_rule_rb.html","files/lib/new_relic/url_rule_rb.html","","Represents url mapping rules stored on the server.  These rules should be applied to URLs which are not",3],["version.rb","files/lib/new_relic/version_rb.html","files/lib/new_relic/version_rb.html","","",3],["newrelic_rpm.rb","files/lib/newrelic_rpm_rb.html","files/lib/newrelic_rpm_rb.html","","== New Relic Initialization When installed as a gem, you can activate the New Relic agent one of the",3],["all.rb","files/lib/tasks/all_rb.html","files/lib/tasks/all_rb.html","","This is required to load in task definitions from merb ",3],["install.rake","files/lib/tasks/install_rake.html","files/lib/tasks/install_rake.html","","# run unit tests for the NewRelic Agent namespace :newrelic do   desc \"install a default config/newrelic.yml",3],["tests.rake","files/lib/tasks/tests_rake.html","files/lib/tasks/tests_rake.html","","# run unit tests for the NewRelic Agent begin   require 'rake/test_task' rescue LoadError => e end  if",3],["newrelic.yml","files/newrelic_yml.html","files/newrelic_yml.html","","# # This file configures the New Relic Ruby Agent, New Relic monitors # Rails applications with deep",3]],"searchIndex":["actioncontroller","base","actionview","base","partials","partialrenderer","agent","agent","classmethods","instancemethods","connect","start","startworkerthread","backgroundloadingerror","beaconconfiguration","browsermonitoring","dummymetricframe","busycalculator","database","connectionmanager","obfuscator","errorcollector","noticeerror","forcedisconnectexception","forcerestartexception","instrumentation","activerecord","controllerinstrumentation","classmethods","datamapperinstrumentation","memcache","metricframe","pop","queuetime","rack","rails3","actioncontroller","actionview","partialrenderer","errors","sinatra","licenseexception","methodtracer","classmethods","addmethodtracer","instancemethods","traceexecutionscoped","posttoobigexception","sampler","unsupported","samplers","cpusampler","delayedjoblocksampler","memorysampler","base","javaheapsampler","procstatus","shellps","objectsampler","serverconnectionexception","servererror","shimagent","slowsql","sqlsampler","sqltrace","statsengine","gcprofiler","profiler","railsbench","rubinius","ruby19","metricstats","harvest","synchronizedhash","samplers","scopestackelement","transactions","transactioninfo","transactionsamplebuilder","transactionsampler","transactionsqldata","workerloop","apdexstats","basicstats","chainedcall","collectionhelper","command","commandfailure","deployments","install","control","classmethods","configuration","frameworks","external","merb","rails","rails3","ruby","sinatra","instancemethods","instrumentation","loggingmethods","profiling","servermethods","dataserialization","classmethods","delayedjobinjection","instrumentation","actsassolrinstrumentation","parsermethodsinstrumentation","languagesupport","control","dataserialization","synchronizedhash","localenvironment","merbbootloader","methodtracestats","metricdata","metricspec","metrics","noticederror","rack","browsermonitoring","developermode","railtie","scopedmethodtracestats","stats","statsbase","transactionanalysis","segmentsummary","transactionsample","compositesegment","fakesegment","segment","summarysegment","urlrule","ruleset","versionnumber","object","<<()","<=>()","<=>()","==()","[]()","[]()","[]=()","[]=()","[]=()","_call()","_convert_args_to_path()","_detect_upstream_wait()","_dispatch_stat()","_install_instrumentation()","_is_filtered?()","_record_queue_length()","_sanitize_name()","_traced_method_name()","_untraced_method_name()","abort_transaction!()","abort_transaction!()","abort_transaction!()","absent?()","add_called_segment()","add_custom_parameters()","add_custom_parameters()","add_custom_parameters()","add_data_to_send_unless_empty()","add_end_time_header()","add_force_persist_to()","add_harvest_sampler()","add_instrumentation()","add_instrumentation()","add_method_tracer()","add_random_sample_to()","add_request_parameters()","add_sampler()","add_sampler_to()","add_samples_to()","add_segments()","add_to_error_queue()","add_transaction_tracer()","after_fork()","after_fork()","after_fork()","after_fork()","after_fork_with_newrelic()","agent()","agent()","agent_config()","agent_enabled?()","agent_instance()","aggregate()","already_started?()","any_unrecognized_keys?()","apdex_f()","apdex_f_threshold?()","apdex_score()","apdex_t()","api_server()","app()","app_names()","append_backtrace()","append_environment_info()","append_environment_info()","append_environment_info()","append_environment_value()","append_gem_list()","append_new_message()","append_plugin_list()","apply()","as_percentage()","as_percentage_of()","assemble_code_header()","autoinstrument_source()","average_call_time()","average_exclusive_time()","average_exclusive_time()","average_response_time()","average_time()","average_value()","begin_time()","begin_time=()","breakdown_data()","browser_monitoring_app_time()","browser_monitoring_auto_instrument?()","browser_monitoring_queue_time()","browser_monitoring_start_time()","browser_monitoring_transaction_name()","browser_timing_footer()","browser_timing_footer()","browser_timing_footer()","browser_timing_header()","browser_timing_header()","browser_timing_header()","build_browser_timing_header()","build_load_file_js()","build_segment_for_transfer()","build_segment_with_omissions()","builder()","bundler_gem_list()","busy_count()","call()","call()","call()","call()","call()","call_count()","call_count()","call_count()","call_time()","call_time()","call_time()","call_with_newrelic()","call_without_newrelic()","call_without_newrelic()","called_segments()","called_segments=()","calls_per_minute()","can_run?()","capture()","capture()","capture_params()","capture_segment_trace()","catch_errors()","cert_file_path()","check_config_and_start_agent()","check_for_alternate_queue_length()","check_for_exception()","check_for_fastcgi()","check_for_glassfish()","check_for_heroku_queue_length()","check_for_illegal_keys!()","check_for_litespeed()","check_for_mongrel()","check_for_passenger()","check_for_push_scope_and_metric()","check_for_sinatra()","check_for_thin()","check_for_torquebox()","check_for_trinidad()","check_for_unicorn()","check_for_webrick()","check_post_size()","check_rails_version()","check_server_connection=()","check_sql_sampler_status()","check_transaction_sampler_status()","checked_calculation()","clamp_number_tts()","clamp_to_positive()","clear()","clear()","clear_builder()","clear_stats()","clear_thread_metric_frame!()","clear_transaction_data()","clone_and_reset_stats()","close_connections()","close_connections()","code_to_eval()","coerce_to_metric_spec()","collector()","command()","command()","compare()","compress_data()","config()","config()","config()","config_file()","config_file()","config_transaction_tracer()","configure!()","configure!()","configure_error_collector!()","configure_transaction_tracer!()","connect()","connect_in_foreground()","connect_settings()","connect_to_server()","connected?()","consistent_hash()","content()","content_tag()","control()","control()","convert_from_microseconds()","convert_to_ip_address()","convert_to_microseconds()","convert_to_name_time_pair()","correct_license_length()","count_segments()","count_segments()","cpu_burn()","create_and_run_worker_loop()","create_pid_file()","create_segment()","create_transaction_data()","current()","current_metric()","current_metric_frame()","current_sample_id()","current_stack_metric()","custom_parameters()","custom_parameters()","custom_params_from_opts()","database_metric_name()","database_time()","decompress_response()","default_metric_name_code()","default_port()","default_sql_obfuscator()","deferred_work!()","delete()","delete_if()","detail_segments=()","determine_home_directory()","determine_host()","developer_mode?()","disable()","disable()","disable_all_tracing()","disable_backtrace_cleanup?()","disable_serialization=()","disable_serialization?()","disable_sql_recording()","disable_transaction_tracing()","disabled?()","disabled?()","disconnect()","discover_dispatcher()","discover_framework()","dispatcher()","dispatcher_finish()","dispatcher_instance_id()","dispatcher_instance_id()","dispatcher_start()","do_not_trace?()","dump()","duration()","duration()","duration()","duration()","each()","each_segment()","each_segment()","each_segment_with_nest_tracking()","each_segment_with_nest_tracking()","enable()","enable()","enable_random_samples!()","enabled?()","enabled?()","enabled?()","enabled?()","enabled?()","end_time()","end_time=()","end_trace()","end_transaction()","end_transaction()","end_transaction!()","ensure_segment_count_set()","env()","env()","env()","env()","env()","environment_for_connect()","eql?()","eql?()","eql?()","err()","error_is_ignored?()","error_params_from_options()","exception_info()","exclusive_duration()","exclusive_time_percentage()","exclusive_time_percentage()","expand_min_max_to()","explain()","explain_sql()","explain_sql()","explain_sql()","explain_statement()","extract_source()","extract_stack_trace()","fetch()","fetch_from_options()","file_path()","fill_metric_id_cache()","filtered_by_error_filter?()","filtered_error?()","find_class_in_object_space()","find_oldest_time()","find_or_create_file_path()","find_segment()","find_segment()","finish_setup()","finish_trace()","flatten()","footer_js_string()","force_persist_sample?()","fraction_of()","framework()","freeze()","freeze()","gather_ar_adapter_info()","gather_architecture_info()","gather_cpu_info()","gather_db_info()","gather_dm_adapter_info()","gather_environment_info()","gather_jruby_info()","gather_os_info()","gather_revision_info()","gather_ruby_info()","gather_system_info()","generate_footer_js()","generate_guid()","get()","get_apdex()","get_connection()","get_connection()","get_custom_stats()","get_data_from_file()","get_matches()","get_matches_from_header()","get_memory()","get_memory()","get_memory()","get_metric_stats()","get_retry_period()","get_sample()","get_sample()","get_samples()","get_segment()","get_stats()","get_stats()","get_stats_hash_from()","get_stats_no_scope()","get_stats_no_scope()","get_stats_scoped()","get_stats_unscoped()","graceful_disconnect()","guid()","guid=()","handle_empty_path_stack()","handle_exception_in_explain()","handle_force_disconnect()","handle_force_restart()","handle_license_error()","handle_other_error()","handle_server_connection_problem()","harvest()","harvest()","harvest_and_send_errors()","harvest_and_send_slowest_sample()","harvest_and_send_slowest_sql()","harvest_and_send_timeslice_data()","harvest_busy()","harvest_errors()","harvest_errors()","harvest_samplers()","harvest_slow_sql()","harvest_timeslice_data()","harvest_timeslice_data()","harvest_transaction_traces()","has_correct_license_key?()","has_license_key?()","has_slow_sql_config?()","hash()","hash()","hash()","html_safe_if_needed()","http_connection()","ignore()","ignore_apdex?()","ignore_error_filter()","ignore_error_filter()","ignore_transaction()","ignore_transaction()","ignored?()","include_guid?()","included()","included()","included()","included()","included()","increment_count()","increment_error_count!()","index()","info()","inherited()","inherited()","init()","init_config()","init_config()","init_config()","init_config()","init_config()","init_plugin()","initialize_with_new_relic()","insert_instrumentation()","inspect()","inspect()","inspect()","install_browser_monitoring()","install_developer_mode()","install_exit_handler()","install_instrumentation()","install_shim()","install_shim()","instance()","instance()","instance()","instance_busy_stats()","instrument_methods()","invoke_remote()","is_application_spawner?()","is_execution_traced?()","is_reset?()","is_select?()","is_sql_recorded?()","is_transaction_traced?()","is_web_transaction?()","javascript_header()","jruby_cpu_burn()","jruby_rack?()","keep_running()","license_bytes()","license_key()","load()","load()","load_data()","load_framework_class()","load_instrumentation_files()","load_newrelic_yml()","load_newrelic_yml()","load_samplers()","load_test_framework()","local_env()","local_env()","lock()","locked_jobs()","log()","log()","log()","log()","log()","log!()","log!()","log!()","log_added_sampler()","log_app_names()","log_connection!()","log_dispatcher()","log_error()","log_errors()","log_file_name()","log_file_path()","log_if()","log_path()","log_seed_token()","log_sql_transmission_warning?()","log_to_stdout?()","log_underflow()","log_unless()","log_version_and_pid()","log_with_newrelic_instrumentation()","log_with_newrelic_instrumentation()","log_worker_loop_start()","logger()","logger()","logger()","lookup_stats()","main_stat()","major_version()","manual_start()","max_size()","memcache_key_snippet()","merge()","merge()","merge!()","merge_attributes()","merge_data()","merge_data_from()","merge_data_from()","merge_defaults()","merge_old_data!()","merge_options()","merge_server_side_config()","merge_stats()","method_with_push_scope()","method_without_push_scope()","metric_for_name()","metric_for_sql()","metric_frame_attribute()","metric_name()","metric_spec=()","metrics()","midpoint()","min_time_less?()","minor_version()","mongrel()","monitor_mode?()","monitoring?()","multi_threaded?()","multiply_by()","need_to_explain?()","need_to_obfuscate?()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new_instance()","newrelic_ignore()","newrelic_ignore_apdex()","newrelic_method_exists?()","newrelic_metric_path()","newrelic_metric_path()","newrelic_metric_path()","newrelic_notice_error()","newrelic_notice_error()","newrelic_request()","newrelic_request_headers()","newrelic_request_headers()","newrelic_response_code()","newrelic_root()","newrelic_root()","normal_cpu_burn()","normalize()","normalize_params()","normalized_request_and_custom_params()","notice_error()","notice_error()","notice_error()","notice_extra_data()","notice_first_scope_push()","notice_first_scope_push()","notice_nosql()","notice_pop_scope()","notice_profile()","notice_push_scope()","notice_scope_empty()","notice_scope_empty()","notice_scope_empty()","notice_sql()","notice_sql()","notice_transaction()","notice_transaction()","notice_transaction_cpu_time()","notify_log_file_location()","notify_transaction_sampler()","obfuscate()","obfuscate()","obfuscate_sql()","obfuscated_sql()","omit_segments_with()","open_arguments()","options()","options()","original_spec()","over_queue_limit?()","params()","params()","params=()","params=()","parent_segment=()","parse_end_time()","parse_frontend_headers()","parse_middleware_time_from()","parse_query_with_newrelic()","parse_queue_time_from()","parse_server_time_from()","path()","path_string()","path_string()","peek_scope()","perform_action_with_newrelic_profile()","perform_action_with_newrelic_trace()","periodic_samplers()","pid_file_path()","pid_too_old?()","platform()","platform()","poll()","poll()","poll()","poll()","poll()","poll()","pop()","pop_flag!()","pop_scope()","pop_trace_execution_flag()","pop_trace_execution_flag()","post_size_limit()","prepare_to_send()","prepare_to_send()","proc_status_file()","process_action()","process_cpu()","process_resultset()","profile()","profiling=()","profiling?()","profiling_available?()","proxy_server()","push()","push_flag!()","push_scope()","push_trace_execution_flag()","push_trace_execution_flag()","query_server_for_configuration()","queue_time()","queue_time()","rails_gem_list()","rails_vendor_root()","rails_version()","read_and_write_to_file()","read_until_eof_error()","record_apdex()","record_apdex()","record_apdex_f()","record_apdex_s()","record_apdex_t()","record_data_point()","record_gc_metric()","record_individual_middleware_stats()","record_individual_server_stats()","record_individual_stat_of_type()","record_jruby_cpu_burn()","record_middleware_time_for()","record_multiple_data_points()","record_multiple_data_points()","record_rollup_middleware_stat()","record_rollup_queue_stat()","record_rollup_server_stat()","record_rollup_stat_of_type()","record_server_time_for()","record_time_stat()","record_transaction()","record_transaction()","record_transaction_cpu()","recorded_metrics()","recording_web_transaction?()","recording_web_transaction?()","referer()","referer()","referer_from_request()","remote_method_uri()","remote_service_metric()","remove_server_controlled_configs()","remove_transaction_sampler()","render()","render_collection()","render_partial()","render_time()","render_with_layout()","render_without_layout()","request_params_from_opts()","request_with_newrelic_trace()","requests_per_minute()","rescue_action_with_newrelic_trace()","reset()","reset()","reset()","reset()","reset()","reset()","reset()","reset!()","reset!()","reset_stats()","reset_stats()","reset_stats()","resolve_ip_address()","rollup_metrics_for()","root()","root()","root()","root()","root()","route_eval_with_newrelic()","run()","run()","run()","run()","run()","run_task()","sample()","sample()","sample_id()","sampler_classes()","sampling_rate=()","save_data()","save_or_transmit_data()","scope_depth()","scope_depth()","scope_name()","scope_name=()","scope_stack()","scope_stack()","segment()","send_data_on_exit()","send_request()","sense_method()","serialize()","serialize()","server()","server_from_host()","set()","set_collector_host!()","set_deduct_call_time_based_on_metric()","set_if_nil()","set_log_format!()","set_log_level!()","set_new_scope!()","set_primary()","set_profile()","set_record_sql()","set_record_tt()","set_sql_obfuscator()","set_sql_obfuscator()","set_sql_obfuscator()","set_sql_recording!()","set_transaction_cpu_time()","set_transaction_info()","set_transaction_info()","set_user_attributes()","set_user_attributes()","set_user_attributes()","settings()","setup_log()","should_exit_notice_error?()","should_instrument?()","should_keep_retrying?()","should_log?()","should_replace_begin_time?()","should_replace_end_time?()","should_retry?()","should_send_data?()","show_sample_data()","show_source()","shutdown()","shutdown()","shutdown()","slowest_sample?()","snapshot()","split()","sql_sampler()","sql_segments()","stack_min_max_from()","standard_deviation()","start()","start()","start_agent()","start_builder()","start_sampler_thread()","start_time()","start_transaction()","start_transaction()","start_transaction()","start_worker_thread()","started?()","stat_engine()","stats()","stats()","stats()","stats_hash()","stop()","store_force_persist()","store_random_sample()","store_sample()","store_sample_for_developer_mode()","store_slowest_sample()","store_too_large?()","store_too_old?()","strip_nr_from_backtrace()","sub()","sum_attributes()","sum_merge!()","summary()","supported_on_this_platform?()","supported_on_this_platform?()","supported_on_this_platform?()","supported_on_this_platform?()","supported_on_this_platform?()","sync_startup()","system_util_stats()","systemtime_stats()","threads()","time_percentage()","time_percentage()","time_str()","timestamp()","tiny_version()","to_debug_str()","to_json()","to_json()","to_json()","to_json()","to_json()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s_compact()","to_s_compact()","to_stdout()","to_stdout()","to_stdout()","to_stdout()","to_stdout()","total_call_time_per_minute()","total_time_percentage()","trace_call()","trace_call()","trace_disabled?()","trace_entry()","trace_execution_scoped()","trace_execution_scoped_footer()","trace_execution_scoped_header()","trace_execution_unscoped()","trace_exit()","trace_method_execution_no_scope()","traced?()","traced?()","traced_method_exists?()","transaction_data()","transaction_sampler()","transaction_sampler=()","tried_to_connect?()","truncate()","truncate()","truncate()","truncate!()","truncate_each_child()","truncate_file()","truncate_message()","truncate_samples()","tt_guid()","tt_token()","ui_name()","unrecognized_keys()","unsent_errors_size()","unsent_timeslice_data()","unsent_traces_size()","update_apdex()","update_boundaries()","update_last_sent!()","update_totals()","uri()","uri_from_request()","uri_ref_and_root()","use_harvest_sampler?()","use_ssl?()","use_textmate?()","user_agent()","user_attributes()","user_attributes()","user_attributes()","user_util_stats()","usertime_stats()","using_engine?()","using_forking_dispatcher?()","using_sinatra?()","using_version?()","validate_options()","validate_seed()","validate_settings()","validate_token()","vendor_root()","verify_certificate?()","version()","weird_ruby?()","with_database_metric_name()","with_database_metric_name()","with_locked_store()","worker_name()","working_jruby?()","write_contents_nonblockingly()","changelog","license","readme.rdoc","conditional_vendored_dependency_detection.rb","conditional_vendored_metric_parser.rb","agent.rb","agent.rb","beacon_configuration.rb","browser_monitoring.rb","busy_calculator.rb","chained_call.rb","database.rb","error_collector.rb","instrumentation.rb","active_merchant.rb","active_record.rb","acts_as_solr.rb","authlogic.rb","controller_instrumentation.rb","data_mapper.rb","delayed_job_instrumentation.rb","memcache.rb","controller.rb","errors.rb","metric_frame.rb","pop.rb","net.rb","passenger_instrumentation.rb","queue_time.rb","rack.rb","action_controller.rb","action_web_service.rb","errors.rb","action_controller.rb","errors.rb","sinatra.rb","sunspot.rb","unicorn_instrumentation.rb","method_tracer.rb","sampler.rb","cpu_sampler.rb","delayed_job_lock_sampler.rb","memory_sampler.rb","object_sampler.rb","shim_agent.rb","sql_sampler.rb","stats_engine.rb","gc_profiler.rb","metric_stats.rb","samplers.rb","transactions.rb","transaction_info.rb","transaction_sample_builder.rb","transaction_sampler.rb","worker_loop.rb","collection_helper.rb","command.rb","deployments.rb","install.rb","control.rb","class_methods.rb","configuration.rb","frameworks.rb","external.rb","merb.rb","rails.rb","rails3.rb","ruby.rb","sinatra.rb","instance_methods.rb","instrumentation.rb","logging_methods.rb","profiling.rb","server_methods.rb","data_serialization.rb","delayed_job_injection.rb","language_support.rb","local_environment.rb","merbtasks.rb","metric_data.rb","metric_spec.rb","metrics.rb","noticed_error.rb","browser_monitoring.rb","developer_mode.rb","recipes.rb","stats.rb","timer_lib.rb","transaction_analysis.rb","segment_summary.rb","transaction_sample.rb","composite_segment.rb","fake_segment.rb","segment.rb","summary_segment.rb","url_rule.rb","version.rb","newrelic_rpm.rb","all.rb","install.rake","tests.rake","newrelic.yml"],"longSearchIndex":["lib/new_relic/agent/instrumentation/rails3/action_controller.rb","actioncontroller","lib/new_relic/agent/instrumentation/rails3/action_controller.rb","actionview","actionview","actionview::partials","newrelic","newrelic::agent","newrelic::agent::agent","newrelic::agent::agent","newrelic::agent::agent::instancemethods","newrelic::agent::agent::instancemethods","newrelic::agent::agent::instancemethods","newrelic::agent","newrelic::agent","newrelic::agent","newrelic::agent::browsermonitoring","newrelic::agent","newrelic::agent","newrelic::agent::database","newrelic::agent::database","newrelic::agent","newrelic::agent::errorcollector","newrelic::agent","newrelic::agent","newrelic::agent","newrelic::agent::instrumentation","newrelic::agent::instrumentation","newrelic::agent::instrumentation::controllerinstrumentation","newrelic::agent::instrumentation","newrelic::agent::instrumentation","newrelic::agent::instrumentation","newrelic::agent::instrumentation::metricframe","newrelic::agent::instrumentation","newrelic::agent::instrumentation","newrelic::agent::instrumentation","newrelic::agent::instrumentation::rails3","newrelic::agent::instrumentation::rails3","newrelic::agent::instrumentation::rails3::actionview","newrelic::agent::instrumentation::rails3","newrelic::agent::instrumentation","newrelic::agent","newrelic::agent","newrelic::agent::methodtracer","newrelic::agent::methodtracer::classmethods","newrelic::agent::methodtracer","newrelic::agent::methodtracer::instancemethods","newrelic::agent","newrelic::agent","newrelic::agent::sampler","newrelic::agent","newrelic::agent::samplers","newrelic::agent::samplers","newrelic::agent::samplers","newrelic::agent::samplers::memorysampler","newrelic::agent::samplers::memorysampler","newrelic::agent::samplers::memorysampler","newrelic::agent::samplers::memorysampler","newrelic::agent::samplers","newrelic::agent","newrelic::agent","newrelic::agent","newrelic::agent","newrelic::agent","newrelic::agent","newrelic::agent","newrelic::agent::statsengine","newrelic::agent::statsengine::gcprofiler","newrelic::agent::statsengine::gcprofiler","newrelic::agent::statsengine::gcprofiler","newrelic::agent::statsengine::gcprofiler","newrelic::agent::statsengine","newrelic::agent::statsengine::metricstats","newrelic::agent::statsengine::metricstats","newrelic::agent::statsengine","newrelic::agent::statsengine","newrelic::agent::statsengine","newrelic::agent","newrelic::agent","newrelic::agent","newrelic::agent","newrelic::agent","newrelic","newrelic","newrelic","newrelic","newrelic","newrelic::command","newrelic::command","newrelic::command","newrelic","newrelic::control","newrelic::control","newrelic::control","newrelic::control::frameworks","newrelic::control::frameworks","newrelic::control::frameworks","newrelic::control::frameworks","newrelic::control::frameworks","newrelic::control::frameworks","newrelic::control","newrelic::control","newrelic::control","newrelic::control","newrelic::control","newrelic","newrelic::dataserialization","newrelic","newrelic","newrelic::instrumentation","newrelic::instrumentation::actsassolrinstrumentation","newrelic","newrelic::languagesupport","newrelic::languagesupport","newrelic::languagesupport","newrelic","newrelic","newrelic","newrelic","newrelic","newrelic","newrelic","newrelic","newrelic::rack","newrelic::rack","newrelic","newrelic","newrelic","newrelic","newrelic","newrelic::transactionanalysis","newrelic","newrelic::transactionsample","newrelic::transactionsample","newrelic::transactionsample","newrelic::transactionsample","newrelic","newrelic::urlrule","newrelic","lib/new_relic/agent/instrumentation/active_record.rb","newrelic::transactionanalysis::segmentsummary","newrelic::metricspec","newrelic::versionnumber","newrelic::metricspec","newrelic::control::configuration","newrelic::transactionsample::segment","newrelic::agent::statsengine::metricstats::synchronizedhash","newrelic::control::configuration","newrelic::transactionsample::segment","newrelic::rack::developermode","newrelic::agent::instrumentation::controllerinstrumentation","newrelic::agent::instrumentation::controllerinstrumentation","newrelic::agent::instrumentation::controllerinstrumentation","newrelic::control::instrumentation","newrelic::agent::instrumentation::controllerinstrumentation","newrelic::agent::instrumentation::controllerinstrumentation","newrelic::agent::methodtracer::classmethods","newrelic::agent::methodtracer::classmethods","newrelic::agent::methodtracer::classmethods","newrelic::agent","newrelic::agent::instrumentation::metricframe","newrelic::agent::instrumentation::metricframe","newrelic::stats","newrelic::transactionsample::segment","newrelic::agent","newrelic::agent::instrumentation::metricframe","newrelic::agent::instrumentation::metricframe","newrelic::agent::statsengine::metricstats::harvest","newrelic::agent::instrumentation::queuetime","newrelic::agent::transactionsampler","newrelic::agent::statsengine::samplers","newrelic::agent","newrelic::control::instrumentation","newrelic::agent::methodtracer::classmethods","newrelic::agent::transactionsampler","newrelic::agent","newrelic::agent::statsengine::samplers","newrelic::agent::statsengine::samplers","newrelic::agent::transactionsampler","newrelic::transactionsample::summarysegment","newrelic::agent::errorcollector::noticeerror","newrelic::agent::instrumentation::controllerinstrumentation::classmethods","newrelic::agent","newrelic::agent::agent::instancemethods","newrelic::agent::shimagent","object","object","newrelic::agent::instrumentation::metricframe","newrelic::agent::instrumentation::metricframe","newrelic::agent::sqltrace","newrelic::control::instancemethods","newrelic::agent::methodtracer::instancemethods::traceexecutionscoped","newrelic::agent::sqltrace","newrelic::agent::agent::instancemethods::start","newrelic::agent::methodtracer::classmethods::addmethodtracer","newrelic::agent::agent::instancemethods::connect","newrelic::agent::agent::instancemethods::connect","newrelic::stats","newrelic::control::configuration","newrelic::control::servermethods","newrelic::control::instancemethods","newrelic::control::configuration","newrelic::agent::transactionsampler","newrelic::control::frameworks::rails","newrelic::control::frameworks::rails3","newrelic::control::instancemethods","newrelic::localenvironment","newrelic::localenvironment","newrelic::agent::transactionsampler","newrelic::localenvironment","newrelic::urlrule","newrelic::stats","newrelic::stats","newrelic::agent::methodtracer::classmethods::addmethodtracer","newrelic::rack::browsermonitoring","newrelic::stats","newrelic::stats","newrelic::transactionanalysis::segmentsummary","newrelic::stats","newrelic::transactionanalysis::segmentsummary","newrelic::stats","newrelic::statsbase","newrelic::statsbase","newrelic::transactionanalysis","newrelic::agent::browsermonitoring","newrelic::control::configuration","newrelic::agent::browsermonitoring","newrelic::agent::browsermonitoring","newrelic::agent::browsermonitoring","newrelic::agent","newrelic::agent::browsermonitoring","newrelic::agent::shimagent","newrelic::agent","newrelic::agent::browsermonitoring","newrelic::agent::shimagent","newrelic::agent::beaconconfiguration","newrelic::agent::beaconconfiguration","newrelic::transactionsample","newrelic::transactionsample","newrelic::agent::transactionsampler","newrelic::control::instancemethods","newrelic::agent::busycalculator","newrelic::agent::instrumentation::rack","newrelic::agent::instrumentation::rack","newrelic::chainedcall","newrelic::rack::browsermonitoring","newrelic::rack::developermode","newrelic::agent::statsengine::gcprofiler::railsbench","newrelic::agent::statsengine::gcprofiler::rubinius","newrelic::agent::statsengine::gcprofiler::ruby19","newrelic::agent::statsengine::gcprofiler::railsbench","newrelic::agent::statsengine::gcprofiler::rubinius","newrelic::agent::statsengine::gcprofiler::ruby19","newrelic::agent::instrumentation::rack","newrelic::agent::instrumentation::rack","newrelic::agent::instrumentation::rack","newrelic::transactionsample::segment","newrelic::transactionsample::segment","newrelic::stats","newrelic::agent::samplers::memorysampler::base","newrelic::agent::statsengine::gcprofiler","newrelic::agent::statsengine::gcprofiler::profiler","newrelic::control::configuration","newrelic::agent::transactionsampler","newrelic::agent::agent::instancemethods::startworkerthread","newrelic::control::servermethods","newrelic::agent::agent::instancemethods::start","newrelic::agent::instrumentation::queuetime","newrelic::agent::agent::instancemethods","newrelic::localenvironment","newrelic::localenvironment","newrelic::agent::instrumentation::queuetime","newrelic::agent::methodtracer::classmethods::addmethodtracer","newrelic::localenvironment","newrelic::localenvironment","newrelic::localenvironment","newrelic::agent::methodtracer::classmethods::addmethodtracer","newrelic::localenvironment","newrelic::localenvironment","newrelic::localenvironment","newrelic::localenvironment","newrelic::localenvironment","newrelic::localenvironment","newrelic::agent::agent::instancemethods","newrelic::localenvironment","newrelic::agent::instrumentation::metricframe","newrelic::agent::agent::instancemethods::startworkerthread","newrelic::agent::agent::instancemethods::startworkerthread","newrelic::stats","newrelic::agent::transactionsampler","newrelic::agent::browsermonitoring","newrelic::agent::statsengine::metricstats::synchronizedhash","newrelic::agent::transactioninfo","newrelic::agent::transactionsampler","newrelic::agent::statsengine::metricstats","newrelic::agent::instrumentation::metricframe::pop","newrelic::agent::sqlsampler","newrelic::agent::statsengine::metricstats::harvest","newrelic::agent::database","newrelic::agent::database::connectionmanager","newrelic::agent::methodtracer::classmethods::addmethodtracer","newrelic::agent::statsengine::metricstats::harvest","newrelic::agent::agent::instancemethods","newrelic::command::deployments","newrelic::command::install","newrelic::versionnumber","newrelic::agent::agent::instancemethods","newrelic::agent::sqlsampler","newrelic::agent::sqlsampler","newrelic::agent::transactionsampler","newrelic::control::frameworks::ruby","newrelic::control::instancemethods","newrelic::agent::agent::instancemethods::connect","newrelic::agent::sqlsampler","newrelic::agent::transactionsampler","newrelic::agent::agent::instancemethods::connect","newrelic::agent::agent::instancemethods::connect","newrelic::agent::agent::instancemethods","newrelic::agent::agent::instancemethods::start","newrelic::agent::agent::instancemethods::connect","newrelic::agent::agent::instancemethods::connect","newrelic::agent::agent::instancemethods","newrelic::agent::sqltrace","newrelic::command::install","newrelic::rack::developermode","newrelic::agent::agent::instancemethods","newrelic::agent::errorcollector","newrelic::agent::instrumentation::queuetime","newrelic::control::servermethods","newrelic::agent::instrumentation::queuetime","newrelic::agent::instrumentation::queuetime","newrelic::agent::agent::instancemethods::start","newrelic::transactionsample","newrelic::transactionsample::segment","newrelic::agent::instrumentation::metricframe::pop","newrelic::agent::agent::instancemethods::startworkerthread","newrelic::dataserialization::classmethods","newrelic::transactionsample","newrelic::agent::sqlsampler","newrelic::agent::instrumentation::metricframe","newrelic::agent::instrumentation::metricframe","newrelic::agent::browsermonitoring","newrelic::agent::transactionsampler","newrelic::agent::instrumentation::metricframe::pop","newrelic::agent::instrumentation::metricframe","newrelic::agent::instrumentation::metricframe","newrelic::agent::errorcollector::noticeerror","newrelic::agent::instrumentation::metricframe","newrelic::transactionanalysis","newrelic::agent::agent::instancemethods","newrelic::agent::methodtracer::classmethods::addmethodtracer","newrelic::localenvironment","newrelic::agent::database::obfuscator","newrelic::agent::agent::instancemethods::startworkerthread","newrelic::agent::statsengine::metricstats::synchronizedhash","newrelic::agent::statsengine::metricstats::synchronizedhash","newrelic::transactionsample::compositesegment","newrelic::agent::agent::instancemethods","newrelic::agent::agent::instancemethods","newrelic::control::configuration","newrelic::agent::sqlsampler","newrelic::agent::transactionsampler","newrelic::agent","newrelic::control::configuration","newrelic::control::configuration","newrelic::control::configuration","newrelic::agent","newrelic::agent","newrelic::agent::agent::instancemethods::start","newrelic::agent::errorcollector::noticeerror","newrelic::agent::agent::instancemethods::connect","newrelic::localenvironment","newrelic::localenvironment","newrelic::control::configuration","newrelic::agent::busycalculator","newrelic::control::configuration","newrelic::localenvironment","newrelic::agent::busycalculator","newrelic::agent::instrumentation::controllerinstrumentation","newrelic::dataserialization::classmethods","newrelic::agent::transactioninfo","newrelic::stats","newrelic::transactionsample","newrelic::transactionsample::segment","newrelic::languagesupport::synchronizedhash","newrelic::transactionsample","newrelic::transactionsample::segment","newrelic::transactionsample","newrelic::transactionsample::segment","newrelic::agent::sqlsampler","newrelic::agent::transactionsampler","newrelic::agent::agent::instancemethods::connect","newrelic::agent::sqlsampler","newrelic::agent::statsengine::gcprofiler::railsbench","newrelic::agent::statsengine::gcprofiler::rubinius","newrelic::agent::statsengine::gcprofiler::ruby19","newrelic::agent::transactionsampler","newrelic::statsbase","newrelic::statsbase","newrelic::transactionsample::segment","newrelic::agent::agent::instancemethods","newrelic::agent::statsengine::transactions","newrelic::agent::instrumentation::metricframe::pop","newrelic::transactionsample","newrelic::control::frameworks::merb","newrelic::control::frameworks::rails","newrelic::control::frameworks::rails3","newrelic::control::frameworks::ruby","newrelic::control::frameworks::sinatra","newrelic::agent::agent::instancemethods::connect","newrelic::metricdata","newrelic::metricspec","newrelic::versionnumber","newrelic::command","newrelic::agent::errorcollector::noticeerror","newrelic::agent::errorcollector::noticeerror","newrelic::agent::errorcollector::noticeerror","newrelic::transactionsample::segment","newrelic::stats","newrelic::transactionanalysis::segmentsummary","newrelic::stats","newrelic::agent::slowsql","newrelic::agent::database","newrelic::rack::developermode","newrelic::transactionsample::segment","newrelic::agent::database","newrelic::agent::errorcollector::noticeerror","newrelic::agent::errorcollector::noticeerror","newrelic::control::configuration","newrelic::agent::errorcollector::noticeerror","newrelic::dataserialization::classmethods","newrelic::agent::agent::instancemethods","newrelic::agent::errorcollector::noticeerror","newrelic::agent::errorcollector::noticeerror","newrelic::localenvironment","newrelic::agent::instrumentation::queuetime","newrelic::control::loggingmethods","newrelic::transactionsample","newrelic::transactionsample::segment","newrelic::agent::agent::instancemethods::connect","newrelic::agent::transactionsamplebuilder","newrelic::collectionhelper","newrelic::agent::browsermonitoring","newrelic::agent::transactioninfo","newrelic::stats","newrelic::control::instancemethods","newrelic::agent::transactionsamplebuilder","newrelic::statsbase","newrelic::localenvironment","newrelic::localenvironment","newrelic::localenvironment","newrelic::localenvironment","newrelic::localenvironment","newrelic::localenvironment","newrelic::localenvironment","newrelic::localenvironment","newrelic::localenvironment","newrelic::localenvironment","newrelic::localenvironment","newrelic::agent::browsermonitoring","newrelic::transactionsample","newrelic::agent::transactioninfo","newrelic::stats","newrelic::agent::database","newrelic::agent::database::connectionmanager","newrelic::agent::statsengine::metricstats","newrelic::dataserialization::classmethods","newrelic::agent::instrumentation::queuetime","newrelic::agent::instrumentation::queuetime","newrelic::agent::samplers::memorysampler::javaheapsampler","newrelic::agent::samplers::memorysampler::procstatus","newrelic::agent::samplers::memorysampler::shellps","newrelic::agent::methodtracer::instancemethods::traceexecutionscoped","newrelic::agent::agent::instancemethods::connect","newrelic::agent::samplers::memorysampler::base","newrelic::rack::developermode","newrelic::rack::developermode","newrelic::rack::developermode","newrelic::agent","newrelic::agent::statsengine::metricstats","newrelic::agent::statsengine::metricstats::harvest","newrelic::agent","newrelic::agent::statsengine::metricstats","newrelic::agent::methodtracer::instancemethods::traceexecutionscoped","newrelic::agent::methodtracer::instancemethods::traceexecutionscoped","newrelic::agent::agent::instancemethods","newrelic::agent::transactioninfo","newrelic::agent::transactioninfo","newrelic::agent::instrumentation::metricframe::pop","newrelic::agent::database","newrelic::agent::agent::instancemethods::startworkerthread","newrelic::agent::agent::instancemethods::startworkerthread","newrelic::agent::agent::instancemethods::connect","newrelic::agent::agent::instancemethods::startworkerthread","newrelic::agent::agent::instancemethods::startworkerthread","newrelic::agent::sqlsampler","newrelic::agent::transactionsampler","newrelic::agent::agent::instancemethods","newrelic::agent::agent::instancemethods","newrelic::agent::agent::instancemethods","newrelic::agent::agent::instancemethods","newrelic::agent::busycalculator","newrelic::agent::agent::instancemethods","newrelic::agent::errorcollector","newrelic::agent::statsengine::samplers","newrelic::agent::sqlsampler","newrelic::agent::agent::instancemethods","newrelic::agent::statsengine::metricstats","newrelic::agent::agent::instancemethods","newrelic::agent::agent::instancemethods::start","newrelic::agent::agent::instancemethods::start","newrelic::control::configuration","newrelic::metricdata","newrelic::metricspec","newrelic::versionnumber","newrelic::agent::browsermonitoring","newrelic::control::servermethods","newrelic::agent::errorcollector","newrelic::agent::instrumentation::controllerinstrumentation","newrelic::agent","newrelic::agent::errorcollector","newrelic::agent::transactionsamplebuilder","newrelic::agent::transactionsampler","newrelic::agent::transactionsamplebuilder","newrelic::agent::transactioninfo","newrelic::agent::instrumentation::activerecord","newrelic::agent::instrumentation::datamapperinstrumentation","newrelic::languagesupport::control","newrelic::languagesupport::dataserialization","newrelic::languagesupport::synchronizedhash","newrelic::methodtracestats","newrelic::agent::errorcollector::noticeerror","newrelic::rack::developermode","newrelic::command","newrelic::agent::sampler","newrelic::command","newrelic::agent::statsengine::gcprofiler","newrelic::control::frameworks::external","newrelic::control::frameworks::merb","newrelic::control::frameworks::rails","newrelic::control::frameworks::ruby","newrelic::control::frameworks::sinatra","newrelic::control::instancemethods","object","object","newrelic::methodtracestats","newrelic::metricdata","newrelic::metricspec","newrelic::control::frameworks::rails","newrelic::control::frameworks::rails","newrelic::agent::agent::instancemethods::start","newrelic::control::instrumentation","newrelic::control::frameworks::rails","newrelic::control::instrumentation","newrelic::agent::agent::classmethods","newrelic::agent::shimagent","newrelic::control::classmethods","newrelic::agent::busycalculator","newrelic::agent::instrumentation::memcache","newrelic::agent::agent::instancemethods","newrelic::agent::agent::instancemethods","newrelic::agent","newrelic::stats","newrelic::agent::database","newrelic::agent","newrelic::agent","newrelic::agent::instrumentation::metricframe","newrelic::agent::beaconconfiguration","newrelic::agent::instrumentation::metricframe::pop","newrelic::localenvironment","newrelic::agent::workerloop","newrelic::agent::beaconconfiguration","newrelic::control::configuration","newrelic::dataserialization::classmethods","newrelic::languagesupport::dataserialization","newrelic::agent","newrelic::control::classmethods","newrelic::control::instrumentation","newrelic::control::instancemethods","newrelic::languagesupport::control","newrelic::control::instrumentation","newrelic::control::classmethods","newrelic::agent::samplers::delayedjoblocksampler","newrelic::control::classmethods","newrelic::agent::workerloop","newrelic::agent::samplers::delayedjoblocksampler","newrelic::agent::agent::instancemethods","newrelic::agent::errorcollector","newrelic::agent::statsengine","newrelic::agent::workerloop","newrelic::control::loggingmethods","newrelic::control::frameworks::rails","newrelic::control::frameworks::rails3","newrelic::control::loggingmethods","newrelic::agent::statsengine::samplers","newrelic::agent::agent::instancemethods::start","newrelic::agent::agent::instancemethods::connect","newrelic::agent::agent::instancemethods::start","newrelic::agent::agent::instancemethods::connect","newrelic::agent::methodtracer::instancemethods::traceexecutionscoped","newrelic::control","newrelic::control::configuration","newrelic::agent::agent::instancemethods::start","newrelic::control::loggingmethods","newrelic::agent::agent::instancemethods::connect","newrelic::agent::agent::instancemethods::connect","newrelic::control","newrelic::agent::instrumentation::metricframe::pop","newrelic::agent::agent::instancemethods::start","newrelic::agent::agent::instancemethods::start","newrelic::agent::instrumentation::activerecord","newrelic::agent::instrumentation::datamapperinstrumentation","newrelic::agent::agent::instancemethods::startworkerthread","newrelic::agent","newrelic::control::frameworks::rails","newrelic::control::frameworks::rails3","newrelic::agent::statsengine::metricstats","newrelic::agent::methodtracer::instancemethods::traceexecutionscoped","newrelic::versionnumber","newrelic::agent","newrelic::dataserialization::classmethods","newrelic::agent::instrumentation::memcache","newrelic::agent::sqlsampler","newrelic::stats","newrelic::stats","newrelic::stats","newrelic::agent::statsengine::metricstats::harvest","newrelic::agent::agent::instancemethods","newrelic::agent::shimagent","newrelic::control::configuration","newrelic::agent::statsengine::metricstats::harvest","newrelic::control::configuration","newrelic::control::configuration","newrelic::agent::statsengine::metricstats::harvest","newrelic::agent::methodtracer::classmethods::addmethodtracer","newrelic::agent::methodtracer::classmethods::addmethodtracer","newrelic::agent::instrumentation::activerecord","newrelic::agent::instrumentation::activerecord","newrelic::agent::browsermonitoring","newrelic::agent::instrumentation::metricframe","newrelic::metricdata","newrelic::agent::statsengine::metricstats","newrelic::stats","newrelic::stats","newrelic::versionnumber","newrelic::localenvironment","newrelic::control::configuration","newrelic::agent::agent::instancemethods::start","newrelic::control::configuration","newrelic::stats","newrelic::agent::sqltrace","newrelic::agent::sqltrace","newrelic::agent::agent","newrelic::agent::beaconconfiguration","newrelic::agent::browsermonitoring::dummymetricframe","newrelic::agent::database::obfuscator","newrelic::agent::errorcollector","newrelic::agent::instrumentation::metricframe","newrelic::agent::sampler","newrelic::agent::samplers::cpusampler","newrelic::agent::samplers::delayedjoblocksampler","newrelic::agent::samplers::memorysampler","newrelic::agent::samplers::memorysampler::shellps","newrelic::agent::samplers::objectsampler","newrelic::agent::shimagent","newrelic::agent::slowsql","newrelic::agent::sqlsampler","newrelic::agent::sqltrace","newrelic::agent::statsengine","newrelic::agent::statsengine::gcprofiler::profiler","newrelic::agent::statsengine::metricstats::synchronizedhash","newrelic::agent::statsengine::scopestackelement","newrelic::agent::transactioninfo","newrelic::agent::transactionsamplebuilder","newrelic::agent::transactionsampler","newrelic::agent::transactionsqldata","newrelic::agent::workerloop","newrelic::chainedcall","newrelic::command","newrelic::command::commandfailure","newrelic::command::deployments","newrelic::command::install","newrelic::control::instancemethods","newrelic::localenvironment","newrelic::metricdata","newrelic::metricspec","newrelic::noticederror","newrelic::rack::browsermonitoring","newrelic::rack::developermode","newrelic::scopedmethodtracestats","newrelic::statsbase","newrelic::transactionanalysis::segmentsummary","newrelic::transactionsample","newrelic::transactionsample::compositesegment","newrelic::transactionsample::segment","newrelic::transactionsample::summarysegment","newrelic::versionnumber","newrelic::control::classmethods","newrelic::agent::instrumentation::controllerinstrumentation::classmethods","newrelic::agent::instrumentation::controllerinstrumentation::classmethods","newrelic::agent::methodtracer::classmethods::addmethodtracer","newrelic::agent::instrumentation::rails3::actioncontroller","object","object","newrelic::agent::instrumentation::rails3::errors","object","newrelic::agent::instrumentation::controllerinstrumentation","newrelic::agent::instrumentation::controllerinstrumentation","newrelic::agent::instrumentation::rack","newrelic::agent::instrumentation::controllerinstrumentation","newrelic::control::classmethods","newrelic::control::instancemethods","newrelic::agent::instrumentation::metricframe::pop","newrelic::agent::slowsql","newrelic::collectionhelper","newrelic::agent::errorcollector::noticeerror","newrelic::agent","newrelic::agent::errorcollector","newrelic::agent::instrumentation::metricframe","newrelic::agent::transactionsampler","newrelic::agent::sqlsampler","newrelic::agent::transactionsampler","newrelic::agent::transactionsampler","newrelic::agent::transactionsampler","newrelic::agent::transactionsampler","newrelic::agent::transactionsampler","newrelic::agent::instrumentation::metricframe::pop","newrelic::agent::sqlsampler","newrelic::agent::transactionsampler","newrelic::agent::sqlsampler","newrelic::agent::transactionsampler","newrelic::agent::sqlsampler","newrelic::agent::transactionsampler","newrelic::agent::transactionsampler","newrelic::agent::agent::instancemethods::start","newrelic::agent::instrumentation::metricframe::pop","newrelic::agent::browsermonitoring","newrelic::agent::slowsql","newrelic::agent::database","newrelic::transactionsample::segment","newrelic::transactionsample","newrelic::dataserialization::classmethods","newrelic::command::deployments","newrelic::command::install","newrelic::metricdata","newrelic::agent::errorcollector::noticeerror","newrelic::rack::developermode","newrelic::transactionsample::segment","newrelic::transactionsample","newrelic::transactionsample::segment","newrelic::transactionsample::segment","newrelic::agent::instrumentation::queuetime","newrelic::agent::instrumentation::queuetime","newrelic::agent::instrumentation::queuetime","newrelic::instrumentation::actsassolrinstrumentation::parsermethodsinstrumentation","newrelic::agent::instrumentation::queuetime","newrelic::agent::instrumentation::queuetime","newrelic::agent::instrumentation::metricframe","newrelic::transactionsample","newrelic::transactionsample::segment","newrelic::agent::statsengine::transactions","newrelic::agent::instrumentation::controllerinstrumentation","newrelic::agent::instrumentation::controllerinstrumentation","newrelic::agent::statsengine::samplers","newrelic::dataserialization::classmethods","newrelic::dataserialization::classmethods","newrelic::agent::samplers::memorysampler","newrelic::agent::samplers::memorysampler","newrelic::agent::sampler","newrelic::agent::samplers::cpusampler","newrelic::agent::samplers::delayedjoblocksampler","newrelic::agent::samplers::memorysampler","newrelic::agent::samplers::objectsampler","newrelic::agent::statsengine::samplers","newrelic::agent::instrumentation::metricframe","newrelic::agent::methodtracer::instancemethods::traceexecutionscoped","newrelic::agent::statsengine::transactions","newrelic::agent::agent::instancemethods","newrelic::agent::shimagent","newrelic::control::configuration","newrelic::agent::sqltrace","newrelic::transactionsample","newrelic::agent::samplers::memorysampler::procstatus","newrelic::agent::instrumentation::rails3::actioncontroller","newrelic::agent::instrumentation::metricframe","newrelic::agent::database","newrelic::rack::developermode","newrelic::control::profiling","newrelic::control::profiling","newrelic::control::profiling","newrelic::control::servermethods","newrelic::agent::instrumentation::metricframe","newrelic::agent::methodtracer::instancemethods::traceexecutionscoped","newrelic::agent::statsengine::transactions","newrelic::agent::agent::instancemethods","newrelic::agent::shimagent","newrelic::agent::agent::instancemethods::connect","newrelic::agent::browsermonitoring::dummymetricframe","newrelic::agent::instrumentation::metricframe","newrelic::control::frameworks::rails","newrelic::control::frameworks::rails","newrelic::control::frameworks::rails","newrelic::dataserialization::classmethods","newrelic::dataserialization::classmethods","newrelic::agent::instrumentation::metricframe","newrelic::agent::instrumentation::metricframe","newrelic::apdexstats","newrelic::apdexstats","newrelic::apdexstats","newrelic::methodtracestats","newrelic::agent::statsengine::gcprofiler::profiler","newrelic::agent::instrumentation::queuetime","newrelic::agent::instrumentation::queuetime","newrelic::agent::instrumentation::queuetime","newrelic::agent::instrumentation::metricframe::pop","newrelic::agent::instrumentation::queuetime","newrelic::methodtracestats","newrelic::scopedmethodtracestats","newrelic::agent::instrumentation::queuetime","newrelic::agent::instrumentation::queuetime","newrelic::agent::instrumentation::queuetime","newrelic::agent::instrumentation::queuetime","newrelic::agent::instrumentation::queuetime","newrelic::agent::instrumentation::queuetime","newrelic::agent","newrelic::agent::agent::instancemethods","newrelic::agent::instrumentation::metricframe::pop","newrelic::agent::instrumentation::metricframe","newrelic::agent::instrumentation::metricframe","newrelic::agent::instrumentation::metricframe","newrelic::agent::instrumentation::metricframe","newrelic::agent::instrumentation::metricframe","newrelic::agent::instrumentation::metricframe","newrelic::agent::agent::instancemethods","newrelic::agent::instrumentation::activerecord","newrelic::control::configuration","newrelic::agent::statsengine::transactions","newrelic::rack::developermode","actionview::partials::partialrenderer","actionview::partials::partialrenderer","newrelic::transactionanalysis","newrelic::rack::developermode","newrelic::rack::developermode","newrelic::agent::errorcollector::noticeerror","object","newrelic::stats","object","newrelic::agent::busycalculator","newrelic::agent::database::obfuscator","newrelic::agent::statsengine::gcprofiler::profiler","newrelic::agent::statsengine::gcprofiler::ruby19","newrelic::agent::transactioninfo","newrelic::rack::developermode","newrelic::stats","newrelic::agent::sqlsampler","newrelic::agent::transactionsampler","newrelic::agent","newrelic::agent::agent::instancemethods","newrelic::agent::statsengine::metricstats","newrelic::control::servermethods","newrelic::agent::instrumentation::activerecord","newrelic::control::frameworks::merb","newrelic::control::frameworks::rails","newrelic::control::frameworks::rails3","newrelic::control::frameworks::ruby","newrelic::control::instancemethods","newrelic::agent::instrumentation::sinatra","newrelic::agent::workerloop","newrelic::command","newrelic::command::deployments","newrelic::command::install","newrelic::merbbootloader","newrelic::agent::workerloop","newrelic::agent::transactionsamplebuilder","newrelic::rack::developermode","newrelic::agent::transactionsamplebuilder","newrelic::agent::sampler","newrelic::agent::transactionsampler","newrelic::agent","newrelic::agent::agent::instancemethods","newrelic::agent::transactionsamplebuilder","newrelic::agent::transactionsampler","newrelic::agent::statsengine::transactions","newrelic::agent::statsengine::transactions","newrelic::agent::statsengine::gcprofiler::profiler","newrelic::agent::statsengine::transactions","newrelic::rack::developermode","newrelic::control::configuration","newrelic::agent::agent::instancemethods","newrelic::agent::errorcollector::noticeerror","newrelic::agent::agent::instancemethods","newrelic::agent::shimagent","newrelic::control::servermethods","newrelic::control::servermethods","newrelic::agent::transactioninfo","newrelic::agent::agent::instancemethods::connect","newrelic::agent::methodtracer::classmethods::addmethodtracer","newrelic::agent::methodtracer::instancemethods::traceexecutionscoped","newrelic::control::loggingmethods","newrelic::control::loggingmethods","newrelic::agent::instrumentation::metricframe::pop","newrelic::agent::sqltrace","newrelic::agent::transactionsamplebuilder","newrelic::agent::agent::instancemethods","newrelic::agent::agent::instancemethods","newrelic::agent","newrelic::agent::database","newrelic::agent::database::obfuscator","newrelic::agent::agent::instancemethods::connect","newrelic::agent::transactionsamplebuilder","newrelic::agent::transactionsamplebuilder","newrelic::agent::transactionsqldata","newrelic::agent","newrelic::agent::instrumentation::metricframe","newrelic::agent::instrumentation::metricframe","newrelic::control::configuration","newrelic::control::loggingmethods","newrelic::agent::errorcollector::noticeerror","newrelic::rack::browsermonitoring","newrelic::agent::agent::instancemethods::connect","newrelic::control::loggingmethods","newrelic::stats","newrelic::stats","newrelic::agent::agent::instancemethods::connect","newrelic::dataserialization::classmethods","newrelic::rack::developermode","newrelic::rack::developermode","newrelic::agent","newrelic::agent::agent::instancemethods","newrelic::agent::shimagent","newrelic::agent::transactionsampler","newrelic::localenvironment","newrelic::stats","newrelic::agent::instrumentation::metricframe","newrelic::transactionanalysis","newrelic::stats","newrelic::stats","newrelic::agent::agent::instancemethods","newrelic::agent::shimagent","newrelic::control::instancemethods","newrelic::agent::transactionsampler","newrelic::agent::statsengine::samplers","newrelic::transactionsample","newrelic::agent::agent::instancemethods","newrelic::agent::instrumentation::metricframe","newrelic::agent::statsengine::transactions","newrelic::agent::agent::instancemethods","newrelic::agent::agent::instancemethods","newrelic::agent::methodtracer::instancemethods::traceexecutionscoped","newrelic::agent::samplers::delayedjoblocksampler","newrelic::agent::samplers::memorysampler","newrelic::agent::samplers::objectsampler","newrelic::agent::statsengine::metricstats","newrelic::agent::workerloop","newrelic::agent::transactionsampler","newrelic::agent::transactionsampler","newrelic::agent::transactionsampler","newrelic::agent::transactionsampler","newrelic::agent::transactionsampler","newrelic::dataserialization::classmethods","newrelic::dataserialization::classmethods","newrelic::collectionhelper","newrelic::metricspec","newrelic::stats","newrelic::stats","newrelic::stats","newrelic::agent::sampler","newrelic::agent::samplers::cpusampler","newrelic::agent::samplers::delayedjoblocksampler","newrelic::agent::samplers::memorysampler","newrelic::agent::samplers::objectsampler","newrelic::control::configuration","newrelic::agent::samplers::cpusampler","newrelic::agent::samplers::cpusampler","newrelic::rack::developermode","newrelic::stats","newrelic::transactionanalysis","newrelic::stats","newrelic::transactionsample","newrelic::versionnumber","newrelic::transactionsample::segment","newrelic::agent::sqltrace","newrelic::metricdata","newrelic::metricspec","newrelic::statsbase","newrelic::transactionsample::segment","newrelic::agent::samplers::memorysampler::javaheapsampler","newrelic::agent::samplers::memorysampler::procstatus","newrelic::agent::samplers::memorysampler::shellps","newrelic::localenvironment","newrelic::metricdata","newrelic::metricspec","newrelic::stats","newrelic::transactionsample","newrelic::transactionsample::segment","newrelic::versionnumber","newrelic::transactionsample","newrelic::transactionsample::segment","newrelic::control::frameworks::merb","newrelic::control::frameworks::rails","newrelic::control::frameworks::rails3","newrelic::control::frameworks::ruby","newrelic::control::loggingmethods","newrelic::stats","newrelic::transactionanalysis::segmentsummary","newrelic::methodtracestats","newrelic::scopedmethodtracestats","newrelic::agent::methodtracer::instancemethods::traceexecutionscoped","newrelic::agent::transactionsamplebuilder","newrelic::agent::methodtracer::instancemethods::traceexecutionscoped","newrelic::agent::methodtracer::instancemethods::traceexecutionscoped","newrelic::agent::methodtracer::instancemethods::traceexecutionscoped","newrelic::agent::methodtracer::instancemethods","newrelic::agent::transactionsamplebuilder","newrelic::agent::methodtracer::instancemethods","newrelic::agent::instrumentation::metricframe::pop","newrelic::agent::methodtracer::instancemethods::traceexecutionscoped","newrelic::agent::methodtracer::classmethods::addmethodtracer","newrelic::agent::sqlsampler","newrelic::agent::instrumentation::metricframe","newrelic::agent::statsengine::transactions","newrelic::agent::agent::instancemethods::connect","newrelic::collectionhelper","newrelic::transactionsample","newrelic::transactionsample::segment","newrelic::metricspec","newrelic::transactionsample::segment","newrelic::dataserialization::classmethods","newrelic::agent::transactionsampler","newrelic::agent::transactionsampler","newrelic::agent::browsermonitoring","newrelic::agent::browsermonitoring","newrelic::transactionanalysis::segmentsummary","newrelic::agent::methodtracer::classmethods::addmethodtracer","newrelic::agent::agent::instancemethods","newrelic::agent::agent::instancemethods","newrelic::agent::agent::instancemethods","newrelic::agent::instrumentation::metricframe","newrelic::stats","newrelic::dataserialization::classmethods","newrelic::stats","newrelic::agent::instrumentation::metricframe","newrelic::agent::instrumentation::metricframe","newrelic::agent::errorcollector::noticeerror","newrelic::agent::sampler","newrelic::control::configuration","newrelic::control::configuration","newrelic::agent::agent::instancemethods","newrelic::agent::browsermonitoring::dummymetricframe","newrelic::agent::instrumentation::metricframe","newrelic::agent::instrumentation::metricframe","newrelic::agent::samplers::cpusampler","newrelic::agent::samplers::cpusampler","newrelic::languagesupport","newrelic::agent::agent::instancemethods::start","newrelic::agent::agent::instancemethods::start","newrelic::languagesupport","newrelic::agent::methodtracer::classmethods::addmethodtracer","newrelic::control::configuration","newrelic::agent::agent::instancemethods::connect","newrelic::control::configuration","newrelic::control::frameworks::rails3","newrelic::control::configuration","newrelic::control::frameworks::rails3","newrelic::agent::agent::instancemethods::start","newrelic::agent","newrelic::agent::instrumentation::metricframe","newrelic::dataserialization::classmethods","newrelic::agent::samplers::delayedjoblocksampler","newrelic::localenvironment","newrelic::dataserialization::classmethods","files/changelog.html","files/license.html","files/readme_rdoc.html","files/lib/conditional_vendored_dependency_detection_rb.html","files/lib/conditional_vendored_metric_parser_rb.html","files/lib/new_relic/agent_rb.html","files/lib/new_relic/agent/agent_rb.html","files/lib/new_relic/agent/beacon_configuration_rb.html","files/lib/new_relic/agent/browser_monitoring_rb.html","files/lib/new_relic/agent/busy_calculator_rb.html","files/lib/new_relic/agent/chained_call_rb.html","files/lib/new_relic/agent/database_rb.html","files/lib/new_relic/agent/error_collector_rb.html","files/lib/new_relic/agent/instrumentation_rb.html","files/lib/new_relic/agent/instrumentation/active_merchant_rb.html","files/lib/new_relic/agent/instrumentation/active_record_rb.html","files/lib/new_relic/agent/instrumentation/acts_as_solr_rb.html","files/lib/new_relic/agent/instrumentation/authlogic_rb.html","files/lib/new_relic/agent/instrumentation/controller_instrumentation_rb.html","files/lib/new_relic/agent/instrumentation/data_mapper_rb.html","files/lib/new_relic/agent/instrumentation/delayed_job_instrumentation_rb.html","files/lib/new_relic/agent/instrumentation/memcache_rb.html","files/lib/new_relic/agent/instrumentation/merb/controller_rb.html","files/lib/new_relic/agent/instrumentation/merb/errors_rb.html","files/lib/new_relic/agent/instrumentation/metric_frame_rb.html","files/lib/new_relic/agent/instrumentation/metric_frame/pop_rb.html","files/lib/new_relic/agent/instrumentation/net_rb.html","files/lib/new_relic/agent/instrumentation/passenger_instrumentation_rb.html","files/lib/new_relic/agent/instrumentation/queue_time_rb.html","files/lib/new_relic/agent/instrumentation/rack_rb.html","files/lib/new_relic/agent/instrumentation/rails/action_controller_rb.html","files/lib/new_relic/agent/instrumentation/rails/action_web_service_rb.html","files/lib/new_relic/agent/instrumentation/rails/errors_rb.html","files/lib/new_relic/agent/instrumentation/rails3/action_controller_rb.html","files/lib/new_relic/agent/instrumentation/rails3/errors_rb.html","files/lib/new_relic/agent/instrumentation/sinatra_rb.html","files/lib/new_relic/agent/instrumentation/sunspot_rb.html","files/lib/new_relic/agent/instrumentation/unicorn_instrumentation_rb.html","files/lib/new_relic/agent/method_tracer_rb.html","files/lib/new_relic/agent/sampler_rb.html","files/lib/new_relic/agent/samplers/cpu_sampler_rb.html","files/lib/new_relic/agent/samplers/delayed_job_lock_sampler_rb.html","files/lib/new_relic/agent/samplers/memory_sampler_rb.html","files/lib/new_relic/agent/samplers/object_sampler_rb.html","files/lib/new_relic/agent/shim_agent_rb.html","files/lib/new_relic/agent/sql_sampler_rb.html","files/lib/new_relic/agent/stats_engine_rb.html","files/lib/new_relic/agent/stats_engine/gc_profiler_rb.html","files/lib/new_relic/agent/stats_engine/metric_stats_rb.html","files/lib/new_relic/agent/stats_engine/samplers_rb.html","files/lib/new_relic/agent/stats_engine/transactions_rb.html","files/lib/new_relic/agent/transaction_info_rb.html","files/lib/new_relic/agent/transaction_sample_builder_rb.html","files/lib/new_relic/agent/transaction_sampler_rb.html","files/lib/new_relic/agent/worker_loop_rb.html","files/lib/new_relic/collection_helper_rb.html","files/lib/new_relic/command_rb.html","files/lib/new_relic/commands/deployments_rb.html","files/lib/new_relic/commands/install_rb.html","files/lib/new_relic/control_rb.html","files/lib/new_relic/control/class_methods_rb.html","files/lib/new_relic/control/configuration_rb.html","files/lib/new_relic/control/frameworks_rb.html","files/lib/new_relic/control/frameworks/external_rb.html","files/lib/new_relic/control/frameworks/merb_rb.html","files/lib/new_relic/control/frameworks/rails_rb.html","files/lib/new_relic/control/frameworks/rails3_rb.html","files/lib/new_relic/control/frameworks/ruby_rb.html","files/lib/new_relic/control/frameworks/sinatra_rb.html","files/lib/new_relic/control/instance_methods_rb.html","files/lib/new_relic/control/instrumentation_rb.html","files/lib/new_relic/control/logging_methods_rb.html","files/lib/new_relic/control/profiling_rb.html","files/lib/new_relic/control/server_methods_rb.html","files/lib/new_relic/data_serialization_rb.html","files/lib/new_relic/delayed_job_injection_rb.html","files/lib/new_relic/language_support_rb.html","files/lib/new_relic/local_environment_rb.html","files/lib/new_relic/merbtasks_rb.html","files/lib/new_relic/metric_data_rb.html","files/lib/new_relic/metric_spec_rb.html","files/lib/new_relic/metrics_rb.html","files/lib/new_relic/noticed_error_rb.html","files/lib/new_relic/rack/browser_monitoring_rb.html","files/lib/new_relic/rack/developer_mode_rb.html","files/lib/new_relic/recipes_rb.html","files/lib/new_relic/stats_rb.html","files/lib/new_relic/timer_lib_rb.html","files/lib/new_relic/transaction_analysis_rb.html","files/lib/new_relic/transaction_analysis/segment_summary_rb.html","files/lib/new_relic/transaction_sample_rb.html","files/lib/new_relic/transaction_sample/composite_segment_rb.html","files/lib/new_relic/transaction_sample/fake_segment_rb.html","files/lib/new_relic/transaction_sample/segment_rb.html","files/lib/new_relic/transaction_sample/summary_segment_rb.html","files/lib/new_relic/url_rule_rb.html","files/lib/new_relic/version_rb.html","files/lib/newrelic_rpm_rb.html","files/lib/tasks/all_rb.html","files/lib/tasks/install_rake.html","files/lib/tasks/tests_rake.html","files/newrelic_yml.html"]}}