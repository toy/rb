var search_data = {"index":{"info":[["Method","lib/method_source.rb","classes/Method.html"," < Object","",1],["MethodSource","lib/method_source/version.rb","classes/MethodSource.html"," < ","",1],["MethodExtensions","MethodSource","classes/MethodSource/MethodExtensions.html"," < ","This module is to be included by `Method` and `UnboundMethod` and provides the `#source` functionality",1],["ReeSourceLocation","MethodSource","classes/MethodSource/ReeSourceLocation.html"," < ","",1],["SourceLocation","MethodSource","classes/MethodSource/SourceLocation.html"," < ","",1],["MethodExtensions","MethodSource::SourceLocation","classes/MethodSource/SourceLocation/MethodExtensions.html"," < ","",1],["ProcExtensions","MethodSource::SourceLocation","classes/MethodSource/SourceLocation/ProcExtensions.html"," < ","",1],["UnboundMethodExtensions","MethodSource::SourceLocation","classes/MethodSource/SourceLocation/UnboundMethodExtensions.html"," < ","",1],["Proc","lib/method_source.rb","classes/Proc.html"," < Object","",1],["UnboundMethod","lib/method_source.rb","classes/UnboundMethod.html"," < Object","",1],["comment","MethodSource::MethodExtensions","classes/MethodSource/MethodExtensions.html#M000013","()","Return the comments associated with the method as a string. (This functionality is only supported in",2],["comment_helper","MethodSource","classes/MethodSource.html#M000010","(source_location)","Helper method responsible for opening source file and buffering up the comments for a specified method.",2],["included","MethodSource::MethodExtensions","classes/MethodSource/MethodExtensions.html#M000011","(klass)","We use the included hook to patch Method#source on rubinius. We need to use the included hook as Rubinius",2],["source","MethodSource::MethodExtensions","classes/MethodSource/MethodExtensions.html#M000012","()","Return the sourcecode for the method as a string (This functionality is only supported in Ruby 1.9 and",2],["source_helper","MethodSource","classes/MethodSource.html#M000007","(source_location)","Helper method responsible for extracting method body. Defined here to avoid polluting `Method` class.",2],["source_location","MethodSource::ReeSourceLocation","classes/MethodSource/ReeSourceLocation.html#M000000","()","Ruby enterprise edition provides all the information that's needed, in a slightly different way. ",2],["source_location","MethodSource::SourceLocation::MethodExtensions","classes/MethodSource/SourceLocation/MethodExtensions.html#M000001","()","JRuby version source_location hack @return [Array] A two element array containing the source location",2],["source_location","MethodSource::SourceLocation::MethodExtensions","classes/MethodSource/SourceLocation/MethodExtensions.html#M000003","()","Return the source location of a method for Ruby 1.8. @return [Array] A two element array. First element",2],["source_location","MethodSource::SourceLocation::ProcExtensions","classes/MethodSource/SourceLocation/ProcExtensions.html#M000006","()","Return the source location for a Proc (in implementations without Proc#source_location) @return [Array]",2],["source_location","MethodSource::SourceLocation::ProcExtensions","classes/MethodSource/SourceLocation/ProcExtensions.html#M000005","()","Return the source location for a Proc (Rubinius only) @return [Array] A two element array. First element",2],["source_location","MethodSource::SourceLocation::UnboundMethodExtensions","classes/MethodSource/SourceLocation/UnboundMethodExtensions.html#M000008","()","JRuby version source_location hack @return [Array] A two element array containing the source location",2],["source_location","MethodSource::SourceLocation::UnboundMethodExtensions","classes/MethodSource/SourceLocation/UnboundMethodExtensions.html#M000009","()","Return the source location of an instance method for Ruby 1.8. @return [Array] A two element array. First",2],["trace_func","MethodSource::SourceLocation::MethodExtensions","classes/MethodSource/SourceLocation/MethodExtensions.html#M000002","(event, file, line, id, binding, classname)","",2],["valid_expression?","MethodSource","classes/MethodSource.html#M000004","(str)","Determine if a string of code is a valid Ruby expression. @param [String] code The code to validate.",2],["LICENSE","files/LICENSE.html","files/LICENSE.html","","License -------  (The MIT License)   Copyright (c) 2011 John Mair (banisterfiend)  Permission is hereby",3],["README.markdown","files/README_markdown.html","files/README_markdown.html","","method_source =============  (C) John Mair (banisterfiend) 2011  _retrieve the sourcecode for a method_",3],["method_source.rb","files/lib/method_source_rb.html","files/lib/method_source_rb.html","","(C) John Mair (banisterfiend) 2011 MIT License ",3],["source_location.rb","files/lib/method_source/source_location_rb.html","files/lib/method_source/source_location_rb.html","","",3],["version.rb","files/lib/method_source/version_rb.html","files/lib/method_source/version_rb.html","","",3]],"searchIndex":["method","methodsource","methodextensions","reesourcelocation","sourcelocation","methodextensions","procextensions","unboundmethodextensions","proc","unboundmethod","comment()","comment_helper()","included()","source()","source_helper()","source_location()","source_location()","source_location()","source_location()","source_location()","source_location()","source_location()","trace_func()","valid_expression?()","license","readme.markdown","method_source.rb","source_location.rb","version.rb"],"longSearchIndex":["lib/method_source.rb","lib/method_source.rb","methodsource","methodsource","methodsource","methodsource::sourcelocation","methodsource::sourcelocation","methodsource::sourcelocation","lib/method_source.rb","lib/method_source.rb","methodsource::methodextensions","methodsource","methodsource::methodextensions","methodsource::methodextensions","methodsource","methodsource::reesourcelocation","methodsource::sourcelocation::methodextensions","methodsource::sourcelocation::methodextensions","methodsource::sourcelocation::procextensions","methodsource::sourcelocation::procextensions","methodsource::sourcelocation::unboundmethodextensions","methodsource::sourcelocation::unboundmethodextensions","methodsource::sourcelocation::methodextensions","methodsource","files/license.html","files/readme_markdown.html","files/lib/method_source_rb.html","files/lib/method_source/source_location_rb.html","files/lib/method_source/version_rb.html"]}}