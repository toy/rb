var search_data = {"index":{"info":[["Context","lib/rack/utils.rb","classes/Context.html"," < Object","Context allows the use of a compatible middleware at different points in a request handling stack. A",1],["FCGI","lib/rack/handler/fastcgi.rb","classes/FCGI.html"," < ","",1],["Stream","FCGI","classes/FCGI/Stream.html"," < Object","",1],["HeaderHash","lib/rack/utils.rb","classes/HeaderHash.html"," < Hash","A case-insensitive Hash that preserves the original case of a header when set. ",1],["Object","lib/rack/utils.rb","classes/Object.html"," < Object","",1],["Rack","lib/rack/auth/abstract/handler.rb","classes/Rack.html"," < ","The Rack main module, serving as a namespace for all core Rack modules and classes. All modules meant",1],["Auth","Rack","classes/Rack/Auth.html"," < ","",1],["AbstractHandler","Rack::Auth","classes/Rack/Auth/AbstractHandler.html"," < Object","Rack::Auth::AbstractHandler implements common authentication functionality. +realm+ should be set for",1],["AbstractRequest","Rack::Auth","classes/Rack/Auth/AbstractRequest.html"," < Object","",1],["Basic","Rack::Auth","classes/Rack/Auth/Basic.html"," < AbstractHandler","Rack::Auth::Basic implements HTTP Basic Authentication, as per RFC 2617. Initialize with the Rack application",1],["Request","Rack::Auth::Basic","classes/Rack/Auth/Basic/Request.html"," < Auth::AbstractRequest","",1],["Digest","Rack::Auth","classes/Rack/Auth/Digest.html"," < ","",1],["MD5","Rack::Auth::Digest","classes/Rack/Auth/Digest/MD5.html"," < AbstractHandler","Rack::Auth::Digest::MD5 implements the MD5 algorithm version of HTTP Digest Authentication, as per RFC",1],["Nonce","Rack::Auth::Digest","classes/Rack/Auth/Digest/Nonce.html"," < Object","Rack::Auth::Digest::Nonce is the default nonce generator for the Rack::Auth::Digest::MD5 authentication",1],["Params","Rack::Auth::Digest","classes/Rack/Auth/Digest/Params.html"," < Hash","",1],["Request","Rack::Auth::Digest","classes/Rack/Auth/Digest/Request.html"," < Auth::AbstractRequest","",1],["BodyProxy","Rack","classes/Rack/BodyProxy.html"," < Object","",1],["Builder","Rack","classes/Rack/Builder.html"," < Object","Rack::Builder implements a small DSL to iteratively construct Rack applications. Example: require 'rack/lobster'",1],["Cascade","Rack","classes/Rack/Cascade.html"," < Object","Rack::Cascade tries an request on several apps, and returns the first response that is not 404 (or in",1],["Chunked","Rack","classes/Rack/Chunked.html"," < Object","Middleware that applies chunked transfer encoding to response bodies when the response does not include",1],["Body","Rack::Chunked","classes/Rack/Chunked/Body.html"," < Object","A body wrapper that emits chunked responses ",1],["CommonLogger","Rack","classes/Rack/CommonLogger.html"," < Object","Rack::CommonLogger forwards every request to an +app+ given, and logs a line in the Apache common log",1],["ConditionalGet","Rack","classes/Rack/ConditionalGet.html"," < Object","Middleware that enables conditional GET using If-None-Match and If-Modified-Since. The application should",1],["Config","Rack","classes/Rack/Config.html"," < Object","Rack::Config modifies the environment using the block given during initialization. ",1],["ContentLength","Rack","classes/Rack/ContentLength.html"," < Object","Sets the Content-Length header on responses with fixed-length bodies. ",1],["ContentType","Rack","classes/Rack/ContentType.html"," < Object","Sets the Content-Type header on responses which don't have one. Builder Usage: use Rack::ContentType,",1],["Deflater","Rack","classes/Rack/Deflater.html"," < Object","",1],["DeflateStream","Rack::Deflater","classes/Rack/Deflater/DeflateStream.html"," < Object","",1],["GzipStream","Rack::Deflater","classes/Rack/Deflater/GzipStream.html"," < Object","",1],["Directory","Rack","classes/Rack/Directory.html"," < Object","Rack::Directory serves entries below the +root+ given, according to the path info of the Rack request.",1],["ETag","Rack","classes/Rack/ETag.html"," < Object","Automatically sets the ETag header on all String bodies. The ETag header is skipped if ETag or Last-Modified",1],["File","Rack","classes/Rack/File.html"," < Object","Rack::File serves files below the +root+ directory given, according to the path info of the Rack request.",1],["ForwardRequest","Rack","classes/Rack/ForwardRequest.html"," < Exception","Rack::ForwardRequest gets caught by Rack::Recursive and redirects the current request to the app at +url+.",1],["Handler","Rack","classes/Rack/Handler.html"," < ","*Handlers* connect web servers with Rack. Rack includes Handlers for Thin, WEBrick, FastCGI, CGI, SCGI",1],["CGI","Rack::Handler","classes/Rack/Handler/CGI.html"," < Object","",1],["EventedMongrel","Rack::Handler","classes/Rack/Handler/EventedMongrel.html"," < Handler::Mongrel","",1],["FastCGI","Rack::Handler","classes/Rack/Handler/FastCGI.html"," < Object","",1],["LSWS","Rack::Handler","classes/Rack/Handler/LSWS.html"," < Object","",1],["Mongrel","Rack::Handler","classes/Rack/Handler/Mongrel.html"," < ::Mongrel::HttpHandler","",1],["SCGI","Rack::Handler","classes/Rack/Handler/SCGI.html"," < ::SCGI::Processor","",1],["SwiftipliedMongrel","Rack::Handler","classes/Rack/Handler/SwiftipliedMongrel.html"," < Handler::Mongrel","",1],["Thin","Rack::Handler","classes/Rack/Handler/Thin.html"," < Object","",1],["WEBrick","Rack::Handler","classes/Rack/Handler/WEBrick.html"," < ::WEBrick::HTTPServlet::AbstractServlet","",1],["Head","Rack","classes/Rack/Head.html"," < Object","",1],["Lint","Rack","classes/Rack/Lint.html"," < Object","Rack::Lint validates your application and the requests and responses according to the Rack spec. ",1],["Lobster","Rack","classes/Rack/Lobster.html"," < Object","Paste has a Pony, Rack has a Lobster! ",1],["Lock","Rack","classes/Rack/Lock.html"," < Object","",1],["Logger","Rack","classes/Rack/Logger.html"," < Object","Sets up rack.logger to write to rack.errors stream ",1],["MethodOverride","Rack","classes/Rack/MethodOverride.html"," < Object","",1],["Mime","Rack","classes/Rack/Mime.html"," < ","",1],["MockRequest","Rack","classes/Rack/MockRequest.html"," < Object","Rack::MockRequest helps testing your Rack application without actually using HTTP. After performing a",1],["FatalWarner","Rack::MockRequest","classes/Rack/MockRequest/FatalWarner.html"," < Object","",1],["FatalWarning","Rack::MockRequest","classes/Rack/MockRequest/FatalWarning.html"," < RuntimeError","",1],["MockResponse","Rack","classes/Rack/MockResponse.html"," < Rack::Response","Rack::MockResponse provides useful helpers for testing your apps. Usually, you don't create the MockResponse",1],["Multipart","Rack","classes/Rack/Multipart.html"," < ","A multipart form data parser, adapted from IOWA. Usually, Rack::Request#POST takes care of calling this.",1],["Generator","Rack::Multipart","classes/Rack/Multipart/Generator.html"," < Object","",1],["Parser","Rack::Multipart","classes/Rack/Multipart/Parser.html"," < Object","",1],["UploadedFile","Rack::Multipart","classes/Rack/Multipart/UploadedFile.html"," < Object","",1],["NullLogger","Rack","classes/Rack/NullLogger.html"," < Object","",1],["Recursive","Rack","classes/Rack/Recursive.html"," < Object","Rack::Recursive allows applications called down the chain to include data from other applications (by",1],["Reloader","Rack","classes/Rack/Reloader.html"," < Object","High performant source reloader This class acts as Rack middleware. What makes it especially suited for",1],["Stat","Rack::Reloader","classes/Rack/Reloader/Stat.html"," < ","",1],["Request","Rack","classes/Rack/Request.html"," < Object","Rack::Request provides a convenient interface to a Rack environment.  It is stateless, the environment",1],["Response","Rack","classes/Rack/Response.html"," < Object","Rack::Response provides a convenient interface to create a Rack response. It allows setting of headers",1],["Helpers","Rack::Response","classes/Rack/Response/Helpers.html"," < ","",1],["RewindableInput","Rack","classes/Rack/RewindableInput.html"," < Object","Class which can make any IO object rewindable, including non-rewindable ones. It does this by buffering",1],["Tempfile","Rack::RewindableInput","classes/Rack/RewindableInput/Tempfile.html"," < ::Tempfile","Ruby's Tempfile class has a bug. Subclass it and fix it. ",1],["Runtime","Rack","classes/Rack/Runtime.html"," < Object","Sets an \"X-Runtime\" response header, indicating the response time of the request, in seconds You can",1],["Sendfile","Rack","classes/Rack/Sendfile.html"," < Object","= Sendfile The Sendfile middleware intercepts responses whose body is being served from a file and replaces",1],["Server","Rack","classes/Rack/Server.html"," < Object","",1],["Options","Rack::Server","classes/Rack/Server/Options.html"," < Object","",1],["Session","Rack","classes/Rack/Session.html"," < ","",1],["Abstract","Rack::Session","classes/Rack/Session/Abstract.html"," < ","",1],["ID","Rack::Session::Abstract","classes/Rack/Session/Abstract/ID.html"," < Object","ID sets up a basic framework for implementing an id based sessioning service. Cookies sent to the client",1],["SessionHash","Rack::Session::Abstract","classes/Rack/Session/Abstract/SessionHash.html"," < Hash","SessionHash is responsible to lazily load the session from store. ",1],["Cookie","Rack::Session","classes/Rack/Session/Cookie.html"," < Abstract::ID","Rack::Session::Cookie provides simple cookie based session management. By default, the session is a Ruby",1],["Base64","Rack::Session::Cookie","classes/Rack/Session/Cookie/Base64.html"," < Object","Encode session cookies as Base64 ",1],["Marshal","Rack::Session::Cookie::Base64","classes/Rack/Session/Cookie/Base64/Marshal.html"," < Base64","Encode session cookies as Marshaled Base64 data ",1],["Identity","Rack::Session::Cookie","classes/Rack/Session/Cookie/Identity.html"," < Object","Use no encoding for session cookies ",1],["Reverse","Rack::Session::Cookie","classes/Rack/Session/Cookie/Reverse.html"," < Object","Reverse string encoding. (trollface) ",1],["Memcache","Rack::Session","classes/Rack/Session/Memcache.html"," < Abstract::ID","Rack::Session::Memcache provides simple cookie based session management. Session data is stored in memcached.",1],["Pool","Rack::Session","classes/Rack/Session/Pool.html"," < Abstract::ID","Rack::Session::Pool provides simple cookie based session management. Session data is stored in a hash",1],["ShowExceptions","Rack","classes/Rack/ShowExceptions.html"," < Object","Rack::ShowExceptions catches all exceptions raised from the app it wraps.  It shows a useful backtrace",1],["ShowStatus","Rack","classes/Rack/ShowStatus.html"," < Object","Rack::ShowStatus catches all empty responses the app it wraps and replaces them with a site explaining",1],["Static","Rack","classes/Rack/Static.html"," < Object","The Rack::Static middleware intercepts requests for static files (javascript files, images, stylesheets,",1],["URLMap","Rack","classes/Rack/URLMap.html"," < Object","Rack::URLMap takes a hash mapping urls or paths to apps, and dispatches accordingly.  Support for HTTP/1.1",1],["Utils","Rack","classes/Rack/Utils.html"," < ","Rack::Utils contains a grab-bag of useful methods for writing web applications adopted from all kinds",1],["<<","Rack::Cascade","classes/Rack/Cascade.html#M000067","(app)","Alias for #add",2],["=~","Rack::MockResponse","classes/Rack/MockResponse.html#M000182","(other)","",2],["A1","Rack::Auth::Digest::MD5","classes/Rack/Auth/Digest/MD5.html#M000036","(auth, password)","",2],["A2","Rack::Auth::Digest::MD5","classes/Rack/Auth/Digest/MD5.html#M000037","(auth)","",2],["GET","Rack::Request","classes/Rack/Request.html#M000281","()","Returns the data recieved in the query string. ",2],["H","Rack::Auth::Digest::MD5","classes/Rack/Auth/Digest/MD5.html#M000034","(data)","Alias for #md5",2],["KD","Rack::Auth::Digest::MD5","classes/Rack/Auth/Digest/MD5.html#M000035","(secret, data)","",2],["POST","Rack::Request","classes/Rack/Request.html#M000288","()","Returns the data recieved in the request body. This method support both application/x-www-form-urlencoded",2],["[]","HeaderHash","classes/HeaderHash.html#M000451","(k)","",2],["[]","Rack::Auth::Digest::Params","classes/Rack/Auth/Digest/Params.html#M000043","(k)","",2],["[]","Rack::Request","classes/Rack/Request.html#M000290","(key)","shortcut for request.params[key] ",2],["[]","Rack::Response","classes/Rack/Response.html#M000244","(key)","",2],["[]","Rack::Session::Abstract::SessionHash","classes/Rack/Session/Abstract/SessionHash.html#M000338","(key)","",2],["[]=","HeaderHash","classes/HeaderHash.html#M000452","(k, v)","",2],["[]=","Rack::Auth::Digest::Params","classes/Rack/Auth/Digest/Params.html#M000044","(k, v)","",2],["[]=","Rack::Request","classes/Rack/Request.html#M000291","(key, value)","shortcut for request.params[key] = value ",2],["[]=","Rack::Response","classes/Rack/Response.html#M000245","(key, value)","",2],["[]=","Rack::Session::Abstract::SessionHash","classes/Rack/Session/Abstract/SessionHash.html#M000342","(key, value)","",2],["_call","Rack::Directory","classes/Rack/Directory.html#M000102","(env)","",2],["_call","Rack::File","classes/Rack/File.html#M000119","(env)","",2],["_call","Rack::Recursive","classes/Rack/Recursive.html#M000218","(env)","",2],["_close","Rack::RewindableInput::Tempfile","classes/Rack/RewindableInput/Tempfile.html#M000313","()","",2],["_rack_read_without_buffer","FCGI::Stream","classes/FCGI/Stream.html#M000128","(n, buffer=nil)","Alias for #read",2],["accept_encoding","Rack::Request","classes/Rack/Request.html#M000302","()","",2],["add","Rack::Cascade","classes/Rack/Cascade.html#M000065","(app)","",2],["app","Rack::Builder","classes/Rack/Builder.html#M000063","(default_app = nil, &block)","",2],["app","Rack::Server","classes/Rack/Server.html#M000328","()","",2],["authorization_key","Rack::Auth::AbstractRequest","classes/Rack/Auth/AbstractRequest.html#M000009","()","",2],["bad_request","Rack::Auth::AbstractHandler","classes/Rack/Auth/AbstractHandler.html#M000002","()","",2],["bad_request?","Rack::Response::Helpers","classes/Rack/Response/Helpers.html#M000276","()","",2],["base_url","Rack::Request","classes/Rack/Request.html#M000298","()","",2],["basic?","Rack::Auth::Basic::Request","classes/Rack/Auth/Basic/Request.html#M000013","()","",2],["body","Rack::MockResponse","classes/Rack/MockResponse.html#M000184","()","",2],["body","Rack::Request","classes/Rack/Request.html#M000228","()","",2],["build_app","Rack::Server","classes/Rack/Server.html#M000337","(app)","",2],["build_multipart","Rack::Multipart","classes/Rack/Multipart.html#M000207","(params, first = true)","",2],["build_nested_query","Object","classes/Object.html#M000434","(value, prefix = nil)","",2],["build_query","Object","classes/Object.html#M000433","(params)","",2],["byte_ranges","Object","classes/Object.html#M000442","(env, size)","Parses the \"Range:\" header, if present, into an array of Range objects. Returns nil if the header is",2],["bytesize","Object","classes/Object.html#M000440","(string)","",2],["bytesize","Object","classes/Object.html#M000439","(string)","",2],["call","Context","classes/Context.html#M000444","(env)","",2],["call","Rack","classes/Rack.html#M000159","(env)","",2],["call","Rack::Auth::Basic","classes/Rack/Auth/Basic.html#M000010","(env)","",2],["call","Rack::Auth::Digest::MD5","classes/Rack/Auth/Digest/MD5.html#M000021","(env)","",2],["call","Rack::Builder","classes/Rack/Builder.html#M000071","(env)","",2],["call","Rack::Cascade","classes/Rack/Cascade.html#M000062","(env)","",2],["call","Rack::Chunked","classes/Rack/Chunked.html#M000077","(env)","",2],["call","Rack::CommonLogger","classes/Rack/CommonLogger.html#M000079","(env)","",2],["call","Rack::ConditionalGet","classes/Rack/ConditionalGet.html#M000083","(env)","",2],["call","Rack::Config","classes/Rack/Config.html#M000089","(env)","",2],["call","Rack::ContentLength","classes/Rack/ContentLength.html#M000091","(env)","",2],["call","Rack::ContentType","classes/Rack/ContentType.html#M000093","(env)","",2],["call","Rack::Deflater","classes/Rack/Deflater.html#M000095","(env)","",2],["call","Rack::Directory","classes/Rack/Directory.html#M000101","(env)","",2],["call","Rack::ETag","classes/Rack/ETag.html#M000111","(env)","",2],["call","Rack::File","classes/Rack/File.html#M000118","(env)","",2],["call","Rack::Head","classes/Rack/Head.html#M000158","(env)","",2],["call","Rack::Lock","classes/Rack/Lock.html#M000162","(env)","",2],["call","Rack::Logger","classes/Rack/Logger.html#M000164","(env)","",2],["call","Rack::MethodOverride","classes/Rack/MethodOverride.html#M000166","(env)","",2],["call","Rack::NullLogger","classes/Rack/NullLogger.html#M000209","(env)","",2],["call","Rack::Recursive","classes/Rack/Recursive.html#M000217","(env)","",2],["call","Rack::Reloader","classes/Rack/Reloader.html#M000221","(env)","",2],["call","Rack::Runtime","classes/Rack/Runtime.html#M000317","(env)","",2],["call","Rack::Sendfile","classes/Rack/Sendfile.html#M000320","(env)","",2],["call","Rack::Session::Abstract::ID","classes/Rack/Session/Abstract/ID.html#M000359","(env)","",2],["call","Rack::ShowExceptions","classes/Rack/ShowExceptions.html#M000410","(env)","",2],["call","Rack::ShowStatus","classes/Rack/ShowStatus.html#M000408","(env)","",2],["call","Rack::Static","classes/Rack/Static.html#M000420","(env)","",2],["call","Rack::URLMap","classes/Rack/URLMap.html#M000423","(env)","",2],["can_serve","Rack::Static","classes/Rack/Static.html#M000419","(path)","",2],["challenge","Rack::Auth::Basic","classes/Rack/Auth/Basic.html#M000011","()","",2],["challenge","Rack::Auth::Digest::MD5","classes/Rack/Auth/Digest/MD5.html#M000027","(hash = {})","",2],["check_forbidden","Rack::Directory","classes/Rack/Directory.html#M000104","()","",2],["clear","Rack::Session::Abstract::SessionHash","classes/Rack/Session/Abstract/SessionHash.html#M000343","()","",2],["client_error?","Rack::Response::Helpers","classes/Rack/Response/Helpers.html#M000273","()","",2],["close","Rack::BodyProxy","classes/Rack/BodyProxy.html#M000056","()","",2],["close","Rack::Chunked::Body","classes/Rack/Chunked/Body.html#M000075","()","",2],["close","Rack::Response","classes/Rack/Response.html#M000264","()","",2],["close","Rack::RewindableInput","classes/Rack/RewindableInput.html#M000312","()","Closes this RewindableInput object without closing the originally wrapped IO oject. Cleans up any temporary",2],["closed?","Rack::BodyProxy","classes/Rack/BodyProxy.html#M000057","()","",2],["commit_session","Rack::Session::Abstract::ID","classes/Rack/Session/Abstract/ID.html#M000382","(env, status, headers, body)","Acquires the session from the environment and the session id from the session options and passes them",2],["commit_session?","Rack::Session::Abstract::ID","classes/Rack/Session/Abstract/ID.html#M000368","(env, session, options)","Session should be commited if it was loaded, any of specific options like :renew, :drop or :expire_after",2],["content_charset","Rack::Request","classes/Rack/Request.html#M000241","()","The character set of the request body if a \"charset\" media type parameter was given, or nil if no \"charset\"",2],["content_for_other","Rack::Multipart::Generator","classes/Rack/Multipart/Generator.html#M000191","(file, name)","",2],["content_for_tempfile","Rack::Multipart::Generator","classes/Rack/Multipart/Generator.html#M000190","(io, file, name)","",2],["content_length","Rack::Request","classes/Rack/Request.html#M000233","()","",2],["content_length","Rack::Response::Helpers","classes/Rack/Response/Helpers.html#M000286","()","",2],["content_type","Rack::Request","classes/Rack/Request.html#M000234","()","",2],["content_type","Rack::Response::Helpers","classes/Rack/Response/Helpers.html#M000285","()","",2],["context","Context","classes/Context.html#M000446","(env, app=@app)","",2],["context","Rack::Session::Abstract::ID","classes/Rack/Session/Abstract/ID.html#M000360","(env, app=@app)","",2],["cookies","Rack::Request","classes/Rack/Request.html#M000296","()","",2],["correct_uri?","Rack::Auth::Digest::Request","classes/Rack/Auth/Digest/Request.html#M000049","()","",2],["credentials","Rack::Auth::Basic::Request","classes/Rack/Auth/Basic/Request.html#M000014","()","",2],["current_session_id","Rack::Session::Abstract::ID","classes/Rack/Session/Abstract/ID.html#M000366","(env)","Returns the current session id from the OptionsHash. ",2],["daemonize_app","Rack::Server","classes/Rack/Server.html#M000346","()","",2],["debug","Rack::NullLogger","classes/Rack/NullLogger.html#M000211","(progname = nil, &block)","",2],["decode","Rack::Session::Cookie::Base64","classes/Rack/Session/Cookie/Base64.html#M000371","(str)","",2],["decode","Rack::Session::Cookie::Base64::Marshal","classes/Rack/Session/Cookie/Base64/Marshal.html#M000373","(str)","",2],["decode","Rack::Session::Cookie::Identity","classes/Rack/Session/Cookie/Identity.html#M000378","(str)","",2],["decode","Rack::Session::Cookie::Reverse","classes/Rack/Session/Cookie/Reverse.html#M000380","(str)","",2],["default","Rack::Handler","classes/Rack/Handler.html#M000154","(options = {})","",2],["default_options","Rack::Server","classes/Rack/Server.html#M000327","()","",2],["delete","HeaderHash","classes/HeaderHash.html#M000453","(k)","",2],["delete","Rack::MockRequest","classes/Rack/MockRequest.html#M000177","(uri, opts={})","",2],["delete","Rack::Session::Abstract::SessionHash","classes/Rack/Session/Abstract/SessionHash.html#M000348","(key)","",2],["delete?","Rack::Request","classes/Rack/Request.html#M000259","()","Checks the HTTP request method (or verb) to see if it was of type DELETE ",2],["delete_cookie","Rack::Response","classes/Rack/Response.html#M000247","(key, value={})","",2],["delete_cookie_header!","Object","classes/Object.html#M000438","(header, key, value = {})","",2],["dequote","Rack::Auth::Digest::Params","classes/Rack/Auth/Digest/Params.html#M000040","(str)","",2],["destroy_session","Rack::Session::Abstract::ID","classes/Rack/Session/Abstract/ID.html#M000392","(env, sid, options)","All thread safety and session destroy proceedures should occur here. Should return a new session id or",2],["destroy_session","Rack::Session::Cookie","classes/Rack/Session/Cookie.html#M000393","(env, session_id, options)","",2],["destroy_session","Rack::Session::Memcache","classes/Rack/Session/Memcache.html#M000405","(env, session_id, options)","",2],["destroy_session","Rack::Session::Pool","classes/Rack/Session/Pool.html#M000403","(env, session_id, options)","",2],["digest","Rack::Auth::Digest::MD5","classes/Rack/Auth/Digest/MD5.html#M000038","(auth, password)","",2],["digest","Rack::Auth::Digest::Nonce","classes/Rack/Auth/Digest/Nonce.html#M000022","()","",2],["digest?","Rack::Auth::Digest::Request","classes/Rack/Auth/Digest/Request.html#M000048","()","",2],["digest_body","Rack::ETag","classes/Rack/ETag.html#M000116","(body)","",2],["dump","Rack::Multipart::Generator","classes/Rack/Multipart/Generator.html#M000187","()","",2],["dump_exception","Rack::ShowExceptions","classes/Rack/ShowExceptions.html#M000413","(exception)","",2],["each","HeaderHash","classes/HeaderHash.html#M000449","()","",2],["each","Rack::Chunked::Body","classes/Rack/Chunked/Body.html#M000074","()","",2],["each","Rack::Deflater::DeflateStream","classes/Rack/Deflater/DeflateStream.html#M000103","()","",2],["each","Rack::Deflater::GzipStream","classes/Rack/Deflater/GzipStream.html#M000097","(&block)","",2],["each","Rack::Directory","classes/Rack/Directory.html#M000109","()","",2],["each","Rack::File","classes/Rack/File.html#M000123","()","",2],["each","Rack::Response","classes/Rack/Response.html#M000255","(&callback)","",2],["each","Rack::RewindableInput","classes/Rack/RewindableInput.html#M000310","(&block)","",2],["empty?","Rack::MockResponse","classes/Rack/MockResponse.html#M000185","()","",2],["empty?","Rack::Response","classes/Rack/Response.html#M000265","()","",2],["empty?","Rack::Session::Abstract::SessionHash","classes/Rack/Session/Abstract/SessionHash.html#M000353","()","",2],["encode","Rack::Session::Cookie::Base64","classes/Rack/Session/Cookie/Base64.html#M000370","(str)","",2],["encode","Rack::Session::Cookie::Base64::Marshal","classes/Rack/Session/Cookie/Base64/Marshal.html#M000372","(str)","",2],["encode","Rack::Session::Cookie::Identity","classes/Rack/Session/Cookie/Identity.html#M000377","(str)","",2],["encode","Rack::Session::Cookie::Reverse","classes/Rack/Session/Cookie/Reverse.html#M000379","(str)","",2],["entity_not_found","Rack::Directory","classes/Rack/Directory.html#M000108","()","",2],["env_for","Rack::MockRequest","classes/Rack/MockRequest.html#M000180","(uri=\"\", opts={})","Return the Rack environment used for a request to +uri+. ",2],["error","Rack::NullLogger","classes/Rack/NullLogger.html#M000213","(progname = nil, &block)","",2],["escape","Rack::Utils","classes/Rack/Utils.html#M000424","(s)","URI escapes. (CGI style space to +) ",2],["escape","Rack::Utils","classes/Rack/Utils.html#M000424","(s)","URI escapes. (CGI style space to +) ",2],["escape_html","Object","classes/Object.html#M000435","(string)","Escape ampersands, brackets and quotes to their HTML/XML entities. ",2],["escape_path","Rack::Utils","classes/Rack/Utils.html#M000425","(s)","Like URI escaping, but with %20 instead of +. Strictly speaking this is true URI escaping. ",2],["escape_path","Rack::Utils","classes/Rack/Utils.html#M000425","(s)","Like URI escaping, but with %20 instead of +. Strictly speaking this is true URI escaping. ",2],["etag_body?","Rack::ETag","classes/Rack/ETag.html#M000114","(body)","",2],["etag_matches?","Rack::ConditionalGet","classes/Rack/ConditionalGet.html#M000085","(none_match, headers)","",2],["etag_status?","Rack::ETag","classes/Rack/ETag.html#M000113","(status)","",2],["exists?","Rack::Session::Abstract::SessionHash","classes/Rack/Session/Abstract/SessionHash.html#M000350","()","",2],["extract_content_length","Rack::CommonLogger","classes/Rack/CommonLogger.html#M000081","(headers)","",2],["extract_session_id","Rack::Session::Abstract::ID","classes/Rack/Session/Abstract/ID.html#M000365","(env)","Extract session id from request object. ",2],["extract_session_id","Rack::Session::Cookie","classes/Rack/Session/Cookie.html#M000384","(env)","",2],["fail","Rack::File","classes/Rack/File.html#M000124","(status, body)","",2],["fast_forward_to_first_boundary","Rack::Multipart::Parser","classes/Rack/Multipart/Parser.html#M000197","()","",2],["fatal","Rack::NullLogger","classes/Rack/NullLogger.html#M000214","(progname = nil, &block)","",2],["figure_path","Rack::Reloader::Stat","classes/Rack/Reloader/Stat.html#M000225","(file, paths)","Takes a relative or absolute +file+ name, a couple possible +paths+ that the +file+ might reside in.",2],["filesize_format","Rack::Directory","classes/Rack/Directory.html#M000112","(int)","",2],["filesystem_has_posix_semantics?","Rack::RewindableInput","classes/Rack/RewindableInput.html#M000315","()","",2],["finish","Rack::Response","classes/Rack/Response.html#M000249","(&block)","",2],["flattened_params","Rack::Multipart::Generator","classes/Rack/Multipart/Generator.html#M000189","()","",2],["flush","Rack::MockRequest::FatalWarner","classes/Rack/MockRequest/FatalWarner.html#M000171","()","",2],["forbidden?","Rack::Response::Helpers","classes/Rack/Response/Helpers.html#M000277","()","",2],["force_options?","Rack::Session::Abstract::ID","classes/Rack/Session/Abstract/ID.html#M000375","(options)","",2],["forced_session_update?","Rack::Session::Abstract::ID","classes/Rack/Session/Abstract/ID.html#M000374","(session, options)","",2],["form_data?","Rack::Request","classes/Rack/Request.html#M000279","()","Determine whether the request body contains form-data by checking the request Content-Type for one of",2],["fresh?","Rack::Auth::Digest::Nonce","classes/Rack/Auth/Digest/Nonce.html#M000025","()","",2],["fresh?","Rack::ConditionalGet","classes/Rack/ConditionalGet.html#M000084","(env, headers)","",2],["full_boundary","Rack::Multipart::Parser","classes/Rack/Multipart/Parser.html#M000195","()","",2],["fullpath","Rack::Request","classes/Rack/Request.html#M000301","()","",2],["generate_hmac","Rack::Session::Cookie","classes/Rack/Session/Cookie.html#M000394","(data, secret)","",2],["generate_map","Rack::Builder","classes/Rack/Builder.html#M000072","(default_app, mapping)","",2],["generate_sid","Rack::Session::Abstract::ID","classes/Rack/Session/Abstract/ID.html#M000362","(secure = @sid_secure)","Generate a new session id using Ruby #rand.  The size of the session id is controlled by the :sidbits",2],["generate_sid","Rack::Session::Memcache","classes/Rack/Session/Memcache.html#M000397","()","",2],["generate_sid","Rack::Session::Pool","classes/Rack/Session/Pool.html#M000398","()","",2],["get","Rack::Handler","classes/Rack/Handler.html#M000153","(server)","",2],["get","Rack::MockRequest","classes/Rack/MockRequest.html#M000174","(uri, opts={})","",2],["get?","Rack::Request","classes/Rack/Request.html#M000260","()","Checks the HTTP request method (or verb) to see if it was of type GET ",2],["get_current_head_and_filename_and_content_type_and_name_and_body","Rack::Multipart::Parser","classes/Rack/Multipart/Parser.html#M000198","()","",2],["get_data","Rack::Multipart::Parser","classes/Rack/Multipart/Parser.html#M000200","(filename, body, content_type, name, head)","",2],["get_filename","Rack::Multipart::Parser","classes/Rack/Multipart/Parser.html#M000199","(head)","",2],["get_session","Rack::Session::Abstract::ID","classes/Rack/Session/Abstract/ID.html#M000388","(env, sid)","All thread safety and session retrival proceedures should occur here. Should return [session_id, session].",2],["get_session","Rack::Session::Memcache","classes/Rack/Session/Memcache.html#M000401","(env, sid)","",2],["get_session","Rack::Session::Pool","classes/Rack/Session/Pool.html#M000399","(env, sid)","",2],["gets","Rack::RewindableInput","classes/Rack/RewindableInput.html#M000306","()","",2],["handler_opts","Rack::Server::Options","classes/Rack/Server/Options.html#M000323","(options)","",2],["has_key?","HeaderHash","classes/HeaderHash.html#M000455","(k)","Alias for #include?",2],["has_key?","Rack::Session::Abstract::SessionHash","classes/Rack/Session/Abstract/SessionHash.html#M000339","(key)","",2],["head","Rack::MockRequest","classes/Rack/MockRequest.html#M000178","(uri, opts={})","",2],["head?","Rack::Request","classes/Rack/Request.html#M000261","()","Checks the HTTP request method (or verb) to see if it was of type HEAD ",2],["host","Rack::Request","classes/Rack/Request.html#M000252","()","",2],["host_with_port","Rack::Request","classes/Rack/Request.html#M000250","()","",2],["include","Rack::Recursive","classes/Rack/Recursive.html#M000219","(env, path)","",2],["include?","HeaderHash","classes/HeaderHash.html#M000454","(k)","",2],["include?","Rack::Cascade","classes/Rack/Cascade.html#M000066","(app)","",2],["include?","Rack::Response::Helpers","classes/Rack/Response/Helpers.html#M000284","(header)","",2],["include?","Rack::Session::Abstract::SessionHash","classes/Rack/Session/Abstract/SessionHash.html#M000341","(key)","Alias for #has_key?",2],["info","Rack::NullLogger","classes/Rack/NullLogger.html#M000210","(progname = nil, &block)","",2],["informational?","Rack::Response::Helpers","classes/Rack/Response/Helpers.html#M000267","()","",2],["initialize_sid","Rack::Session::Abstract::ID","classes/Rack/Session/Abstract/ID.html#M000361","()","",2],["inspect","Rack::Session::Abstract::SessionHash","classes/Rack/Session/Abstract/SessionHash.html#M000349","()","",2],["invalid?","Rack::Response::Helpers","classes/Rack/Response/Helpers.html#M000266","()","",2],["ip","Rack::Request","classes/Rack/Request.html#M000304","()","",2],["key?","HeaderHash","classes/HeaderHash.html#M000457","(k)","Alias for #include?",2],["key?","Rack::Session::Abstract::SessionHash","classes/Rack/Session/Abstract/SessionHash.html#M000340","(key)","Alias for #has_key?",2],["list_directory","Rack::Directory","classes/Rack/Directory.html#M000105","()","",2],["list_path","Rack::Directory","classes/Rack/Directory.html#M000107","()","TODO: add correct response if not readable, not sure if 404 is the best option ",2],["load!","Rack::Session::Abstract::SessionHash","classes/Rack/Session/Abstract/SessionHash.html#M000356","()","",2],["load_for_read!","Rack::Session::Abstract::SessionHash","classes/Rack/Session/Abstract/SessionHash.html#M000354","()","",2],["load_for_write!","Rack::Session::Abstract::SessionHash","classes/Rack/Session/Abstract/SessionHash.html#M000355","()","",2],["load_session","Rack::Session::Abstract::ID","classes/Rack/Session/Abstract/ID.html#M000364","(env)","Extracts the session id from provided cookies and passes it and the environment to #get_session. ",2],["load_session","Rack::Session::Cookie","classes/Rack/Session/Cookie.html#M000383","(env)","",2],["loaded?","Rack::Session::Abstract::SessionHash","classes/Rack/Session/Abstract/SessionHash.html#M000351","()","",2],["loaded_session?","Rack::Session::Abstract::ID","classes/Rack/Session/Abstract/ID.html#M000369","(session)","",2],["local_path","Rack::Multipart::UploadedFile","classes/Rack/Multipart/UploadedFile.html#M000203","()","Alias for #path",2],["location","Rack::Response::Helpers","classes/Rack/Response/Helpers.html#M000287","()","",2],["log","Rack::CommonLogger","classes/Rack/CommonLogger.html#M000080","(env, status, header, began_at)","",2],["logger","Rack::Request","classes/Rack/Request.html#M000237","()","",2],["logging_middleware","Rack::Server","classes/Rack/Server.html#M000329","()","",2],["make_rewindable","Rack::RewindableInput","classes/Rack/RewindableInput.html#M000314","()","",2],["map","Rack::Builder","classes/Rack/Builder.html#M000069","(path, &block)","Creates a route within the application. Rack::Builder.app do map '/' do run Heartbeat end end The +use+",2],["map_accel_path","Rack::Sendfile","classes/Rack/Sendfile.html#M000322","(env, file)","",2],["match","Rack::MockResponse","classes/Rack/MockResponse.html#M000183","(other)","",2],["md5","Rack::Auth::Digest::MD5","classes/Rack/Auth/Digest/MD5.html#M000033","(data)","",2],["media_type","Rack::Request","classes/Rack/Request.html#M000239","()","The media type (type/subtype) portion of the CONTENT_TYPE header without any media type parameters. e.g.,",2],["media_type_params","Rack::Request","classes/Rack/Request.html#M000240","()","The media type parameters provided in CONTENT_TYPE as a Hash, or an empty Hash if no CONTENT_TYPE or",2],["member?","HeaderHash","classes/HeaderHash.html#M000456","(k)","Alias for #include?",2],["merge","HeaderHash","classes/HeaderHash.html#M000459","(other)","",2],["merge!","HeaderHash","classes/HeaderHash.html#M000458","(other)","",2],["method","Rack::Auth::Digest::Request","classes/Rack/Auth/Digest/Request.html#M000047","()","",2],["method_missing","Rack::Auth::Digest::Request","classes/Rack/Auth/Digest/Request.html#M000053","(sym, *args)","",2],["method_missing","Rack::BodyProxy","classes/Rack/BodyProxy.html#M000058","(*args, &block)","",2],["method_override","Rack::MethodOverride","classes/Rack/MethodOverride.html#M000167","(env)","",2],["middleware","Rack::Server","classes/Rack/Server.html#M000331","()","",2],["middleware","Rack::Server","classes/Rack/Server.html#M000330","()","",2],["mime_type","Rack::Mime","classes/Rack/Mime.html#M000168","(ext, fallback='application/octet-stream')","Returns String with mime type if found, otherwise use +fallback+. +ext+ should be filename extension",2],["mime_type","Rack::Mime","classes/Rack/Mime.html#M000168","(ext, fallback='application/octet-stream')","Returns String with mime type if found, otherwise use +fallback+. +ext+ should be filename extension",2],["modified_since?","Rack::ConditionalGet","classes/Rack/ConditionalGet.html#M000086","(modified_since, headers)","",2],["multipart?","Rack::Multipart::Generator","classes/Rack/Multipart/Generator.html#M000188","()","",2],["new","Context","classes/Context.html#M000443","(app_f, app_r)","",2],["new","HeaderHash","classes/HeaderHash.html#M000448","(hash={})","",2],["new","HeaderHash","classes/HeaderHash.html#M000447","(hash={})","",2],["new","Rack::Auth::AbstractHandler","classes/Rack/Auth/AbstractHandler.html#M000000","(app, realm=nil, &authenticator)","",2],["new","Rack::Auth::AbstractRequest","classes/Rack/Auth/AbstractRequest.html#M000003","(env)","",2],["new","Rack::Auth::Digest::MD5","classes/Rack/Auth/Digest/MD5.html#M000016","(app, realm=nil, opaque=nil, &authenticator)","",2],["new","Rack::Auth::Digest::Nonce","classes/Rack/Auth/Digest/Nonce.html#M000018","(timestamp = Time.now, given_digest = nil)","",2],["new","Rack::Auth::Digest::Params","classes/Rack/Auth/Digest/Params.html#M000042","()","",2],["new","Rack::BodyProxy","classes/Rack/BodyProxy.html#M000054","(body, &block)","",2],["new","Rack::Builder","classes/Rack/Builder.html#M000060","(default_app = nil,&block)","",2],["new","Rack::Cascade","classes/Rack/Cascade.html#M000061","(apps, catch=404)","",2],["new","Rack::Chunked","classes/Rack/Chunked.html#M000076","(app)","",2],["new","Rack::Chunked::Body","classes/Rack/Chunked/Body.html#M000073","(body)","",2],["new","Rack::CommonLogger","classes/Rack/CommonLogger.html#M000078","(app, logger=nil)","",2],["new","Rack::ConditionalGet","classes/Rack/ConditionalGet.html#M000082","(app)","",2],["new","Rack::Config","classes/Rack/Config.html#M000088","(app, &block)","",2],["new","Rack::ContentLength","classes/Rack/ContentLength.html#M000090","(app)","",2],["new","Rack::ContentType","classes/Rack/ContentType.html#M000092","(app, content_type = \"text/html\")","",2],["new","Rack::Deflater","classes/Rack/Deflater.html#M000094","(app)","",2],["new","Rack::Deflater::DeflateStream","classes/Rack/Deflater/DeflateStream.html#M000099","(body)","",2],["new","Rack::Deflater::GzipStream","classes/Rack/Deflater/GzipStream.html#M000096","(body, mtime)","",2],["new","Rack::Directory","classes/Rack/Directory.html#M000100","(root, app=nil)","",2],["new","Rack::ETag","classes/Rack/ETag.html#M000110","(app, no_cache_control = nil, cache_control = DEFAULT_CACHE_CONTROL)","",2],["new","Rack::File","classes/Rack/File.html#M000117","(root, cache_control = nil)","",2],["new","Rack::ForwardRequest","classes/Rack/ForwardRequest.html#M000215","(url, env={})","",2],["new","Rack::Handler::Mongrel","classes/Rack/Handler/Mongrel.html#M000144","(app)","",2],["new","Rack::Handler::SCGI","classes/Rack/Handler/SCGI.html#M000141","(settings = {})","",2],["new","Rack::Handler::WEBrick","classes/Rack/Handler/WEBrick.html#M000151","(server, app)","",2],["new","Rack::Head","classes/Rack/Head.html#M000157","(app)","",2],["new","Rack::Lint","classes/Rack/Lint.html#M000160","(app)","",2],["new","Rack::Lock","classes/Rack/Lock.html#M000161","(app, mutex = Mutex.new)","",2],["new","Rack::Logger","classes/Rack/Logger.html#M000163","(app, level = ::Logger::INFO)","",2],["new","Rack::MethodOverride","classes/Rack/MethodOverride.html#M000165","(app)","",2],["new","Rack::MockRequest","classes/Rack/MockRequest.html#M000173","(app)","",2],["new","Rack::MockResponse","classes/Rack/MockResponse.html#M000181","(status, headers, body, errors=StringIO.new(\"\"))","",2],["new","Rack::Multipart::Generator","classes/Rack/Multipart/Generator.html#M000186","(params, first = true)","",2],["new","Rack::Multipart::Parser","classes/Rack/Multipart/Parser.html#M000192","(env)","",2],["new","Rack::Multipart::UploadedFile","classes/Rack/Multipart/UploadedFile.html#M000201","(path, content_type = \"text/plain\", binary = false)","",2],["new","Rack::NullLogger","classes/Rack/NullLogger.html#M000208","(app)","",2],["new","Rack::Recursive","classes/Rack/Recursive.html#M000216","(app)","",2],["new","Rack::Reloader","classes/Rack/Reloader.html#M000220","(app, cooldown = 10, backend = Stat)","",2],["new","Rack::Request","classes/Rack/Request.html#M000227","(env)","",2],["new","Rack::Response","classes/Rack/Response.html#M000238","(body=[], status=200, header={})","",2],["new","Rack::RewindableInput","classes/Rack/RewindableInput.html#M000305","(io)","",2],["new","Rack::Runtime","classes/Rack/Runtime.html#M000316","(app, name = nil)","",2],["new","Rack::Sendfile","classes/Rack/Sendfile.html#M000319","(app, variation=nil)","",2],["new","Rack::Server","classes/Rack/Server.html#M000325","(options = nil)","Options may include: * :app a rack application to run (overrides :config) * :config a rackup configuration",2],["new","Rack::Session::Abstract::ID","classes/Rack/Session/Abstract/ID.html#M000358","(app, options={})","",2],["new","Rack::Session::Abstract::SessionHash","classes/Rack/Session/Abstract/SessionHash.html#M000334","(by, env)","",2],["new","Rack::Session::Cookie","classes/Rack/Session/Cookie.html#M000381","(app, options={})","",2],["new","Rack::Session::Memcache","classes/Rack/Session/Memcache.html#M000396","(app, options={})","",2],["new","Rack::Session::Pool","classes/Rack/Session/Pool.html#M000395","(app, options={})","",2],["new","Rack::ShowExceptions","classes/Rack/ShowExceptions.html#M000409","(app)","",2],["new","Rack::ShowStatus","classes/Rack/ShowStatus.html#M000407","(app)","",2],["new","Rack::Static","classes/Rack/Static.html#M000415","(app, options={})","",2],["new","Rack::URLMap","classes/Rack/URLMap.html#M000421","(map = {})","",2],["nonce","Rack::Auth::Digest::Request","classes/Rack/Auth/Digest/Request.html#M000050","()","",2],["normalize_params","Object","classes/Object.html#M000432","(params, name, v = nil)","",2],["not_found?","Rack::Response::Helpers","classes/Rack/Response/Helpers.html#M000278","()","",2],["ok?","Rack::Response::Helpers","classes/Rack/Response/Helpers.html#M000275","()","",2],["opt_parser","Rack::Server","classes/Rack/Server.html#M000336","()","",2],["options","Rack::Server","classes/Rack/Server.html#M000326","()","",2],["options?","Rack::Request","classes/Rack/Request.html#M000262","()","Checks the HTTP request method (or verb) to see if it was of type OPTIONS ",2],["overwrite_file_path","Rack::Static","classes/Rack/Static.html#M000417","(path)","",2],["params","Rack::Auth::AbstractRequest","classes/Rack/Auth/AbstractRequest.html#M000008","()","",2],["params","Rack::Auth::Digest::MD5","classes/Rack/Auth/Digest/MD5.html#M000026","(hash = {})","",2],["params","Rack::Auth::Digest::Request","classes/Rack/Auth/Digest/Request.html#M000051","()","",2],["params","Rack::Request","classes/Rack/Request.html#M000289","()","The union of GET and POST data. ",2],["parse","Rack::Auth::Digest::Nonce","classes/Rack/Auth/Digest/Nonce.html#M000017","(string)","",2],["parse","Rack::Auth::Digest::Params","classes/Rack/Auth/Digest/Params.html#M000039","(str)","",2],["parse","Rack::Multipart::Parser","classes/Rack/Multipart/Parser.html#M000193","()","",2],["parse!","Rack::Server::Options","classes/Rack/Server/Options.html#M000318","(args)","",2],["parse_file","Rack::Builder","classes/Rack/Builder.html#M000059","(config, opts = Server::Options.new)","",2],["parse_multipart","Rack::Multipart","classes/Rack/Multipart.html#M000206","(env)","",2],["parse_multipart","Rack::Request","classes/Rack/Request.html#M000309","(env)","",2],["parse_nested_query","Rack","classes/Rack.html#M000429","(qs, d = nil)","",2],["parse_options","Rack::Server","classes/Rack/Server.html#M000335","(args)","",2],["parse_query","Rack::Request","classes/Rack/Request.html#M000308","(qs)","",2],["parse_query","Rack::Utils","classes/Rack/Utils.html#M000428","(qs, d = nil)","Stolen from Mongrel, with some small modifications: Parses a query string by breaking it up at the '&'",2],["parseable_data?","Rack::Request","classes/Rack/Request.html#M000280","()","Determine whether the request body contains data by checking the request media_type against registered",2],["parts","Rack::Auth::AbstractRequest","classes/Rack/Auth/AbstractRequest.html#M000006","()","",2],["passwords_hashed?","Rack::Auth::Digest::MD5","classes/Rack/Auth/Digest/MD5.html#M000020","()","",2],["patch?","Rack::Request","classes/Rack/Request.html#M000263","()","Checks the HTTP request method (or verb) to see if it was of type PATCH ",2],["path","Rack::Multipart::UploadedFile","classes/Rack/Multipart/UploadedFile.html#M000202","()","",2],["path","Rack::Request","classes/Rack/Request.html#M000300","()","",2],["path_info","Rack::Request","classes/Rack/Request.html#M000230","()","",2],["path_info=","Rack::Request","classes/Rack/Request.html#M000258","(s)","",2],["persistent_session_id!","Rack::Session::Cookie","classes/Rack/Session/Cookie.html#M000387","(data, sid=nil)","",2],["port","Rack::Request","classes/Rack/Request.html#M000251","()","",2],["post","Rack::MockRequest","classes/Rack/MockRequest.html#M000175","(uri, opts={})","",2],["post?","Rack::Request","classes/Rack/Request.html#M000268","()","Checks the HTTP request method (or verb) to see if it was of type POST ",2],["prefers_plain_text?","Rack::ShowExceptions","classes/Rack/ShowExceptions.html#M000412","(env)","",2],["prepare_session","Rack::Session::Abstract::ID","classes/Rack/Session/Abstract/ID.html#M000363","(env)","Sets the lazy session at 'rack.session' and places options and session metadata into 'rack.session.options'.",2],["pretty","Rack::ShowExceptions","classes/Rack/ShowExceptions.html#M000414","(env, exception)","",2],["process","Rack::Handler::Mongrel","classes/Rack/Handler/Mongrel.html#M000145","(request, response)","",2],["process_request","Rack::Handler::SCGI","classes/Rack/Handler/SCGI.html#M000142","(request, input_body, socket)","",2],["provided?","Rack::Auth::AbstractRequest","classes/Rack/Auth/AbstractRequest.html#M000005","()","",2],["put","Rack::MockRequest","classes/Rack/MockRequest.html#M000176","(uri, opts={})","",2],["put?","Rack::Request","classes/Rack/Request.html#M000269","()","Checks the HTTP request method (or verb) to see if it was of type PUT ",2],["puts","Rack::MockRequest::FatalWarner","classes/Rack/MockRequest/FatalWarner.html#M000169","(warning)","",2],["query_string","Rack::Request","classes/Rack/Request.html#M000232","()","",2],["quote","Rack::Auth::Digest::Params","classes/Rack/Auth/Digest/Params.html#M000046","(str)","",2],["read","FCGI::Stream","classes/FCGI/Stream.html#M000127","(n, buffer=nil)","",2],["read","Rack::RewindableInput","classes/Rack/RewindableInput.html#M000307","(*args)","",2],["recontext","Context","classes/Context.html#M000445","(app)","",2],["redirect","Rack::Response","classes/Rack/Response.html#M000248","(target, status=302)","",2],["redirect?","Rack::Response::Helpers","classes/Rack/Response/Helpers.html#M000283","()","",2],["redirection?","Rack::Response::Helpers","classes/Rack/Response/Helpers.html#M000272","()","",2],["referer","Rack::Request","classes/Rack/Request.html#M000293","()","the referer of the client ",2],["referrer","Rack::Request","classes/Rack/Request.html#M000294","()","Alias for #referer",2],["register","Rack::Handler","classes/Rack/Handler.html#M000156","(server, klass)","",2],["release","Rack","classes/Rack.html#M000431","()","Return the Rack release as a dotted string. ",2],["reload!","Rack::Reloader","classes/Rack/Reloader.html#M000222","(stderr = $stderr)","",2],["remap","Rack::URLMap","classes/Rack/URLMap.html#M000422","(map)","",2],["replace","HeaderHash","classes/HeaderHash.html#M000460","(other)","",2],["request","Rack::Auth::AbstractRequest","classes/Rack/Auth/AbstractRequest.html#M000004","()","",2],["request","Rack::MockRequest","classes/Rack/MockRequest.html#M000179","(method=\"GET\", uri=\"\", opts={})","",2],["request_method","Rack::Request","classes/Rack/Request.html#M000231","()","",2],["respond_to?","Rack::Auth::Digest::Request","classes/Rack/Auth/Digest/Request.html#M000052","(sym, *)","",2],["respond_to?","Rack::BodyProxy","classes/Rack/BodyProxy.html#M000055","(*args)","",2],["respond_to?","Rack::Multipart::UploadedFile","classes/Rack/Multipart/UploadedFile.html#M000204","(*args)","",2],["rewind","Rack::RewindableInput","classes/Rack/RewindableInput.html#M000311","()","",2],["rfc2822","Object","classes/Object.html#M000441","(time)","Modified version of stdlib time.rb Time#rfc2822 to use '%d-%b-%Y' instead of '% %b %Y'. It assumes that",2],["rotation","Rack::Reloader::Stat","classes/Rack/Reloader/Stat.html#M000224","()","",2],["route_file","Rack::Static","classes/Rack/Static.html#M000418","(path)","",2],["run","Rack::Builder","classes/Rack/Builder.html#M000068","(app)","Takes an argument that is an object that responds to #call and returns a Rack response. The simplest",2],["run","Rack::Handler::CGI","classes/Rack/Handler/CGI.html#M000121","(app, options=nil)","",2],["run","Rack::Handler::FastCGI","classes/Rack/Handler/FastCGI.html#M000129","(app, options={})","",2],["run","Rack::Handler::LSWS","classes/Rack/Handler/LSWS.html#M000132","(app, options=nil)","",2],["run","Rack::Handler::Mongrel","classes/Rack/Handler/Mongrel.html#M000138","(app, options={})","",2],["run","Rack::Handler::SCGI","classes/Rack/Handler/SCGI.html#M000139","(app, options=nil)","",2],["run","Rack::Handler::Thin","classes/Rack/Handler/Thin.html#M000146","(app, options={})","",2],["run","Rack::Handler::WEBrick","classes/Rack/Handler/WEBrick.html#M000148","(app, options={})","",2],["rx","Rack::Multipart::Parser","classes/Rack/Multipart/Parser.html#M000196","()","",2],["safe_load","Rack::Reloader","classes/Rack/Reloader.html#M000223","(file, mtime, stderr = $stderr)","A safe Kernel::load, issuing the hooks depending on the results ",2],["safe_stat","Rack::Reloader::Stat","classes/Rack/Reloader/Stat.html#M000226","(file)","",2],["scheme","Rack::Auth::AbstractRequest","classes/Rack/Auth/AbstractRequest.html#M000007","()","",2],["scheme","Rack::Request","classes/Rack/Request.html#M000242","()","",2],["script_name","Rack::Request","classes/Rack/Request.html#M000229","()","",2],["script_name=","Rack::Request","classes/Rack/Request.html#M000257","(s)","",2],["security_matches?","Rack::Session::Abstract::ID","classes/Rack/Session/Abstract/ID.html#M000376","(env, options)","",2],["select_best_encoding","Object","classes/Object.html#M000436","(available_encodings, accept_encoding)","",2],["send_body","Rack::Handler::CGI","classes/Rack/Handler/CGI.html#M000126","(body)","",2],["send_body","Rack::Handler::FastCGI","classes/Rack/Handler/FastCGI.html#M000135","(out, body)","",2],["send_body","Rack::Handler::LSWS","classes/Rack/Handler/LSWS.html#M000137","(body)","",2],["send_headers","Rack::Handler::CGI","classes/Rack/Handler/CGI.html#M000125","(status, headers)","",2],["send_headers","Rack::Handler::FastCGI","classes/Rack/Handler/FastCGI.html#M000134","(out, status, headers)","",2],["send_headers","Rack::Handler::LSWS","classes/Rack/Handler/LSWS.html#M000136","(status, headers)","",2],["serve","Rack::Handler::CGI","classes/Rack/Handler/CGI.html#M000122","(app)","",2],["serve","Rack::Handler::FastCGI","classes/Rack/Handler/FastCGI.html#M000131","(request, app)","",2],["serve","Rack::Handler::LSWS","classes/Rack/Handler/LSWS.html#M000133","(app)","",2],["server","Rack::Server","classes/Rack/Server.html#M000333","()","",2],["server_error?","Rack::Response::Helpers","classes/Rack/Response/Helpers.html#M000274","()","",2],["service","Rack::Handler::WEBrick","classes/Rack/Handler/WEBrick.html#M000152","(req, res)","",2],["serving","Rack::File","classes/Rack/File.html#M000120","(env)","",2],["session","Rack::Request","classes/Rack/Request.html#M000235","()","",2],["session_exists?","Rack::Session::Abstract::ID","classes/Rack/Session/Abstract/ID.html#M000367","(env)","Check if the session exists or not. ",2],["session_options","Rack::Request","classes/Rack/Request.html#M000236","()","",2],["set_cookie","Rack::Response","classes/Rack/Response.html#M000246","(key, value)","",2],["set_cookie","Rack::Session::Abstract::ID","classes/Rack/Session/Abstract/ID.html#M000386","(env, headers, cookie)","Sets the cookie back to the client with session id. We skip the cookie setting if the value didn't change",2],["set_cookie","Rack::Session::Cookie","classes/Rack/Session/Cookie.html#M000390","(env, headers, cookie)","Overwrite set cookie to bypass content equality and always stream the cookie. ",2],["set_cookie_header!","Object","classes/Object.html#M000437","(header, key, value)","",2],["set_session","Rack::Session::Abstract::ID","classes/Rack/Session/Abstract/ID.html#M000389","(env, sid, session, options)","All thread safety and session storage proceedures should occur here. Should return true or false dependant",2],["set_session","Rack::Session::Cookie","classes/Rack/Session/Cookie.html#M000391","(env, session_id, session, options)","",2],["set_session","Rack::Session::Memcache","classes/Rack/Session/Memcache.html#M000402","(env, session_id, new_session, options)","",2],["set_session","Rack::Session::Pool","classes/Rack/Session/Pool.html#M000400","(env, session_id, new_session, options)","",2],["setup_parse","Rack::Multipart::Parser","classes/Rack/Multipart/Parser.html#M000194","()","",2],["shutdown","Rack::Handler::WEBrick","classes/Rack/Handler/WEBrick.html#M000150","()","",2],["skip_caching?","Rack::ETag","classes/Rack/ETag.html#M000115","(headers)","",2],["split_header_value","Rack::Auth::Digest::Params","classes/Rack/Auth/Digest/Params.html#M000041","(str)","",2],["ssl?","Rack::Request","classes/Rack/Request.html#M000243","()","",2],["stale?","Rack::Auth::Digest::Nonce","classes/Rack/Auth/Digest/Nonce.html#M000024","()","",2],["start","Rack::Server","classes/Rack/Server.html#M000332","(&blk)","",2],["start","Rack::Server","classes/Rack/Server.html#M000324","(options = nil)","Start a new rack server (like running rackup). This will parse ARGV and provide standard ARGV rackup",2],["stat","Rack::Directory","classes/Rack/Directory.html#M000106","(node, max = 10)","",2],["status_code","Object","classes/Object.html#M000461","(status)","",2],["string","Rack::MockRequest::FatalWarner","classes/Rack/MockRequest/FatalWarner.html#M000172","()","",2],["stringify_keys","Rack::Session::Abstract::SessionHash","classes/Rack/Session/Abstract/SessionHash.html#M000357","(other)","",2],["successful?","Rack::Response::Helpers","classes/Rack/Response/Helpers.html#M000271","()","",2],["to_a","Rack::Response","classes/Rack/Response.html#M000253","(&block)","Alias for #finish",2],["to_app","Rack::Builder","classes/Rack/Builder.html#M000070","()","",2],["to_ary","Rack::Response","classes/Rack/Response.html#M000254","(&block)","Alias for #finish",2],["to_hash","HeaderHash","classes/HeaderHash.html#M000450","()","",2],["to_hash","Rack::Session::Abstract::SessionHash","classes/Rack/Session/Abstract/SessionHash.html#M000344","()","",2],["to_rfc2822","Rack::ConditionalGet","classes/Rack/ConditionalGet.html#M000087","(since)","",2],["to_s","Rack::Auth::Digest::Nonce","classes/Rack/Auth/Digest/Nonce.html#M000019","()","",2],["to_s","Rack::Auth::Digest::Params","classes/Rack/Auth/Digest/Params.html#M000045","()","",2],["trace?","Rack::Request","classes/Rack/Request.html#M000270","()","Checks the HTTP request method (or verb) to see if it was of type TRACE ",2],["trusted_proxy?","Rack::Request","classes/Rack/Request.html#M000303","(ip)","",2],["try_require","Rack::Handler","classes/Rack/Handler.html#M000155","(prefix, const_name)","Transforms server-name constants to their canonical form as filenames, then tries to require them but",2],["unauthorized","Rack::Auth::AbstractHandler","classes/Rack/Auth/AbstractHandler.html#M000001","(www_authenticate = challenge)","",2],["unescape","Rack::Utils","classes/Rack/Utils.html#M000427","(s, encoding = nil)","",2],["unescape","Rack::Utils","classes/Rack/Utils.html#M000426","(s, encoding = Encoding::UTF_8)","",2],["unescape","Rack::Utils","classes/Rack/Utils.html#M000426","(s, encoding = Encoding::UTF_8)","",2],["unescape","Rack::Utils","classes/Rack/Utils.html#M000427","(s, encoding = nil)","",2],["unpacked_cookie_data","Rack::Session::Cookie","classes/Rack/Session/Cookie.html#M000385","(env)","",2],["unprocessable?","Rack::Response::Helpers","classes/Rack/Response/Helpers.html#M000282","()","",2],["update","Rack::Session::Abstract::SessionHash","classes/Rack/Session/Abstract/SessionHash.html#M000347","(hash)","",2],["url","Rack::Request","classes/Rack/Request.html#M000299","()","Tries to return a remake of the original request URL as a string. ",2],["use","Rack::Builder","classes/Rack/Builder.html#M000064","(middleware, *args, &block)","Specifies a middleware to use in a stack. class Middleware def initialize(app) @app = app end def call(env)",2],["user_agent","Rack::Request","classes/Rack/Request.html#M000295","()","",2],["username","Rack::Auth::Basic::Request","classes/Rack/Auth/Basic/Request.html#M000015","()","",2],["valid?","Rack::Auth::Basic","classes/Rack/Auth/Basic.html#M000012","(auth)","",2],["valid?","Rack::Auth::Digest::MD5","classes/Rack/Auth/Digest/MD5.html#M000028","(auth)","",2],["valid?","Rack::Auth::Digest::Nonce","classes/Rack/Auth/Digest/Nonce.html#M000023","()","",2],["valid_digest?","Rack::Auth::Digest::MD5","classes/Rack/Auth/Digest/MD5.html#M000032","(auth)","",2],["valid_nonce?","Rack::Auth::Digest::MD5","classes/Rack/Auth/Digest/MD5.html#M000031","(auth)","",2],["valid_opaque?","Rack::Auth::Digest::MD5","classes/Rack/Auth/Digest/MD5.html#M000030","(auth)","",2],["valid_options","Rack::Handler::FastCGI","classes/Rack/Handler/FastCGI.html#M000130","()","",2],["valid_options","Rack::Handler::Mongrel","classes/Rack/Handler/Mongrel.html#M000143","()","",2],["valid_options","Rack::Handler::SCGI","classes/Rack/Handler/SCGI.html#M000140","()","",2],["valid_options","Rack::Handler::Thin","classes/Rack/Handler/Thin.html#M000147","()","",2],["valid_options","Rack::Handler::WEBrick","classes/Rack/Handler/WEBrick.html#M000149","()","",2],["valid_qop?","Rack::Auth::Digest::MD5","classes/Rack/Auth/Digest/MD5.html#M000029","(auth)","",2],["values_at","Rack::Request","classes/Rack/Request.html#M000292","(*keys)","like Hash#values_at ",2],["variation","Rack::Sendfile","classes/Rack/Sendfile.html#M000321","(env)","",2],["version","Rack","classes/Rack.html#M000430","()","Return the Rack protocol version as a dotted string. ",2],["warn","Rack::NullLogger","classes/Rack/NullLogger.html#M000212","(progname = nil, &block)","",2],["with_lock","Rack::Session::Memcache","classes/Rack/Session/Memcache.html#M000406","(env, default=nil)","",2],["with_lock","Rack::Session::Pool","classes/Rack/Session/Pool.html#M000404","(env, default=nil)","",2],["wrapped_app","Rack::Server","classes/Rack/Server.html#M000345","()","",2],["write","Rack::Deflater::GzipStream","classes/Rack/Deflater/GzipStream.html#M000098","(data)","",2],["write","Rack::MockRequest::FatalWarner","classes/Rack/MockRequest/FatalWarner.html#M000170","(warning)","",2],["write","Rack::Response","classes/Rack/Response.html#M000256","(str)","Append to body and update Content-Length. NOTE: Do not mix #write and direct #body access! ",2],["write_pid","Rack::Server","classes/Rack/Server.html#M000352","()","",2],["xhr?","Rack::Request","classes/Rack/Request.html#M000297","()","",2],["COPYING","files/COPYING.html","files/COPYING.html","","Copyright (c) 2007, 2008, 2009, 2010 Christian Neukirchen <purl.org/net/chneukirchen>  Permission is",3],["KNOWN-ISSUES","files/KNOWN-ISSUES.html","files/KNOWN-ISSUES.html","","= Known issues with Rack and Web servers  * Lighttpd sets wrong SCRIPT_NAME and PATH_INFO if you mount",3],["README.rdoc","files/README_rdoc.html","files/README_rdoc.html","","= Rack, a modular Ruby webserver interface  Rack provides a minimal, modular and adaptable interface",3],["rack.rb","files/lib/rack_rb.html","files/lib/rack_rb.html","","Copyright (C) 2007, 2008, 2009, 2010 Christian Neukirchen <purl.org/net/chneukirchen> Rack is freely",3],["handler.rb","files/lib/rack/auth/abstract/handler_rb.html","files/lib/rack/auth/abstract/handler_rb.html","","",3],["request.rb","files/lib/rack/auth/abstract/request_rb.html","files/lib/rack/auth/abstract/request_rb.html","","",3],["basic.rb","files/lib/rack/auth/basic_rb.html","files/lib/rack/auth/basic_rb.html","","",3],["md5.rb","files/lib/rack/auth/digest/md5_rb.html","files/lib/rack/auth/digest/md5_rb.html","","",3],["nonce.rb","files/lib/rack/auth/digest/nonce_rb.html","files/lib/rack/auth/digest/nonce_rb.html","","",3],["params.rb","files/lib/rack/auth/digest/params_rb.html","files/lib/rack/auth/digest/params_rb.html","","",3],["request.rb","files/lib/rack/auth/digest/request_rb.html","files/lib/rack/auth/digest/request_rb.html","","",3],["body_proxy.rb","files/lib/rack/body_proxy_rb.html","files/lib/rack/body_proxy_rb.html","","",3],["builder.rb","files/lib/rack/builder_rb.html","files/lib/rack/builder_rb.html","","",3],["cascade.rb","files/lib/rack/cascade_rb.html","files/lib/rack/cascade_rb.html","","",3],["chunked.rb","files/lib/rack/chunked_rb.html","files/lib/rack/chunked_rb.html","","",3],["commonlogger.rb","files/lib/rack/commonlogger_rb.html","files/lib/rack/commonlogger_rb.html","","",3],["conditionalget.rb","files/lib/rack/conditionalget_rb.html","files/lib/rack/conditionalget_rb.html","","",3],["config.rb","files/lib/rack/config_rb.html","files/lib/rack/config_rb.html","","",3],["content_length.rb","files/lib/rack/content_length_rb.html","files/lib/rack/content_length_rb.html","","",3],["content_type.rb","files/lib/rack/content_type_rb.html","files/lib/rack/content_type_rb.html","","",3],["deflater.rb","files/lib/rack/deflater_rb.html","files/lib/rack/deflater_rb.html","","",3],["directory.rb","files/lib/rack/directory_rb.html","files/lib/rack/directory_rb.html","","",3],["etag.rb","files/lib/rack/etag_rb.html","files/lib/rack/etag_rb.html","","",3],["file.rb","files/lib/rack/file_rb.html","files/lib/rack/file_rb.html","","",3],["handler.rb","files/lib/rack/handler_rb.html","files/lib/rack/handler_rb.html","","",3],["cgi.rb","files/lib/rack/handler/cgi_rb.html","files/lib/rack/handler/cgi_rb.html","","",3],["evented_mongrel.rb","files/lib/rack/handler/evented_mongrel_rb.html","files/lib/rack/handler/evented_mongrel_rb.html","","",3],["fastcgi.rb","files/lib/rack/handler/fastcgi_rb.html","files/lib/rack/handler/fastcgi_rb.html","","",3],["lsws.rb","files/lib/rack/handler/lsws_rb.html","files/lib/rack/handler/lsws_rb.html","","",3],["mongrel.rb","files/lib/rack/handler/mongrel_rb.html","files/lib/rack/handler/mongrel_rb.html","","",3],["scgi.rb","files/lib/rack/handler/scgi_rb.html","files/lib/rack/handler/scgi_rb.html","","",3],["swiftiplied_mongrel.rb","files/lib/rack/handler/swiftiplied_mongrel_rb.html","files/lib/rack/handler/swiftiplied_mongrel_rb.html","","",3],["thin.rb","files/lib/rack/handler/thin_rb.html","files/lib/rack/handler/thin_rb.html","","",3],["webrick.rb","files/lib/rack/handler/webrick_rb.html","files/lib/rack/handler/webrick_rb.html","","",3],["head.rb","files/lib/rack/head_rb.html","files/lib/rack/head_rb.html","","",3],["lint.rb","files/lib/rack/lint_rb.html","files/lib/rack/lint_rb.html","","",3],["lobster.rb","files/lib/rack/lobster_rb.html","files/lib/rack/lobster_rb.html","","",3],["lock.rb","files/lib/rack/lock_rb.html","files/lib/rack/lock_rb.html","","",3],["logger.rb","files/lib/rack/logger_rb.html","files/lib/rack/logger_rb.html","","",3],["methodoverride.rb","files/lib/rack/methodoverride_rb.html","files/lib/rack/methodoverride_rb.html","","",3],["mime.rb","files/lib/rack/mime_rb.html","files/lib/rack/mime_rb.html","","",3],["mock.rb","files/lib/rack/mock_rb.html","files/lib/rack/mock_rb.html","","",3],["multipart.rb","files/lib/rack/multipart_rb.html","files/lib/rack/multipart_rb.html","","",3],["generator.rb","files/lib/rack/multipart/generator_rb.html","files/lib/rack/multipart/generator_rb.html","","",3],["parser.rb","files/lib/rack/multipart/parser_rb.html","files/lib/rack/multipart/parser_rb.html","","",3],["uploaded_file.rb","files/lib/rack/multipart/uploaded_file_rb.html","files/lib/rack/multipart/uploaded_file_rb.html","","",3],["nulllogger.rb","files/lib/rack/nulllogger_rb.html","files/lib/rack/nulllogger_rb.html","","",3],["recursive.rb","files/lib/rack/recursive_rb.html","files/lib/rack/recursive_rb.html","","",3],["reloader.rb","files/lib/rack/reloader_rb.html","files/lib/rack/reloader_rb.html","","Copyright (c) 2009 Michael Fellinger m.fellinger@gmail.com Rack::Reloader is subject to the terms of",3],["request.rb","files/lib/rack/request_rb.html","files/lib/rack/request_rb.html","","",3],["response.rb","files/lib/rack/response_rb.html","files/lib/rack/response_rb.html","","",3],["rewindable_input.rb","files/lib/rack/rewindable_input_rb.html","files/lib/rack/rewindable_input_rb.html","","",3],["runtime.rb","files/lib/rack/runtime_rb.html","files/lib/rack/runtime_rb.html","","",3],["sendfile.rb","files/lib/rack/sendfile_rb.html","files/lib/rack/sendfile_rb.html","","",3],["server.rb","files/lib/rack/server_rb.html","files/lib/rack/server_rb.html","","",3],["id.rb","files/lib/rack/session/abstract/id_rb.html","files/lib/rack/session/abstract/id_rb.html","","AUTHOR: blink <blinketje@gmail.com>; blink#ruby-lang@irc.freenode.net bugrep: Andreas Zehnder ",3],["cookie.rb","files/lib/rack/session/cookie_rb.html","files/lib/rack/session/cookie_rb.html","","",3],["memcache.rb","files/lib/rack/session/memcache_rb.html","files/lib/rack/session/memcache_rb.html","","AUTHOR: blink <blinketje@gmail.com>; blink#ruby-lang@irc.freenode.net ",3],["pool.rb","files/lib/rack/session/pool_rb.html","files/lib/rack/session/pool_rb.html","","AUTHOR: blink <blinketje@gmail.com>; blink#ruby-lang@irc.freenode.net THANKS: apeiros, for session id",3],["showexceptions.rb","files/lib/rack/showexceptions_rb.html","files/lib/rack/showexceptions_rb.html","","",3],["showstatus.rb","files/lib/rack/showstatus_rb.html","files/lib/rack/showstatus_rb.html","","",3],["static.rb","files/lib/rack/static_rb.html","files/lib/rack/static_rb.html","","",3],["urlmap.rb","files/lib/rack/urlmap_rb.html","files/lib/rack/urlmap_rb.html","","",3],["utils.rb","files/lib/rack/utils_rb.html","files/lib/rack/utils_rb.html","","",3]],"searchIndex":["context","fcgi","stream","headerhash","object","rack","auth","abstracthandler","abstractrequest","basic","request","digest","md5","nonce","params","request","bodyproxy","builder","cascade","chunked","body","commonlogger","conditionalget","config","contentlength","contenttype","deflater","deflatestream","gzipstream","directory","etag","file","forwardrequest","handler","cgi","eventedmongrel","fastcgi","lsws","mongrel","scgi","swiftipliedmongrel","thin","webrick","head","lint","lobster","lock","logger","methodoverride","mime","mockrequest","fatalwarner","fatalwarning","mockresponse","multipart","generator","parser","uploadedfile","nulllogger","recursive","reloader","stat","request","response","helpers","rewindableinput","tempfile","runtime","sendfile","server","options","session","abstract","id","sessionhash","cookie","base64","marshal","identity","reverse","memcache","pool","showexceptions","showstatus","static","urlmap","utils","<<()","=~()","a1()","a2()","get()","h()","kd()","post()","[]()","[]()","[]()","[]()","[]()","[]=()","[]=()","[]=()","[]=()","[]=()","_call()","_call()","_call()","_close()","_rack_read_without_buffer()","accept_encoding()","add()","app()","app()","authorization_key()","bad_request()","bad_request?()","base_url()","basic?()","body()","body()","build_app()","build_multipart()","build_nested_query()","build_query()","byte_ranges()","bytesize()","bytesize()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","can_serve()","challenge()","challenge()","check_forbidden()","clear()","client_error?()","close()","close()","close()","close()","closed?()","commit_session()","commit_session?()","content_charset()","content_for_other()","content_for_tempfile()","content_length()","content_length()","content_type()","content_type()","context()","context()","cookies()","correct_uri?()","credentials()","current_session_id()","daemonize_app()","debug()","decode()","decode()","decode()","decode()","default()","default_options()","delete()","delete()","delete()","delete?()","delete_cookie()","delete_cookie_header!()","dequote()","destroy_session()","destroy_session()","destroy_session()","destroy_session()","digest()","digest()","digest?()","digest_body()","dump()","dump_exception()","each()","each()","each()","each()","each()","each()","each()","each()","empty?()","empty?()","empty?()","encode()","encode()","encode()","encode()","entity_not_found()","env_for()","error()","escape()","escape()","escape_html()","escape_path()","escape_path()","etag_body?()","etag_matches?()","etag_status?()","exists?()","extract_content_length()","extract_session_id()","extract_session_id()","fail()","fast_forward_to_first_boundary()","fatal()","figure_path()","filesize_format()","filesystem_has_posix_semantics?()","finish()","flattened_params()","flush()","forbidden?()","force_options?()","forced_session_update?()","form_data?()","fresh?()","fresh?()","full_boundary()","fullpath()","generate_hmac()","generate_map()","generate_sid()","generate_sid()","generate_sid()","get()","get()","get?()","get_current_head_and_filename_and_content_type_and_name_and_body()","get_data()","get_filename()","get_session()","get_session()","get_session()","gets()","handler_opts()","has_key?()","has_key?()","head()","head?()","host()","host_with_port()","include()","include?()","include?()","include?()","include?()","info()","informational?()","initialize_sid()","inspect()","invalid?()","ip()","key?()","key?()","list_directory()","list_path()","load!()","load_for_read!()","load_for_write!()","load_session()","load_session()","loaded?()","loaded_session?()","local_path()","location()","log()","logger()","logging_middleware()","make_rewindable()","map()","map_accel_path()","match()","md5()","media_type()","media_type_params()","member?()","merge()","merge!()","method()","method_missing()","method_missing()","method_override()","middleware()","middleware()","mime_type()","mime_type()","modified_since?()","multipart?()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","nonce()","normalize_params()","not_found?()","ok?()","opt_parser()","options()","options?()","overwrite_file_path()","params()","params()","params()","params()","parse()","parse()","parse()","parse!()","parse_file()","parse_multipart()","parse_multipart()","parse_nested_query()","parse_options()","parse_query()","parse_query()","parseable_data?()","parts()","passwords_hashed?()","patch?()","path()","path()","path_info()","path_info=()","persistent_session_id!()","port()","post()","post?()","prefers_plain_text?()","prepare_session()","pretty()","process()","process_request()","provided?()","put()","put?()","puts()","query_string()","quote()","read()","read()","recontext()","redirect()","redirect?()","redirection?()","referer()","referrer()","register()","release()","reload!()","remap()","replace()","request()","request()","request_method()","respond_to?()","respond_to?()","respond_to?()","rewind()","rfc2822()","rotation()","route_file()","run()","run()","run()","run()","run()","run()","run()","run()","rx()","safe_load()","safe_stat()","scheme()","scheme()","script_name()","script_name=()","security_matches?()","select_best_encoding()","send_body()","send_body()","send_body()","send_headers()","send_headers()","send_headers()","serve()","serve()","serve()","server()","server_error?()","service()","serving()","session()","session_exists?()","session_options()","set_cookie()","set_cookie()","set_cookie()","set_cookie_header!()","set_session()","set_session()","set_session()","set_session()","setup_parse()","shutdown()","skip_caching?()","split_header_value()","ssl?()","stale?()","start()","start()","stat()","status_code()","string()","stringify_keys()","successful?()","to_a()","to_app()","to_ary()","to_hash()","to_hash()","to_rfc2822()","to_s()","to_s()","trace?()","trusted_proxy?()","try_require()","unauthorized()","unescape()","unescape()","unescape()","unescape()","unpacked_cookie_data()","unprocessable?()","update()","url()","use()","user_agent()","username()","valid?()","valid?()","valid?()","valid_digest?()","valid_nonce?()","valid_opaque?()","valid_options()","valid_options()","valid_options()","valid_options()","valid_options()","valid_qop?()","values_at()","variation()","version()","warn()","with_lock()","with_lock()","wrapped_app()","write()","write()","write()","write_pid()","xhr?()","copying","known-issues","readme.rdoc","rack.rb","handler.rb","request.rb","basic.rb","md5.rb","nonce.rb","params.rb","request.rb","body_proxy.rb","builder.rb","cascade.rb","chunked.rb","commonlogger.rb","conditionalget.rb","config.rb","content_length.rb","content_type.rb","deflater.rb","directory.rb","etag.rb","file.rb","handler.rb","cgi.rb","evented_mongrel.rb","fastcgi.rb","lsws.rb","mongrel.rb","scgi.rb","swiftiplied_mongrel.rb","thin.rb","webrick.rb","head.rb","lint.rb","lobster.rb","lock.rb","logger.rb","methodoverride.rb","mime.rb","mock.rb","multipart.rb","generator.rb","parser.rb","uploaded_file.rb","nulllogger.rb","recursive.rb","reloader.rb","request.rb","response.rb","rewindable_input.rb","runtime.rb","sendfile.rb","server.rb","id.rb","cookie.rb","memcache.rb","pool.rb","showexceptions.rb","showstatus.rb","static.rb","urlmap.rb","utils.rb"],"longSearchIndex":["lib/rack/utils.rb","lib/rack/handler/fastcgi.rb","fcgi","lib/rack/utils.rb","lib/rack/utils.rb","lib/rack.rb","rack","rack::auth","rack::auth","rack::auth","rack::auth::basic","rack::auth","rack::auth::digest","rack::auth::digest","rack::auth::digest","rack::auth::digest","rack","rack","rack","rack","rack::chunked","rack","rack","rack","rack","rack","rack","rack::deflater","rack::deflater","rack","rack","rack","rack","rack","rack::handler","rack::handler","rack::handler","rack::handler","rack::handler","rack::handler","rack::handler","rack::handler","rack::handler","rack","rack","rack","rack","rack","rack","rack","rack","rack::mockrequest","rack::mockrequest","rack","rack","rack::multipart","rack::multipart","rack::multipart","rack","rack","rack","rack::reloader","rack","rack","rack::response","rack","rack::rewindableinput","rack","rack","rack","rack::server","rack","rack::session","rack::session::abstract","rack::session::abstract","rack::session","rack::session::cookie","rack::session::cookie::base64","rack::session::cookie","rack::session::cookie","rack::session","rack::session","rack","rack","rack","rack","rack","rack::cascade","rack::mockresponse","rack::auth::digest::md5","rack::auth::digest::md5","rack::request","rack::auth::digest::md5","rack::auth::digest::md5","rack::request","headerhash","rack::auth::digest::params","rack::request","rack::response","rack::session::abstract::sessionhash","headerhash","rack::auth::digest::params","rack::request","rack::response","rack::session::abstract::sessionhash","rack::directory","rack::file","rack::recursive","rack::rewindableinput::tempfile","fcgi::stream","rack::request","rack::cascade","rack::builder","rack::server","rack::auth::abstractrequest","rack::auth::abstracthandler","rack::response::helpers","rack::request","rack::auth::basic::request","rack::mockresponse","rack::request","rack::server","rack::multipart","object","object","object","object","object","context","rack","rack::auth::basic","rack::auth::digest::md5","rack::builder","rack::cascade","rack::chunked","rack::commonlogger","rack::conditionalget","rack::config","rack::contentlength","rack::contenttype","rack::deflater","rack::directory","rack::etag","rack::file","rack::head","rack::lock","rack::logger","rack::methodoverride","rack::nulllogger","rack::recursive","rack::reloader","rack::runtime","rack::sendfile","rack::session::abstract::id","rack::showexceptions","rack::showstatus","rack::static","rack::urlmap","rack::static","rack::auth::basic","rack::auth::digest::md5","rack::directory","rack::session::abstract::sessionhash","rack::response::helpers","rack::bodyproxy","rack::chunked::body","rack::response","rack::rewindableinput","rack::bodyproxy","rack::session::abstract::id","rack::session::abstract::id","rack::request","rack::multipart::generator","rack::multipart::generator","rack::request","rack::response::helpers","rack::request","rack::response::helpers","context","rack::session::abstract::id","rack::request","rack::auth::digest::request","rack::auth::basic::request","rack::session::abstract::id","rack::server","rack::nulllogger","rack::session::cookie::base64","rack::session::cookie::base64::marshal","rack::session::cookie::identity","rack::session::cookie::reverse","rack::handler","rack::server","headerhash","rack::mockrequest","rack::session::abstract::sessionhash","rack::request","rack::response","object","rack::auth::digest::params","rack::session::abstract::id","rack::session::cookie","rack::session::memcache","rack::session::pool","rack::auth::digest::md5","rack::auth::digest::nonce","rack::auth::digest::request","rack::etag","rack::multipart::generator","rack::showexceptions","headerhash","rack::chunked::body","rack::deflater::deflatestream","rack::deflater::gzipstream","rack::directory","rack::file","rack::response","rack::rewindableinput","rack::mockresponse","rack::response","rack::session::abstract::sessionhash","rack::session::cookie::base64","rack::session::cookie::base64::marshal","rack::session::cookie::identity","rack::session::cookie::reverse","rack::directory","rack::mockrequest","rack::nulllogger","rack::utils","rack::utils","object","rack::utils","rack::utils","rack::etag","rack::conditionalget","rack::etag","rack::session::abstract::sessionhash","rack::commonlogger","rack::session::abstract::id","rack::session::cookie","rack::file","rack::multipart::parser","rack::nulllogger","rack::reloader::stat","rack::directory","rack::rewindableinput","rack::response","rack::multipart::generator","rack::mockrequest::fatalwarner","rack::response::helpers","rack::session::abstract::id","rack::session::abstract::id","rack::request","rack::auth::digest::nonce","rack::conditionalget","rack::multipart::parser","rack::request","rack::session::cookie","rack::builder","rack::session::abstract::id","rack::session::memcache","rack::session::pool","rack::handler","rack::mockrequest","rack::request","rack::multipart::parser","rack::multipart::parser","rack::multipart::parser","rack::session::abstract::id","rack::session::memcache","rack::session::pool","rack::rewindableinput","rack::server::options","headerhash","rack::session::abstract::sessionhash","rack::mockrequest","rack::request","rack::request","rack::request","rack::recursive","headerhash","rack::cascade","rack::response::helpers","rack::session::abstract::sessionhash","rack::nulllogger","rack::response::helpers","rack::session::abstract::id","rack::session::abstract::sessionhash","rack::response::helpers","rack::request","headerhash","rack::session::abstract::sessionhash","rack::directory","rack::directory","rack::session::abstract::sessionhash","rack::session::abstract::sessionhash","rack::session::abstract::sessionhash","rack::session::abstract::id","rack::session::cookie","rack::session::abstract::sessionhash","rack::session::abstract::id","rack::multipart::uploadedfile","rack::response::helpers","rack::commonlogger","rack::request","rack::server","rack::rewindableinput","rack::builder","rack::sendfile","rack::mockresponse","rack::auth::digest::md5","rack::request","rack::request","headerhash","headerhash","headerhash","rack::auth::digest::request","rack::auth::digest::request","rack::bodyproxy","rack::methodoverride","rack::server","rack::server","rack::mime","rack::mime","rack::conditionalget","rack::multipart::generator","context","headerhash","headerhash","rack::auth::abstracthandler","rack::auth::abstractrequest","rack::auth::digest::md5","rack::auth::digest::nonce","rack::auth::digest::params","rack::bodyproxy","rack::builder","rack::cascade","rack::chunked","rack::chunked::body","rack::commonlogger","rack::conditionalget","rack::config","rack::contentlength","rack::contenttype","rack::deflater","rack::deflater::deflatestream","rack::deflater::gzipstream","rack::directory","rack::etag","rack::file","rack::forwardrequest","rack::handler::mongrel","rack::handler::scgi","rack::handler::webrick","rack::head","rack::lint","rack::lock","rack::logger","rack::methodoverride","rack::mockrequest","rack::mockresponse","rack::multipart::generator","rack::multipart::parser","rack::multipart::uploadedfile","rack::nulllogger","rack::recursive","rack::reloader","rack::request","rack::response","rack::rewindableinput","rack::runtime","rack::sendfile","rack::server","rack::session::abstract::id","rack::session::abstract::sessionhash","rack::session::cookie","rack::session::memcache","rack::session::pool","rack::showexceptions","rack::showstatus","rack::static","rack::urlmap","rack::auth::digest::request","object","rack::response::helpers","rack::response::helpers","rack::server","rack::server","rack::request","rack::static","rack::auth::abstractrequest","rack::auth::digest::md5","rack::auth::digest::request","rack::request","rack::auth::digest::nonce","rack::auth::digest::params","rack::multipart::parser","rack::server::options","rack::builder","rack::multipart","rack::request","rack","rack::server","rack::request","rack::utils","rack::request","rack::auth::abstractrequest","rack::auth::digest::md5","rack::request","rack::multipart::uploadedfile","rack::request","rack::request","rack::request","rack::session::cookie","rack::request","rack::mockrequest","rack::request","rack::showexceptions","rack::session::abstract::id","rack::showexceptions","rack::handler::mongrel","rack::handler::scgi","rack::auth::abstractrequest","rack::mockrequest","rack::request","rack::mockrequest::fatalwarner","rack::request","rack::auth::digest::params","fcgi::stream","rack::rewindableinput","context","rack::response","rack::response::helpers","rack::response::helpers","rack::request","rack::request","rack::handler","rack","rack::reloader","rack::urlmap","headerhash","rack::auth::abstractrequest","rack::mockrequest","rack::request","rack::auth::digest::request","rack::bodyproxy","rack::multipart::uploadedfile","rack::rewindableinput","object","rack::reloader::stat","rack::static","rack::builder","rack::handler::cgi","rack::handler::fastcgi","rack::handler::lsws","rack::handler::mongrel","rack::handler::scgi","rack::handler::thin","rack::handler::webrick","rack::multipart::parser","rack::reloader","rack::reloader::stat","rack::auth::abstractrequest","rack::request","rack::request","rack::request","rack::session::abstract::id","object","rack::handler::cgi","rack::handler::fastcgi","rack::handler::lsws","rack::handler::cgi","rack::handler::fastcgi","rack::handler::lsws","rack::handler::cgi","rack::handler::fastcgi","rack::handler::lsws","rack::server","rack::response::helpers","rack::handler::webrick","rack::file","rack::request","rack::session::abstract::id","rack::request","rack::response","rack::session::abstract::id","rack::session::cookie","object","rack::session::abstract::id","rack::session::cookie","rack::session::memcache","rack::session::pool","rack::multipart::parser","rack::handler::webrick","rack::etag","rack::auth::digest::params","rack::request","rack::auth::digest::nonce","rack::server","rack::server","rack::directory","object","rack::mockrequest::fatalwarner","rack::session::abstract::sessionhash","rack::response::helpers","rack::response","rack::builder","rack::response","headerhash","rack::session::abstract::sessionhash","rack::conditionalget","rack::auth::digest::nonce","rack::auth::digest::params","rack::request","rack::request","rack::handler","rack::auth::abstracthandler","rack::utils","rack::utils","rack::utils","rack::utils","rack::session::cookie","rack::response::helpers","rack::session::abstract::sessionhash","rack::request","rack::builder","rack::request","rack::auth::basic::request","rack::auth::basic","rack::auth::digest::md5","rack::auth::digest::nonce","rack::auth::digest::md5","rack::auth::digest::md5","rack::auth::digest::md5","rack::handler::fastcgi","rack::handler::mongrel","rack::handler::scgi","rack::handler::thin","rack::handler::webrick","rack::auth::digest::md5","rack::request","rack::sendfile","rack","rack::nulllogger","rack::session::memcache","rack::session::pool","rack::server","rack::deflater::gzipstream","rack::mockrequest::fatalwarner","rack::response","rack::server","rack::request","files/copying.html","files/known-issues.html","files/readme_rdoc.html","files/lib/rack_rb.html","files/lib/rack/auth/abstract/handler_rb.html","files/lib/rack/auth/abstract/request_rb.html","files/lib/rack/auth/basic_rb.html","files/lib/rack/auth/digest/md5_rb.html","files/lib/rack/auth/digest/nonce_rb.html","files/lib/rack/auth/digest/params_rb.html","files/lib/rack/auth/digest/request_rb.html","files/lib/rack/body_proxy_rb.html","files/lib/rack/builder_rb.html","files/lib/rack/cascade_rb.html","files/lib/rack/chunked_rb.html","files/lib/rack/commonlogger_rb.html","files/lib/rack/conditionalget_rb.html","files/lib/rack/config_rb.html","files/lib/rack/content_length_rb.html","files/lib/rack/content_type_rb.html","files/lib/rack/deflater_rb.html","files/lib/rack/directory_rb.html","files/lib/rack/etag_rb.html","files/lib/rack/file_rb.html","files/lib/rack/handler_rb.html","files/lib/rack/handler/cgi_rb.html","files/lib/rack/handler/evented_mongrel_rb.html","files/lib/rack/handler/fastcgi_rb.html","files/lib/rack/handler/lsws_rb.html","files/lib/rack/handler/mongrel_rb.html","files/lib/rack/handler/scgi_rb.html","files/lib/rack/handler/swiftiplied_mongrel_rb.html","files/lib/rack/handler/thin_rb.html","files/lib/rack/handler/webrick_rb.html","files/lib/rack/head_rb.html","files/lib/rack/lint_rb.html","files/lib/rack/lobster_rb.html","files/lib/rack/lock_rb.html","files/lib/rack/logger_rb.html","files/lib/rack/methodoverride_rb.html","files/lib/rack/mime_rb.html","files/lib/rack/mock_rb.html","files/lib/rack/multipart_rb.html","files/lib/rack/multipart/generator_rb.html","files/lib/rack/multipart/parser_rb.html","files/lib/rack/multipart/uploaded_file_rb.html","files/lib/rack/nulllogger_rb.html","files/lib/rack/recursive_rb.html","files/lib/rack/reloader_rb.html","files/lib/rack/request_rb.html","files/lib/rack/response_rb.html","files/lib/rack/rewindable_input_rb.html","files/lib/rack/runtime_rb.html","files/lib/rack/sendfile_rb.html","files/lib/rack/server_rb.html","files/lib/rack/session/abstract/id_rb.html","files/lib/rack/session/cookie_rb.html","files/lib/rack/session/memcache_rb.html","files/lib/rack/session/pool_rb.html","files/lib/rack/showexceptions_rb.html","files/lib/rack/showstatus_rb.html","files/lib/rack/static_rb.html","files/lib/rack/urlmap_rb.html","files/lib/rack/utils_rb.html"]}}