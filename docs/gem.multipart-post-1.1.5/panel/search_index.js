var search_data = {"index":{"longSearchIndex":["lib/composite_io.rb","lib/multipart_post.rb","lib/multipartable.rb","net::http::post","net::http","net::http::put","lib/parts.rb","parts","parts","parts","lib/composite_io.rb","parts::filepart","parts::parampart","uploadio","parts::parampart","uploadio","compositereadio","multipartable","parts::epiloguepart","parts::filepart","parts::parampart","uploadio","compositereadio","uploadio","compositereadio","files/history_txt.html","files/readme_txt.html","files/lib/composite_io_rb.html","files/lib/multipart_post_rb.html","files/lib/multipartable_rb.html","files/lib/net/http/post/multipart_rb.html","files/lib/parts_rb.html"],"info":[["CompositeReadIO","lib/composite_io.rb","classes/CompositeReadIO.html"," < Object","Concatenate together multiple IO objects into a single, composite IO object for purposes of reading as",1],["MultipartPost","lib/multipart_post.rb","classes/MultipartPost.html"," < "," ",1],["Multipartable","lib/multipartable.rb","classes/Multipartable.html"," < ","",1],["Multipart","Net::HTTP::Post","classes/Net/HTTP/Post/Multipart.html"," < Post","",1],["Put","Net::HTTP","classes/Net/HTTP/Put.html"," < Object","",1],["Multipart","Net::HTTP::Put","classes/Net/HTTP/Put/Multipart.html"," < Put","",1],["Parts","lib/parts.rb","classes/Parts.html"," < "," ",1],["EpiloguePart","Parts","classes/Parts/EpiloguePart.html"," < Object","Represents the epilogue or closing boundary. ",1],["FilePart","Parts","classes/Parts/FilePart.html"," < Object","Represents a part to be filled from file IO. ",1],["ParamPart","Parts","classes/Parts/ParamPart.html"," < Object","",1],["UploadIO","lib/composite_io.rb","classes/UploadIO.html"," < Object","Convenience methods for dealing with files and IO that are to be uploaded. ",1],["build_head","Parts::FilePart","classes/Parts/FilePart.html#M000012","(boundary, name, filename, type, content_len, opts = {})","",2],["build_part","Parts::ParamPart","classes/Parts/ParamPart.html#M000010","(boundary, name, value)","",2],["convert!","UploadIO","classes/UploadIO.html#M000005","(io, content_type, original_filename, local_path)","",2],["length","Parts::ParamPart","classes/Parts/ParamPart.html#M000009","()","",2],["method_missing","UploadIO","classes/UploadIO.html#M000006","(*args)","",2],["new","CompositeReadIO","classes/CompositeReadIO.html#M000000","(*ios)","Create a new composite-read IO from the arguments, all of which should respond to #read in a manner consistent",2],["new","Multipartable","classes/Multipartable.html#M000003","(path, params, headers={}, boundary = DEFAULT_BOUNDARY)","",2],["new","Parts::EpiloguePart","classes/Parts/EpiloguePart.html#M000013","(boundary)","",2],["new","Parts::FilePart","classes/Parts/FilePart.html#M000011","(boundary, name, io)","",2],["new","Parts::ParamPart","classes/Parts/ParamPart.html#M000008","(boundary, name, value)","",2],["new","UploadIO","classes/UploadIO.html#M000004","(filename_or_io, content_type, filename = nil, opts = {})","",2],["read","CompositeReadIO","classes/CompositeReadIO.html#M000001","(amount = nil, buf = nil)","Read from the IO object, overlapping across underlying streams as necessary. ",2],["respond_to?","UploadIO","classes/UploadIO.html#M000007","(meth)","",2],["rewind","CompositeReadIO","classes/CompositeReadIO.html#M000002","()","",2],["History.txt","files/History_txt.html","files/History_txt.html","","=== 1.1.5 / 2012-02-12  - Fix length/bytesize of parts in 1.9 (#7, #14) (Jason Moore) - Allow CompositeIO",3],["README.txt","files/README_txt.html","files/README_txt.html","","= multipart-post  * http://github.com/nicksieger/multipart-post  == DESCRIPTION:  Adds a streamy multipart",3],["composite_io.rb","files/lib/composite_io_rb.html","files/lib/composite_io_rb.html",""," ",3],["multipart_post.rb","files/lib/multipart_post_rb.html","files/lib/multipart_post_rb.html",""," ",3],["multipartable.rb","files/lib/multipartable_rb.html","files/lib/multipartable_rb.html",""," ",3],["multipart.rb","files/lib/net/http/post/multipart_rb.html","files/lib/net/http/post/multipart_rb.html",""," ",3],["parts.rb","files/lib/parts_rb.html","files/lib/parts_rb.html",""," ",3]],"searchIndex":["compositereadio","multipartpost","multipartable","multipart","put","multipart","parts","epiloguepart","filepart","parampart","uploadio","build_head()","build_part()","convert!()","length()","method_missing()","new()","new()","new()","new()","new()","new()","read()","respond_to?()","rewind()","history.txt","readme.txt","composite_io.rb","multipart_post.rb","multipartable.rb","multipart.rb","parts.rb"]}}