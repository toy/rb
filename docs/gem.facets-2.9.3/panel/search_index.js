var search_data = {"index":{"info":[["Argvector","lib/standard/facets/argvector.rb","classes/Argvector.html"," < Object","= Argvector Argvector provides a very simple means of parsing command line arguments. Unlike other more",1],["Array","lib/core/facets/array/before.rb","classes/Array.html"," < Object","",1],["BasicObject","lib/standard/facets/basicobject.rb","classes/BasicObject.html"," < Object","BasicObject provides an abstract base class with no predefined methods (except for <tt>\\_\\_send__</tt>",1],["Binding","lib/core/facets/binding/caller.rb","classes/Binding.html"," < Object","",1],["CGI","lib/standard/facets/cgi.rb","classes/CGI.html"," < Object","",1],["Class","lib/core/facets/class/descendants.rb","classes/Class.html"," < Object","",1],["Cloneable","lib/standard/facets/cloneable.rb","classes/Cloneable.html"," < ","Clonable provides a standard basis for adding deep cloneablity to a class via the standard #dup and #clone",1],["Comparable","lib/core/facets/comparable/cap.rb","classes/Comparable.html"," < ","",1],["Continuation","lib/standard/facets/continuation.rb","classes/Continuation.html"," < Object","",1],["Date","lib/standard/facets/date.rb","classes/Date.html"," < Object","= Date This new version of Date extension has been largely improved by porting some of the methods used",1],["DateTime","lib/standard/facets/date.rb","classes/DateTime.html"," < Object","",1],["Denumerable","lib/core/facets/denumerable.rb","classes/Denumerable.html"," < ","Classes which include Denumerable will get versions of map, select, and so on, which return a Denumerator,",1],["Denumerator","lib/core/facets/denumerable.rb","classes/Denumerator.html"," < Enumerator","= Denumerator A class like Enumerator, but which has 'lazy' versions of map, select etc. ",1],["Digest","lib/standard/facets/digest/base64digest.rb","classes/Digest.html"," < ","",1],["Class","Digest","classes/Digest/Class.html"," < Object","",1],["Instance","Digest","classes/Digest/Instance.html"," < ","",1],["Dir","lib/core/facets/dir/ascend.rb","classes/Dir.html"," < Object","",1],["ERB","lib/standard/facets/erb.rb","classes/ERB.html"," < ","",1],["OpenTemplate","ERB","classes/ERB/OpenTemplate.html"," < Object","= OpenTemplate The Erb OpenTemplate provides a quick and convenient way to create a clean rendering space",1],["Enumerable","lib/core/facets/enumerable/accumulate.rb","classes/Enumerable.html"," < ","--- This is a simple reimplementation of the core Enumerable module to allow the methods to take and",1],["Arguments","Enumerable","classes/Enumerable/Arguments.html"," < ","",1],["Recursor","Enumerable","classes/Enumerable/Recursor.html"," < Object","Recursor is a specialized Functor for recurively iterating over Enumerables.  ",1],["Enumerator","lib/core/facets/enumerator/fx.rb","classes/Enumerator.html"," < Object","",1],["Equitable","lib/standard/facets/equitable.rb","classes/Equitable.html"," < ","= Equitable This mixin provides methods of equality based on a single #identity method which must return",1],["Exception","lib/core/facets/exception/detail.rb","classes/Exception.html"," < Object","",1],["Facets","lib/core/facets/version.rb","classes/Facets.html"," < ","",1],["FalseClass","lib/core/facets/boolean.rb","classes/FalseClass.html"," < Object","",1],["File","lib/core/facets/file/atomic_id.rb","classes/File.html"," < Object","",1],["FileTest","lib/core/facets/filetest/contains.rb","classes/FileTest.html"," < ","",1],["FileUtils","lib/standard/facets/fileutils/amass.rb","classes/FileUtils.html"," < ","",1],["DryRun","FileUtils","classes/FileUtils/DryRun.html"," < ","",1],["NoWrite","FileUtils","classes/FileUtils/NoWrite.html"," < ","Make public (for all submodules too). ",1],["Verbose","FileUtils","classes/FileUtils/Verbose.html"," < ","",1],["Find","lib/standard/facets/find.rb","classes/Find.html"," < ","",1],["Fixnum","lib/core/facets/fixnum.rb","classes/Fixnum.html"," < Object","",1],["Float","lib/core/facets/numeric/round.rb","classes/Float.html"," < Object","",1],["Functor","lib/core/facets/functor.rb","classes/Functor.html"," < Object","By definition a Functor is simply a first class method, but these are common in the form of Method and",1],["GetoptLong","lib/standard/facets/getoptlong.rb","classes/GetoptLong.html"," < Object","= GetoptLong Ruby's standard GetoptLong class with an added DSL. opts = GetoptLong.new do reqs '--expect',",1],["DSL","GetoptLong","classes/GetoptLong/DSL.html"," < Object","DSL-mode parser. ",1],["Indexable","lib/core/facets/indexable.rb","classes/Indexable.html"," < ","Indexable is a mixin that provides index based methods, working soley with four methods: #index, #slice,",1],["Instance","lib/core/facets/instance.rb","classes/Instance.html"," < Object","= Instance Class class Friend attr_accessor :name, :age, :phone def initialize(name, age, phone) @name,",1],["Instantiable","lib/standard/facets/instantiable.rb","classes/Instantiable.html"," < ","= Instantiable Initialize modules, almost as if they were classes. Alows a module to be used much like",1],["Integer","lib/core/facets/integer/bitmask.rb","classes/Integer.html"," < Object","",1],["Interval","lib/standard/facets/interval.rb","classes/Interval.html"," < Object","While Ruby support the Range class out of the box, is does not quite fullfil the role od a real Interval",1],["Lazy","lib/core/facets/lazy.rb","classes/Lazy.html"," < ","Everything you need for Lazy evaluation in Ruby. @author MenTaLguY ",1],["Future","Lazy","classes/Lazy/Future.html"," < PromiseSafe","= Future Future class subclasses PromiseSafe. ",1],["Promise","Lazy","classes/Lazy/Promise.html"," < Object","= Promise A handle for a promised computation.  They are transparent, so that in most cases, a promise",1],["DIVERGES","Lazy::Promise","classes/Lazy/Promise/DIVERGES.html"," < ","",1],["PromiseSafe","Lazy","classes/Lazy/PromiseSafe.html"," < Promise","= PromiseSafe Thread safe version of Promise class. ",1],["MatchData","lib/core/facets/matchdata/match.rb","classes/MatchData.html"," < Object","",1],["Math","lib/standard/facets/math/abs.rb","classes/Math.html"," < ","",1],["Memoizable","lib/standard/facets/memoizable.rb","classes/Memoizable.html"," < ","Memoization is an optimization technique used primarily to speed up  programs by having function calls",1],["Copy","Memoizable","classes/Memoizable/Copy.html"," < ","Include Memoizable alone with an #initialize_copy method that will copy the memoization cache when #dup",1],["Method","lib/core/facets/method/composition.rb","classes/Method.html"," < Object","",1],["Composition","Method","classes/Method/Composition.html"," < Object","Method Composition class acts a proxy for composed methods. @author Mike Burns ",1],["Module","lib/core/facets/module/abstract.rb","classes/Module.html"," < Object","",1],["InstanceFunction","Module","classes/Module/InstanceFunction.html"," < ","",1],["Multiton","lib/standard/facets/multiton.rb","classes/Multiton.html"," < ","= Multiton Multiton design pattern ensures only one object is allocated for a given state. The 'multiton'",1],["Inclusive","Multiton","classes/Multiton/Inclusive.html"," < ","Multiton can be included in another module, in which case that module effectively becomes a multiton",1],["MetaMethods","Multiton","classes/Multiton/MetaMethods.html"," < ","",1],["Net","lib/standard/facets/net/http.rb","classes/Net.html"," < ","",1],["NilClass","lib/core/facets/boolean.rb","classes/NilClass.html"," < Object","",1],["NullClass","lib/standard/facets/nullclass.rb","classes/NullClass.html"," < Object","= Nullclass NullClass is essentially NilClass but it differs in one important way. When a method is called",1],["Numeric","lib/core/facets/boolean.rb","classes/Numeric.html"," < Object","",1],["Multipliers","Numeric","classes/Numeric/Multipliers.html"," < ","= Numeric::Multipliers Adds methods to Numeric to make working with magnitudes (kilo, mega, giga, milli,",1],["ObjectSpace","lib/core/facets/objectspace/classes.rb","classes/ObjectSpace.html"," < ","",1],["OpEsc","lib/standard/facets/opesc.rb","classes/OpEsc.html"," < ","= OpEsc NOTE: As of v3.0 of Facets these have been renamed: op_plus_self   -> op_plus op_minus_self ",1],["OpenStruct","lib/standard/facets/ostruct.rb","classes/OpenStruct.html"," < Object","",1],["Pathname","lib/standard/facets/pathname.rb","classes/Pathname.html"," < Object","",1],["Platform","lib/standard/facets/platform.rb","classes/Platform.html"," < Object","Platform class Original version from RubyGems, Copyright (c) 2007 Eric Hodel ",1],["Proc","lib/core/facets/proc/bind.rb","classes/Proc.html"," < Object","",1],["Process","lib/core/facets/process/daemon.rb","classes/Process.html"," < ","",1],["Random","lib/standard/facets/random.rb","classes/Random.html"," < Object","= Randomization Extensions This library extends Array, String, Hash and other classes with randomization",1],["ArrayExtensions","Random","classes/Random/ArrayExtensions.html"," < ","",1],["HashExtensions","Random","classes/Random/HashExtensions.html"," < ","",1],["IntegerExtensions","Random","classes/Random/IntegerExtensions.html"," < ","",1],["NumericExtensions","Random","classes/Random/NumericExtensions.html"," < ","",1],["RangeExtensions","Random","classes/Random/RangeExtensions.html"," < ","",1],["StringExtensions","Random","classes/Random/StringExtensions.html"," < ","",1],["Self","Random::StringExtensions","classes/Random/StringExtensions/Self.html"," < ","Class-level methods. ",1],["Range","lib/core/facets/range/combine.rb","classes/Range.html"," < Object","",1],["RbConfig","lib/standard/facets/rbconfig.rb","classes/RbConfig.html"," < ","An extended rendition of the Ruby's standard RbConfig module. ",1],["Regexp","lib/core/facets/regexp/arity.rb","classes/Regexp.html"," < Object","",1],["Set","lib/standard/facets/set.rb","classes/Set.html"," < Object","",1],["Shellwords","lib/standard/facets/shellwords.rb","classes/Shellwords.html"," < ","",1],["String","lib/core/facets/boolean.rb","classes/String.html"," < Object"," ",1],["StringScanner","lib/standard/facets/strscan.rb","classes/StringScanner.html"," < Object","",1],["Struct","lib/core/facets/object/object_state.rb","classes/Struct.html"," < Object","",1],["Symbol","lib/core/facets/object/dup.rb","classes/Symbol.html"," < Object","",1],["Time","lib/core/facets/time/change.rb","classes/Time.html"," < Object","",1],["Timer","lib/standard/facets/timer.rb","classes/Timer.html"," < Object","= Timer Provides a strightforward means for controlling time critical execution. Can be used as a \"stop",1],["Dummy","Timer","classes/Timer/Dummy.html"," < self","Timer::Dummy - Dummy Timer (i.e. no real time limit)  ",1],["TrueClass","lib/core/facets/boolean.rb","classes/TrueClass.html"," < Object","",1],["Tuple","lib/standard/facets/tuple.rb","classes/Tuple.html"," < Object","= Tuple Tuple is essentially an Array, but Comaparable and Immutable. A tuple can be made using #new",1],["URI","lib/standard/facets/uri.rb","classes/URI.html"," < ","",1],["Hash","URI","classes/URI/Hash.html"," < ","",1],["Kernel","URI","classes/URI/Kernel.html"," < ","",1],["UnboundMethod","lib/core/facets/unboundmethod/arguments.rb","classes/UnboundMethod.html"," < Object","",1],["YAML","lib/standard/facets/yaml.rb","classes/YAML.html"," < ","",1],["Zlib","lib/standard/facets/zlib.rb","classes/Zlib.html"," < ","A convenient wrapper for the zlib standard library that allows compression/decompression of strings with",1],["*","Method","classes/Method.html#M000414","(g)","Method composition. @author Mike Burns ",2],["*","Method::Composition","classes/Method/Composition.html#M000405","(h)","",2],["*","Module","classes/Module.html#M000484","(rename_map)","Rename methods. module AStar def a; \"a\"; end end BStar = AStar * { :a => :b } class XStar; include BStar;",2],["*","Proc","classes/Proc.html#M000546","(x)","Operator for Proc#compose and Integer#times_collect/of. a = lambda { |x| x + 4 } b = lambda { |y| y /",2],["**","Array","classes/Array.html#M000034","(*enums)","Alias for #product",2],["+","Module","classes/Module.html#M000482","(other)","Combine modules. module APlus def a; \"a\"; end end module BPlus def b; \"b\"; end end CPlus = APlus + BPlus",2],["+","Regexp","classes/Regexp.html#M000561","(other)","Add regular expressions. /a/ + /b/ == /(?-mix:a)(?-mix:b)/ Functionally equivalent to: /ab/ CREDIT: Tyler",2],["+@","Interval","classes/Interval.html#M000861","()","Unary shorthands. These return a new interval exclusive of first, last or both sentinels, repectively.",2],["-","Module","classes/Module.html#M000483","(other)","Subtract modules. module AMinus def a; \"a\"; end def b; \"b\"; end end CMinus = AMinus - [:a] class XMinus;",2],["-","String","classes/String.html#M000618","(pattern)","Removes occurances of a string or regexp. (\"HELLO HELLO\" - \"LL\")    #=> \"HEO HEO\" CREDIT: Benjamin David",2],["-@","Interval","classes/Interval.html#M000862","()","",2],["/","Pathname","classes/Pathname.html#M000992","(path)","Start a path. Another alias for #new. Pathname / 'usr' ",2],["/","String","classes/String.html#M000616","(path)","Treats +self+ and +path+ as representations of pathnames, joining thme together as a single path. ('home'",2],["/","Symbol","classes/Symbol.html#M000659","(path)","Join with _path_ as a file path. * path - The path component(s) to append. [#to_s] Examples (:merb /",2],["<<","Instance","classes/Instance.html#M000261","(pair)","",2],["<<","Tuple","classes/Tuple.html#M001148","( obj )","Unlike Array, Tuple#<< cannot act in place becuase Tuple's are immutable. ",2],["<=>","Tuple","classes/Tuple.html#M001162","( other )","",2],["==","Equitable","classes/Equitable.html#M000804","(o)","",2],["==","Platform","classes/Platform.html#M001025","(other)","",2],["===","Interval","classes/Interval.html#M000871","(x)","Alias for #include?",2],["===","Platform","classes/Platform.html#M001028","(other)","",2],["=~","Platform","classes/Platform.html#M001029","(other)","",2],["=~","Tuple","classes/Tuple.html#M001163","( other )","For pessimistic constraint (like '~>' in gems) ",2],["Equitable","Module","classes/Module.html#M000807","(*accessors)","This function provided a \"shortcut\" for creating the #identity method based on given accessors and returns",2],["[]","Binding","classes/Binding.html#M000057","( x )","Returns the value of some variable. a = 2 binding[\"a\"]  #=> 2 ",2],["[]","Comparable","classes/Comparable.html#M000086","(*accessors)","Automatically generate comparitive definitions based on attribute fields. include Comparable[:a, :b]",2],["[]","Instance","classes/Instance.html#M000259","(name)","",2],["[]","Interval","classes/Interval.html#M000839","( *args )","",2],["[]","Method::Composition","classes/Method/Composition.html#M000413","(*x)","",2],["[]","NullClass","classes/NullClass.html#M000979","(key)","",2],["[]","OpenStruct","classes/OpenStruct.html#M000986","(key)","Access a value in the OpenStruct by key, like a Hash. This increases OpenStruct's \"duckiness\". o = OpenStruct.new",2],["[]","Pathname","classes/Pathname.html#M000991","(path)","Alternate to Pathname#new. Pathname['/usr/share'] ",2],["[]","Tuple","classes/Tuple.html#M001144","(i)","",2],["[]","Tuple","classes/Tuple.html#M001171","( *args )","",2],["[]=","Binding","classes/Binding.html#M000058","( l, v )","Set the value of a local variable. binding[\"a\"] = 4 a  #=> 4 @deprecated No longer wortks in Ruby 1.9+.",2],["[]=","Instance","classes/Instance.html#M000260","(name, value)","",2],["[]=","OpenStruct","classes/OpenStruct.html#M000987","(key,val)","Set a value in the OpenStruct by key, like a Hash. o = OpenStruct.new o['t'] = 4 o.t  #=> 4 ",2],["[]=","Tuple","classes/Tuple.html#M001145","(i,v)","",2],["^","Method","classes/Method.html#M000415","(n)","Method repetition. @author Mike Burns ",2],["^","Method::Composition","classes/Method/Composition.html#M000406","(n)","",2],["^","String","classes/String.html#M000651","(aString)","Binary XOR of two strings.  a = \"\\000\\000\\001\\001\" ^ \"\\000\\001\\000\\001\" b = \"\\003\\003\\003\" ^ \"\\000\\001\\002\"",2],["__DIR__","Binding","classes/Binding.html#M000051","()","Return the directory of the file in which the binding was created. ",2],["__FILE__","Binding","classes/Binding.html#M000050","()","Returns file name in which the binding was created. ",2],["__LINE__","Binding","classes/Binding.html#M000049","()","Return the line number on which the binding was created. ",2],["__callee__","Binding","classes/Binding.html#M000053","()","Retreive the current running method. ",2],["__merge__","OpenStruct","classes/OpenStruct.html#M000996","(other)","Merge hash data creating a new OpenStruct object. o = OpenStruct.new x = o.ostruct_merge(:a => 2) x.a",2],["__method__","Binding","classes/Binding.html#M000052","()","Retreive the current running method. ",2],["__update__","OpenStruct","classes/OpenStruct.html#M000995","(other)","Insert/update hash data on the fly. o = OpenStruct.new o.ostruct_update(:a => 2) o.a  #=> 2 ",2],["_crypt","String","classes/String.html#M000588","(salt=nil)","Alias for #crypt",2],["_dump","Multiton","classes/Multiton.html#M000962","(depth=-1)","Default marshalling strategy. ",2],["_load","Multiton::MetaMethods","classes/Multiton/MetaMethods.html#M000972","(str)","",2],["abs","Math","classes/Math.html#M000854","(x)","Absolute value of +x+. ",2],["absolute?","FileTest","classes/FileTest.html#M000173","(path)","Predicate method for testing whether a path is absolute. It returns +true+ if the pathname begins with",2],["abstract","Module","classes/Module.html#M000417","(*sym)","Create an abstract method. If it is not overridden, it will raise a TypeError when called. class AbstractExample",2],["accumulate","Enumerable","classes/Enumerable.html#M000102","(iterations=1)","Accumulate a set of a set. For example, in an ORM design where `Group has_many User` we might have something",2],["accumulate_all","Enumerable","classes/Enumerable.html#M000103","(iterations=1)","Same as #accumulate, but does not apply #uniq to final result. groups.accumulate_all(2).users.friends",2],["acot","Math","classes/Math.html#M000874","(x)","Arcus cotangens of +x+ ",2],["acoth","Math","classes/Math.html#M000877","(x)","Area cotangens hyperbolicus of +x+ ",2],["acronym","String","classes/String.html#M000564","()","Transform a string into an acronym. CREDIT: Robert Fey ",2],["acsc","Math","classes/Math.html#M000878","(x)","Arcus cosecans of +x+ ",2],["acsch","Math","classes/Math.html#M000879","(x)","Area cosecans hyperbolicus of +x+ ",2],["advance","Date","classes/Date.html#M000757","(options)","Provides precise Date calculations for years, months, and days. The +options+ parameter takes a hash",2],["advance","DateTime","classes/DateTime.html#M000778","(options)","Uses Date to provide precise Time calculations for years, months, and days. The +options+ parameter takes",2],["after","Array","classes/Array.html#M000003","(value)","Returns the value after the given value. The value before the last is the first. Returns nil if the given",2],["ago","Date","classes/Date.html#M000762","(seconds)","Converts Date to a Time (or DateTime if necessary) with the time portion set to the beginning of the",2],["ago","DateTime","classes/DateTime.html#M000779","(seconds)","Returns a new DateTime representing the time a number of seconds ago Do not use this method in combination",2],["ago","Time","classes/Time.html#M000683","(*time_units)","Alias for #less",2],["alias_accessor","Module","classes/Module.html#M000418","(*args)","As with alias_method, but alias both reader and writer. attr_accessor :x self.x = 1 alias_accessor :y,",2],["alias_method_chain","Module","classes/Module.html#M000421","(target, feature)","Encapsulates the common pattern of ... alias_method :foo_without_feature, :foo alias_method :foo, :foo_with_feature",2],["alias_module_function","Module","classes/Module.html#M000422","(new, old)","Alias a module function so that the alias is also a module function. The typical #alias_method does not",2],["alias_reader","Module","classes/Module.html#M000419","(*args)","As with alias_accessor, but just for the reader. This is basically the same as alias_method. ",2],["alias_tester","Module","classes/Module.html#M000431","(*args)","Create aliases for flag reader. Note that this method is not a common core extension and is not loaded",2],["alias_validator","Module","classes/Module.html#M000434","(*args)","Create aliases for validator attribute methods. NOTE: This method is not a common core extension and",2],["alias_writer","Module","classes/Module.html#M000420","(*args)","As with alias_method but does the writer instead. ",2],["align","String","classes/String.html#M000568","(direction, n, sep=\"\\n\", c=' ')","Alignment method dispatches to #align_right, #align_left or #align_center, accorging to the first +direction+",2],["align_center","String","classes/String.html#M000573","(n, sep=\"\\n\", c=' ')","Centers each line of a string. The default alignment separation is a new line (\"\\n\"). This can be changed",2],["align_left","String","classes/String.html#M000570","(n, sep=\"\\n\", c=' ')","Align a string to the left. The default alignment separation is a new line (\"\\n\"). This can be changed",2],["align_right","String","classes/String.html#M000569","(n, sep=\"\\n\", c=' ')","Align a string to the right. The default alignment separation is a new line (\"\\n\"). This can be changed",2],["all_instance_methods","Module","classes/Module.html#M000423","(include_super=true)","List all instance methods, equivalent to public_instance_methods + protected_instance_methods + private_instance_methods",2],["alt_escape","Shellwords","classes/Shellwords.html#M001101","(cmdline)","Escape special characters used in most unix shells to use it, eg. with system(). This differs from Ruby's",2],["amass","FileUtils","classes/FileUtils.html#M000810","(include_globs, exclude_globs=[], ignore=[])","An intergrated glob like method that takes a set of include globs, exclude globs and ignore globs to",2],["amd","Math","classes/Math.html#M000880","(array)","The average absolute difference of two independent values drawn  from the sample. Equal to the RMD *",2],["ancestor?","Module","classes/Module.html#M000424","( mod )","Is a given class or module an ancestor of this class or module? class X ; end class Y < X ; end X.ancestor?(Y)",2],["anonymous?","Module","classes/Module.html#M000425","()","A module may or may not have a name. module M; end M.name # => \"M\" m = Module.new m.name # => \"\" A module",2],["append","File","classes/File.html#M000155","(file, str)","Append to a file. CREDIT: George Moschovitis ",2],["append_features","Instantiable","classes/Instantiable.html#M000837","(mod)","",2],["append_features","Memoizable","classes/Memoizable.html#M000932","(base)","",2],["approx?","Numeric","classes/Numeric.html#M000503","(x, n=0.0000001)","Determines if another number is approximately equal within a given _n_th degree. Defaults to 100ths if",2],["approx_equal","Math","classes/Math.html#M000882","(a, b, epsilon=EPSILON)","Approximately equal. TODO: Use core extension Numeric#approx? instead (?) ",2],["arguments","Argvector","classes/Argvector.html#M000715","()","Alias for #operands",2],["arguments","UnboundMethod","classes/UnboundMethod.html#M000686","()","Resolves the arguments of the method to have an identical signiture --useful for preserving arity. class",2],["arity","Method::Composition","classes/Method/Composition.html#M000410","()","",2],["arity","Regexp","classes/Regexp.html#M000558","()","Returns the number of backreferencing subexpressions. /(a)(b)(c)/.arity  #=> 3 /(a(b(c)))/.arity  #=>",2],["as_s","Symbol","classes/Symbol.html#M000653","()","Convert symbol to string, apply string method and convert back to symbol via a fluent interface. :HELLO.as_s.downcase",2],["ascend","Dir","classes/Dir.html#M000093","(dir, inclusive=true, &blk)","Ascend a directory path. a = [] Dir.ascend(\"/var/log\") do |path| a << path end a  #=> ['/var/log', '/var',",2],["asec","Math","classes/Math.html#M000881","(x)","Arcus secans of +x+ ",2],["asech","Math","classes/Math.html#M000883","(x)","Area secans hyperbolicus of +x+ ",2],["assign","Instance","classes/Instance.html#M000266","(hash)","Alias for #update",2],["assoc_options","Argvector","classes/Argvector.html#M000731","(args)","Parse flags takes the command line and transforms it such that flags (eg. -x and --x) are elemental associative",2],["at_least","Comparable","classes/Comparable.html#M000079","(lower)","Returns the lower of self or x. 4.at_least(5)  #=> 5 6.at_least(5)  #=> 6 CREDIT: Florian Gross ",2],["at_most","Comparable","classes/Comparable.html#M000080","(upper)","Returns the greater of self or x. 4.at_most(5)  #=> 4 6.at_most(5)  #=> 5 CREDIT: Florian Gross ",2],["at_rand","Random::ArrayExtensions","classes/Random/ArrayExtensions.html#M001032","()","Return a random element from the array. [1, 2, 3, 4].at_rand           #~> 2 [1, 2, 3, 4].at_rand   ",2],["at_rand","Random::HashExtensions","classes/Random/HashExtensions.html#M001076","()","Alias for #rand_value",2],["at_rand","Random::RangeExtensions","classes/Random/RangeExtensions.html#M001027","()","Return a random element from the range. (1..4).at_rand           #~> 2 (1..4).at_rand           #~> 4",2],["at_rand","Random::StringExtensions","classes/Random/StringExtensions.html#M001082","( separator=// )","Return a random separation of the string. Default separation is by charaacter. \"Ruby rules\".at_rand('",2],["at_rand!","Random::ArrayExtensions","classes/Random/ArrayExtensions.html#M001033","()","Same as #at_rand, but acts in place removing a random element from the array. a = [1,2,3,4] a.at_rand!",2],["at_rand!","Random::HashExtensions","classes/Random/HashExtensions.html#M001077","()","Alias for #rand_value!",2],["at_rand!","Random::StringExtensions","classes/Random/StringExtensions.html#M001083","( separator=// )","Return a random separation while removing it from the string. Default separation is by character. s =",2],["atize","Instance","classes/Instance.html#M000278","(name)","",2],["atkinson_index","Math","classes/Math.html#M000884","(array)","Closely related to the Theil index and easily expressible in terms of it. AI = 1-e^{theil_index} http://en.wikipedia.org/wiki/Atkinson_index",2],["atomic_id","File","classes/File.html#M000156","()","",2],["atomic_open","File","classes/File.html#M000157","(file_name, mode=\"r\", temp_dir=nil, &block)","Same as `File.open`, but acts on a temporary copy of named file, copying the file back to the original",2],["atomic_write","File","classes/File.html#M000158","(file_name, temp_dir=nil)","Write to a file atomically. Useful for situations where you don't want other processes or threads to",2],["atto","Numeric::Multipliers","classes/Numeric/Multipliers.html#M000953","()","",2],["attr_class_accessor","Module","classes/Module.html#M000426","(name)","NOTE: This method is not a common core extension and is not loaded automatically when using <code>require",2],["attr_class_reader","Module","classes/Module.html#M000427","(name)","NOTE: This method is not a common core extension and is not loaded automatically when using <code>require",2],["attr_class_writer","Module","classes/Module.html#M000428","(name)","NOTE: This method is not a common core extension and is not loaded automatically when using <code>require",2],["attr_setter","Module","classes/Module.html#M000429","(*args)","Create an attribute method for both getting and setting an instance variable: attr_setter :a is equivalent",2],["attr_tester","Module","classes/Module.html#M000430","(*args)","Create an tester attribute. This creates a single method used to test the attribute for truth. attr_tester",2],["attr_validator","Module","classes/Module.html#M000433","(*symbols, &validator)","Like attr_writer, but the writer method validates the setting against the given block. NOTE: This method",2],["attributes","Struct","classes/Struct.html#M000652","()","Returns a hash containing the names and values for all instance settings in the Struct. This will eventually",2],["bang?","Symbol","classes/Symbol.html#M000665","()","Symbol ends in `!`. :a!.bang? #=> true :a.bang?  #=> false ",2],["base64digest","Digest::Class","classes/Digest/Class.html#M000742","(str, *args)","From Ruby 1.9.2 source ",2],["base64digest","Digest::Instance","classes/Digest/Instance.html#M000740","(str = nil)","From Ruby 1.9.2 source ",2],["base64digest!","Digest::Instance","classes/Digest/Instance.html#M000741","()","From Ruby 1.9.2 source ",2],["basename","Module","classes/Module.html#M000432","()","Returns the root name of the module/class. module ::BaseName class Example end end BaseName::Example.name",2],["before","Array","classes/Array.html#M000001","(value)","Returns the value previous to the given value. The value previous to the first is the last. Returns nil",2],["begin","Interval","classes/Interval.html#M000846","()","Alias for #first",2],["beginning_of_day","Date","classes/Date.html#M000765","()","Converts Date to a Time (or DateTime if necessary) with the time portion set to the beginning of the",2],["beginning_of_day","DateTime","classes/DateTime.html#M000782","()","Returns a new DateTime representing the start of the day (0:00) ",2],["beta","Math","classes/Math.html#M000885","(x, y)","Beta function of +x+ and +y+ - <code>beta(+x+, +y+) = tgamma(+x+) * tgamma(+y+) / tgamma(+x+ + +y+)</code>",2],["big_endian?","Platform","classes/Platform.html#M001037","()","",2],["bind","Proc","classes/Proc.html#M000542","(object)","Bind a Proc to an object returning a Method. NOTE: This version comes from Rails. The old Facets version",2],["bind_to","Proc","classes/Proc.html#M000543","(object)","Bind a procedure to an object. This works wrapping instance_eval on the Proc object and then wrapping",2],["bit","Integer","classes/Integer.html#M000281","(bit)","Set a bit. 0.bit(4)  #=> 16 Using a negative figure will clear a bit. 10.bit(-4)      #=> 2 This is more",2],["bit?","Integer","classes/Integer.html#M000283","(bit)","Is a bit set? 8.bit?(3)  #=> true 8.bit?(2)  #=> false CREDIT: Thomas Sawyer, George Moschovitis ",2],["bit_clear","Integer","classes/Integer.html#M000282","(bit)","Clear bit. CREDIT: George Moschovitis ",2],["bitmask","Integer","classes/Integer.html#M000284","(mask)","Apply a bitmask. 1.bitmask(6) #=> 7 Using a inverted bitmask clears bits. 7.bitmask(~2) #=> 5 5.bitmask(~2)",2],["bitmask?","Integer","classes/Integer.html#M000285","(mask)","Is bitmask set? 7.bitmask?(7) #=> true 7.bitmask?(5) #=> true 8.bitmask?(3) #=> false CREDIT: George",2],["blank?","FalseClass","classes/FalseClass.html#M000314","()","",2],["blank?","NilClass","classes/NilClass.html#M000313","()","",2],["blank?","Numeric","classes/Numeric.html#M000317","()","",2],["blank?","String","classes/String.html#M000316","()","Is this string just whitespace? \"abc\".blank?  #=> false \"   \".blank?  #=> true ",2],["blank?","TrueClass","classes/TrueClass.html#M000315","()","",2],["body","Indexable","classes/Indexable.html#M000248","()","Returns an array of the first element upto, but not including, the last element. [1,2,3].body  #=> [1,2]",2],["bound","Comparable","classes/Comparable.html#M000083","(lower, upper=nil)","Alias for #clip",2],["bracket","String","classes/String.html#M000571","(bra, ket=nil)","Return a new string embraced by given brackets. If only one bracket char is given it will be placed on",2],["bracket!","String","classes/String.html#M000572","(bra, ket=nil)","Inplace version of #bracket. CREDIT: Trans ",2],["briefcase","String","classes/String.html#M000641","()","Transform a string into a sentence like form. \"This Is A String\".briefcase #=> \"This is a string\" ",2],["bsd?","Platform","classes/Platform.html#M001062","()","",2],["bsd?","RbConfig","classes/RbConfig.html#M001093","()","",2],["byte_order","Platform","classes/Platform.html#M001034","()","Byte order of CPU. Determine byte order of underlying machine. Examines the byte order of the underlying",2],["byteorder","Platform","classes/Platform.html#M001035","()","Alias for #byte_order",2],["bytes","String","classes/String.html#M000576","(&blk)","Upacks string into bytes. Note, this is not 100% compatible with 1.8.7+ which returns an enumerator instead",2],["cache","Functor","classes/Functor.html#M000178","(*key, &function)","Functors can be somewhat inefficient if a new Functor is frequently recreated for the same use. So this",2],["cache","Memoizable","classes/Memoizable.html#M000931","()","",2],["call","Method::Composition","classes/Method/Composition.html#M000412","(x)","",2],["call_stack","Binding","classes/Binding.html#M000320","(level=1)","Returns the call stack, in array format. ",2],["caller","Binding","classes/Binding.html#M000048","( skip=0 )","Returns the call stack, same format as Kernel#caller() ",2],["callstack","Binding","classes/Binding.html#M000321","(level=1)","Alias for #call_stack",2],["camelcase","String","classes/String.html#M000577","(*separators)","Converts a string to camelcase. This method leaves the first character as given. This allows other methods",2],["cap","Comparable","classes/Comparable.html#M000081","(upper)","Alias for #at_most",2],["capitalized?","String","classes/String.html#M000578","()","Return true if the string is capitalized, otherwise false. \"This\".capitalized?  #=> true \"THIS\".capitalized?",2],["cardinal?","Platform","classes/Platform.html#M001054","()","",2],["cast_from_array","Tuple","classes/Tuple.html#M001176","( arr )","",2],["cast_from_string","Tuple","classes/Tuple.html#M001174","( str, &yld )","Translates a string in the form on a set of numerical and/or alphanumerical characters separated by non-word",2],["cattr","Module","classes/Module.html#M000462","(*syms)","Creates a class-variable attribute that can be accessed both on an instance and class level. class CARExample",2],["cattr_accessor","Module","classes/Module.html#M000466","(*syms)","Creates a class-variable attr_accessor that can be accessed both on an instance and class level. class",2],["cattr_reader","Module","classes/Module.html#M000463","(*syms)","Creates a class-variable attr_reader that can be accessed both on an instance and class level. class",2],["cattr_writer","Module","classes/Module.html#M000465","(*syms)","Creates a class-variable attr_writer that can be accessed both on an instance and class level. class",2],["cdf","Math","classes/Math.html#M000886","(array, normalised=1.0)","Returns the Cumulative Density Function of this sample (normalised to a fraction of 1.0). ",2],["ceil","Math","classes/Math.html#M000887","(x)","Smallest integer not smaller than +x+. ",2],["centi","Numeric::Multipliers","classes/Numeric/Multipliers.html#M000947","()","",2],["cgi_escape","URI","classes/URI.html#M001158","(string)","CGI escape TODO: How does this compare to URI.escape? ",2],["cgi_parse","URI","classes/URI.html#M001164","(query)","",2],["cgi_unescape","URI","classes/URI.html#M001161","(string)","",2],["change","Date","classes/Date.html#M000761","(options)","Returns a new Date where one or more of the elements have been changed according to the +options+ parameter.",2],["change","DateTime","classes/DateTime.html#M000777","(options)","Returns a new DateTime where one or more of the elements have been changed according to the +options+",2],["change","Time","classes/Time.html#M000670","(options)","Returns a new Time where one or more of the elements have been changed according to the +options+ parameter.",2],["characters","String","classes/String.html#M000583","()","Returns an array of characters. \"abc\".characters.to_a  #=> [\"a\",\"b\",\"c\"] TODO: Probably should make this",2],["chomp","Symbol","classes/Symbol.html#M000654","(seperator)","Just like String#chomp. :ab.chomp(:b)  #=> :a CREDIT: Trans ",2],["chomp_query_string","URI","classes/URI.html#M001173","(uri)","Removes the query string from a +uri+. Returns the chomped uri. ",2],["chop_basename","FileTest","classes/FileTest.html#M000175","(path)","List File.split, but preserves the file separators. FileTest.chop_basename('/usr/lib') #=> ['/usr/',",2],["class_accessor","Module","classes/Module.html#M000435","(name)","NOTE: This method is not a common core extension and is not loaded automatically when using <code>require",2],["class_def","Module","classes/Module.html#M000476","(name, &blk)","Defines an instance method within a class/module. CREDIT: WhyTheLuckyStiff ",2],["class_extend","Class","classes/Class.html#M000441","(*mods, &block)","For Class, Module#class_extend is similar to class_eval. The alternative is to \"undef_method :class_extend\",",2],["class_extend","Module","classes/Module.html#M000438","(*mods, &block)","Normally when including modules, class/module methods are not extended. To achieve this behavior requires",2],["class_extensions","Module","classes/Module.html#M000440","()","",2],["class_inheritor","Module","classes/Module.html#M000439","(key, obj, op=nil, &fop)","= Class Inheritor Create an dynamic class inheritable attribute. Inheritor providse a means to store",2],["class_load","Module","classes/Module.html#M000481","( path )","Alias for #module_load",2],["class_method_defined?","Module","classes/Module.html#M000457","(meth)","Alias for #singleton_method_defined?",2],["class_reader","Module","classes/Module.html#M000436","(name)","NOTE: This method is not a common core extension and is not loaded automatically when using <code>require",2],["class_require","Module","classes/Module.html#M000480","( path )","Alias for #module_require",2],["class_writer","Module","classes/Module.html#M000437","(name)","NOTE: This method is not a common core extension and is not loaded automatically when using <code>require",2],["classes","ObjectSpace","classes/ObjectSpace.html#M000540","()","@return <Array[Class]> All the classes in the object space. ",2],["cleanlines","String","classes/String.html#M000584","(&block)","Returns an Enumerator for iterating over each line of the string, stripped of whitespace on either side.",2],["cleave","String","classes/String.html#M000585","(threshold=nil, len=nil)","Cleave a string. Break a string in two parts at the nearest whitespace. CREDIT: Trans ",2],["clip","Comparable","classes/Comparable.html#M000082","(lower, upper=nil)","Returns self if above the given lower bound, or within the given lower and upper bounds, otherwise returns",2],["clone","Multiton","classes/Multiton.html#M000960","()","Disable build-in copying methods. ",2],["clone?","FalseClass","classes/FalseClass.html#M000524","()","",2],["clone?","NilClass","classes/NilClass.html#M000521","()","",2],["clone?","Numeric","classes/Numeric.html#M000535","()","",2],["clone?","Symbol","classes/Symbol.html#M000532","()","",2],["clone?","TrueClass","classes/TrueClass.html#M000527","()","",2],["close?","Numeric","classes/Numeric.html#M000504","(number, epsilon=0.01)","Determines if another number is approximately equal within a given +epsilon+. This is the same a {#approx?}",2],["closed","Interval","classes/Interval.html#M000853","()","Returns a new interval inclusive of of both sentinels. ",2],["cluster_by","Enumerable","classes/Enumerable.html#M000104","(&b)","Similar to #group_by but returns an array of the groups. Returned elements are sorted by block. %w{this",2],["cmp","Comparable","classes/Comparable.html#M000084","(o)","Alternate name for comparison operator #<=>. 3.cmp(1)   #=>  1 3.cmp(3)   #=>  0 3.cmp(10)  #=> -1 This",2],["cmp","String","classes/String.html#M000085","(other)","Compare method that takes length into account. Unlike #<=>, this is compatible with #succ. \"abc\".cmp(\"abc\")",2],["collapse","Array","classes/Array.html#M000002","()","Simplify an array by flattening it then compacting it. [1,[2,nil,[3]],nil,4].collapse  #=> [1,2,3,4]",2],["collect","Denumerable","classes/Denumerable.html#M000088","()","Alias for #map",2],["collect_with_index","Enumerable","classes/Enumerable.html#M000131","()","Alias for #map_with_index",2],["collisions","Array","classes/Array.html#M000006","(&block)","Alias for #commonality",2],["combination","Array","classes/Array.html#M000004","(k=2)","Yields the block to each unique combination of _n_ elements. a = %w|a b c d| a.combination(3) produces",2],["combine","Range","classes/Range.html#M000550","(*intervals)","Combine ranges. (1..2).combine(2..4)   #=> [1..4] (1..2).combine(3..4)   #=> [1..2, 3..4] TODO: Incorporate",2],["combine","Range","classes/Range.html#M000551","(*intervals)","Combine intervals. Range.combine(1..2, 2..4)   #=> [1..4] Range.combine(1..2, 3..4)   #=> [1..2, 3..4]",2],["commonality","Array","classes/Array.html#M000005","(&block)","Returns all items that are equal in terms of the supplied block. If no block is given objects are considered",2],["compact_collect","Enumerable","classes/Enumerable.html#M000106","(&block)","Alias for #compact_map",2],["compact_map","Enumerable","classes/Enumerable.html#M000105","(&block)","A more versitle #compact method. It can be used to collect and filter items out in one single step. c",2],["compose","Proc","classes/Proc.html#M000545","(g)","Returns a new proc that is the functional composition of two procs, in order. a = lambda { |x| x + 4",2],["compress","Zlib","classes/Zlib.html#M001186","(source)","Compresses a string using gzip. ",2],["compress_lines","String","classes/String.html#M000586","(spaced = true)","Matches any whitespace (including newline) and replaces with a single space string = <<-QUERY.compress_lines",2],["conjoin","Array","classes/Array.html#M000007","(*args, &block)","This is more advanced form of #join. It allows for fine control of separators. NOTE: The old version",2],["const_missing","Facets","classes/Facets.html#M000711","(name)","",2],["constraint_to_lambda","Tuple","classes/Tuple.html#M001177","( constraint, &yld )","Parses a constraint returning the operation as a lambda. ",2],["contains?","FileTest","classes/FileTest.html#M000172","(child, parent=Dir.pwd)","Does the +parent+ contain the +child+? ",2],["copy_entryx","FileUtils","classes/FileUtils.html#M000812","(src, dest, filter, preserve = false, dereference_root = false, remove_destination = false)","Like FileUtils.copy_entry, but takes a filter proc that can return false to skip a file. Note that if",2],["copy_inheritor","Module","classes/Module.html#M000442","(name, default={})","Like #class_inheritor but non-dynamic. The value of the inheritor is copied from the ancestor on first",2],["cot","Math","classes/Math.html#M000889","(x)","Cotangens of +x+ ",2],["coth","Math","classes/Math.html#M000888","(x)","Cotangens hyperbolicus of +x+ ",2],["count","Enumerable","classes/Enumerable.html#M000107","(*items, &block)","Count the number of items in an enumerable equal (==) to the given object(s). e = [ 'a', 1, 'a' ] e.count(1)",2],["cp_rx","FileUtils","classes/FileUtils.html#M000811","(src, dest, options = {}, &filter)","Like FileUtils.cp_r, but takes a filter proc that can return false to skip a file: cp_rx \"bigDirectoryTree\",",2],["create","Continuation","classes/Continuation.html#M000739","(*args, &block)","= Continuation Extension Creates a continuation in a way that is easier to use than callcc. On the initial",2],["create","File","classes/File.html#M000159","(path, str='', &blk)","Creates a new file, or overwrites an existing file, and writes a string into it. Can also take a block",2],["crypt","String","classes/String.html#M000587","(salt=nil)","Common Unix cryptography method. This adds a default salt to the built-in crypt method. NOTE: This method",2],["csc","Math","classes/Math.html#M000891","(x)","Cosecans of +x+ ",2],["csch","Math","classes/Math.html#M000890","(x)","Cosecans hyperbolicus of +x+ ",2],["current","Date","classes/Date.html#M000745","()","Returns Time.zone.today when config.time_zone is set, otherwise just returns Date.today. ",2],["curry","Proc","classes/Proc.html#M000544","(*args)","Curry Proc object into new Proc object. TODO: Utilize Ruby 1.9's #curry method. ",2],["daemon","Process","classes/Process.html#M000549","(nochdir=nil, noclose=nil)","Turns the current script into a daemon process that detaches from the console. It can be shut down with",2],["datadir","RbConfig","classes/RbConfig.html#M001089","(package_name)","Return the path to the data directory associated with the given library/package name. Normally this is",2],["days_in_month","Date","classes/Date.html#M000750","()","Returns the number of days in the date's month. Date.new(2004,2).days_in_month  #=> 29 CREDIT: Ken Kunz.",2],["days_of_month","Date","classes/Date.html#M000751","()","",2],["deci","Numeric::Multipliers","classes/Numeric/Multipliers.html#M000946","()","SI Fractional ",2],["decode","URI","classes/URI.html#M001141","(uri)","Decode the uri components. ",2],["decompress","Zlib","classes/Zlib.html#M001185","(source)","Decompresses a gzipped string. ",2],["defer","Enumerable","classes/Enumerable.html#M000108","(&blk)","Without a block: wrap the Enumerable object in such a way that map, select and similar operations are",2],["defined?","Binding","classes/Binding.html#M000054","(x)","Returns the nature of something within the context of the binding. Returns nil if that thing is not defined.",2],["deflate","Zlib","classes/Zlib.html#M001189","(string, level=DEFAULT_COMPRESSION)","Deflate a string. ",2],["defuse","Timer","classes/Timer.html#M001119","()","Kill time limit thread, if any. ",2],["degenerate?","Interval","classes/Interval.html#M000850","()","Returns +true+ if the start and end sentinels are equal and the interval is closed; otherwise +false+.",2],["deka","Numeric::Multipliers","classes/Numeric/Multipliers.html#M000938","()","SI Multipliers ",2],["delete_unless","Array","classes/Array.html#M000008","(&block)","Inverse of #delete_if. [1,2,3].delete_unless{ |x| x < 2 } #=> [1] CREDIT: Daniel Schierbeck ",2],["delete_values","Array","classes/Array.html#M000009","(*values)","Delete multiple values from array. a = [1,2,3,4] a.delete_values(1,2)   #=> [1,2] a                 ",2],["delete_values_at","Array","classes/Array.html#M000011","(*selectors)","Delete multiple values from array given indexes or index range. a = [1,2,3,4] a.delete_values_at(1,2)",2],["delta","Math","classes/Math.html#M000893","(i, j)","Kronecker symbol of +i+ and +j+. Returns 1 if +i+ and +j+ are equal, 0 otherwise. ",2],["descend","Dir","classes/Dir.html#M000095","(path)","Descend a directory path. d = [] Dir.descend(\"/var/log\") do |path| d << path end d  #=> ['/', '/var',",2],["descendants","Class","classes/Class.html#M000071","(generations=-1)","List all descedents of this class. class A ; end class B < A; end class C < A; end A.descendants  #=>",2],["detail","Exception","classes/Exception.html#M000147","()","Pretty string output of exception/error object useful for helpful debug messages. @author George Moschovitis",2],["detect","Enumerable::Arguments","classes/Enumerable/Arguments.html#M000802","(*args, &yld)","Alias for #find",2],["direction","Interval","classes/Interval.html#M000852","()","Returns the direction of the interval indicated by +1, 0 or -1. (1..5).direction  #=> 1 (5..1).direction",2],["distance","Interval","classes/Interval.html#M000865","()","Returns the length of the interval as the difference between the first and last elements. Returns +nil+",2],["distance","Numeric","classes/Numeric.html#M000505","(other)","Returns the distance between self an another value. This is the same as #- but it provides an alternative",2],["divide","Array","classes/Array.html#M000010","(pattern)","Divide on matching pattern. ['a1','b1','a2','b2'].divide(/^a/) #=> [['a1','b1'],['a2','b2']] CREDIT:",2],["divide","String","classes/String.html#M000590","( re )","Breaks a string up into an array based on a regular expression. Similar to scan, but includes the matches.",2],["dos_escape","Shellwords","classes/Shellwords.html#M001104","(cmdline)","Escape special character used in DOS-based shells. TODO: How to integrate with rest of system? 1. Use",2],["downcase?","String","classes/String.html#M000579","()","Return true if the string is lowercase (downcase), otherwise false. \"THIS\".downcase?  #=> false \"This\".downcase?",2],["download","Net","classes/Net.html#M000964","(url, limit=10)","CREDIT: Daniel Huckstep ",2],["download_and_save","Net","classes/Net.html#M000966","(url, path=nil)","CREDIT: Daniel Huckstep ",2],["dst_adjustment","Time","classes/Time.html#M000671","(time)","Adjust DST TODO: Can't seem to get this to pass ActiveSupport tests, even though it is essentially identical",2],["dup","Multiton","classes/Multiton.html#M000961","()","",2],["dup!","FalseClass","classes/FalseClass.html#M000522","()","Since FalseClass is immutable it cannot be duplicated. For this reason #try_dup returns +self+. false.dup!",2],["dup!","NilClass","classes/NilClass.html#M000519","()","Since NilClass is immutable it cannot be duplicated. For this reason #try_dup returns +self+. nil.dup!",2],["dup!","Numeric","classes/Numeric.html#M000533","()","Since Numeric is immutable it cannot be duplicated. For this reason #try_dup returns +self+. 1.dup! ",2],["dup!","Symbol","classes/Symbol.html#M000528","()","Since Symbol is immutable it cannot be duplicated. For this reason #try_dup returns +self+. :a.dup! ",2],["dup!","TrueClass","classes/TrueClass.html#M000525","()","Since TrueClass is immutable it cannot be duplicated. For this reason #try_dup returns +self+. true.dup!",2],["dup?","FalseClass","classes/FalseClass.html#M000523","()","",2],["dup?","NilClass","classes/NilClass.html#M000520","()","",2],["dup?","Numeric","classes/Numeric.html#M000534","()","",2],["dup?","Symbol","classes/Symbol.html#M000531","()","",2],["dup?","TrueClass","classes/TrueClass.html#M000526","()","",2],["duplicates","Array","classes/Array.html#M000025","(min=2)","Return list of duplictate elements. @param [Integer] min The minimum number of duplicatation necessary",2],["each","Instance","classes/Instance.html#M000254","()","",2],["each","Interval","classes/Interval.html#M000873","(n=nil, d=nil)","Iterates over the interval, passing each _n_th element to the block. If n is not given then n defaults",2],["each","OpenStruct","classes/OpenStruct.html#M000984","(&blk)","",2],["each","Tuple","classes/Tuple.html#M001142","( &block )","",2],["each_by","Enumerable","classes/Enumerable.html#M000109","(steps=nil, &block)","Iterate through slices. If slice +steps+ is not given, the arity of the block is used. x = [] [1,2,3,4].each_by{",2],["each_char","String","classes/String.html#M000589","()","Yields a single-character string for each character in the string. When $KCODE = 'UTF8', multi-byte characters",2],["each_child","Dir","classes/Dir.html#M000096","(*ignore)","Like #each, except the \".\" and \"..\" special files are ignored. You can use +ignore+ to override '.' and",2],["each_index","Tuple","classes/Tuple.html#M001143","( &block )","",2],["each_pair","Array","classes/Array.html#M000012","()","Iterate over index and value. The intention of this method is to provide polymorphism with Hash. ",2],["each_with_object","Enumerable","classes/Enumerable.html#M000112","(memo)","A variation of #inject that saves one from having to return the aggregate/memo argument. Say we want",2],["each_word","String","classes/String.html#M000591","(&block)","Iterate through each word of a string. a = [] \"list of words\".each_word { |word| a << word } a  #=> ['list',",2],["edit_distance","String","classes/String.html#M000592","(str2)","Levenshtein distance algorithm implementation for Ruby, with UTF-8 support. The Levenshtein distance",2],["edit_distance","String","classes/String.html#M000593","(str2)","Levenshtein distance algorithm implementation for Ruby, with UTF-8 support. The Levenshtein distance",2],["elapse","Time","classes/Time.html#M000672","()","Tracks the elapse time of a code block. e = Time.elapse { sleep 1 } e.assert > 1 CREDIT: Hal Fulton ",2],["elementwise","Enumerable","classes/Enumerable.html#M000115","(count=1)","Alias for #ewise",2],["empty?","Pathname","classes/Pathname.html#M001010","()","",2],["empty?","Tuple","classes/Tuple.html#M001140","()","",2],["enclosure","Module","classes/Module.html#M000443","()","Returns the module which contains this one according to its name. module ::EncExample module M module",2],["enclosures","Module","classes/Module.html#M000444","()","Returns all the namespaces of this module according ordered from nearest and moving outwards. The receiver",2],["encname","Module","classes/Module.html#M000445","()","Enclosure name. module ::EncExample module M module N end end end EncExample::M::N.encname  #=> \"EncExample::M\"",2],["end","Interval","classes/Interval.html#M000847","()","Alias for #last",2],["end_of_day","DateTime","classes/DateTime.html#M000784","()","Returns a new DateTime representing the end of the day (23:59:59) ",2],["end_time","Timer","classes/Timer.html#M001114","()","",2],["end_with?","String","classes/String.html#M000635","(suffix)","Does a string end with the given suffix? \"hello\".end_with?(\"lo\")    #=> true \"hello\".end_with?(\"to\")",2],["ends","Indexable","classes/Indexable.html#M000271","()","A shorting of \"ends at\", returns the last index of the indexable object. Returns nil if there are no",2],["ends_with?","String","classes/String.html#M000637","(suffix)","Alias for #end_with?",2],["enterprise?","Platform","classes/Platform.html#M001051","()","Alias for #ree?",2],["entropy","Array","classes/Array.html#M000013","()","Shannon's entropy for an array - returns the average bits per symbol required to encode the array. Lower",2],["epsilon","Math","classes/Math.html#M000892","(i, j, k)","Levi-Civita symbol of +i+, +j+, and +k+ - 1 if (+i+, +j+, +k+) is (1, 2, 3), (2, 3, 1), or (3, 1, 2),",2],["eql?","Equitable","classes/Equitable.html#M000805","(o)","",2],["eql?","Interval","classes/Interval.html#M000876","(other)","Compares two intervals to see if they are equal ",2],["eql?","Tuple","classes/Tuple.html#M001160","( other )","Returns true if two tuple references are for the very same tuple. ",2],["erb_result","ERB::OpenTemplate","classes/ERB/OpenTemplate.html#M000809","(str)","",2],["ergo","NilClass","classes/NilClass.html#M000336","()","Compliments Kernel#ergo. \"a\".ergo{ |o| o.upcase } #=> \"A\" nil.ergo{ |o| o.bar }    #=> nil CREDIT: Daniel",2],["error_print","Exception","classes/Exception.html#M000151","(e)","Formats the Exception so that it looks *familiar*, i.e. exactly like your interpreter does it. Port of",2],["error_print","Exception","classes/Exception.html#M000153","()","Formats the Exception so that it looks *familiar*, i.e. exactly like your interpreter does it. @author",2],["esc","CGI","classes/CGI.html#M000736","(str)","Return an html \"safe\" version of the string, where every &, < and > are replaced with appropriate entities.",2],["escape","OpEsc","classes/OpEsc.html#M000981","(str)","Applies operator escape's according to OPERATORS_ESCAPE_TABLE. OpEsc.escape('-') #=> \"op_sub\" CREDIT:",2],["escape","Shellwords","classes/Shellwords.html#M001102","(cmdline)","",2],["escformat","CGI","classes/CGI.html#M000737","(str)","Calls #esc, and then further replaces carriage returns and quote characters with entities. ",2],["eval","Binding","classes/Binding.html#M000055","(str)","Evaluate a Ruby source code string (or block) in the binding context. ",2],["eval","Instance","classes/Instance.html#M000275","(*a,&b)","Instance evaluation. ",2],["even?","Integer","classes/Integer.html#M000291","()","Returns true if this integer is even, false otherwise. 2.even?  #=> true 3.even?  #=> false CREDIT: Daniel",2],["every","Enumerable","classes/Enumerable.html#M000110","()","Returns an elemental object. This allows you to map a method on to every element. r = [1,2,3].every +",2],["every!","Enumerable","classes/Enumerable.html#M000111","()","In place version of #every. ",2],["ewise","Enumerable","classes/Enumerable.html#M000113","(count=1)","Returns an elementwise Functor designed to make R-like elementwise operations possible. This is very",2],["exa","Numeric::Multipliers","classes/Numeric/Multipliers.html#M000945","()","",2],["exbi","Numeric::Multipliers","classes/Numeric/Multipliers.html#M000959","()","",2],["exclude?","Enumerable","classes/Enumerable.html#M000114","(object)","The inverse of #include?. [:a, :b].exclude?(:c)  #=> true [:a, :b].exclude?(:a)  #=> false ",2],["exclude?","String","classes/String.html#M000594","(str)","The inverse of include?. ",2],["exclude_begin?","Interval","classes/Interval.html#M000848","()","Alias for #exclude_first?",2],["exclude_end?","Interval","classes/Interval.html#M000849","()","Alias for #exclude_last?",2],["exclude_first?","Interval","classes/Interval.html#M000844","()","",2],["exclude_last?","Interval","classes/Interval.html#M000845","()","",2],["exp10","Math","classes/Math.html#M000894","(x)","10 to the power +x+ ",2],["exp2","Math","classes/Math.html#M000895","(x)","2 to the power +x+ ",2],["expand","Enumerable","classes/Enumerable.html#M000116","()","Expand all elements of an Enumerable object. [0, 2..3, 5..7].expand  #=> [0,[2, 3],[5,6,7]] CREDIT: Trans",2],["expand_tab","String","classes/String.html#M000596","(n=8)","Alias for #expand_tabs",2],["expand_tabs","String","classes/String.html#M000595","(n=8)","Expands tabs to +n+ spaces. Non-destructive. If +n+ is 0, then tabs are simply removed. Raises an exception",2],["ext","File","classes/File.html#M000160","(filename, new_ext=nil)","Takes a file name string and returns or changes its extension. Without a new extension argument, returns",2],["extract_options!","Array","classes/Array.html#M000016","()","Extracts options from a set of arguments. Removes and returns the last element in the array if it's a",2],["fac","Integer","classes/Integer.html#M000288","()","Alias for #factorial",2],["factorial","Integer","classes/Integer.html#M000287","()","Calculate the factorial of an integer. 2.factorial  #=> 2 3.factorial  #=> 6 4.factorial  #=> 24 CREDIT:",2],["factorial","Math","classes/Math.html#M000896","(n)","1 * 2 * ... * +n+, <code>nil</code> for negative numbers ",2],["femto","Numeric::Multipliers","classes/Numeric/Multipliers.html#M000952","()","",2],["file","String","classes/String.html#M000597","()","Use fluent notation for making file directives. For instance, if we had a file 'foo.txt', 'foo.txt'.file.mtime",2],["file_send","String","classes/String.html#M000598","(op, *a, &b)","",2],["filter","Enumerable","classes/Enumerable.html#M000117","(output=[])","The block acts as an arbitrary filter on the data. Unlike map, it can choose to drop elements from the",2],["find","Enumerable::Arguments","classes/Enumerable/Arguments.html#M000801","(*args, &yld)","Make exception for #find (a negative arity method) to accept keyword argument. ObjectSpace.find(Class,",2],["find_all","Denumerable","classes/Denumerable.html#M000090","()","Alias for #select",2],["find_yield","Enumerable","classes/Enumerable.html#M000118","(fallback=nil)","Yield each element to the block and return the result of the block when that result evaluates as true,",2],["first","Indexable","classes/Indexable.html#M000262","(n=1)","Returns first _n_ elements. %w{H e l l o}.first(3)  #=> %w{H e l} ",2],["first","Interval","classes/Interval.html#M000842","()","Returns the first or last sentinal of the interval. ",2],["first","Tuple","classes/Tuple.html#M001165","()","",2],["first!","Indexable","classes/Indexable.html#M000269","()","Remove and return the first element. a = [1,2,3] a.first!      #=> 1 a             #=> [2,3] ",2],["first=","Indexable","classes/Indexable.html#M000264","(x)","Change the first element. a = [\"a\",\"y\",\"z\"] a.first = \"x\" a           #=> [\"x\",\"y\",\"z\"] ",2],["first_closed","Interval","classes/Interval.html#M000857","()","Returns a new interval with one of the two sentinels opened or closed ",2],["first_opened","Interval","classes/Interval.html#M000859","()","",2],["flag","GetoptLong::DSL","classes/GetoptLong/DSL.html#M000832","(*opts)","",2],["flags","Argvector","classes/Argvector.html#M000718","()","Return flags, which are true options. ",2],["floor","Math","classes/Math.html#M000897","(x)","Largest integer not larger than +x+. ",2],["fold","String","classes/String.html#M000599","(ignore_indented=false)","Returns a new string with all new lines removed from adjacent lines of text. s = \"This is\\na test.\\n\\nIt",2],["foot","Indexable","classes/Indexable.html#M000247","()","Like #last, returning the last element in an array. [1,2,3].foot  #=> [3] ",2],["format_options","Argvector","classes/Argvector.html#M000735","(assoc_options)","Format flag options. This converts the associative array of options/flags into a hash. Repeat options",2],["frequency","Enumerable","classes/Enumerable.html#M000120","()","Generates a hash mapping each unique symbol in the array to the absolute frequency it appears. [:a,:a,:b,:c,:c,:c].frequency",2],["from","Array","classes/Array.html#M000017","(i)","Returns last _n_ elements. %w{W o r l d}.from(3)  #=> %w{l d} ",2],["from","Indexable","classes/Indexable.html#M000257","(i)","Returns last _n_ elements. %w{W o r l d}.from(3)  #=> %w{l d} ",2],["future?","DateTime","classes/DateTime.html#M000770","()","",2],["future?","Time","classes/Time.html#M000674","(other=nil)","",2],["fx","Enumerator","classes/Enumerator.html#M000145","()","",2],["fx_send","Enumerator","classes/Enumerator.html#M000146","(op, *a, &b)","",2],["gamma","Math","classes/Math.html#M000898","(x)","",2],["gcd","Math","classes/Math.html#M000900","(m, n)","Greatest common divisor of +m+ and +n+, +nil+ for non-positive numbers - gcd is computed by means of",2],["generate","Symbol","classes/Symbol.html#M000656","(key=nil)","Generate a unique symbol. Symbol.generate  #=> :\"-1\" If +key+ is given the new symbol will be prefixed",2],["get_query_string","URI","classes/URI.html#M001172","(uri)","This method returns the query string of a uri Input: the uri Output: the query string. returns nil if",2],["getutc","DateTime","classes/DateTime.html#M000786","()","Alias for #utc",2],["gibi","Numeric::Multipliers","classes/Numeric/Multipliers.html#M000956","()","",2],["giga","Numeric::Multipliers","classes/Numeric/Multipliers.html#M000942","()","",2],["gini_coefficient","Math","classes/Math.html#M000899","(array)","Calculates the Gini Coefficient (a measure of inequality of a distribution based on the area between",2],["glob","Pathname","classes/Pathname.html#M001004","(match, *opts)","Glob pathnames. ",2],["glob_first","Pathname","classes/Pathname.html#M001007","(match, *opts)","Return the first glob match. DEPRECATE: While slightly faster then glob().first, not really worth it",2],["glob_flags","Pathname","classes/Pathname.html#M001009","(opts)","",2],["glob_relative","Pathname","classes/Pathname.html#M001008","(match, *opts)","Return globbed matches with pathnames relative to the current pathname. ",2],["graph","Enumerable","classes/Enumerable.html#M000121","(&yld)","Like `#map`/`#collect`, but generates a Hash. The block is expected to return two values: the key and",2],["group_by","Enumerable","classes/Enumerable.html#M000123","()","Enumerable#group_by is used to group items in a collection by something they have in common.  The common",2],["half_closed","Interval","classes/Interval.html#M000856","(e=false)","Returns a new interval with either the first or the last sentinel exclusive. If the parameter is false,",2],["hash","Equitable","classes/Equitable.html#M000806","()","",2],["hash","Tuple","classes/Tuple.html#M001170","()","Unique hash value. ",2],["hash_to_query","URI","classes/URI.html#M001156","(parameters)","Given a hash with parameter/value pairs construct a standard query string. URI.hash_to_query(:a => 1,",2],["hash_to_query_string","URI","classes/URI.html#M001157","(parameters)","Alias for #hash_to_query",2],["hashify","Enumerable","classes/Enumerable.html#M000124","(val=true)","Create a hash whose keys are the enumerable's elements, with specified values. If no block is given,",2],["head","FileUtils","classes/FileUtils.html#M000819","(filename,lines)","In block form, yields the first number of +lines+ of file +filename+. In non-block form, it returns an",2],["head","Indexable","classes/Indexable.html#M000245","()","Like #first but returns the first element in a new array. [1,2,3].head  #=> [1] ",2],["hecto","Numeric::Multipliers","classes/Numeric/Multipliers.html#M000939","()","",2],["hence","Time","classes/Time.html#M000681","(*time_units)","Alias for #shift",2],["hide","BasicObject","classes/BasicObject.html#M000726","(name)","Hide the method named +name+ in the BlankSlate class.  Don't hide +instance_eval+ or any method beginning",2],["home","Module","classes/Module.html#M000446","()","Returns the module or class containing the receiver. module ::HomeExample module M module N end end end",2],["home","Pathname","classes/Pathname.html#M000997","()","Home constant for building paths from root directory onward. TODO: Pathname#home needs to be more robust.",2],["homename","Module","classes/Module.html#M000447","()","Returns the name of module or class containing the receiver. module ::HomeExample module M module N end",2],["host_os","Platform","classes/Platform.html#M001057","()","O P E R A T I N G  S Y S T E M ",2],["host_os","RbConfig","classes/RbConfig.html#M001090","()","",2],["housing","Module","classes/Module.html#M000449","()","Returns all the namespaces of this module according ordered from nearest and moving outwards. The receiver",2],["ideal_entropy","Array","classes/Array.html#M000014","()","Returns the maximum possible Shannon entropy of the array with given size assuming that it is an \"order-0\"",2],["identify","Equitable","classes/Equitable.html#M000803","(base, *accessors)","",2],["in","Date","classes/Date.html#M000764","(seconds)","Alias for #since",2],["in","DateTime","classes/DateTime.html#M000781","(seconds)","Alias for #since",2],["in","Time","classes/Time.html#M000680","(*time_units)","Alias for #shift",2],["incase?","Enumerable","classes/Enumerable.html#M000125","(what)","The same as #include? but tested using #=== instead of #==. [1, 2, \"a\"].incase?(2)       #=> true [1,",2],["include?","Interval","classes/Interval.html#M000870","(x)","Returns true or false if the element is part of the interval. ",2],["include?","Pathname","classes/Pathname.html#M001014","(pattern,*opts)","Does a directory contain a matching entry? Or if the pathname is a file, same as #fnmatch. ",2],["include_as","Module","classes/Module.html#M000475","(h)","Include a module via a specified space. module T def t ; \"HERE\" ; end end class X include_as :test =>",2],["include_function_module","Module","classes/Module.html#M000450","(*mod)","Include module and apply module_fuction to the included methods. module Utils module_function def foo;",2],["included","Memoizable::Copy","classes/Memoizable/Copy.html#M000936","(base)","",2],["included","Multiton::Inclusive","classes/Multiton/Inclusive.html#M000963","(base)","",2],["included","Random::StringExtensions","classes/Random/StringExtensions.html#M001080","(base)","",2],["indent","String","classes/String.html#M000600","(n, c=' ')","Indent left or right by n spaces. (This used to be called #tab and aliased as #indent.) CREDIT: Gavin",2],["indent!","String","classes/String.html#M000601","(n, c=' ')","Equivalent to String#indent, but modifies the receiver in place. ",2],["index","Array","classes/Array.html#M000019","(obj=nil, &block)","Allows #index to accept a block. ['a', 'b', 'c'].index{ |x| x.upcase == 'C' } #=> 2 IMPORTANT: This is",2],["index","Indexable","classes/Indexable.html#M000277","(obj=nil, &block)","Returns the index of the first element equal to the given object or satisfying the block condition. [1,2,3,4].index{",2],["index","Tuple","classes/Tuple.html#M001146","()","",2],["index_all","String","classes/String.html#M000604","(s, reuse=false)","Like index but returns an array of all index locations. The reuse flag allows the trailing portion of",2],["index_of","Indexable","classes/Indexable.html#M000279","(obj=nil, &block)","Alias for #index",2],["inflate","Zlib","classes/Zlib.html#M001188","(string)","Inflate a deflated sting. ",2],["init","GetoptLong","classes/GetoptLong.html#M000829","(*arguments, &block)","Alias for #initialize",2],["initialize_copy","Cloneable","classes/Cloneable.html#M000738","(sibling)","",2],["initialize_copy","Memoizable::Copy","classes/Memoizable/Copy.html#M000937","(original)","",2],["initialized?","Multiton::MetaMethods","classes/Multiton/MetaMethods.html#M000968","(*e, &b)","",2],["inspect","Lazy::Promise::DIVERGES","classes/Lazy/Promise/DIVERGES.html#M000391","()","Differentiate inspection of DIVERGES lambda. ",2],["inspect","Method::Composition","classes/Method/Composition.html#M000409","()","",2],["inspect","NullClass","classes/NullClass.html#M000976","()","",2],["inspect","Platform","classes/Platform.html#M001022","()","",2],["inspect","RbConfig","classes/RbConfig.html#M001084","()","",2],["inspect","Tuple","classes/Tuple.html#M001132","()","",2],["instance","Multiton::MetaMethods","classes/Multiton/MetaMethods.html#M000965","(*e, &b)","",2],["instance_delegate","Instance","classes/Instance.html#M000253","()","",2],["instance_delegate","OpenStruct","classes/OpenStruct.html#M000988","()","Provides access to an OpenStruct's inner table. o = OpenStruct.new o.a = 1 o.b = 2 o.instance_delegate.map",2],["instance_function","Module","classes/Module.html#M000451","(*meths)","Converts module methods into instance methods such that the first parameter is passed +self+. This promotes",2],["instance_method!","Module","classes/Module.html#M000453","(s)","Access method as a singleton object and retain state. module ::K def hello puts \"Hello World!\" end end",2],["instance_method_defined?","Module","classes/Module.html#M000454","(meth)","Query whether a public instance method is defined for the module. CREDIT: Gavin Sinclair, Noah Gibbs",2],["integrate","Module","classes/Module.html#M000458","(mod, &block)","Using integrate is just like using include except the module included is a reconstruction of the one",2],["interpolate","String","classes/String.html#M000605","(&str)","Interpolate. Provides a means of extenally using Ruby string interpolation mechinism. try = \"hello\" str",2],["interpreter","Platform","classes/Platform.html#M001040","()","Return the name of the ruby interpreter. ",2],["iron_ruby?","Platform","classes/Platform.html#M001053","()","Alias for #ironruby?",2],["ironruby?","Platform","classes/Platform.html#M001052","()","",2],["is","Module","classes/Module.html#M000460","(*mods)","An alias for #include. class IsExample is Enumerable end CREDIT: Trans ",2],["is?","Module","classes/Module.html#M000459","(base)","Is a given class or module an ancestor of this class or module? class IsX ; end class IsY < IsX ; end",2],["java?","Platform","classes/Platform.html#M001045","()","Alias for #jruby?",2],["jruby?","Platform","classes/Platform.html#M001044","()","",2],["keys","Instance","classes/Instance.html#M000272","()","Instance vairable names as symbols. ",2],["kibi","Numeric::Multipliers","classes/Numeric/Multipliers.html#M000954","()","SI Binary ",2],["kilo","Numeric::Multipliers","classes/Numeric/Multipliers.html#M000940","()","",2],["kldivergence","Math","classes/Math.html#M000901","(array, q)","The Kullback-Leibler divergence from this array to that of +q+. NB: You will possibly want to sort both",2],["last","Indexable","classes/Indexable.html#M000263","(n=1)","Returns last _n_ elements. %w{H e l l o}.last(3)  #=> %w{l l o} ",2],["last","Interval","classes/Interval.html#M000843","()","",2],["last","Tuple","classes/Tuple.html#M001166","()","",2],["last!","Indexable","classes/Indexable.html#M000270","()","Remove and return the last element. a = [1,2,3] a.last!       #=> 3 a             #=> [1,2] ",2],["last=","Indexable","classes/Indexable.html#M000268","(x)","Change the last element. a = [1,2,5] a.last = 3 a           #=> [1,2,3] ",2],["last_closed","Interval","classes/Interval.html#M000858","()","",2],["last_opened","Interval","classes/Interval.html#M000860","()","",2],["lchomp","String","classes/String.html#M000607","(match)","Left chomp. \"help\".lchomp(\"h\")  #=> \"elp\" \"help\".lchomp(\"k\")  #=> \"help\" CREDIT: Trans ",2],["lchomp","Symbol","classes/Symbol.html#M000655","(seperator)","Just like String#lchomp. :ab.lchomp(:a)  #=> :b CREDIT: Trans ",2],["lchomp!","String","classes/String.html#M000608","(match)","In-place left chomp. \"help\".lchomp(\"h\")  #=> \"elp\" \"help\".lchomp(\"k\")  #=> \"help\" CREDIT: Trans ",2],["lcm","Math","classes/Math.html#M000902","(m, n)","Least common multiple of +m+ and +n+, computed by multiplying +m+ and +n+ and dividing the product by",2],["length","Interval","classes/Interval.html#M000866","()","Alias for #distance",2],["length","Numeric","classes/Numeric.html#M000506","()","Returns +self+, useful for polymorphic cases. ",2],["length","Tuple","classes/Tuple.html#M001139","()","",2],["less","Time","classes/Time.html#M000682","(*time_units)","Returns a new Time representing the time a number of time-units ago. This is just like #shift, but reverses",2],["let","Module","classes/Module.html#M000461","(var,&block)","Create a memoized method. This method has been popularized by RSpec. class LetExample let(:seed) { rand",2],["letter","Random","classes/Random.html#M001026","()","Module method to generate a random letter. Random.letter  #~> \"q\" Random.letter  #~> \"r\" Random.letter",2],["lgamma","Math","classes/Math.html#M000903","(x)","Logarithmus naturalis of gamma function of +x+. @author Josef Schugt ",2],["limit","Timer","classes/Timer.html#M001118","( time_limit=nil )","Establish a time limit on execution. ",2],["line_wrap","String","classes/String.html#M000606","(width, tabs=4)","Line wrap at width. s = \"1234567890\".line_wrap(5) s  #=> \"12345\\n67890\\n\" CREDIT: Trans ",2],["lines","String","classes/String.html#M000609","(&blk)","Returns an array of characters. \"abc\\n123\".lines.to_a  #=> [\"abc\\n\",\"123\"] ",2],["link_entry","FileUtils","classes/FileUtils.html#M000814","(src, dest, dereference_root = false, remove_destination = false)","Hard links a file system entry +src+ to +dest+. If +src+ is a directory, this method links its contents",2],["linsolve","Math","classes/Math.html#M000904","(a, b, c = 0.0)","Returns real solution(s) of <code>+a+x + +b+ = +c+</code> or +nil+ if no or an infinite number of solutions",2],["linux?","Platform","classes/Platform.html#M001058","()","",2],["linux?","RbConfig","classes/RbConfig.html#M001091","()","",2],["little_endian?","Platform","classes/Platform.html#M001036","()","",2],["ln_r","FileUtils","classes/FileUtils.html#M000813","(src, dest, options = {})","Options: noop verbose dereference_root remove_destination Hard link +src+ to +dest+. If +src+ is a directory,",2],["local","Platform","classes/Platform.html#M001018","()","",2],["local_offset","DateTime","classes/DateTime.html#M000769","()","",2],["local_time","Time","classes/Time.html#M000791","(*args)","",2],["local_variables","Binding","classes/Binding.html#M000056","()","Returns the local variables defined in the binding context: a = 1 b = 2 binding.local_variables  #=>",2],["log2","Math","classes/Math.html#M000905","(x)","Logarithmus dualis of +x+. ",2],["lower_camelcase","String","classes/String.html#M000582","(*separators)","Same as +#camelcase+ but converts first letter to lowercase. \"camel_case\".lower_camelcase   #=> \"camelCase\"",2],["lowercase","String","classes/String.html#M000646","()","Downcase first letter. ",2],["ls_r","Dir","classes/Dir.html#M000101","(path='.', &block)","Same as Dir#recurse. ",2],["mac?","Platform","classes/Platform.html#M001059","()","",2],["mac?","RbConfig","classes/RbConfig.html#M001092","()","",2],["major","Tuple","classes/Tuple.html#M001167","()","These are useful for using a Tuple as a version. ",2],["map","Denumerable","classes/Denumerable.html#M000087","()","",2],["map_by","Enumerable","classes/Enumerable.html#M000126","()","Like #group_by, but maps the second value returned from the block. a = [1,2,3,4,5] a.map_by{ |e| [e %",2],["map_detect","Enumerable","classes/Enumerable.html#M000119","(fallback=nil)","Alias for #find_yield",2],["map_send","Enumerable","classes/Enumerable.html#M000129","(meth, *args, &block)","Send a message to each element and collect the result. [1,2,3].map_send(:+, 3)  #=> [4,5,6] CREDIT: Sean",2],["map_with","Enumerable","classes/Enumerable.html#M000127","(*arrays, &block)","Combines #zip and #map in a single efficient operation. h = {} [1,2,3].map_with [:x,:y,:z] do |n,k| h[k]",2],["map_with_index","Enumerable","classes/Enumerable.html#M000130","()","Same as #collect but with an iteration counter. a = [1,2,3].collect_with_index { |e,i| e*i } a  #=> [0,2,6]",2],["margin","String","classes/String.html#M000610","(n=0)","Provides a margin controlled string. x = %Q{ | This |   is |     margin controlled! }.margin NOTE: This",2],["marshal_from_cgi","CGI","classes/CGI.html#M000734","(name)","Create an hidden input field through which an object can can be marshalled. This makes it very easy to",2],["marshal_to_cgi","CGI","classes/CGI.html#M000733","(name, iobj)","Create an hidden input field through which an object can can be marshalled. This makes it very easy to",2],["mash","Enumerable","classes/Enumerable.html#M000122","(&yld)","Alias for #graph",2],["match","MatchData","classes/MatchData.html#M000398","(index=0)","Return the primary match string. This is equivalent to +md[0]+. md = /123/.match \"123456\" md.match  #=>",2],["match","Platform","classes/Platform.html#M001019","(platform)","",2],["matchset","MatchData","classes/MatchData.html#M000402","()","Returns [ pre_match, matchtree, post_match ]. (see matchtree) md = /(bb)(cc(dd))(ee)/.match \"XXaabbccddeeffXX\"",2],["matchtree","MatchData","classes/MatchData.html#M000403","(index=0)","An alternate to #to_a which returns the matches in order corresponding with the regular expression. md",2],["mattr","Module","classes/Module.html#M000467","(*syms)","Creates a class-variable attribute that can be accessed both on an instance and class level. c = Class.new",2],["mattr_accessor","Module","classes/Module.html#M000471","(*syms)","Creates a class-variable attr_accessor that can be accessed both on an instance and class level. c =",2],["mattr_reader","Module","classes/Module.html#M000468","( *syms )","Creates a class-variable attr_reader that can be accessed both on an instance and class level. c = Class.new",2],["mattr_writer","Module","classes/Module.html#M000469","(*syms)","Creates a class-variable attr_writer that can be accessed both on an instance and class level. c = Class.new",2],["max","Interval","classes/Interval.html#M000869","()","Returns the greater of the first and last sentinals. ",2],["max","Math","classes/Math.html#M000909","(array, block)","",2],["mean","Math","classes/Math.html#M000906","(array, &blk)","Mean average. ",2],["mebi","Numeric::Multipliers","classes/Numeric/Multipliers.html#M000955","()","",2],["median","Array","classes/Array.html#M000020","(offset=0)","Determines the _sorted_ middle element. a = %w{a a b b c c c} a.median     #=> \"b\" When there are an",2],["median","Math","classes/Math.html#M000907","(array)","Returns the numerical median for the an array of values; or nil if array is empty. ",2],["mega","Numeric::Multipliers","classes/Numeric/Multipliers.html#M000941","()","",2],["member?","Interval","classes/Interval.html#M000872","(x)","Alias for #include?",2],["memoize","Memoizable","classes/Memoizable.html#M000933","(*method_names)","Directive for making your functions faster by trading space for time. When you \"memoize\" a method/function",2],["memoize","Method","classes/Method.html#M000416","(value)","Memoize a method by defining a singleton override. NOTE: This method is not a common core extension and",2],["memoize","Module","classes/Module.html#M000464","(*args)","This is here for backward compatibility. @uncommon require 'facets/module/memoize' ",2],["merge!","Array","classes/Array.html#M000021","( other )","In place #merge. a = [1,2] a.merge! [2,3] a #=> [1,2,3] CREDIT: Trans ",2],["method_clash","Module","classes/Module.html#M000470","(other)","Detect method name clash between modules and/or classes, regardless of method visibility: module MethodClashExample",2],["method_clash?","Module","classes/Module.html#M000472","(other)","Uses #method_clash to return +true+ or +false+ if there are method name clashes. @uncommon require 'facets/module/method_clash'",2],["method_missing","Enumerable::Recursor","classes/Enumerable/Recursor.html#M000141","(op, &yld)","",2],["method_missing","Functor","classes/Functor.html#M000181","(op, *args, &blk)","Any action against the functor is processesd by the function. ",2],["method_missing","NullClass","classes/NullClass.html#M000980","(sym, *args)","",2],["method_missing","RbConfig","classes/RbConfig.html#M001085","(s,*a,&b)","Methodized lookup of config. ",2],["method_space","Module","classes/Module.html#M000473","(name, mod=nil, &blk)","Create method namespaces, allowing for method chains but still accessing the object's instance. class",2],["method_to_filename","OpEsc","classes/OpEsc.html#M000982","(name)","",2],["methodize","Class","classes/Class.html#M000073","()","Translate a class name to a suitable method name. module ::Example class MethodizeExample end end Example::MethodizeExample.methodize",2],["methodize","Module","classes/Module.html#M000474","()","Translate a module name to a suitable method name. module ::EgMethodize module Eg end end EgMethodize.methodize",2],["methodize","String","classes/String.html#M000611","()","Translate a class or module name to a suitable method name. \"My::CoolClass\".methodize  #=> \"my__cool_class\"",2],["micro","Numeric::Multipliers","classes/Numeric/Multipliers.html#M000949","()","",2],["mid","Indexable","classes/Indexable.html#M000249","(offset=0)","Returns the middle element of an array, or the element offset from middle if the parameter is given.",2],["middle","Indexable","classes/Indexable.html#M000252","(birth=0)","Returns an Array of the middle element(s) of an array. Even-sized arrays, not having an exact middle,",2],["midnight","Date","classes/Date.html#M000766","()","Alias for #beginning_of_day",2],["midnight","DateTime","classes/DateTime.html#M000783","()","Alias for #beginning_of_day",2],["milli","Numeric::Multipliers","classes/Numeric/Multipliers.html#M000948","()","",2],["min","Interval","classes/Interval.html#M000868","()","Returns the lesser of the first and last sentinals. ",2],["min","Math","classes/Math.html#M000908","(array, &block)","",2],["minor","Tuple","classes/Tuple.html#M001168","()","",2],["mode","Array","classes/Array.html#M000022","()","In Statistics mode is the value that occurs most frequently in a given set of data. This method returns",2],["modname","Module","classes/Module.html#M000448","()","Alias for #homename",2],["modulate","Enumerable","classes/Enumerable.html#M000133","(modulo)","Divide an array into groups by modulo of the index. [2,4,6,8].modulate(2)  #=> [[2,6],[4,8]] CREDIT:",2],["module_def","Module","classes/Module.html#M000477","(name, &blk)","Defines an instance method within a class/module. CREDIT: WhyTheLuckyStiff ",2],["module_load","Module","classes/Module.html#M000478","( path )","Load file directly into module/class namespace. Please use this with careful consideration. It is best",2],["module_method_defined?","Module","classes/Module.html#M000456","(meth)","Alias for #singleton_method_defined?",2],["module_require","Module","classes/Module.html#M000479","( path )","Require file into module/class namespace. Unlike load this keeps a per-module cache and will not load",2],["modulize","String","classes/String.html#M000613","()","Converts a string to module name representation. This is essentially #camelcase, but it also converts",2],["month_name","Date","classes/Date.html#M000752","()","Get the month name for this date object CREDIT: Benjamin Oakes ",2],["mri?","Platform","classes/Platform.html#M001041","()","",2],["mscan","String","classes/String.html#M000612","(re)","Like #scan but returns MatchData ($~) rather then matched string ($&). CREDIT: Trans ",2],["multi_flag","Argvector","classes/Argvector.html#M000732","(args=nil)","Split single letter option groupings into separate options. ie. -xyz => -x -y -z ",2],["multiglob","Dir","classes/Dir.html#M000098","(*patterns)","Like +glob+ but can take multiple patterns. Dir.multiglob('tmp/*.rb', 'tmp/*.py') Rather then constants",2],["multiglob_r","Dir","classes/Dir.html#M000099","(*patterns)","The same as +multiglob+, but recusively includes directories. Dir.multiglob_r('tmp') is equivalent to",2],["multiline?","Regexp","classes/Regexp.html#M000559","()","Is a regular expression multiline? /x/.multiline?   #=> false /x/m.multiline?  #=> true ",2],["multiple?","Integer","classes/Integer.html#M000289","(number)","Is +self+ a multiple of a given number? 7.multiple?(2)  #=> false 8.multiple?(2)  #=> true CREDIT: Trans",2],["multiton_id","Multiton::MetaMethods","classes/Multiton/MetaMethods.html#M000973","(*e, &b)","Default method to to create a key to cache already constructed instances. In the use case MultitonClass.new(e),",2],["multiton_id","Tuple","classes/Tuple.html#M001129","(arg=0, default=0, &block)","",2],["multiton_instance","Multiton::MetaMethods","classes/Multiton/MetaMethods.html#M000969","()","",2],["multiton_mutex","Multiton::MetaMethods","classes/Multiton/MetaMethods.html#M000970","()","",2],["name","UnboundMethod","classes/UnboundMethod.html#M000691","()","Return the name of the method. Be aware that in ruby 1.9 UnboundMethod#name is defined already, but it",2],["names","Instance","classes/Instance.html#M000273","()","Instance variable names as strings. ",2],["nano","Numeric::Multipliers","classes/Numeric/Multipliers.html#M000950","()","",2],["natcmp","String","classes/String.html#M000615","(str2, caseInsensitive=false)","'Natural order' comparison of strings, e.g. ... \"my_prog_v1.1.0\" < \"my_prog_v1.2.0\" < \"my_prog_v1.10.0\"",2],["nchar","String","classes/String.html#M000614","(n, replacement=nil)","Returns _n_ characters of the string. If _n_ is positive the characters are from the beginning of the",2],["negative?","Numeric","classes/Numeric.html#M000508","()","Is a number less than zero. ",2],["new","Argvector","classes/Argvector.html#M000713","(line=nil, arity=nil)","Takes the command line string (or array) and options. Options have flags and end with a hash of option",2],["new","ERB::OpenTemplate","classes/ERB/OpenTemplate.html#M000808","(*objs_ioc)","",2],["new","Enumerable::Recursor","classes/Enumerable/Recursor.html#M000140","(enum, *types, &block)","",2],["new","Enumerator","classes/Enumerator.html#M000148","(*args, &block)","Provides the ruby-1.9 block form of Enumerator, where you can write: obj = Enumerator.new do |yielder|",2],["new","Functor","classes/Functor.html#M000179","(&function)","",2],["new","GetoptLong","classes/GetoptLong.html#M000828","(*arguments, &block)","",2],["new","GetoptLong::DSL","classes/GetoptLong/DSL.html#M000830","(&block)","",2],["new","Instance","classes/Instance.html#M000251","(delegate)","",2],["new","Instantiable","classes/Instantiable.html#M000838","(*args,&blk)","Never use a class again! ;) ",2],["new","Interval","classes/Interval.html#M000840","(first, last, exclude_first=false, exclude_last=false )","",2],["new","Method::Composition","classes/Method/Composition.html#M000404","(f,g)","",2],["new","Multiton::MetaMethods","classes/Multiton/MetaMethods.html#M000967","(*e, &b)","Alias for #instance",2],["new","NullClass","classes/NullClass.html#M000975","()","",2],["new","OpenStruct","classes/OpenStruct.html#M000983","(hash=nil, &block)","Allows the initialization of an OpenStruct with a setter block: person = OpenStruct.new do |o| o.name",2],["new","Platform","classes/Platform.html#M001021","(arch)","",2],["new","Timer","classes/Timer.html#M001111","(time_limit=nil, &block)","",2],["new","Tuple","classes/Tuple.html#M001130","(arg=0, default=0, &blk)","",2],["newlines","String","classes/String.html#M000617","(&block)","Returns an Enumerator for iterating over each line of the string, void of the termining newline character,",2],["nil?","NullClass","classes/NullClass.html#M000977","()","",2],["none?","Enumerable","classes/Enumerable.html#M000132","()","Enumerable#none? is the logical opposite of the builtin method Enumerable#any?.  It returns +true+ if",2],["nonuniq","Array","classes/Array.html#M000023","()","Returns a list of non-unique elements [1,1,2,2,3,4,5].nonuniq  #=> [1,2] @author Martin DeMello ",2],["nonuniq!","Array","classes/Array.html#M000024","()","Same as `#nonuniq` but acting in place. ",2],["not?","Symbol","classes/Symbol.html#M000657","()","Does a symbol have a \"not\" sign? \"friend\".to_sym.not?   #=> false \"~friend\".to_sym.not?  #=> true CREDIT:",2],["not_empty?","Array","classes/Array.html#M000026","()","Not empty? [].not_empty?     #=> false [1,2].not_empty?  #=> true ",2],["null","File","classes/File.html#M000161","()","Platform dependent null device. CREDIT: Daniel Burger ",2],["null","Pathname","classes/Pathname.html#M000999","()","Platform dependent null device. CREDIT Daniel Burger ",2],["null?","Interval","classes/Interval.html#M000851","()","Returns +true+ if the start and end sentinels are equal and the interval is open; otherwise +false+.",2],["null?","NullClass","classes/NullClass.html#M000978","()","",2],["object_state","Array","classes/Array.html#M000529","(data=nil)","",2],["object_state","String","classes/String.html#M000530","(data=nil)","",2],["object_state","Struct","classes/Struct.html#M000537","(data=nil)","",2],["occur","Enumerable","classes/Enumerable.html#M000134","(n=nil)","Returns an array of elements for the elements that occur n times. Or according to the results of a given",2],["occurent","Array","classes/Array.html#M000027","(n=2)","Returns a list of elements that occur +n+ times. [0,1,1,1,3,0,1,2,4].occurent(3) #=> [1] If +n+ is a",2],["odd?","Integer","classes/Integer.html#M000290","()","Returns true if this integer is odd, false otherwise. 2.odd?            #=> false 3.odd?            #=>",2],["of","Integer","classes/Integer.html#M000292","(&block)","Like #times but returns a collection of the yield results. a = 3.of { |i| \"#{i+1}\" } a #=> [ \"1\", \"2\",",2],["official_ruby?","Platform","classes/Platform.html#M001042","()","Alias for #mri?",2],["old_initialize","Enumerator","classes/Enumerator.html#M000149","(*args, &block)","Alias for #initialize",2],["on_timeout","Timer","classes/Timer.html#M001115","( &block )","",2],["one?","Enumerable","classes/Enumerable.html#M000135","()","Enumerable#one? returns +true+ if and only if <em>exactly one</em> element in the collection satisfies",2],["only","Array","classes/Array.html#M000028","()","Returns the _only_ element in the array.  Raises an IndexError if the array's size is not 1. [5].only",2],["opened","Interval","classes/Interval.html#M000855","()","Returns a new interval exclusive of both sentinels. ",2],["operands","Argvector","classes/Argvector.html#M000714","()","Returns operand array. ",2],["optional","GetoptLong::DSL","classes/GetoptLong/DSL.html#M000835","(*opts)","",2],["options","Argvector","classes/Argvector.html#M000716","()","Returns options hash. ",2],["opts","GetoptLong::DSL","classes/GetoptLong/DSL.html#M000836","(*opts)","Alias for #optional",2],["ordinal","Integer","classes/Integer.html#M000295","()","",2],["ordinalize","Integer","classes/Integer.html#M000296","()","Alias for #ordinal",2],["ostruct_delegate","OpenStruct","classes/OpenStruct.html#M000989","()","Alias for #instance_delegate",2],["ostruct_merge","OpenStruct","classes/OpenStruct.html#M000994","(other)","Merge hash data creating a new OpenStruct object. o = OpenStruct.new x = o.ostruct_merge(:a => 2) x.a",2],["ostruct_update","OpenStruct","classes/OpenStruct.html#M000990","(other)","Insert/update hash data on the fly. o = OpenStruct.new o.ostruct_update(:a => 2) o.a  #=> 2 ",2],["out_of_date?","FileUtils","classes/FileUtils.html#M000816","(path, *sources)","Alias for #outofdate?",2],["outofdate?","FileUtils","classes/FileUtils.html#M000815","(path, *sources)","The opposite of #uptodate? ",2],["outofdate?","Pathname","classes/Pathname.html#M001012","(*sources)","",2],["overlap?","Range","classes/Range.html#M000552","(other)","Do two ranges overlap? CREDIT: Daniel Schierbeck, Brandon Keepers ",2],["owner","Method::Composition","classes/Method/Composition.html#M000407","()","",2],["pad","Array","classes/Array.html#M000029","(len, val=nil)","Pad an array with a given <tt>value</tt> up to a given <tt>length</tt>. [0,1,2].pad(6,\"a\")  #=> [0,1,2,\"a\",\"a\",\"a\"]",2],["pad!","Array","classes/Array.html#M000030","(len, val=nil)","Like #pad but changes the array in place. a = [0,1,2] a.pad!(6,\"x\") a  #=> [0,1,2,\"x\",\"x\",\"x\"] CREDIT:",2],["parameters","Argvector","classes/Argvector.html#M000717","()","Returns [operands, options], which is good for plugging directly into a method. ",2],["parameters","Argvector","classes/Argvector.html#M000712","(*args)","",2],["parameters_without_duplicates","Argvector","classes/Argvector.html#M000725","()","Like parameters but without allowing for duplicate options. ",2],["parent?","Dir","classes/Dir.html#M000097","(parent_path, child_path)","Is a path parental to another? Dir.parent?('parent', 'parent/child')  #=> true TODO: Needs improvement.",2],["parrot?","Platform","classes/Platform.html#M001055","()","Alias for #cardinal?",2],["parse","Argvector","classes/Argvector.html#M000727","()","Basic parser partitions the command line into options and operands. Options are converted to a hash and",2],["parse_arity","Argvector","classes/Argvector.html#M000729","(arity)","Ensure arity is uniform. ",2],["parse_constraint","Tuple","classes/Tuple.html#M001178","( constraint, &yld )","",2],["parse_line","Argvector","classes/Argvector.html#M000728","(line=nil)","First pass parser to split the command line into an array using Shellwords, if not already so divided.",2],["parse_preoptions","Argvector","classes/Argvector.html#M000730","(args)","Parse preoptions. A \"preoption\" is one that occurs before the first operans (if any). ",2],["partial","Proc","classes/Proc.html#M000548","(*args)","Convert a Proc object into new partial Proc object. a = proc { |a,b,c| a+b+c } b = a.partial(NA,2,NA)",2],["past?","DateTime","classes/DateTime.html#M000771","()","",2],["past?","Time","classes/Time.html#M000673","(other=nil)","",2],["pathize","Class","classes/Class.html#M000074","()","Converts a class name to a unix path. module ::Example class PathizeExample end end Example::PathizeExample.pathize",2],["pathize","Module","classes/Module.html#M000485","()","Converts a class name to a unix path. module ::ExamplePathize module Example end end ExamplePathize.pathize",2],["pathize","String","classes/String.html#M000619","()","Transforms a namespace, i.e. a class or module name, into a viable  file path. \"ExamplePathize\".pathize",2],["pebi","Numeric::Multipliers","classes/Numeric/Multipliers.html#M000958","()","",2],["peek","Array","classes/Array.html#M000035","(i=0)","Peek at the top of the stack (the end of the array). a = [1, 2, 3] a.peek          #=> 3 a          ",2],["per","Enumerable","classes/Enumerable.html#M000137","(enum_method=nil, *enum_args)","Per element meta-functor. ([1,2,3].per(:map) + 3)     #=> [4,5,6] ([1,2,3].per(:select) > 1)  #=> [2,3]",2],["percentile","Math","classes/Math.html#M000910","(array, pcnt)","Returns the percentile value for percentile _pcnt_; nil if array is empty. +pcnt+ should be expressed",2],["perl?","Platform","classes/Platform.html#M001056","()","Alias for #cardinal?",2],["permutation","Array","classes/Array.html#M000031","(n=size)","Permutation provids the possible orders of an enumerable. Each is indexed by a permutation number. The",2],["peta","Numeric::Multipliers","classes/Numeric/Multipliers.html#M000944","()","",2],["pick","Random::ArrayExtensions","classes/Random/ArrayExtensions.html#M001038","(n=nil)","Similar to #at_rand, but will return an array of randomly picked exclusive elements if given a number.",2],["pick","Random::HashExtensions","classes/Random/HashExtensions.html#M001075","()","Alias for #rand_value!",2],["pick!","Random::ArrayExtensions","classes/Random/ArrayExtensions.html#M001039","(n=nil)","Similar to #at_rand!, but given a number will return an array of exclusive elements. ",2],["pick_key","Random::HashExtensions","classes/Random/HashExtensions.html#M001069","()","Alias for #rand_key!",2],["pick_pair","Random::HashExtensions","classes/Random/HashExtensions.html#M001072","()","Alias for #rand_pair!",2],["pico","Numeric::Multipliers","classes/Numeric/Multipliers.html#M000951","()","",2],["plain?","Symbol","classes/Symbol.html#M000660","()","Symbol does not end in `!`, `=`, or `?`. :a.plain?   #=> true :a?.plain?  #=> false :a!.plain?  #=> false",2],["poke","Array","classes/Array.html#M000036","(x, i=0)","Put an object on the bottom of the stack (front of the array). a = [2, 3] a.poke(1) a               #=>",2],["pop","Tuple","classes/Tuple.html#M001150","()","",2],["pos","Indexable","classes/Indexable.html#M000276","(i)","Returns the positive ordinal index given a cardinal position, 1 to n or -n to -1. [1,2,3,4,5].pos(1)",2],["positive?","Numeric","classes/Numeric.html#M000507","()","Is a number greater than zero. ",2],["posix?","Platform","classes/Platform.html#M001066","()","",2],["posix?","RbConfig","classes/RbConfig.html#M001099","()","",2],["pot","Tuple","classes/Tuple.html#M001153","( obj )","Stands for \"Put On Top\". This method is the opposite of #pull and is otherwise known as #unshift. ",2],["pow","Math","classes/Math.html#M000911","(x, y)","+x+ to the power +y+ ",2],["power_set","Array","classes/Array.html#M001103","()","@author Phrogz ",2],["power_set","Set","classes/Set.html#M001100","()","@author Phrogz ",2],["preallocate","Class","classes/Class.html#M000075","(aspect)","Designate aspect modules to be added to a object at instantiation. class Firetruck def put_out_fire(option)",2],["preextend","Module","classes/Module.html#M000487","(aspect)","Prepend an +aspect+ module to a module. This only works at the module level. module ::PreX def x; \"x\";",2],["preflags","Argvector","classes/Argvector.html#M000724","()","Same as +flags+ but only returns flags in the preoptions. ",2],["preoptions","Argvector","classes/Argvector.html#M000723","()","Returns a hash of options that occur before the first operand. This works well with subcommand to get",2],["probability","Array","classes/Array.html#M000032","()","Generates a hash mapping each unique element in the array to the relative frequency, i.e. the probablity,",2],["product","Array","classes/Array.html#M000033","(*enums)","Provides the cartesian product of two or more arrays. a = [1,2].product([4,5]) a  #=> [[1, 4],[1, 5],[2,",2],["profile","Facets","classes/Facets.html#M000710","()","",2],["pstd","Math","classes/Math.html#M000921","(array, &block)","Standard deviation of a population. ",2],["pull","Tuple","classes/Tuple.html#M001152","()","Pulls a value off the beginning of a tuple. This method is otherwsie known as #shift. ",2],["purge","Enumerable","classes/Enumerable.html#M000136","(*trash, &block)","A versitle compaction method. Like #map but used to filter out multiple items in a single step. Without",2],["push","Tuple","classes/Tuple.html#M001151","( obj )","",2],["pvariance","Math","classes/Math.html#M000930","(array)","Variance of a population. Variance of 0 or 1 elements is 0.0. ",2],["quantile","Range","classes/Range.html#M000553","(k, n=100)","Calculate the kth n-tile in a range. If n=4 the quantity is called a quartile, and if n=100 it is called",2],["query?","Symbol","classes/Symbol.html#M000664","()","Symbol ends in `?`. :a?.query? #=> true :a.query?  #=> false ",2],["query_string_to_hash","URI","classes/URI.html#M001155","(query_string)","Alias for #query_to_hash",2],["query_to_hash","URI","classes/URI.html#M001149","(query_string)","Extend the basic query string parser provided by the cgi module. converts single valued params (the most",2],["quote","String","classes/String.html#M000620","(type=:double, count=nil)","Return a new string embraced by given +type+ and +count+ of quotes. The arguments can be given in any",2],["raised?","Exception","classes/Exception.html#M000152","()","Does a block raise an a given +exception+. ",2],["rand_byte","Random::StringExtensions","classes/Random/StringExtensions.html#M001086","()","Return a random byte of _self_. \"Ruby rules\".rand_byte  #~> 121 ",2],["rand_byte!","Random::StringExtensions","classes/Random/StringExtensions.html#M001087","()","Destructive rand_byte. Delete a random byte of _self_ and return it. s = \"Ruby rules\" s.rand_byte!  ",2],["rand_index","Random::ArrayExtensions","classes/Random/ArrayExtensions.html#M001047","()","Random index. ",2],["rand_index","Random::StringExtensions","classes/Random/StringExtensions.html#M001088","()","Return a random string index. \"Ruby rules\".rand_index  #~> 3 ",2],["rand_key","Random::HashExtensions","classes/Random/HashExtensions.html#M001067","()","Returns a random key. {:one => 1, :two => 2, :three => 3}.pick_key  #~> :three ",2],["rand_key!","Random::HashExtensions","classes/Random/HashExtensions.html#M001068","()","Delete a random key-value pair, returning the key. a = {:one => 1, :two => 2, :three => 3} a.rand_key!",2],["rand_pair","Random::HashExtensions","classes/Random/HashExtensions.html#M001070","()","Returns a random key-value pair. {:one => 1, :two => 2, :three => 3}.pick  #~> [:one, 1] ",2],["rand_pair!","Random::HashExtensions","classes/Random/HashExtensions.html#M001071","()","Deletes a random key-value pair and returns that pair. a = {:one => 1, :two => 2, :three => 3} a.rand_pair!",2],["rand_subset","Random::ArrayExtensions","classes/Random/ArrayExtensions.html#M001048","( number=nil, exclusive=true )","Returns a random subset of an Array. If a _number_ of elements is specified then returns that number",2],["rand_value","Random::HashExtensions","classes/Random/HashExtensions.html#M001073","()","Returns a random hash value. {:one => 1, :two => 2, :three => 3}.rand_value  #~> 2 {:one => 1, :two =>",2],["rand_value!","Random::HashExtensions","classes/Random/HashExtensions.html#M001074","()","Deletes a random key-value pair and returns the value. a = {:one => 1, :two => 2, :three => 3} a.at_rand!",2],["random","Random::StringExtensions::Self","classes/Random/StringExtensions/Self.html#M001081","(max_length = 8, char_re = /[\\w\\d]/)","Returns a randomly generated string. One possible use is password initialization. Takes a max legnth",2],["random_binary","String","classes/String.html#M000622","(n_bytes)","Generate a random binary string of +n_bytes+ size. CREDIT: Guido De Rosa ",2],["random_delta","Random::IntegerExtensions","classes/Random/IntegerExtensions.html#M001030","(last, exclude_end)","",2],["random_delta","Random::NumericExtensions","classes/Random/NumericExtensions.html#M001031","(last, exclude_end)","",2],["range","Indexable","classes/Indexable.html#M000280","(a=nil,z=-1)","Returns the index range between two elements. If no elements are given, returns the range from first",2],["range","String","classes/String.html#M000623","(pattern, offset=0)","Like #index but returns a Range. \"This is a test!\".range('test')  #=> (10..13) CREDIT: Trans ",2],["range_all","String","classes/String.html#M000624","(pattern, reuse=false)","Like #index_all but returns an array of Ranges. \"abc123abc123\".range_all('abc')  #=> [0..2, 6..8] TODO:",2],["range_of_line","String","classes/String.html#M000625","()","Returns an array of ranges mapping the characters per line. \"this\\nis\\na\\ntest\".range_of_line #=> [0..4,",2],["rbx?","Platform","classes/Platform.html#M001049","()","Alias for #rubinius?",2],["read","YAML","classes/YAML.html#M001191","(file)","Shortcut for: YAML.load(File.new(file)) ",2],["read_binary","File","classes/File.html#M000162","(fname)","Read in a file as binary data. Assuming we had a binary file 'binary.dat'. File.read_binary('binary.dat')",2],["read_list","File","classes/File.html#M000163","(filepath, options={})","Reads in a file, removes blank lines and removes lines starting with '#' and then returns an array of",2],["reader?","Symbol","classes/Symbol.html#M000661","()","Alias for #plain?",2],["receiver","Method::Composition","classes/Method/Composition.html#M000408","()","",2],["recurse","Array","classes/Array.html#M000037","(*types, &block)","Apply a block to array, and recursively apply that block to each sub-array or +types+. arr = [\"a\", [\"b\",",2],["recurse","Dir","classes/Dir.html#M000100","(path='.', &block)","Recursively scan a directory and pass each file to the given block. Dir.recurse('.') do |path| # ...",2],["recurse!","Array","classes/Array.html#M000038","(&block)","In place form of #recurse. ",2],["recursively","Array","classes/Array.html#M000039","(*types, &block)","Apply a method to array, and recursively apply that method to each sub-array or +types+. arr = [\"a\",",2],["recursively","Enumerable","classes/Enumerable.html#M000138","(*types, &block)","Returns a recursive functor, that allows enumerable methods to iterate through enumerable sub-elements.",2],["redef","Module","classes/Module.html#M000488","(sym, aka=nil, &blk)","Alias for #redefine_method",2],["redefine_method","Module","classes/Module.html#M000486","(sym, aka=nil, &blk)","Creates a new method for a pre-existing method. If _aka_ is given, then the method being redefined will",2],["redirect","Module","classes/Module.html#M000490","( method_hash )","Alias for #redirect_method",2],["redirect_method","Module","classes/Module.html#M000489","( method_hash )","Redirect methods to other methods. This simply defines methods by the name of a hash key which calls",2],["ree?","Platform","classes/Platform.html#M001050","()","",2],["reflect","ObjectSpace","classes/ObjectSpace.html#M000541","(obj)","Reflection ensures that information about an object is actual according to Ruby's Kernel definitions,",2],["reinitialize","Multiton::MetaMethods","classes/Multiton/MetaMethods.html#M000971","()","",2],["reject","Denumerable","classes/Denumerable.html#M000091","()","",2],["relative?","FileTest","classes/FileTest.html#M000174","(path)","The opposite of #absolute? ",2],["rememoize","Memoizable","classes/Memoizable.html#M000934","(*method_names)","Remove the memoized value from the memoization cache. The next time a memoized methos is called if will",2],["rename","Module","classes/Module.html#M000492","( to_sym, from_sym )","Alias for #rename_method",2],["rename_method","Module","classes/Module.html#M000491","( to_sym, from_sym )","Aliases a method and undefines the original. class RenameExample def foo; \"foo\"; end rename_method(:bar,",2],["replace","Struct","classes/Struct.html#M000539","(source)","Struct#replace can take any +source+ that responds to #each_pair. ",2],["reqs","GetoptLong::DSL","classes/GetoptLong/DSL.html#M000834","(*opts)","Alias for #required",2],["required","GetoptLong::DSL","classes/GetoptLong/DSL.html#M000833","(*opts)","",2],["reset","Timer","classes/Timer.html#M001121","()","Stops and resets the timer. If the timer was running returns the total time. If not returns 0. ",2],["reset_limit","Timer","classes/Timer.html#M001122","()","Resets the time limit. Same as: t.stop t.start ",2],["reversed","Interval","classes/Interval.html#M000864","()","Returns a new interval with the sentinels reversed. (0..10).reversed  #=> 10..0 ",2],["revisal","Module","classes/Module.html#M000494","(&blk)","Alias for #revise",2],["revise","Module","classes/Module.html#M000493","(&blk)","Return a new module based on another. This includes the original module into the new revised module.",2],["rewrite","File","classes/File.html#M000164","(name, mode = \"\")","Opens a file as a string and writes back the string to the file at the end of the block. Returns the",2],["rewrite","String","classes/String.html#M000626","(rules)","Apply a set of rules in the form of regular expression matches to the string. * rules - The array containing",2],["rewrite!","File","classes/File.html#M000166","(name, mode = \"\")","In place version of #rewrite. This version of method requires that the string be modified in place within",2],["rindex","Tuple","classes/Tuple.html#M001147","()","",2],["rmd","Math","classes/Math.html#M000913","(array)","Calculates the relative mean difference of this sample. Makes use of the fact that the Gini Coefficient",2],["roman","Integer","classes/Integer.html#M000565","()","Converts this integer to a roman numeral. NOTE: This method is not a common core extension and is not",2],["root","Math","classes/Math.html#M000912","(x, y)","The +y+ root of +x+. ",2],["root","Pathname","classes/Pathname.html#M000993","()","Root constant for building paths from root directory onward. ",2],["root?","FileTest","classes/FileTest.html#M000176","(dir=nil)","Is the specified directory the root directory? CREDIT: Jeffrey Schwab ",2],["rootname","File","classes/File.html#M000165","(path)","Returns only the first portion of the directory of a file path name. File.rootname('lib/jump.rb')  #=>",2],["rootname","Pathname","classes/Pathname.html#M001002","()","",2],["rotate","Array","classes/Array.html#M000040","(n=1)","Rotates an array's elements from back to front n times. [1,2,3].rotate      #=> [2,3,1] [2,3,1].rotate",2],["rotate!","Array","classes/Array.html#M000041","(n=1)","Same as #rotate, but acts in place. a = [1,2,3] a.rotate! a  #=> [2,3,1] CREDIT: Florian Gross, Thomas",2],["round","Math","classes/Math.html#M000914","(x)","Round number to an integer. ",2],["round_at","Float","classes/Float.html#M000511","( d )","Rounds to the given decimal position. 4.555.round_at(0)  #=> 5.0 4.555.round_at(1)  #=> 4.6 4.555.round_at(2)",2],["round_at","Numeric","classes/Numeric.html#M000509","(*args)","Conceptually, rounding is expected to apply to floating point numbers. However it can actually be applied",2],["round_to","Float","classes/Float.html#M000512","( n )","Rounds to the nearest _n_th degree. 4.555.round_to(1)     #=> 5.0 4.555.round_to(0.1)   #=> 4.6 4.555.round_to(0.01)",2],["round_to","Numeric","classes/Numeric.html#M000510","(*args)","See Float#round_to. ",2],["round_to","Time","classes/Time.html#M000676","(seconds)","Round time at the nearest range (in seconds). t1 = Time.now t2 = t1.round_to(60*60) t2.min #=> 0 t2.sec",2],["rubinius?","Platform","classes/Platform.html#M001046","()","",2],["ruby?","Platform","classes/Platform.html#M001043","()","Alias for #mri?",2],["run","Shellwords","classes/Shellwords.html#M001105","(argv, opts)","The coolest little arguments parser in all of Rubyland. CREDIT: Michel Martens ",2],["running?","Timer","classes/Timer.html#M001123","()","Queries whether the timer is still running. ",2],["safe?","FileTest","classes/FileTest.html#M000177","(path)","Is a path considered reasonably \"safe\"? Do not mistake this for a perfect solution! ",2],["safe_ln","FileUtils","classes/FileUtils.html#M000817","(*args)","Attempt to do a normal file link, but fall back to a copy if the link fails. CREDIT: Jim Weirich ",2],["salted_base64digest","Digest::Class","classes/Digest/Class.html#M000760","(str, salt=:auto, *args)","CREDIT: Guido De Rosa ",2],["salted_base64digest","Digest::Instance","classes/Digest/Instance.html#M000755","(str, salt)","CREDIT: Guido De Rosa ",2],["salted_digest","Digest::Class","classes/Digest/Class.html#M000758","(str, salt=:auto, *args)","CREDIT: Guido De Rosa ",2],["salted_digest","Digest::Instance","classes/Digest/Instance.html#M000753","(str='', salt=:auto)","CREDIT: Guido De Rosa ",2],["salted_hexdigest","Digest::Class","classes/Digest/Class.html#M000759","(str, salt=:auto, *args)","CREDIT: Guido De Rosa ",2],["salted_hexdigest","Digest::Instance","classes/Digest/Instance.html#M000754","(str, salt)","CREDIT: Guido De Rosa ",2],["sanitize","File","classes/File.html#M000167","(filename)","Cleans up a filename to ensure it will work on a filesystem. File.sanitize(\"yo+baby!\")   #=> 'yo+baby_'",2],["scan_before","StringScanner","classes/StringScanner.html#M001109","(pattern, scan_anyway = false)","scans string until +pattern+ is encountered. If +pattern+ will not be encountered then it returns _nil_",2],["sec","Math","classes/Math.html#M000915","(x)","Secans of +x+. ",2],["sech","Math","classes/Math.html#M000916","(x)","Secans hyperbolicus of +x+ ",2],["seconds_since_midnight","DateTime","classes/DateTime.html#M000776","()","Seconds since midnight: DateTime.now.seconds_since_midnight ",2],["select","Denumerable","classes/Denumerable.html#M000089","()","",2],["select","Find","classes/Find.html#M000831","(*paths, &block)","Identical to find except select returns the matching files as an array. (find returns nil, which is not",2],["select!","Array","classes/Array.html#M000042","()","As with #select but modifies the Array in place. a = [1,2,3,4,5,6,7,8,9,10] a.select!{ |e| e % 2 == 0",2],["self","Binding","classes/Binding.html#M000060","()","Returns self of the binding's context. ",2],["sentinels","Interval","classes/Interval.html#M000841","()","Returns a two element array of first and last sentinels. (0..10).sentinels   #=> [0,10] ",2],["set","Module","classes/Module.html#M000495","(option, value=self, &block)","Sets an option to the given value. If the value is a proc, the proc will be called every time the option",2],["set","Time","classes/Time.html#M000675","(options)","Like change but does not reset earlier times. NOTE: It would be better, probably if this were called",2],["setter?","Symbol","classes/Symbol.html#M000662","()","Symbol ends in `=`. :a=.setter? #=> true :a.setter?  #=> false ",2],["shatter","String","classes/String.html#M000627","( re )","Breaks a string up into an array based on a regular expression. Similar to scan, but includes the matches.",2],["shelljoin","Array","classes/Array.html#M001107","()","",2],["shellwords","Array","classes/Array.html#M001106","()","Convert an array into command line parameters. The array is accepted in the format of Ruby method arguments",2],["shift","Time","classes/Time.html#M000677","(*time_units)","Returns a new Time representing the time shifted by the time-units given. Positive number shift the time",2],["shift","Tuple","classes/Tuple.html#M001159","()","Alias for #pull",2],["shuffle","Random::ArrayExtensions","classes/Random/ArrayExtensions.html#M001060","()","Randomize the order of an array. [1,2,3,4].shuffle  #~> [2,4,1,3] ",2],["shuffle","Random::HashExtensions","classes/Random/HashExtensions.html#M001078","()","Returns a copy of the hash with _values_ arranged in new random order. h = {:a=>1, :b=>2, :c=>3} h.shuffle",2],["shuffle","Random::StringExtensions","classes/Random/StringExtensions.html#M001095","(separator=//)","Return the string with seperated sections arranged in a random order. The default seperation is by character.",2],["shuffle!","Random::ArrayExtensions","classes/Random/ArrayExtensions.html#M001061","()","As with #shuffle but modifies the array in place. The algorithm used here is known as a Fisher-Yates",2],["shuffle!","Random::HashExtensions","classes/Random/HashExtensions.html#M001079","()","Destructive shuffle_hash. Arrange the values in a new random order. h = {:a => 1, :b => 2, :c => 3} h.shuffle!",2],["shuffle!","Random::StringExtensions","classes/Random/StringExtensions.html#M001096","(separator=//)","In place version of shuffle. ",2],["sign","Math","classes/Math.html#M000917","(x)","Sign of +x+. Returns -1 for negative x, +1 for positive x and zero for x = 0  ",2],["similarity","String","classes/String.html#M000628","(str_in)","A fuzzy matching mechanism. Returns a score from 0-1, based on the number of shared edges. To be effective,",2],["sinc","Math","classes/Math.html#M000918","(x)","Sinc function of +x+. ",2],["since","Date","classes/Date.html#M000763","(seconds)","Converts Date to a Time (or DateTime if necessary) with the time portion set to the beginning of the",2],["since","DateTime","classes/DateTime.html#M000780","(seconds)","Returns a new DateTime representing the time a number of seconds since the instance time Do not use this",2],["singleton?","Class","classes/Class.html#M000076","()","Return true if a class is the singleton class of an object. @uncommon require 'facets/class/singleton'",2],["singleton_method_added","Module::InstanceFunction","classes/Module/InstanceFunction.html#M000452","(meth)","",2],["singleton_method_added","Multiton::MetaMethods","classes/Multiton/MetaMethods.html#M000974","(sym)","",2],["singleton_method_defined?","Module","classes/Module.html#M000455","(meth)","Query whether a normal (singleton) method is defined for the module. CREDIT: Gavin Sinclair, Noah Gibbs",2],["size","Interval","classes/Interval.html#M000867","()","Alias for #distance",2],["size","Tuple","classes/Tuple.html#M001138","()","",2],["skip","Denumerable","classes/Denumerable.html#M000094","(n)","Skip the first n items in the list ",2],["slice","FileUtils","classes/FileUtils.html#M000818","(filename,from,to)","In block form, yields lines +from+-+to+.  In non-block form, returns an array of lines +from+-+to+: #",2],["snakecase","String","classes/String.html#M000629","()","Underscore a string such that camelcase, dashes and spaces are replaced by underscores. This is the reverse",2],["solaris?","Platform","classes/Platform.html#M001064","()","",2],["solaris?","RbConfig","classes/RbConfig.html#M001097","()","",2],["spacename","Module","classes/Module.html#M000497","()","Returns the name of module's container module. module ::SpaceName class Example end end SpaceName::Example.name",2],["spacing","Numeric","classes/Numeric.html#M000513","()","Returns the size of the string representation of a numerical value. 1.spacing   #=> 1 10.spacing   #=>",2],["splice","Array","classes/Array.html#M000043","(*args)","Splice acts a combination of #slice! and #store. If two arguments are given it calls #store. If a single",2],["splice","String","classes/String.html#M000633","(idx, sub=nil)","String#slice is essentially the same as #store. a = \"HELLO\" a.splice(1, \"X\") a                #=> \"HXLLO\"",2],["split","Array","classes/Array.html#M000044","(pattern)","Split on matching pattern. Unlike #divide this does not include matching elements. ['a1','a2','b1','a3','b2','a4'].split(/^b/)",2],["split_all","File","classes/File.html#M000168","(path)","Splits a file path into an array of individual path components. This differs from <tt>File.split</tt>,",2],["split_root","File","classes/File.html#M000169","(path)","Return the head of path from the rest of the path. File.split_root('etc/xdg/gtk')  #=> ['etc', 'xdg/gtk']",2],["split_root","Pathname","classes/Pathname.html#M001003","()","",2],["sqr","Math","classes/Math.html#M000919","(x)","Square of number. ",2],["sqsolve","Math","classes/Math.html#M000923","(a, b, c, d = 0.0)","Returns array of real solution of <code>ax**2 + bx + c = d</code> or <code>nil</code> if no or an infinite",2],["squish","String","classes/String.html#M000631","()","Returns the string, first removing all whitespace on both ends of the string, and then changing remaining",2],["squish!","String","classes/String.html#M000632","()","Performs a destructive squish. See String#squish. ",2],["stage","FileUtils","classes/FileUtils.html#M000821","(stage_directory, source_directory, files, options={})","Stage by hard linking included files to a stage directory. stage_directory   -  Where to stage the files",2],["stage","FileUtils::DryRun","classes/FileUtils/DryRun.html#M000824","(stage_directory, files, options={})","",2],["stage","FileUtils::NoWrite","classes/FileUtils/NoWrite.html#M000822","(stage_directory, files, options={})","",2],["stage","FileUtils::Verbose","classes/FileUtils/Verbose.html#M000823","(stage_directory, files, options={})","",2],["stamp","Date","classes/Date.html#M000756","(format=:default)","Convert to a formatted string. See DATE_FORMATS for predefined formats. This method is aliased to <tt>to_s</tt>.",2],["stamp","DateTime","classes/DateTime.html#M000775","(format=:default)","Convert to a formatted string. See Time::FORMAT for predefined formats. This method is aliased to <tt>to_s</tt>.",2],["stamp","Time","classes/Time.html#M000678","(*args)","Produce time stamp for Time.now. See #stamp. CREDIT: Trans ",2],["stamp","Time","classes/Time.html#M000679","(fmt = nil)","Create a time stamp. t = Time.at(10000) t.stamp(:short)    #=> \"31 Dec 21:46\" Supported formats come",2],["start","Timer","classes/Timer.html#M001116","()","Start the timer. ",2],["start","Timer::Dummy","classes/Timer/Dummy.html#M001127","()","",2],["start_time","Timer","classes/Timer.html#M001113","()","",2],["start_with?","String","classes/String.html#M000634","(prefix)","Does a string start with the given prefix? \"hello\".start_with?(\"he\")    #=> true \"hello\".start_with?(\"to\")",2],["starts_with?","String","classes/String.html#M000636","(prefix)","Alias for #start_with?",2],["std","Math","classes/Math.html#M000920","(array, &block)","Standard deviation of a sample. ",2],["stderr","Math","classes/Math.html#M000922","(array)","Calculates the standard error of a sample. ",2],["step","Interval","classes/Interval.html#M000875","(n=1, d=nil)","",2],["stop","Timer","classes/Timer.html#M001120","()","Stops timer and returns total time. If timer was not running returns false. ",2],["stop","Timer::Dummy","classes/Timer/Dummy.html#M001128","()","",2],["stopped?","Timer","classes/Timer.html#M001124","()","Queries whether the timer is still not running. ",2],["subclasses","Class","classes/Class.html#M000077","()","Returns an array with the direct children of +self+. Integer.subclasses # => [Fixnum, Bignum] ",2],["subcommand","Argvector","classes/Argvector.html#M000720","()","Alias for #subcommand_with_parameters",2],["subcommand_with_arguments","Argvector","classes/Argvector.html#M000722","()","Assumes the first operand is a \"subcommand\" and returns it and the argments following it as another Arguments",2],["subcommand_with_parameters","Argvector","classes/Argvector.html#M000719","()","Assumes the first operand is a \"subcommand\" and returns it and the argments following it as parameters.",2],["subcommand_with_preoptions","Argvector","classes/Argvector.html#M000721","()","",2],["succ","Symbol","classes/Symbol.html#M000666","(n=1)","Successor method for symobol. This simply converts the symbol to a string uses String#succ and then converts",2],["sum","Enumerable","classes/Enumerable.html#M000139","(identity=0, &block)","Uses #+ to sum the enumerated elements. [1,2,3].sum  #=> 6 [3,3,3].sum  #=> 9 @author Dawid Marcin Grzesiak",2],["sum","Math","classes/Math.html#M000924","(array)","Returns sum.  When a block is given, summation is taken over the  each result of block evaluation. ",2],["summed_sqdevs","Math","classes/Math.html#M000925","(array)","The sum of the squared deviations from the mean. ",2],["supported","Platform","classes/Platform.html#M001017","()","Array of supported platforms (ie. pure-Ruby and local platform). ",2],["suppress","Exception","classes/Exception.html#M000154","(*exception_classes)","Supress errors while executing a block, with execptions. CREDIT: David Heinemeier Hansson, Thomas Sawyer",2],["symbian?","Platform","classes/Platform.html#M001065","()","TODO: who knows what symbian returns? ",2],["symbian?","RbConfig","classes/RbConfig.html#M001098","()","TODO: who knows what symbian returns? ",2],["tab","String","classes/String.html#M000638","(n)","Aligns each line n spaces. CREDIT: Gavin Sinclair ",2],["tabto","String","classes/String.html#M000639","(n)","Preserves relative tabbing. The first non-empty line ends up with n spaces before nonspace. CREDIT: Gavin",2],["tail","FileUtils","classes/FileUtils.html#M000820","(filename,lines)","In block form, yields the last number of +lines+ of file +filename+. In non-block form, it returns the",2],["tail","Indexable","classes/Indexable.html#M000246","()","Returns an array from second element to last element. [1,2,3].tail  #=> [2,3] ",2],["take","Denumerable","classes/Denumerable.html#M000092","(n)","Limit to the first n items in the list ",2],["take","Enumerable","classes/Enumerable.html#M000142","(n)","Return the first n items from the collection ",2],["tebi","Numeric::Multipliers","classes/Numeric/Multipliers.html#M000957","()","",2],["teeny","Tuple","classes/Tuple.html#M001169","()","",2],["tera","Numeric::Multipliers","classes/Numeric/Multipliers.html#M000943","()","",2],["tgamma","Math","classes/Math.html#M000926","(x)","Exp of LGamma. ",2],["theil_index","Math","classes/Math.html#M000927","(array)","Calculates the Theil index (a statistic used to measure economic inequality). TI = \\sum_{i=1}^N \\frac{x_i}{\\sum_{j=1}^N",2],["threaded_map","Enumerable","classes/Enumerable.html#M001112","()","Like Enumerable#map but each iteration is processed via a separate thread. CREDIT: Sean O'Halpin ",2],["threaded_map_send","Enumerable","classes/Enumerable.html#M001117","(meth, *args, &block)","Like Enumerable#map_send but each iteration is processed via a separate thread. CREDIT: Sean O'Halpin",2],["thrown?","Symbol","classes/Symbol.html#M000667","()","Does the block throw the symbol? ",2],["thru","Array","classes/Array.html#M000018","(from, to=nil)","Fetch values from a start index thru an end index. [1,2,3,4,5].thru(0,2)  #=> [1,2,3] [1,2,3,4,5].thru(2,4)",2],["thru","Indexable","classes/Indexable.html#M000256","(from, to=nil)","Fetch values from a start index thru an end index. [1,2,3,4,5].thru(0,2)  #=> [1,2,3] [1,2,3,4,5].thru(2,4)",2],["time","Timer","classes/Timer.html#M001126","()","Takes a block and returns the total time it took to execute. ",2],["time_with_datetime_fallback","Time","classes/Time.html#M000793","(utc_or_local, year, month=1, day=1, hour=0, min=0, sec=0, usec=0)","",2],["times_collect","Integer","classes/Integer.html#M000293","(&block)","Alias for #of",2],["times_map","Integer","classes/Integer.html#M000294","(&block)","Alias for #of",2],["titlecase","String","classes/String.html#M000640","()","Transform a string into a form that makes for an acceptable title. \"this is a string\".titlecase #=> \"This",2],["to_a","Enumerable::Arguments","classes/Enumerable/Arguments.html#M000799","(*args)","",2],["to_a","Platform","classes/Platform.html#M001023","()","",2],["to_a","Tuple","classes/Tuple.html#M001135","()","",2],["to_ary","Tuple","classes/Tuple.html#M001136","()","",2],["to_b","Array","classes/Array.html#M000069","()","Boolean conversion for not empty? ",2],["to_b","Numeric","classes/Numeric.html#M000067","()","Provides a boolean interpretation of self. If self == 0 then false else true. 0.to_b    #=> false 1.to_b",2],["to_b","String","classes/String.html#M000068","()","Interpret common affirmative string meanings as true, otherwise nil or false. Blank space and case are",2],["to_bool","FalseClass","classes/FalseClass.html#M000065","()","",2],["to_bool","NilClass","classes/NilClass.html#M000066","()","",2],["to_bool","TrueClass","classes/TrueClass.html#M000064","()","",2],["to_date","Date","classes/Date.html#M000746","()","A method to keep Time, Date and DateTime instances interchangeable on conversions. In this case, it simply",2],["to_date","DateTime","classes/DateTime.html#M000772","()","Converts self to a Ruby Date object; time portion is discarded ",2],["to_date","String","classes/String.html#M000800","()","Parse data from string. ",2],["to_date","Time","classes/Time.html#M000794","()","Converts a Time object to a Date, dropping hour, minute, and second precision. my_time = Time.now  #",2],["to_datetime","Date","classes/Date.html#M000747","()","Converts a Date instance to a DateTime, where the time is set to the beginning of the day and UTC offset",2],["to_datetime","DateTime","classes/DateTime.html#M000774","()","To be able to keep Times, Dates and DateTimes interchangeable on conversions ",2],["to_datetime","String","classes/String.html#M000797","()","Convert string to DateTime. ",2],["to_datetime","Time","classes/Time.html#M000795","()","Converts a Time instance to a Ruby DateTime instance, preserving UTC offset. my_time = Time.now    #",2],["to_f","DateTime","classes/DateTime.html#M000790","()","Converts self to a floating-point number of seconds since the Unix epoch  ",2],["to_f","NilClass","classes/NilClass.html#M000502","()","Allows <tt>nil</tt> to respond to #to_f. Always returns <tt>0</tt>. nil.to_f   #=> 0.0 CREDIT: Matz ",2],["to_h","Array","classes/Array.html#M000687","(mode=nil)","Converts an array into a hash. Converting an array into a hash is not a one-to-one conversion, for this",2],["to_h","Enumerable","classes/Enumerable.html#M000696","(mode=nil)","Convert an Enumerable object into a hash by first turning it into an array. CREDIT: Trans ",2],["to_h","Enumerator","classes/Enumerator.html#M000703","(mode=nil)","Convert an Enumerator object into a hash. This is equivalent to Array#to_h. e1 = [[1,:a],[2,:b],[3,:c]].to_enum",2],["to_h","Instance","classes/Instance.html#M000255","(at=false)","Return instance variables with values as a hash. class X def initialize(a,b) @a, @b = a, b end end x",2],["to_h","NilClass","classes/NilClass.html#M000702","()","Allows <tt>nil</tt> to create an empty hash, similar to #to_a and #to_s. nil.to_h    #=> {} CREDIT: Trans",2],["to_h","OpenStruct","classes/OpenStruct.html#M000985","()","",2],["to_h","Struct","classes/Struct.html#M000709","()","Returns a hash containing the names and values for all instance settings in the Struct. ",2],["to_h_assoc","Array","classes/Array.html#M000692","()","When a mixed or multi-element accociative array is used, the result is as follows: a = [ [:a,1,2], [:b,2],",2],["to_h_assoc","Enumerable","classes/Enumerable.html#M000700","()","",2],["to_h_assoc","Enumerator","classes/Enumerator.html#M000707","()","This is equivalent to Array#to_h_assoc. ",2],["to_h_auto","Array","classes/Array.html#M000688","()","Converts an array into a hash. Converting an array into a hash is not a one-to-one conversion, for this",2],["to_h_auto","Enumerable","classes/Enumerable.html#M000697","()","",2],["to_h_auto","Enumerator","classes/Enumerator.html#M000704","()","This is equivalent to Array#to_h_auto. ",2],["to_h_flat","Array","classes/Array.html#M000690","()","This is equivalent to Hash[*array.flatten], but it will pad the array with a +nil+ object if there are",2],["to_h_flat","Enumerable","classes/Enumerable.html#M000699","()","",2],["to_h_flat","Enumerator","classes/Enumerator.html#M000706","()","This is equivalent to Array#to_h_flat. ",2],["to_h_multi","Array","classes/Array.html#M000693","()","When a mixed or multi-element accociative array is used, the result is as follows: a = [ [:a,1,2], [:b,2],",2],["to_h_multi","Enumerable","classes/Enumerable.html#M000701","()","",2],["to_h_multi","Enumerator","classes/Enumerator.html#M000708","()","This is equivalent to Array#to_h_multi. ",2],["to_h_splat","Array","classes/Array.html#M000689","()","This is equivalent to Hash[*array], but it will pad the array with a +nil+ object if there are not an",2],["to_h_splat","Enumerable","classes/Enumerable.html#M000698","()","",2],["to_h_splat","Enumerator","classes/Enumerator.html#M000705","()","This is equivalent to Array#to_h_splat. ",2],["to_hash","Instance","classes/Instance.html#M000258","(at=false)","Alias for #to_h",2],["to_method","Proc","classes/Proc.html#M000547","(object, name=nil)","Convert Proc to method. object = Object.new function = lambda { |x| x + 1 } function.to_method(object,",2],["to_obj","Module","classes/Module.html#M000496","()","Create an instance of Object and extend it with +self+. mod = Module.new do def foo; \"foo\"; end end obj",2],["to_ostruct","NilClass","classes/NilClass.html#M001006","()","Create an empty OpenStruct object. ",2],["to_ostruct","OpenStruct","classes/OpenStruct.html#M001000","()","",2],["to_path","Array","classes/Array.html#M001016","()","Convert array to Pathname instance. @standard require 'facets/pathname' ",2],["to_path","NilClass","classes/NilClass.html#M001015","()","Provide platform dependent null path. @standard require 'facets/pathname' @author Daniel Burger ",2],["to_proc","Class","classes/Class.html#M000078","()","Convert instatiation of a class into a Proc. class Person def initialize(name) @name = name end def inspect",2],["to_proc","Functor","classes/Functor.html#M000180","()","",2],["to_proc","Method::Composition","classes/Method/Composition.html#M000411","()","",2],["to_proc","Symbol","classes/Symbol.html#M000668","()","Turn a symbol into a proc calling the method to which it refers. up = :upcase.to_proc up.call(\"hello\")",2],["to_r","Range","classes/Range.html#M000554","()","A thing really should know itself. This simply returns _self_. CREDIT: Trans ",2],["to_range","Range","classes/Range.html#M000555","()","A thing really should know itself. This simply returns _self_. Note: This does not internally effect",2],["to_re","Regexp","classes/Regexp.html#M000563","(esc=false)","Simply returns itself. Helpful when converting strings to regular expressions, where regexp might occur",2],["to_re","String","classes/String.html#M000642","(esc=false)","Turns a string into a regular expression. \"a?\".to_re  #=> /a?/ CREDIT: Trans ",2],["to_regexp","Regexp","classes/Regexp.html#M000562","()","Like #to_re, but following Ruby's formal definitions, only a Regular expression type object will respond",2],["to_rx","String","classes/String.html#M000643","(esc=true)","Turns a string into a regular expression. By default it will escape all characters. Use <tt>false</tt>",2],["to_s","Platform","classes/Platform.html#M001024","()","",2],["to_s","Tuple","classes/Tuple.html#M001137","(divider=nil)","",2],["to_t","Array","classes/Array.html#M001184","()","Convert an array into a tuple. ",2],["to_t","String","classes/String.html#M001183","( &yld )","Translates a string in the form on a set of numerical and/or alphanumerical characters separated by non-word",2],["to_t","Tuple","classes/Tuple.html#M001133","()","",2],["to_time","Date","classes/Date.html#M000748","(form=:local)","Converts a Date instance to a Time, where the time is set to the beginning of the day. The timezone can",2],["to_time","DateTime","classes/DateTime.html#M000773","()","Attempts to convert self to a Ruby Time object; returns self if out of range of Ruby Time class. If self",2],["to_time","String","classes/String.html#M000796","(form = :utc)","",2],["to_time","Time","classes/Time.html#M000684","()","To be able to keep Dates and Times interchangeable on conversions. ",2],["to_tuple","Tuple","classes/Tuple.html#M001134","()","",2],["to_uri","URI::Hash","classes/URI/Hash.html#M001182","()","",2],["tomorrow","Date","classes/Date.html#M000744","()","Returns a new Date representing the date 1 day after today (i.e. tomorrow's date). ",2],["tomorrow","Date","classes/Date.html#M000768","()","Convenience method which returns a new Date/DateTime representing the time 1 day since the instance time.",2],["total_time","Timer","classes/Timer.html#M001125","()","Queries total recorded time of timer. ",2],["traverse","Array","classes/Array.html#M000045","(&block)","Returns a new array created by traversing the array and its sub-arrays, executing the given block on",2],["traverse!","Array","classes/Array.html#M000046","(&block)","Like #recursive_map, but will change the array in place. h = [\"A\", \"B\", [\"X\", \"Y\"]] h.traverse!{ |e|",2],["trunc","Time","classes/Time.html#M000685","(amount)","Truncate time at give range (in seconds). t = Time.now t = t.trunc(60*60) t.min #=> 0 t.sec #=> 0 ",2],["try","NilClass","classes/NilClass.html#M000382","(method=nil, *args)","See Kernel#try. ",2],["umbrella","Range","classes/Range.html#M000557","(r)","Returns a two element array of the relationship between two Ranges. Diagram ... Relationship     Returns",2],["unbracket","String","classes/String.html#M000574","(bra=nil, ket=nil)","Return a new string with the given brackets removed. If only one bracket char is given it will be removed",2],["unbracket!","String","classes/String.html#M000575","(bra=nil, ket=nil)","Inplace version of #unbracket. CREDIT: Trans ",2],["underscore","String","classes/String.html#M000630","()","Alias for #snakecase",2],["unfold","String","classes/String.html#M000644","()","Unfold paragrpahs. FIXME: Sometimes adds one too many blank lines. TEST!!! ",2],["unindent","String","classes/String.html#M000602","(size=nil)","Remove excessive indentation. Useful for multi-line strings embeded in already indented code. <<-END.unindent",2],["unindent!","String","classes/String.html#M000603","()","Equivalent to String#unindent, but modifies the receiver in place. CREDIT: mynyml ",2],["uniq_by","Enumerable","classes/Enumerable.html#M000143","()","Like #uniq, but determines uniqueness based on a given block. (-5..5).to_a.uniq_by {|i| i*i } #=> [-5,",2],["uniq_by!","Array","classes/Array.html#M000047","()","Like #uniq, but determines uniqueness based on a given block. a = (-5..5).to_a a.uniq_by!{ |i| i*i }",2],["unmemoize","Memoizable","classes/Memoizable.html#M000935","(*method_names)","",2],["unquote","String","classes/String.html#M000621","()","Remove quotes from string. \"'hi'\".unquote    #=> \"hi\" CREDIT: Trans ",2],["unshift","Tuple","classes/Tuple.html#M001154","( obj )","Alias for #pot",2],["unuri","URI::Kernel","classes/URI/Kernel.html#M001181","(s)","",2],["upcase?","String","classes/String.html#M000580","()","Is the string upcase/uppercase? \"THIS\".upcase?  #=> true \"This\".upcase?  #=> false \"this\".upcase?  #=>",2],["update","Instance","classes/Instance.html#M000265","(hash)","Set instance variables given a +hash+. instance.update('@a'=>1, '@b'=>2) @a   #=> 1 @b   #=> 2 Also,",2],["update_query_string","URI","classes/URI.html#M001175","(uri, parameters)","Get a uri and a hash of parameters. Inject the hash values as parameters in the query sting path. Returns",2],["update_request_uri","URI","classes/URI.html#M001179","(request, parameters)","Gets the request uri, injects extra parameters in the query string and returns a new uri. The request",2],["upper_camelcase","String","classes/String.html#M000581","(*separators)","Same as +#camelcase+ but converts first letter to uppercase. \"camel_case\".upper_camelcase   #=> \"CamelCase\"",2],["uppercase","String","classes/String.html#M000645","()","Upcase first letter. NOTE: One might argue that this method should behave the same as +#upcase+ and rather",2],["uptodate?","Pathname","classes/Pathname.html#M001011","(*sources)","",2],["uri","URI::Kernel","classes/URI/Kernel.html#M001180","(s, w=%r{[^a-zA-Z_0-9./-]})","",2],["utc","DateTime","classes/DateTime.html#M000785","()","Adjusts DateTime to UTC by adding its offset value; offset is set to 0 Example: DateTime.civil(2005,2,21,10,11,12,Rational(-6,",2],["utc?","DateTime","classes/DateTime.html#M000787","()","Returns true if offset == 0 ",2],["utc_offset","DateTime","classes/DateTime.html#M000788","()","Returns the offset value in seconds ",2],["utc_time","Time","classes/Time.html#M000792","(*args)","",2],["values","Instance","classes/Instance.html#M000274","()","Instance variable values. ",2],["values","Tuple","classes/Tuple.html#M001131","()","def divider( set=nil ) return @divider unless set @divider = set self end ",2],["variables","Instance","classes/Instance.html#M000267","()","Same as #instance_variables. ",2],["variablize","String","classes/String.html#M000647","()","Prepend an \"@\" to the beginning of a string to make a instance variable name. This also replaces non-valid",2],["variablize","Symbol","classes/Symbol.html#M000669","()","Prepend an \"@\" to the beginning of a symbol to make a instance variable name. This also replaces non-valid",2],["variance","Math","classes/Math.html#M000928","(array, &block)","",2],["variance2","Math","classes/Math.html#M000929","(array)","Variance of the sample. Variance of 0 or 1 elements is 0.0. TODO: Same as #variance? Then choose one.",2],["visit","Enumerable","classes/Enumerable.html#M000144","(opts={}, &block)","Recursively iterate over all Enumerable elements, or subset given :type=>[type1, type2, ...]. [1, 2,",2],["visit","Pathname","classes/Pathname.html#M001013","(options = {:all => false, :hidden => false})","Recursively visit a directory located by its path, yielding each resource as its full matching pathname",2],["wc","FileUtils","classes/FileUtils.html#M000825","(filename,option='all')","With no arguments, returns a four element array consisting of the number of bytes, characters, words",2],["whereis","FileUtils","classes/FileUtils.html#M000826","(prog, path=ENV['PATH'])","In block form, yields each ((*program*)) within ((*path*)).  In non-block form, returns an array of each",2],["which","FileUtils","classes/FileUtils.html#M000827","(prog, path=ENV['PATH'])","Looks for the first occurrence of _program_ within _path_. On the MS Windows platform, it looks for executables",2],["windows?","Platform","classes/Platform.html#M001063","()","",2],["windows?","RbConfig","classes/RbConfig.html#M001094","()","",2],["with","Binding","classes/Binding.html#M000059","(_local_variables, &_yields)","Returns a new binding with local varaibles set. CREDIT: Trans ",2],["within?","Range","classes/Range.html#M000556","(rng)","Uses the Range#umbrella method to determine if another Range is _anywhere_ within this Range. (1..3).within?(0..4)",2],["word_wrap","String","classes/String.html#M000649","( col_width=80 )","Word wrap a string not exceeding max width. \"this is a test\".word_wrap(4) _produces_ ... this is a test",2],["word_wrap!","String","classes/String.html#M000650","( col_width=80 )","As with #word_wrap, but modifies the string in place. CREDIT: Gavin Kistner, Dayne Broderson ",2],["words","String","classes/String.html#M000648","()","Returns an array of characters. \"abc 123\".words  #=> [\"abc\",\"123\"] ",2],["work","Pathname","classes/Pathname.html#M000998","()","Work constant for building paths from root directory onward. ",2],["wrap","Module","classes/Module.html#M000499","( sym, &blk )","Alias for #wrap_method",2],["wrap_enumerable_method","Enumerable::Arguments","classes/Enumerable/Arguments.html#M000798","( methodname )","",2],["wrap_method","Module","classes/Module.html#M000498","( sym, &blk )","Creates a new method wrapping the previous of the same name. Reference to the old method is passed into",2],["write","File","classes/File.html#M000170","(path, data)","Writes the given data to the given path and closes the file.  This is done in binary mode, complementing",2],["writelines","File","classes/File.html#M000171","(path, data)","Writes the given array of data to the given path and closes the file. This is done in binary mode, complementing",2],["writer?","Symbol","classes/Symbol.html#M000663","()","Alias for #setter?",2],["xmlschema","Date","classes/Date.html#M000749","()","",2],["xmlschema","DateTime","classes/DateTime.html#M000789","()","Converts datetime to an appropriate format for use in XML ",2],["yaml?","File","classes/File.html#M001190","(file)","File.yaml? provides a way to check if a file is a YAML formatted file: File.yaml?('project.yaml')  #=>",2],["yesterday","Date","classes/Date.html#M000767","()","Convenience method which returns a new Date/DateTime representing the time 1 day ago. ",2],["yesterday","Date","classes/Date.html#M000743","()","Returns a new Date representing the date 1 day ago (i.e. yesterday's date). ",2],["zip_map","Enumerable","classes/Enumerable.html#M000128","(*arrays, &block)","Alias for #map_with",2],["|","Regexp","classes/Regexp.html#M000560","(other)","Operator form of `Regexp.union`. /a/ | /b/  #=> /(?-mix:a)|(?-mix:b)/ If +other+ is not a Regexp it is",2],["~","Interval","classes/Interval.html#M000863","()","",2],["~","Symbol","classes/Symbol.html#M000658","()","Add a \"not\" sign to the front of a symbol. (~:friend)  #=> :\"~friend\" CREDIT: Trans ",2],["HISTORY.rdoc","files/HISTORY_rdoc.html","files/HISTORY_rdoc.html","","= Facets Release History  == 2.9.3 / 2011-12-31  Happy New Year! Ruby Facets kicks off the year with",3],["NOTICE.rdoc","files/NOTICE_rdoc.html","files/NOTICE_rdoc.html","","= COPYRIGHT NOTICES  == Ruby Facets  Copyright:: (c) 2005,2011 Thomas Sawyer    Copyright (c) 2005,2011",3],["README.rdoc","files/README_rdoc.html","files/README_rdoc.html","","= Ruby Facets  \"ALL YOUR BASE ARE BELONG TO RUBY\"   == Introduction  Ruby Facets is the premiere collection",3],["RUBY.txt","files/RUBY_txt.html","files/RUBY_txt.html","","  Ruby Facets   Copyright (c) 2005,2010 Thomas Sawyer    THE RUBY LICENSE  (http://www.ruby-lang.org/en/LICENSE.txt)",3],["facets.rb","files/lib/core/facets_rb.html","files/lib/core/facets_rb.html","","",3],["facets.yml","files/lib/core/facets_yml.html","files/lib/core/facets_yml.html","","--- authors: - name: Thomas Sawyer   email: transfire@gmail.com copyrights: - holder: Thomas Sawyer ",3],["file_helpers.rb","files/lib/core/facets/applique/file_helpers_rb.html","files/lib/core/facets/applique/file_helpers_rb.html","","",3],["array.rb","files/lib/core/facets/array_rb.html","files/lib/core/facets/array_rb.html","","",3],["after.rb","files/lib/core/facets/array/after_rb.html","files/lib/core/facets/array/after_rb.html","","",3],["before.rb","files/lib/core/facets/array/before_rb.html","files/lib/core/facets/array/before_rb.html","","",3],["collapse.rb","files/lib/core/facets/array/collapse_rb.html","files/lib/core/facets/array/collapse_rb.html","","",3],["collisions.rb","files/lib/core/facets/array/collisions_rb.html","files/lib/core/facets/array/collisions_rb.html","","",3],["combination.rb","files/lib/core/facets/array/combination_rb.html","files/lib/core/facets/array/combination_rb.html","","",3],["commonality.rb","files/lib/core/facets/array/commonality_rb.html","files/lib/core/facets/array/commonality_rb.html","","",3],["conjoin.rb","files/lib/core/facets/array/conjoin_rb.html","files/lib/core/facets/array/conjoin_rb.html","","",3],["contains.rb","files/lib/core/facets/array/contains_rb.html","files/lib/core/facets/array/contains_rb.html","","",3],["delete.rb","files/lib/core/facets/array/delete_rb.html","files/lib/core/facets/array/delete_rb.html","","Here for backward compatability. To be deprecated. ",3],["delete_unless.rb","files/lib/core/facets/array/delete_unless_rb.html","files/lib/core/facets/array/delete_unless_rb.html","","",3],["delete_values.rb","files/lib/core/facets/array/delete_values_rb.html","files/lib/core/facets/array/delete_values_rb.html","","",3],["divide.rb","files/lib/core/facets/array/divide_rb.html","files/lib/core/facets/array/divide_rb.html","","",3],["duplicates.rb","files/lib/core/facets/array/duplicates_rb.html","files/lib/core/facets/array/duplicates_rb.html","","",3],["each_pair.rb","files/lib/core/facets/array/each_pair_rb.html","files/lib/core/facets/array/each_pair_rb.html","","",3],["each_value.rb","files/lib/core/facets/array/each_value_rb.html","files/lib/core/facets/array/each_value_rb.html","","",3],["entropy.rb","files/lib/core/facets/array/entropy_rb.html","files/lib/core/facets/array/entropy_rb.html","","",3],["extract_options.rb","files/lib/core/facets/array/extract_options_rb.html","files/lib/core/facets/array/extract_options_rb.html","","",3],["from.rb","files/lib/core/facets/array/from_rb.html","files/lib/core/facets/array/from_rb.html","","",3],["index.rb","files/lib/core/facets/array/index_rb.html","files/lib/core/facets/array/index_rb.html","","",3],["indexable.rb","files/lib/core/facets/array/indexable_rb.html","files/lib/core/facets/array/indexable_rb.html","","",3],["median.rb","files/lib/core/facets/array/median_rb.html","files/lib/core/facets/array/median_rb.html","","",3],["merge.rb","files/lib/core/facets/array/merge_rb.html","files/lib/core/facets/array/merge_rb.html","","",3],["mode.rb","files/lib/core/facets/array/mode_rb.html","files/lib/core/facets/array/mode_rb.html","","",3],["nonuniq.rb","files/lib/core/facets/array/nonuniq_rb.html","files/lib/core/facets/array/nonuniq_rb.html","","",3],["not_empty.rb","files/lib/core/facets/array/not_empty_rb.html","files/lib/core/facets/array/not_empty_rb.html","","",3],["occurent.rb","files/lib/core/facets/array/occurent_rb.html","files/lib/core/facets/array/occurent_rb.html","","",3],["only.rb","files/lib/core/facets/array/only_rb.html","files/lib/core/facets/array/only_rb.html","","",3],["op_pow.rb","files/lib/core/facets/array/op_pow_rb.html","files/lib/core/facets/array/op_pow_rb.html","","",3],["pad.rb","files/lib/core/facets/array/pad_rb.html","files/lib/core/facets/array/pad_rb.html","","",3],["peek.rb","files/lib/core/facets/array/peek_rb.html","files/lib/core/facets/array/peek_rb.html","","",3],["permutation.rb","files/lib/core/facets/array/permutation_rb.html","files/lib/core/facets/array/permutation_rb.html","","",3],["poke.rb","files/lib/core/facets/array/poke_rb.html","files/lib/core/facets/array/poke_rb.html","","",3],["probability.rb","files/lib/core/facets/array/probability_rb.html","files/lib/core/facets/array/probability_rb.html","","",3],["product.rb","files/lib/core/facets/array/product_rb.html","files/lib/core/facets/array/product_rb.html","","",3],["pull.rb","files/lib/core/facets/array/pull_rb.html","files/lib/core/facets/array/pull_rb.html","","",3],["recurse.rb","files/lib/core/facets/array/recurse_rb.html","files/lib/core/facets/array/recurse_rb.html","","",3],["recursively.rb","files/lib/core/facets/array/recursively_rb.html","files/lib/core/facets/array/recursively_rb.html","","",3],["rotate.rb","files/lib/core/facets/array/rotate_rb.html","files/lib/core/facets/array/rotate_rb.html","","",3],["select.rb","files/lib/core/facets/array/select_rb.html","files/lib/core/facets/array/select_rb.html","","",3],["splice.rb","files/lib/core/facets/array/splice_rb.html","files/lib/core/facets/array/splice_rb.html","","",3],["split.rb","files/lib/core/facets/array/split_rb.html","files/lib/core/facets/array/split_rb.html","","",3],["store.rb","files/lib/core/facets/array/store_rb.html","files/lib/core/facets/array/store_rb.html","","",3],["thru.rb","files/lib/core/facets/array/thru_rb.html","files/lib/core/facets/array/thru_rb.html","","",3],["traverse.rb","files/lib/core/facets/array/traverse_rb.html","files/lib/core/facets/array/traverse_rb.html","","",3],["uniq_by.rb","files/lib/core/facets/array/uniq_by_rb.html","files/lib/core/facets/array/uniq_by_rb.html","","",3],["binding.rb","files/lib/core/facets/binding_rb.html","files/lib/core/facets/binding_rb.html","","",3],["__callee__.rb","files/lib/core/facets/binding/__callee___rb.html","files/lib/core/facets/binding/__callee___rb.html","","",3],["__method__.rb","files/lib/core/facets/binding/__method___rb.html","files/lib/core/facets/binding/__method___rb.html","","",3],["call_stack.rb","files/lib/core/facets/binding/call_stack_rb.html","files/lib/core/facets/binding/call_stack_rb.html","","",3],["caller.rb","files/lib/core/facets/binding/caller_rb.html","files/lib/core/facets/binding/caller_rb.html","","",3],["callstack.rb","files/lib/core/facets/binding/callstack_rb.html","files/lib/core/facets/binding/callstack_rb.html","","",3],["defined.rb","files/lib/core/facets/binding/defined_rb.html","files/lib/core/facets/binding/defined_rb.html","","",3],["eval.rb","files/lib/core/facets/binding/eval_rb.html","files/lib/core/facets/binding/eval_rb.html","","",3],["local_variables.rb","files/lib/core/facets/binding/local_variables_rb.html","files/lib/core/facets/binding/local_variables_rb.html","","",3],["op.rb","files/lib/core/facets/binding/op_rb.html","files/lib/core/facets/binding/op_rb.html","","This file is here for backward compatibility only. It can be deprecated eventually. ",3],["op_get.rb","files/lib/core/facets/binding/op_get_rb.html","files/lib/core/facets/binding/op_get_rb.html","","",3],["op_set.rb","files/lib/core/facets/binding/op_set_rb.html","files/lib/core/facets/binding/op_set_rb.html","","",3],["self.rb","files/lib/core/facets/binding/self_rb.html","files/lib/core/facets/binding/self_rb.html","","",3],["with.rb","files/lib/core/facets/binding/with_rb.html","files/lib/core/facets/binding/with_rb.html","","",3],["boolean.rb","files/lib/core/facets/boolean_rb.html","files/lib/core/facets/boolean_rb.html","","",3],["class.rb","files/lib/core/facets/class_rb.html","files/lib/core/facets/class_rb.html","","",3],["descendants.rb","files/lib/core/facets/class/descendants_rb.html","files/lib/core/facets/class/descendants_rb.html","","",3],["hierarchically.rb","files/lib/core/facets/class/hierarchically_rb.html","files/lib/core/facets/class/hierarchically_rb.html","","",3],["methodize.rb","files/lib/core/facets/class/methodize_rb.html","files/lib/core/facets/class/methodize_rb.html","","",3],["pathize.rb","files/lib/core/facets/class/pathize_rb.html","files/lib/core/facets/class/pathize_rb.html","","",3],["preallocate.rb","files/lib/core/facets/class/preallocate_rb.html","files/lib/core/facets/class/preallocate_rb.html","","",3],["singleton.rb","files/lib/core/facets/class/singleton_rb.html","files/lib/core/facets/class/singleton_rb.html","","",3],["subclasses.rb","files/lib/core/facets/class/subclasses_rb.html","files/lib/core/facets/class/subclasses_rb.html","","",3],["to_proc.rb","files/lib/core/facets/class/to_proc_rb.html","files/lib/core/facets/class/to_proc_rb.html","","",3],["comparable.rb","files/lib/core/facets/comparable_rb.html","files/lib/core/facets/comparable_rb.html","","",3],["at_least.rb","files/lib/core/facets/comparable/at_least_rb.html","files/lib/core/facets/comparable/at_least_rb.html","","",3],["at_most.rb","files/lib/core/facets/comparable/at_most_rb.html","files/lib/core/facets/comparable/at_most_rb.html","","",3],["bound.rb","files/lib/core/facets/comparable/bound_rb.html","files/lib/core/facets/comparable/bound_rb.html","","",3],["cap.rb","files/lib/core/facets/comparable/cap_rb.html","files/lib/core/facets/comparable/cap_rb.html","","",3],["clip.rb","files/lib/core/facets/comparable/clip_rb.html","files/lib/core/facets/comparable/clip_rb.html","","",3],["cmp.rb","files/lib/core/facets/comparable/cmp_rb.html","files/lib/core/facets/comparable/cmp_rb.html","","",3],["op_get.rb","files/lib/core/facets/comparable/op_get_rb.html","files/lib/core/facets/comparable/op_get_rb.html","","",3],["denumerable.rb","files/lib/core/facets/denumerable_rb.html","files/lib/core/facets/denumerable_rb.html","","",3],["dir.rb","files/lib/core/facets/dir_rb.html","files/lib/core/facets/dir_rb.html","","",3],["ascend.rb","files/lib/core/facets/dir/ascend_rb.html","files/lib/core/facets/dir/ascend_rb.html","","",3],["descend.rb","files/lib/core/facets/dir/descend_rb.html","files/lib/core/facets/dir/descend_rb.html","","",3],["each_child.rb","files/lib/core/facets/dir/each_child_rb.html","files/lib/core/facets/dir/each_child_rb.html","","",3],["multiglob.rb","files/lib/core/facets/dir/multiglob_rb.html","files/lib/core/facets/dir/multiglob_rb.html","","",3],["parent.rb","files/lib/core/facets/dir/parent_rb.html","files/lib/core/facets/dir/parent_rb.html","","",3],["recurse.rb","files/lib/core/facets/dir/recurse_rb.html","files/lib/core/facets/dir/recurse_rb.html","","",3],["enumerable.rb","files/lib/core/facets/enumerable_rb.html","files/lib/core/facets/enumerable_rb.html","","",3],["accumulate.rb","files/lib/core/facets/enumerable/accumulate_rb.html","files/lib/core/facets/enumerable/accumulate_rb.html","","",3],["cluster_by.rb","files/lib/core/facets/enumerable/cluster_by_rb.html","files/lib/core/facets/enumerable/cluster_by_rb.html","","",3],["collect_with_index.rb","files/lib/core/facets/enumerable/collect_with_index_rb.html","files/lib/core/facets/enumerable/collect_with_index_rb.html","","",3],["compact_map.rb","files/lib/core/facets/enumerable/compact_map_rb.html","files/lib/core/facets/enumerable/compact_map_rb.html","","",3],["count.rb","files/lib/core/facets/enumerable/count_rb.html","files/lib/core/facets/enumerable/count_rb.html","","",3],["defer.rb","files/lib/core/facets/enumerable/defer_rb.html","files/lib/core/facets/enumerable/defer_rb.html","","",3],["each_by.rb","files/lib/core/facets/enumerable/each_by_rb.html","files/lib/core/facets/enumerable/each_by_rb.html","","",3],["each_with_object.rb","files/lib/core/facets/enumerable/each_with_object_rb.html","files/lib/core/facets/enumerable/each_with_object_rb.html","","",3],["every.rb","files/lib/core/facets/enumerable/every_rb.html","files/lib/core/facets/enumerable/every_rb.html","","",3],["ewise.rb","files/lib/core/facets/enumerable/ewise_rb.html","files/lib/core/facets/enumerable/ewise_rb.html","","",3],["exclude.rb","files/lib/core/facets/enumerable/exclude_rb.html","files/lib/core/facets/enumerable/exclude_rb.html","","",3],["expand.rb","files/lib/core/facets/enumerable/expand_rb.html","files/lib/core/facets/enumerable/expand_rb.html","","",3],["filter.rb","files/lib/core/facets/enumerable/filter_rb.html","files/lib/core/facets/enumerable/filter_rb.html","","",3],["find_yield.rb","files/lib/core/facets/enumerable/find_yield_rb.html","files/lib/core/facets/enumerable/find_yield_rb.html","","",3],["frequency.rb","files/lib/core/facets/enumerable/frequency_rb.html","files/lib/core/facets/enumerable/frequency_rb.html","","",3],["graph.rb","files/lib/core/facets/enumerable/graph_rb.html","files/lib/core/facets/enumerable/graph_rb.html","","",3],["group_by.rb","files/lib/core/facets/enumerable/group_by_rb.html","files/lib/core/facets/enumerable/group_by_rb.html","","",3],["hashify.rb","files/lib/core/facets/enumerable/hashify_rb.html","files/lib/core/facets/enumerable/hashify_rb.html","","",3],["incase.rb","files/lib/core/facets/enumerable/incase_rb.html","files/lib/core/facets/enumerable/incase_rb.html","","",3],["map_by.rb","files/lib/core/facets/enumerable/map_by_rb.html","files/lib/core/facets/enumerable/map_by_rb.html","","",3],["map_detect.rb","files/lib/core/facets/enumerable/map_detect_rb.html","files/lib/core/facets/enumerable/map_detect_rb.html","","",3],["map_send.rb","files/lib/core/facets/enumerable/map_send_rb.html","files/lib/core/facets/enumerable/map_send_rb.html","","",3],["map_with.rb","files/lib/core/facets/enumerable/map_with_rb.html","files/lib/core/facets/enumerable/map_with_rb.html","","",3],["map_with_index.rb","files/lib/core/facets/enumerable/map_with_index_rb.html","files/lib/core/facets/enumerable/map_with_index_rb.html","","",3],["mash.rb","files/lib/core/facets/enumerable/mash_rb.html","files/lib/core/facets/enumerable/mash_rb.html","","",3],["modulate.rb","files/lib/core/facets/enumerable/modulate_rb.html","files/lib/core/facets/enumerable/modulate_rb.html","","",3],["none.rb","files/lib/core/facets/enumerable/none_rb.html","files/lib/core/facets/enumerable/none_rb.html","","",3],["occur.rb","files/lib/core/facets/enumerable/occur_rb.html","files/lib/core/facets/enumerable/occur_rb.html","","",3],["one.rb","files/lib/core/facets/enumerable/one_rb.html","files/lib/core/facets/enumerable/one_rb.html","","",3],["per.rb","files/lib/core/facets/enumerable/per_rb.html","files/lib/core/facets/enumerable/per_rb.html","","",3],["purge.rb","files/lib/core/facets/enumerable/purge_rb.html","files/lib/core/facets/enumerable/purge_rb.html","","",3],["recursively.rb","files/lib/core/facets/enumerable/recursively_rb.html","files/lib/core/facets/enumerable/recursively_rb.html","","",3],["sum.rb","files/lib/core/facets/enumerable/sum_rb.html","files/lib/core/facets/enumerable/sum_rb.html","","",3],["take.rb","files/lib/core/facets/enumerable/take_rb.html","files/lib/core/facets/enumerable/take_rb.html","","",3],["uniq_by.rb","files/lib/core/facets/enumerable/uniq_by_rb.html","files/lib/core/facets/enumerable/uniq_by_rb.html","","",3],["visit.rb","files/lib/core/facets/enumerable/visit_rb.html","files/lib/core/facets/enumerable/visit_rb.html","","",3],["zip_map.rb","files/lib/core/facets/enumerable/zip_map_rb.html","files/lib/core/facets/enumerable/zip_map_rb.html","","",3],["enumerator.rb","files/lib/core/facets/enumerator_rb.html","files/lib/core/facets/enumerator_rb.html","","",3],["fx.rb","files/lib/core/facets/enumerator/fx_rb.html","files/lib/core/facets/enumerator/fx_rb.html","","for Ruby 1.8 -> 1.9 transition ",3],["exception.rb","files/lib/core/facets/exception_rb.html","files/lib/core/facets/exception_rb.html","","",3],["detail.rb","files/lib/core/facets/exception/detail_rb.html","files/lib/core/facets/exception/detail_rb.html","","",3],["error_print.rb","files/lib/core/facets/exception/error_print_rb.html","files/lib/core/facets/exception/error_print_rb.html","","",3],["raised.rb","files/lib/core/facets/exception/raised_rb.html","files/lib/core/facets/exception/raised_rb.html","","",3],["suppress.rb","files/lib/core/facets/exception/suppress_rb.html","files/lib/core/facets/exception/suppress_rb.html","","",3],["file.rb","files/lib/core/facets/file_rb.html","files/lib/core/facets/file_rb.html","","",3],["append.rb","files/lib/core/facets/file/append_rb.html","files/lib/core/facets/file/append_rb.html","","",3],["atomic_id.rb","files/lib/core/facets/file/atomic_id_rb.html","files/lib/core/facets/file/atomic_id_rb.html","","",3],["atomic_open.rb","files/lib/core/facets/file/atomic_open_rb.html","files/lib/core/facets/file/atomic_open_rb.html","","",3],["atomic_write.rb","files/lib/core/facets/file/atomic_write_rb.html","files/lib/core/facets/file/atomic_write_rb.html","","This is a precursor to the possibility of a more extensive Atomic File I/O system. For now it simply",3],["create.rb","files/lib/core/facets/file/create_rb.html","files/lib/core/facets/file/create_rb.html","","",3],["ext.rb","files/lib/core/facets/file/ext_rb.html","files/lib/core/facets/file/ext_rb.html","","",3],["null.rb","files/lib/core/facets/file/null_rb.html","files/lib/core/facets/file/null_rb.html","","",3],["read_binary.rb","files/lib/core/facets/file/read_binary_rb.html","files/lib/core/facets/file/read_binary_rb.html","","",3],["read_list.rb","files/lib/core/facets/file/read_list_rb.html","files/lib/core/facets/file/read_list_rb.html","","",3],["rewrite.rb","files/lib/core/facets/file/rewrite_rb.html","files/lib/core/facets/file/rewrite_rb.html","","",3],["rootname.rb","files/lib/core/facets/file/rootname_rb.html","files/lib/core/facets/file/rootname_rb.html","","",3],["sanitize.rb","files/lib/core/facets/file/sanitize_rb.html","files/lib/core/facets/file/sanitize_rb.html","","",3],["split_all.rb","files/lib/core/facets/file/split_all_rb.html","files/lib/core/facets/file/split_all_rb.html","","",3],["split_root.rb","files/lib/core/facets/file/split_root_rb.html","files/lib/core/facets/file/split_root_rb.html","","",3],["write.rb","files/lib/core/facets/file/write_rb.html","files/lib/core/facets/file/write_rb.html","","",3],["writelines.rb","files/lib/core/facets/file/writelines_rb.html","files/lib/core/facets/file/writelines_rb.html","","",3],["filetest.rb","files/lib/core/facets/filetest_rb.html","files/lib/core/facets/filetest_rb.html","","",3],["absolute.rb","files/lib/core/facets/filetest/absolute_rb.html","files/lib/core/facets/filetest/absolute_rb.html","","",3],["contains.rb","files/lib/core/facets/filetest/contains_rb.html","files/lib/core/facets/filetest/contains_rb.html","","",3],["relative.rb","files/lib/core/facets/filetest/relative_rb.html","files/lib/core/facets/filetest/relative_rb.html","","",3],["root.rb","files/lib/core/facets/filetest/root_rb.html","files/lib/core/facets/filetest/root_rb.html","","",3],["safe.rb","files/lib/core/facets/filetest/safe_rb.html","files/lib/core/facets/filetest/safe_rb.html","","",3],["separator_pattern.rb","files/lib/core/facets/filetest/separator_pattern_rb.html","files/lib/core/facets/filetest/separator_pattern_rb.html","","",3],["fixnum.rb","files/lib/core/facets/fixnum_rb.html","files/lib/core/facets/fixnum_rb.html","","",3],["float.rb","files/lib/core/facets/float_rb.html","files/lib/core/facets/float_rb.html","","",3],["round.rb","files/lib/core/facets/float/round_rb.html","files/lib/core/facets/float/round_rb.html","","",3],["functor.rb","files/lib/core/facets/functor_rb.html","files/lib/core/facets/functor_rb.html","","By definition a Functor is simply a first class method, but these are common in the form of Method and",3],["hash.rb","files/lib/core/facets/hash_rb.html","files/lib/core/facets/hash_rb.html","","",3],["alias.rb","files/lib/core/facets/hash/alias_rb.html","files/lib/core/facets/hash/alias_rb.html","","",3],["argumentize.rb","files/lib/core/facets/hash/argumentize_rb.html","files/lib/core/facets/hash/argumentize_rb.html","","",3],["at.rb","files/lib/core/facets/hash/at_rb.html","files/lib/core/facets/hash/at_rb.html","","",3],["autonew.rb","files/lib/core/facets/hash/autonew_rb.html","files/lib/core/facets/hash/autonew_rb.html","","",3],["collate.rb","files/lib/core/facets/hash/collate_rb.html","files/lib/core/facets/hash/collate_rb.html","","",3],["count.rb","files/lib/core/facets/hash/count_rb.html","files/lib/core/facets/hash/count_rb.html","","",3],["data.rb","files/lib/core/facets/hash/data_rb.html","files/lib/core/facets/hash/data_rb.html","","",3],["dearray_values.rb","files/lib/core/facets/hash/dearray_values_rb.html","files/lib/core/facets/hash/dearray_values_rb.html","","",3],["deep_merge.rb","files/lib/core/facets/hash/deep_merge_rb.html","files/lib/core/facets/hash/deep_merge_rb.html","","",3],["delete.rb","files/lib/core/facets/hash/delete_rb.html","files/lib/core/facets/hash/delete_rb.html","","TODO: should we deprecate hash/delete? ",3],["delete_at.rb","files/lib/core/facets/hash/delete_at_rb.html","files/lib/core/facets/hash/delete_at_rb.html","","",3],["delete_unless.rb","files/lib/core/facets/hash/delete_unless_rb.html","files/lib/core/facets/hash/delete_unless_rb.html","","",3],["delete_values.rb","files/lib/core/facets/hash/delete_values_rb.html","files/lib/core/facets/hash/delete_values_rb.html","","",3],["diff.rb","files/lib/core/facets/hash/diff_rb.html","files/lib/core/facets/hash/diff_rb.html","","",3],["except.rb","files/lib/core/facets/hash/except_rb.html","files/lib/core/facets/hash/except_rb.html","","",3],["graph.rb","files/lib/core/facets/hash/graph_rb.html","files/lib/core/facets/hash/graph_rb.html","","",3],["insert.rb","files/lib/core/facets/hash/insert_rb.html","files/lib/core/facets/hash/insert_rb.html","","",3],["inverse.rb","files/lib/core/facets/hash/inverse_rb.html","files/lib/core/facets/hash/inverse_rb.html","","",3],["join.rb","files/lib/core/facets/hash/join_rb.html","files/lib/core/facets/hash/join_rb.html","","",3],["keys.rb","files/lib/core/facets/hash/keys_rb.html","files/lib/core/facets/hash/keys_rb.html","","",3],["mash.rb","files/lib/core/facets/hash/mash_rb.html","files/lib/core/facets/hash/mash_rb.html","","",3],["new_with.rb","files/lib/core/facets/hash/new_with_rb.html","files/lib/core/facets/hash/new_with_rb.html","","",3],["op.rb","files/lib/core/facets/hash/op_rb.html","files/lib/core/facets/hash/op_rb.html","","",3],["op_add.rb","files/lib/core/facets/hash/op_add_rb.html","files/lib/core/facets/hash/op_add_rb.html","","",3],["op_and.rb","files/lib/core/facets/hash/op_and_rb.html","files/lib/core/facets/hash/op_and_rb.html","","",3],["op_mul.rb","files/lib/core/facets/hash/op_mul_rb.html","files/lib/core/facets/hash/op_mul_rb.html","","",3],["op_or.rb","files/lib/core/facets/hash/op_or_rb.html","files/lib/core/facets/hash/op_or_rb.html","","",3],["op_push.rb","files/lib/core/facets/hash/op_push_rb.html","files/lib/core/facets/hash/op_push_rb.html","","",3],["op_sub.rb","files/lib/core/facets/hash/op_sub_rb.html","files/lib/core/facets/hash/op_sub_rb.html","","",3],["recurse.rb","files/lib/core/facets/hash/recurse_rb.html","files/lib/core/facets/hash/recurse_rb.html","","",3],["recursively.rb","files/lib/core/facets/hash/recursively_rb.html","files/lib/core/facets/hash/recursively_rb.html","","",3],["rekey.rb","files/lib/core/facets/hash/rekey_rb.html","files/lib/core/facets/hash/rekey_rb.html","","",3],["replace_each.rb","files/lib/core/facets/hash/replace_each_rb.html","files/lib/core/facets/hash/replace_each_rb.html","","",3],["reverse_merge.rb","files/lib/core/facets/hash/reverse_merge_rb.html","files/lib/core/facets/hash/reverse_merge_rb.html","","",3],["select.rb","files/lib/core/facets/hash/select_rb.html","files/lib/core/facets/hash/select_rb.html","","",3],["slice.rb","files/lib/core/facets/hash/slice_rb.html","files/lib/core/facets/hash/slice_rb.html","","",3],["stringify_keys.rb","files/lib/core/facets/hash/stringify_keys_rb.html","files/lib/core/facets/hash/stringify_keys_rb.html","","",3],["subset.rb","files/lib/core/facets/hash/subset_rb.html","files/lib/core/facets/hash/subset_rb.html","","",3],["swap.rb","files/lib/core/facets/hash/swap_rb.html","files/lib/core/facets/hash/swap_rb.html","","",3],["symbolize_keys.rb","files/lib/core/facets/hash/symbolize_keys_rb.html","files/lib/core/facets/hash/symbolize_keys_rb.html","","",3],["to_h.rb","files/lib/core/facets/hash/to_h_rb.html","files/lib/core/facets/hash/to_h_rb.html","","",3],["to_mod.rb","files/lib/core/facets/hash/to_mod_rb.html","files/lib/core/facets/hash/to_mod_rb.html","","",3],["to_options.rb","files/lib/core/facets/hash/to_options_rb.html","files/lib/core/facets/hash/to_options_rb.html","","",3],["to_proc.rb","files/lib/core/facets/hash/to_proc_rb.html","files/lib/core/facets/hash/to_proc_rb.html","","",3],["to_struct.rb","files/lib/core/facets/hash/to_struct_rb.html","files/lib/core/facets/hash/to_struct_rb.html","","",3],["traverse.rb","files/lib/core/facets/hash/traverse_rb.html","files/lib/core/facets/hash/traverse_rb.html","","",3],["update.rb","files/lib/core/facets/hash/update_rb.html","files/lib/core/facets/hash/update_rb.html","","-- for backward compatibility. To be deprecated. ",3],["update_each.rb","files/lib/core/facets/hash/update_each_rb.html","files/lib/core/facets/hash/update_each_rb.html","","",3],["update_keys.rb","files/lib/core/facets/hash/update_keys_rb.html","files/lib/core/facets/hash/update_keys_rb.html","","",3],["update_values.rb","files/lib/core/facets/hash/update_values_rb.html","files/lib/core/facets/hash/update_values_rb.html","","",3],["url_params.rb","files/lib/core/facets/hash/url_params_rb.html","files/lib/core/facets/hash/url_params_rb.html","","",3],["weave.rb","files/lib/core/facets/hash/weave_rb.html","files/lib/core/facets/hash/weave_rb.html","","",3],["zip.rb","files/lib/core/facets/hash/zip_rb.html","files/lib/core/facets/hash/zip_rb.html","","",3],["indexable.rb","files/lib/core/facets/indexable_rb.html","files/lib/core/facets/indexable_rb.html","","Indexable is a mixin that provides index based methods, working soley with four methods: #index, #slice,",3],["instance.rb","files/lib/core/facets/instance_rb.html","files/lib/core/facets/instance_rb.html","","",3],["integer.rb","files/lib/core/facets/integer_rb.html","files/lib/core/facets/integer_rb.html","","",3],["bit.rb","files/lib/core/facets/integer/bit_rb.html","files/lib/core/facets/integer/bit_rb.html","","",3],["bitmask.rb","files/lib/core/facets/integer/bitmask_rb.html","files/lib/core/facets/integer/bitmask_rb.html","","",3],["even.rb","files/lib/core/facets/integer/even_rb.html","files/lib/core/facets/integer/even_rb.html","","",3],["factorial.rb","files/lib/core/facets/integer/factorial_rb.html","files/lib/core/facets/integer/factorial_rb.html","","",3],["multiple.rb","files/lib/core/facets/integer/multiple_rb.html","files/lib/core/facets/integer/multiple_rb.html","","",3],["odd.rb","files/lib/core/facets/integer/odd_rb.html","files/lib/core/facets/integer/odd_rb.html","","",3],["of.rb","files/lib/core/facets/integer/of_rb.html","files/lib/core/facets/integer/of_rb.html","","",3],["ordinal.rb","files/lib/core/facets/integer/ordinal_rb.html","files/lib/core/facets/integer/ordinal_rb.html","","",3],["roman.rb","files/lib/core/facets/integer/roman_rb.html","files/lib/core/facets/integer/roman_rb.html","","",3],["kernel.rb","files/lib/core/facets/kernel_rb.html","files/lib/core/facets/kernel_rb.html","","",3],["__callee__.rb","files/lib/core/facets/kernel/__callee___rb.html","files/lib/core/facets/kernel/__callee___rb.html","","",3],["__class__.rb","files/lib/core/facets/kernel/__class___rb.html","files/lib/core/facets/kernel/__class___rb.html","","",3],["__dir__.rb","files/lib/core/facets/kernel/__dir___rb.html","files/lib/core/facets/kernel/__dir___rb.html","","",3],["__get__.rb","files/lib/core/facets/kernel/__get___rb.html","files/lib/core/facets/kernel/__get___rb.html","","",3],["__method__.rb","files/lib/core/facets/kernel/__method___rb.html","files/lib/core/facets/kernel/__method___rb.html","","",3],["__set__.rb","files/lib/core/facets/kernel/__set___rb.html","files/lib/core/facets/kernel/__set___rb.html","","",3],["as.rb","files/lib/core/facets/kernel/as_rb.html","files/lib/core/facets/kernel/as_rb.html","","",3],["ask.rb","files/lib/core/facets/kernel/ask_rb.html","files/lib/core/facets/kernel/ask_rb.html","","",3],["assign.rb","files/lib/core/facets/kernel/assign_rb.html","files/lib/core/facets/kernel/assign_rb.html","","",3],["assign_from.rb","files/lib/core/facets/kernel/assign_from_rb.html","files/lib/core/facets/kernel/assign_from_rb.html","","",3],["attr_singleton.rb","files/lib/core/facets/kernel/attr_singleton_rb.html","files/lib/core/facets/kernel/attr_singleton_rb.html","","",3],["blank.rb","files/lib/core/facets/kernel/blank_rb.html","files/lib/core/facets/kernel/blank_rb.html","","",3],["call_stack.rb","files/lib/core/facets/kernel/call_stack_rb.html","files/lib/core/facets/kernel/call_stack_rb.html","","",3],["callstack.rb","files/lib/core/facets/kernel/callstack_rb.html","files/lib/core/facets/kernel/callstack_rb.html","","",3],["case.rb","files/lib/core/facets/kernel/case_rb.html","files/lib/core/facets/kernel/case_rb.html","","",3],["complete.rb","files/lib/core/facets/kernel/complete_rb.html","files/lib/core/facets/kernel/complete_rb.html","","",3],["constant.rb","files/lib/core/facets/kernel/constant_rb.html","files/lib/core/facets/kernel/constant_rb.html","","",3],["d.rb","files/lib/core/facets/kernel/d_rb.html","files/lib/core/facets/kernel/d_rb.html","","",3],["deep_clone.rb","files/lib/core/facets/kernel/deep_clone_rb.html","files/lib/core/facets/kernel/deep_clone_rb.html","","",3],["deep_copy.rb","files/lib/core/facets/kernel/deep_copy_rb.html","files/lib/core/facets/kernel/deep_copy_rb.html","","",3],["demo.rb","files/lib/core/facets/kernel/demo_rb.html","files/lib/core/facets/kernel/demo_rb.html","","",3],["disable_warnings.rb","files/lib/core/facets/kernel/disable_warnings_rb.html","files/lib/core/facets/kernel/disable_warnings_rb.html","","",3],["eigen.rb","files/lib/core/facets/kernel/eigen_rb.html","files/lib/core/facets/kernel/eigen_rb.html","","",3],["eigenclass.rb","files/lib/core/facets/kernel/eigenclass_rb.html","files/lib/core/facets/kernel/eigenclass_rb.html","","",3],["enable_warnings.rb","files/lib/core/facets/kernel/enable_warnings_rb.html","files/lib/core/facets/kernel/enable_warnings_rb.html","","",3],["equate.rb","files/lib/core/facets/kernel/equate_rb.html","files/lib/core/facets/kernel/equate_rb.html","","",3],["ergo.rb","files/lib/core/facets/kernel/ergo_rb.html","files/lib/core/facets/kernel/ergo_rb.html","","",3],["extend.rb","files/lib/core/facets/kernel/extend_rb.html","files/lib/core/facets/kernel/extend_rb.html","","",3],["extension.rb","files/lib/core/facets/kernel/extension_rb.html","files/lib/core/facets/kernel/extension_rb.html","","",3],["false.rb","files/lib/core/facets/kernel/false_rb.html","files/lib/core/facets/kernel/false_rb.html","","",3],["here.rb","files/lib/core/facets/kernel/here_rb.html","files/lib/core/facets/kernel/here_rb.html","","",3],["hierarchical_send.rb","files/lib/core/facets/kernel/hierarchical_send_rb.html","files/lib/core/facets/kernel/hierarchical_send_rb.html","","",3],["identical.rb","files/lib/core/facets/kernel/identical_rb.html","files/lib/core/facets/kernel/identical_rb.html","","",3],["in.rb","files/lib/core/facets/kernel/in_rb.html","files/lib/core/facets/kernel/in_rb.html","","",3],["instance_assign.rb","files/lib/core/facets/kernel/instance_assign_rb.html","files/lib/core/facets/kernel/instance_assign_rb.html","","",3],["instance_class.rb","files/lib/core/facets/kernel/instance_class_rb.html","files/lib/core/facets/kernel/instance_class_rb.html","","",3],["instance_exec.rb","files/lib/core/facets/kernel/instance_exec_rb.html","files/lib/core/facets/kernel/instance_exec_rb.html","","",3],["instance_send.rb","files/lib/core/facets/kernel/instance_send_rb.html","files/lib/core/facets/kernel/instance_send_rb.html","","",3],["load_all.rb","files/lib/core/facets/kernel/load_all_rb.html","files/lib/core/facets/kernel/load_all_rb.html","","",3],["load_relative.rb","files/lib/core/facets/kernel/load_relative_rb.html","files/lib/core/facets/kernel/load_relative_rb.html","","",3],["maybe.rb","files/lib/core/facets/kernel/maybe_rb.html","files/lib/core/facets/kernel/maybe_rb.html","","",3],["memo.rb","files/lib/core/facets/kernel/memo_rb.html","files/lib/core/facets/kernel/memo_rb.html","","",3],["meta_alias.rb","files/lib/core/facets/kernel/meta_alias_rb.html","files/lib/core/facets/kernel/meta_alias_rb.html","","",3],["meta_class.rb","files/lib/core/facets/kernel/meta_class_rb.html","files/lib/core/facets/kernel/meta_class_rb.html","","",3],["meta_def.rb","files/lib/core/facets/kernel/meta_def_rb.html","files/lib/core/facets/kernel/meta_def_rb.html","","",3],["meta_eval.rb","files/lib/core/facets/kernel/meta_eval_rb.html","files/lib/core/facets/kernel/meta_eval_rb.html","","",3],["method.rb","files/lib/core/facets/kernel/method_rb.html","files/lib/core/facets/kernel/method_rb.html","","",3],["no.rb","files/lib/core/facets/kernel/no_rb.html","files/lib/core/facets/kernel/no_rb.html","","",3],["not.rb","files/lib/core/facets/kernel/not_rb.html","files/lib/core/facets/kernel/not_rb.html","","",3],["not_nil.rb","files/lib/core/facets/kernel/not_nil_rb.html","files/lib/core/facets/kernel/not_nil_rb.html","","",3],["object_class.rb","files/lib/core/facets/kernel/object_class_rb.html","files/lib/core/facets/kernel/object_class_rb.html","","",3],["object_hexid.rb","files/lib/core/facets/kernel/object_hexid_rb.html","files/lib/core/facets/kernel/object_hexid_rb.html","","",3],["object_send.rb","files/lib/core/facets/kernel/object_send_rb.html","files/lib/core/facets/kernel/object_send_rb.html","","",3],["p.rb","files/lib/core/facets/kernel/p_rb.html","files/lib/core/facets/kernel/p_rb.html","","",3],["presence.rb","files/lib/core/facets/kernel/presence_rb.html","files/lib/core/facets/kernel/presence_rb.html","","",3],["present.rb","files/lib/core/facets/kernel/present_rb.html","files/lib/core/facets/kernel/present_rb.html","","",3],["qua_class.rb","files/lib/core/facets/kernel/qua_class_rb.html","files/lib/core/facets/kernel/qua_class_rb.html","","",3],["require_all.rb","files/lib/core/facets/kernel/require_all_rb.html","files/lib/core/facets/kernel/require_all_rb.html","","",3],["require_relative.rb","files/lib/core/facets/kernel/require_relative_rb.html","files/lib/core/facets/kernel/require_relative_rb.html","","",3],["respond.rb","files/lib/core/facets/kernel/respond_rb.html","files/lib/core/facets/kernel/respond_rb.html","","",3],["returning.rb","files/lib/core/facets/kernel/returning_rb.html","files/lib/core/facets/kernel/returning_rb.html","","",3],["silence.rb","files/lib/core/facets/kernel/silence_rb.html","files/lib/core/facets/kernel/silence_rb.html","","",3],["silence_warnings.rb","files/lib/core/facets/kernel/silence_warnings_rb.html","files/lib/core/facets/kernel/silence_warnings_rb.html","","",3],["singleton_class.rb","files/lib/core/facets/kernel/singleton_class_rb.html","files/lib/core/facets/kernel/singleton_class_rb.html","","",3],["source_location.rb","files/lib/core/facets/kernel/source_location_rb.html","files/lib/core/facets/kernel/source_location_rb.html","","",3],["super_method.rb","files/lib/core/facets/kernel/super_method_rb.html","files/lib/core/facets/kernel/super_method_rb.html","","",3],["tap.rb","files/lib/core/facets/kernel/tap_rb.html","files/lib/core/facets/kernel/tap_rb.html","","",3],["temporarily.rb","files/lib/core/facets/kernel/temporarily_rb.html","files/lib/core/facets/kernel/temporarily_rb.html","","",3],["trap_chain.rb","files/lib/core/facets/kernel/trap_chain_rb.html","files/lib/core/facets/kernel/trap_chain_rb.html","","",3],["true.rb","files/lib/core/facets/kernel/true_rb.html","files/lib/core/facets/kernel/true_rb.html","","",3],["try.rb","files/lib/core/facets/kernel/try_rb.html","files/lib/core/facets/kernel/try_rb.html","","",3],["val.rb","files/lib/core/facets/kernel/val_rb.html","files/lib/core/facets/kernel/val_rb.html","","",3],["with.rb","files/lib/core/facets/kernel/with_rb.html","files/lib/core/facets/kernel/with_rb.html","","",3],["writers.rb","files/lib/core/facets/kernel/writers_rb.html","files/lib/core/facets/kernel/writers_rb.html","","",3],["y.rb","files/lib/core/facets/kernel/y_rb.html","files/lib/core/facets/kernel/y_rb.html","","",3],["yes.rb","files/lib/core/facets/kernel/yes_rb.html","files/lib/core/facets/kernel/yes_rb.html","","",3],["lazy.rb","files/lib/core/facets/lazy_rb.html","files/lib/core/facets/lazy_rb.html","","= Lazy Everything you need for Lazy evaluation in Ruby. == Authors * MenTaLguY == Copying Copyright (c)",3],["matchdata.rb","files/lib/core/facets/matchdata_rb.html","files/lib/core/facets/matchdata_rb.html","","",3],["match.rb","files/lib/core/facets/matchdata/match_rb.html","files/lib/core/facets/matchdata/match_rb.html","","",3],["matchset.rb","files/lib/core/facets/matchdata/matchset_rb.html","files/lib/core/facets/matchdata/matchset_rb.html","","",3],["metaid.rb","files/lib/core/facets/metaid_rb.html","files/lib/core/facets/metaid_rb.html","","",3],["method.rb","files/lib/core/facets/method_rb.html","files/lib/core/facets/method_rb.html","","",3],["composition.rb","files/lib/core/facets/method/composition_rb.html","files/lib/core/facets/method/composition_rb.html","","",3],["memoize.rb","files/lib/core/facets/method/memoize_rb.html","files/lib/core/facets/method/memoize_rb.html","","",3],["op_mul.rb","files/lib/core/facets/method/op_mul_rb.html","files/lib/core/facets/method/op_mul_rb.html","","",3],["op_pow.rb","files/lib/core/facets/method/op_pow_rb.html","files/lib/core/facets/method/op_pow_rb.html","","",3],["module.rb","files/lib/core/facets/module_rb.html","files/lib/core/facets/module_rb.html","","",3],["abstract.rb","files/lib/core/facets/module/abstract_rb.html","files/lib/core/facets/module/abstract_rb.html","","",3],["alias_accessor.rb","files/lib/core/facets/module/alias_accessor_rb.html","files/lib/core/facets/module/alias_accessor_rb.html","","",3],["alias_method_chain.rb","files/lib/core/facets/module/alias_method_chain_rb.html","files/lib/core/facets/module/alias_method_chain_rb.html","","",3],["alias_module_function.rb","files/lib/core/facets/module/alias_module_function_rb.html","files/lib/core/facets/module/alias_module_function_rb.html","","",3],["all_instance_methods.rb","files/lib/core/facets/module/all_instance_methods_rb.html","files/lib/core/facets/module/all_instance_methods_rb.html","","",3],["ancestor.rb","files/lib/core/facets/module/ancestor_rb.html","files/lib/core/facets/module/ancestor_rb.html","","",3],["anonymous.rb","files/lib/core/facets/module/anonymous_rb.html","files/lib/core/facets/module/anonymous_rb.html","","",3],["attr_class_accessor.rb","files/lib/core/facets/module/attr_class_accessor_rb.html","files/lib/core/facets/module/attr_class_accessor_rb.html","","",3],["attr_setter.rb","files/lib/core/facets/module/attr_setter_rb.html","files/lib/core/facets/module/attr_setter_rb.html","","",3],["attr_tester.rb","files/lib/core/facets/module/attr_tester_rb.html","files/lib/core/facets/module/attr_tester_rb.html","","",3],["attr_validator.rb","files/lib/core/facets/module/attr_validator_rb.html","files/lib/core/facets/module/attr_validator_rb.html","","",3],["basename.rb","files/lib/core/facets/module/basename_rb.html","files/lib/core/facets/module/basename_rb.html","","",3],["can.rb","files/lib/core/facets/module/can_rb.html","files/lib/core/facets/module/can_rb.html","","",3],["class.rb","files/lib/core/facets/module/class_rb.html","files/lib/core/facets/module/class_rb.html","","",3],["class_accessor.rb","files/lib/core/facets/module/class_accessor_rb.html","files/lib/core/facets/module/class_accessor_rb.html","","",3],["class_def.rb","files/lib/core/facets/module/class_def_rb.html","files/lib/core/facets/module/class_def_rb.html","","",3],["class_extend.rb","files/lib/core/facets/module/class_extend_rb.html","files/lib/core/facets/module/class_extend_rb.html","","",3],["class_inheritor.rb","files/lib/core/facets/module/class_inheritor_rb.html","files/lib/core/facets/module/class_inheritor_rb.html","","",3],["class_method_defined.rb","files/lib/core/facets/module/class_method_defined_rb.html","files/lib/core/facets/module/class_method_defined_rb.html","","",3],["copy_inheritor.rb","files/lib/core/facets/module/copy_inheritor_rb.html","files/lib/core/facets/module/copy_inheritor_rb.html","","",3],["enclosure.rb","files/lib/core/facets/module/enclosure_rb.html","files/lib/core/facets/module/enclosure_rb.html","","",3],["enclosures.rb","files/lib/core/facets/module/enclosures_rb.html","files/lib/core/facets/module/enclosures_rb.html","","",3],["extend.rb","files/lib/core/facets/module/extend_rb.html","files/lib/core/facets/module/extend_rb.html","","",3],["home.rb","files/lib/core/facets/module/home_rb.html","files/lib/core/facets/module/home_rb.html","","",3],["homename.rb","files/lib/core/facets/module/homename_rb.html","files/lib/core/facets/module/homename_rb.html","","",3],["housing.rb","files/lib/core/facets/module/housing_rb.html","files/lib/core/facets/module/housing_rb.html","","",3],["include_as.rb","files/lib/core/facets/module/include_as_rb.html","files/lib/core/facets/module/include_as_rb.html","","",3],["include_function_module.rb","files/lib/core/facets/module/include_function_module_rb.html","files/lib/core/facets/module/include_function_module_rb.html","","",3],["instance_function.rb","files/lib/core/facets/module/instance_function_rb.html","files/lib/core/facets/module/instance_function_rb.html","","",3],["instance_method.rb","files/lib/core/facets/module/instance_method_rb.html","files/lib/core/facets/module/instance_method_rb.html","","",3],["instance_method_defined.rb","files/lib/core/facets/module/instance_method_defined_rb.html","files/lib/core/facets/module/instance_method_defined_rb.html","","",3],["integrate.rb","files/lib/core/facets/module/integrate_rb.html","files/lib/core/facets/module/integrate_rb.html","","",3],["is.rb","files/lib/core/facets/module/is_rb.html","files/lib/core/facets/module/is_rb.html","","",3],["let.rb","files/lib/core/facets/module/let_rb.html","files/lib/core/facets/module/let_rb.html","","",3],["mattr.rb","files/lib/core/facets/module/mattr_rb.html","files/lib/core/facets/module/mattr_rb.html","","",3],["memoize.rb","files/lib/core/facets/module/memoize_rb.html","files/lib/core/facets/module/memoize_rb.html","","",3],["method_clash.rb","files/lib/core/facets/module/method_clash_rb.html","files/lib/core/facets/module/method_clash_rb.html","","",3],["method_space.rb","files/lib/core/facets/module/method_space_rb.html","files/lib/core/facets/module/method_space_rb.html","","",3],["methodize.rb","files/lib/core/facets/module/methodize_rb.html","files/lib/core/facets/module/methodize_rb.html","","",3],["modname.rb","files/lib/core/facets/module/modname_rb.html","files/lib/core/facets/module/modname_rb.html","","",3],["module_def.rb","files/lib/core/facets/module/module_def_rb.html","files/lib/core/facets/module/module_def_rb.html","","",3],["module_load.rb","files/lib/core/facets/module/module_load_rb.html","files/lib/core/facets/module/module_load_rb.html","","",3],["nodef.rb","files/lib/core/facets/module/nodef_rb.html","files/lib/core/facets/module/nodef_rb.html","","",3],["op.rb","files/lib/core/facets/module/op_rb.html","files/lib/core/facets/module/op_rb.html","","",3],["op_add.rb","files/lib/core/facets/module/op_add_rb.html","files/lib/core/facets/module/op_add_rb.html","","",3],["op_mul.rb","files/lib/core/facets/module/op_mul_rb.html","files/lib/core/facets/module/op_mul_rb.html","","",3],["op_sub.rb","files/lib/core/facets/module/op_sub_rb.html","files/lib/core/facets/module/op_sub_rb.html","","",3],["pathize.rb","files/lib/core/facets/module/pathize_rb.html","files/lib/core/facets/module/pathize_rb.html","","",3],["preextend.rb","files/lib/core/facets/module/preextend_rb.html","files/lib/core/facets/module/preextend_rb.html","","",3],["redefine_method.rb","files/lib/core/facets/module/redefine_method_rb.html","files/lib/core/facets/module/redefine_method_rb.html","","",3],["redirect_method.rb","files/lib/core/facets/module/redirect_method_rb.html","files/lib/core/facets/module/redirect_method_rb.html","","",3],["remove.rb","files/lib/core/facets/module/remove_rb.html","files/lib/core/facets/module/remove_rb.html","","",3],["rename_method.rb","files/lib/core/facets/module/rename_method_rb.html","files/lib/core/facets/module/rename_method_rb.html","","",3],["revise.rb","files/lib/core/facets/module/revise_rb.html","files/lib/core/facets/module/revise_rb.html","","",3],["set.rb","files/lib/core/facets/module/set_rb.html","files/lib/core/facets/module/set_rb.html","","",3],["singleton_method_defined.rb","files/lib/core/facets/module/singleton_method_defined_rb.html","files/lib/core/facets/module/singleton_method_defined_rb.html","","",3],["spacename.rb","files/lib/core/facets/module/spacename_rb.html","files/lib/core/facets/module/spacename_rb.html","","",3],["to_obj.rb","files/lib/core/facets/module/to_obj_rb.html","files/lib/core/facets/module/to_obj_rb.html","","",3],["wrap_method.rb","files/lib/core/facets/module/wrap_method_rb.html","files/lib/core/facets/module/wrap_method_rb.html","","",3],["na.rb","files/lib/core/facets/na_rb.html","files/lib/core/facets/na_rb.html","","N/A exception is useful for specifying non-argument defaults when +nil+ is a valid value. def f(x=NA)",3],["nilclass.rb","files/lib/core/facets/nilclass_rb.html","files/lib/core/facets/nilclass_rb.html","","",3],["ergo.rb","files/lib/core/facets/nilclass/ergo_rb.html","files/lib/core/facets/nilclass/ergo_rb.html","","",3],["to_f.rb","files/lib/core/facets/nilclass/to_f_rb.html","files/lib/core/facets/nilclass/to_f_rb.html","","",3],["numeric.rb","files/lib/core/facets/numeric_rb.html","files/lib/core/facets/numeric_rb.html","","",3],["approx.rb","files/lib/core/facets/numeric/approx_rb.html","files/lib/core/facets/numeric/approx_rb.html","","",3],["close.rb","files/lib/core/facets/numeric/close_rb.html","files/lib/core/facets/numeric/close_rb.html","","",3],["distance.rb","files/lib/core/facets/numeric/distance_rb.html","files/lib/core/facets/numeric/distance_rb.html","","",3],["length.rb","files/lib/core/facets/numeric/length_rb.html","files/lib/core/facets/numeric/length_rb.html","","",3],["negative.rb","files/lib/core/facets/numeric/negative_rb.html","files/lib/core/facets/numeric/negative_rb.html","","",3],["positive.rb","files/lib/core/facets/numeric/positive_rb.html","files/lib/core/facets/numeric/positive_rb.html","","",3],["round.rb","files/lib/core/facets/numeric/round_rb.html","files/lib/core/facets/numeric/round_rb.html","","",3],["round_at.rb","files/lib/core/facets/numeric/round_at_rb.html","files/lib/core/facets/numeric/round_at_rb.html","","",3],["round_to.rb","files/lib/core/facets/numeric/round_to_rb.html","files/lib/core/facets/numeric/round_to_rb.html","","",3],["spacing.rb","files/lib/core/facets/numeric/spacing_rb.html","files/lib/core/facets/numeric/spacing_rb.html","","",3],["object.rb","files/lib/core/facets/object_rb.html","files/lib/core/facets/object_rb.html","","",3],["clone.rb","files/lib/core/facets/object/clone_rb.html","files/lib/core/facets/object/clone_rb.html","","",3],["dup.rb","files/lib/core/facets/object/dup_rb.html","files/lib/core/facets/object/dup_rb.html","","",3],["object_state.rb","files/lib/core/facets/object/object_state_rb.html","files/lib/core/facets/object/object_state_rb.html","","",3],["replace.rb","files/lib/core/facets/object/replace_rb.html","files/lib/core/facets/object/replace_rb.html","","",3],["try_dup.rb","files/lib/core/facets/object/try_dup_rb.html","files/lib/core/facets/object/try_dup_rb.html","","",3],["objectspace.rb","files/lib/core/facets/objectspace_rb.html","files/lib/core/facets/objectspace_rb.html","","",3],["classes.rb","files/lib/core/facets/objectspace/classes_rb.html","files/lib/core/facets/objectspace/classes_rb.html","","",3],["op_fetch.rb","files/lib/core/facets/objectspace/op_fetch_rb.html","files/lib/core/facets/objectspace/op_fetch_rb.html","","",3],["reflect.rb","files/lib/core/facets/objectspace/reflect_rb.html","files/lib/core/facets/objectspace/reflect_rb.html","","",3],["proc.rb","files/lib/core/facets/proc_rb.html","files/lib/core/facets/proc_rb.html","","",3],["bind.rb","files/lib/core/facets/proc/bind_rb.html","files/lib/core/facets/proc/bind_rb.html","","",3],["bind_to.rb","files/lib/core/facets/proc/bind_to_rb.html","files/lib/core/facets/proc/bind_to_rb.html","","",3],["compose.rb","files/lib/core/facets/proc/compose_rb.html","files/lib/core/facets/proc/compose_rb.html","","",3],["curry.rb","files/lib/core/facets/proc/curry_rb.html","files/lib/core/facets/proc/curry_rb.html","","",3],["partial.rb","files/lib/core/facets/proc/partial_rb.html","files/lib/core/facets/proc/partial_rb.html","","",3],["to_method.rb","files/lib/core/facets/proc/to_method_rb.html","files/lib/core/facets/proc/to_method_rb.html","","",3],["update.rb","files/lib/core/facets/proc/update_rb.html","files/lib/core/facets/proc/update_rb.html","","",3],["process.rb","files/lib/core/facets/process_rb.html","files/lib/core/facets/process_rb.html","","",3],["daemon.rb","files/lib/core/facets/process/daemon_rb.html","files/lib/core/facets/process/daemon_rb.html","","",3],["range.rb","files/lib/core/facets/range_rb.html","files/lib/core/facets/range_rb.html","","",3],["combine.rb","files/lib/core/facets/range/combine_rb.html","files/lib/core/facets/range/combine_rb.html","","",3],["overlap.rb","files/lib/core/facets/range/overlap_rb.html","files/lib/core/facets/range/overlap_rb.html","","",3],["quantile.rb","files/lib/core/facets/range/quantile_rb.html","files/lib/core/facets/range/quantile_rb.html","","",3],["to_r.rb","files/lib/core/facets/range/to_r_rb.html","files/lib/core/facets/range/to_r_rb.html","","",3],["umbrella.rb","files/lib/core/facets/range/umbrella_rb.html","files/lib/core/facets/range/umbrella_rb.html","","",3],["within.rb","files/lib/core/facets/range/within_rb.html","files/lib/core/facets/range/within_rb.html","","",3],["regexp.rb","files/lib/core/facets/regexp_rb.html","files/lib/core/facets/regexp_rb.html","","",3],["arity.rb","files/lib/core/facets/regexp/arity_rb.html","files/lib/core/facets/regexp/arity_rb.html","","",3],["multiline.rb","files/lib/core/facets/regexp/multiline_rb.html","files/lib/core/facets/regexp/multiline_rb.html","","",3],["op_add.rb","files/lib/core/facets/regexp/op_add_rb.html","files/lib/core/facets/regexp/op_add_rb.html","","",3],["op_or.rb","files/lib/core/facets/regexp/op_or_rb.html","files/lib/core/facets/regexp/op_or_rb.html","","",3],["to_re.rb","files/lib/core/facets/regexp/to_re_rb.html","files/lib/core/facets/regexp/to_re_rb.html","","",3],["roman.rb","files/lib/core/facets/roman_rb.html","files/lib/core/facets/roman_rb.html","","",3],["string.rb","files/lib/core/facets/string_rb.html","files/lib/core/facets/string_rb.html","","",3],["acronym.rb","files/lib/core/facets/string/acronym_rb.html","files/lib/core/facets/string/acronym_rb.html","","",3],["align.rb","files/lib/core/facets/string/align_rb.html","files/lib/core/facets/string/align_rb.html","","",3],["bracket.rb","files/lib/core/facets/string/bracket_rb.html","files/lib/core/facets/string/bracket_rb.html","","",3],["briefcase.rb","files/lib/core/facets/string/briefcase_rb.html","files/lib/core/facets/string/briefcase_rb.html","","",3],["bytes.rb","files/lib/core/facets/string/bytes_rb.html","files/lib/core/facets/string/bytes_rb.html","","",3],["camelcase.rb","files/lib/core/facets/string/camelcase_rb.html","files/lib/core/facets/string/camelcase_rb.html","","",3],["capitalized.rb","files/lib/core/facets/string/capitalized_rb.html","files/lib/core/facets/string/capitalized_rb.html","","",3],["characters.rb","files/lib/core/facets/string/characters_rb.html","files/lib/core/facets/string/characters_rb.html","","",3],["cleanlines.rb","files/lib/core/facets/string/cleanlines_rb.html","files/lib/core/facets/string/cleanlines_rb.html","","",3],["cleave.rb","files/lib/core/facets/string/cleave_rb.html","files/lib/core/facets/string/cleave_rb.html","","",3],["cmp.rb","files/lib/core/facets/string/cmp_rb.html","files/lib/core/facets/string/cmp_rb.html","","",3],["compress_lines.rb","files/lib/core/facets/string/compress_lines_rb.html","files/lib/core/facets/string/compress_lines_rb.html","","",3],["crypt.rb","files/lib/core/facets/string/crypt_rb.html","files/lib/core/facets/string/crypt_rb.html","","",3],["divide.rb","files/lib/core/facets/string/divide_rb.html","files/lib/core/facets/string/divide_rb.html","","",3],["each_char.rb","files/lib/core/facets/string/each_char_rb.html","files/lib/core/facets/string/each_char_rb.html","","",3],["each_word.rb","files/lib/core/facets/string/each_word_rb.html","files/lib/core/facets/string/each_word_rb.html","","",3],["edit_distance.rb","files/lib/core/facets/string/edit_distance_rb.html","files/lib/core/facets/string/edit_distance_rb.html","","",3],["end_with.rb","files/lib/core/facets/string/end_with_rb.html","files/lib/core/facets/string/end_with_rb.html","","",3],["exclude.rb","files/lib/core/facets/string/exclude_rb.html","files/lib/core/facets/string/exclude_rb.html","","",3],["expand_tab.rb","files/lib/core/facets/string/expand_tab_rb.html","files/lib/core/facets/string/expand_tab_rb.html","","",3],["file.rb","files/lib/core/facets/string/file_rb.html","files/lib/core/facets/string/file_rb.html","","",3],["fold.rb","files/lib/core/facets/string/fold_rb.html","files/lib/core/facets/string/fold_rb.html","","",3],["indent.rb","files/lib/core/facets/string/indent_rb.html","files/lib/core/facets/string/indent_rb.html","","",3],["index_all.rb","files/lib/core/facets/string/index_all_rb.html","files/lib/core/facets/string/index_all_rb.html","","",3],["interpolate.rb","files/lib/core/facets/string/interpolate_rb.html","files/lib/core/facets/string/interpolate_rb.html","","",3],["lchomp.rb","files/lib/core/facets/string/lchomp_rb.html","files/lib/core/facets/string/lchomp_rb.html","","",3],["line_wrap.rb","files/lib/core/facets/string/line_wrap_rb.html","files/lib/core/facets/string/line_wrap_rb.html","","",3],["lines.rb","files/lib/core/facets/string/lines_rb.html","files/lib/core/facets/string/lines_rb.html","","",3],["lowercase.rb","files/lib/core/facets/string/lowercase_rb.html","files/lib/core/facets/string/lowercase_rb.html","","",3],["margin.rb","files/lib/core/facets/string/margin_rb.html","files/lib/core/facets/string/margin_rb.html","","",3],["methodize.rb","files/lib/core/facets/string/methodize_rb.html","files/lib/core/facets/string/methodize_rb.html","","",3],["modulize.rb","files/lib/core/facets/string/modulize_rb.html","files/lib/core/facets/string/modulize_rb.html","","",3],["mscan.rb","files/lib/core/facets/string/mscan_rb.html","files/lib/core/facets/string/mscan_rb.html","","",3],["natcmp.rb","files/lib/core/facets/string/natcmp_rb.html","files/lib/core/facets/string/natcmp_rb.html",""," ",3],["nchar.rb","files/lib/core/facets/string/nchar_rb.html","files/lib/core/facets/string/nchar_rb.html","","",3],["newlines.rb","files/lib/core/facets/string/newlines_rb.html","files/lib/core/facets/string/newlines_rb.html","","",3],["op_div.rb","files/lib/core/facets/string/op_div_rb.html","files/lib/core/facets/string/op_div_rb.html","","",3],["op_sub.rb","files/lib/core/facets/string/op_sub_rb.html","files/lib/core/facets/string/op_sub_rb.html","","",3],["outdent.rb","files/lib/core/facets/string/outdent_rb.html","files/lib/core/facets/string/outdent_rb.html","","",3],["pathize.rb","files/lib/core/facets/string/pathize_rb.html","files/lib/core/facets/string/pathize_rb.html","","",3],["quote.rb","files/lib/core/facets/string/quote_rb.html","files/lib/core/facets/string/quote_rb.html","","",3],["random_binary.rb","files/lib/core/facets/string/random_binary_rb.html","files/lib/core/facets/string/random_binary_rb.html","","",3],["range.rb","files/lib/core/facets/string/range_rb.html","files/lib/core/facets/string/range_rb.html","","",3],["range_all.rb","files/lib/core/facets/string/range_all_rb.html","files/lib/core/facets/string/range_all_rb.html","","",3],["range_of_line.rb","files/lib/core/facets/string/range_of_line_rb.html","files/lib/core/facets/string/range_of_line_rb.html","","",3],["rewrite.rb","files/lib/core/facets/string/rewrite_rb.html","files/lib/core/facets/string/rewrite_rb.html","","",3],["roman.rb","files/lib/core/facets/string/roman_rb.html","files/lib/core/facets/string/roman_rb.html","","",3],["shatter.rb","files/lib/core/facets/string/shatter_rb.html","files/lib/core/facets/string/shatter_rb.html","","",3],["similarity.rb","files/lib/core/facets/string/similarity_rb.html","files/lib/core/facets/string/similarity_rb.html","","",3],["snakecase.rb","files/lib/core/facets/string/snakecase_rb.html","files/lib/core/facets/string/snakecase_rb.html","","",3],["splice.rb","files/lib/core/facets/string/splice_rb.html","files/lib/core/facets/string/splice_rb.html","","",3],["squish.rb","files/lib/core/facets/string/squish_rb.html","files/lib/core/facets/string/squish_rb.html","","",3],["start_with.rb","files/lib/core/facets/string/start_with_rb.html","files/lib/core/facets/string/start_with_rb.html",""," ",3],["store.rb","files/lib/core/facets/string/store_rb.html","files/lib/core/facets/string/store_rb.html","","",3],["subtract.rb","files/lib/core/facets/string/subtract_rb.html","files/lib/core/facets/string/subtract_rb.html","","TODO: Deprecate string/subtract file. ",3],["tab.rb","files/lib/core/facets/string/tab_rb.html","files/lib/core/facets/string/tab_rb.html","","",3],["tabto.rb","files/lib/core/facets/string/tabto_rb.html","files/lib/core/facets/string/tabto_rb.html","","",3],["titlecase.rb","files/lib/core/facets/string/titlecase_rb.html","files/lib/core/facets/string/titlecase_rb.html","","",3],["to_re.rb","files/lib/core/facets/string/to_re_rb.html","files/lib/core/facets/string/to_re_rb.html","","",3],["unbracket.rb","files/lib/core/facets/string/unbracket_rb.html","files/lib/core/facets/string/unbracket_rb.html","","",3],["underscore.rb","files/lib/core/facets/string/underscore_rb.html","files/lib/core/facets/string/underscore_rb.html","","",3],["unfold.rb","files/lib/core/facets/string/unfold_rb.html","files/lib/core/facets/string/unfold_rb.html","","",3],["unindent.rb","files/lib/core/facets/string/unindent_rb.html","files/lib/core/facets/string/unindent_rb.html","","",3],["unquote.rb","files/lib/core/facets/string/unquote_rb.html","files/lib/core/facets/string/unquote_rb.html","","",3],["uppercase.rb","files/lib/core/facets/string/uppercase_rb.html","files/lib/core/facets/string/uppercase_rb.html","","",3],["variablize.rb","files/lib/core/facets/string/variablize_rb.html","files/lib/core/facets/string/variablize_rb.html","","",3],["word_wrap.rb","files/lib/core/facets/string/word_wrap_rb.html","files/lib/core/facets/string/word_wrap_rb.html","","",3],["words.rb","files/lib/core/facets/string/words_rb.html","files/lib/core/facets/string/words_rb.html","","",3],["xor.rb","files/lib/core/facets/string/xor_rb.html","files/lib/core/facets/string/xor_rb.html","","",3],["struct.rb","files/lib/core/facets/struct_rb.html","files/lib/core/facets/struct_rb.html","","",3],["attributes.rb","files/lib/core/facets/struct/attributes_rb.html","files/lib/core/facets/struct/attributes_rb.html","","",3],["symbol.rb","files/lib/core/facets/symbol_rb.html","files/lib/core/facets/symbol_rb.html","","",3],["as_s.rb","files/lib/core/facets/symbol/as_s_rb.html","files/lib/core/facets/symbol/as_s_rb.html","","",3],["bang.rb","files/lib/core/facets/symbol/bang_rb.html","files/lib/core/facets/symbol/bang_rb.html","","",3],["chomp.rb","files/lib/core/facets/symbol/chomp_rb.html","files/lib/core/facets/symbol/chomp_rb.html","","",3],["generate.rb","files/lib/core/facets/symbol/generate_rb.html","files/lib/core/facets/symbol/generate_rb.html","","",3],["not.rb","files/lib/core/facets/symbol/not_rb.html","files/lib/core/facets/symbol/not_rb.html","","",3],["op_div.rb","files/lib/core/facets/symbol/op_div_rb.html","files/lib/core/facets/symbol/op_div_rb.html","","",3],["plain.rb","files/lib/core/facets/symbol/plain_rb.html","files/lib/core/facets/symbol/plain_rb.html","","",3],["query.rb","files/lib/core/facets/symbol/query_rb.html","files/lib/core/facets/symbol/query_rb.html","","",3],["reader.rb","files/lib/core/facets/symbol/reader_rb.html","files/lib/core/facets/symbol/reader_rb.html","","",3],["setter.rb","files/lib/core/facets/symbol/setter_rb.html","files/lib/core/facets/symbol/setter_rb.html","","",3],["succ.rb","files/lib/core/facets/symbol/succ_rb.html","files/lib/core/facets/symbol/succ_rb.html","","",3],["thrown.rb","files/lib/core/facets/symbol/thrown_rb.html","files/lib/core/facets/symbol/thrown_rb.html","","",3],["to_proc.rb","files/lib/core/facets/symbol/to_proc_rb.html","files/lib/core/facets/symbol/to_proc_rb.html","","",3],["variablize.rb","files/lib/core/facets/symbol/variablize_rb.html","files/lib/core/facets/symbol/variablize_rb.html","","",3],["writer.rb","files/lib/core/facets/symbol/writer_rb.html","files/lib/core/facets/symbol/writer_rb.html","","",3],["time.rb","files/lib/core/facets/time_rb.html","files/lib/core/facets/time_rb.html","","",3],["ago.rb","files/lib/core/facets/time/ago_rb.html","files/lib/core/facets/time/ago_rb.html","","",3],["change.rb","files/lib/core/facets/time/change_rb.html","files/lib/core/facets/time/change_rb.html","","",3],["dst_adjustment.rb","files/lib/core/facets/time/dst_adjustment_rb.html","files/lib/core/facets/time/dst_adjustment_rb.html","","",3],["elapse.rb","files/lib/core/facets/time/elapse_rb.html","files/lib/core/facets/time/elapse_rb.html","","",3],["future.rb","files/lib/core/facets/time/future_rb.html","files/lib/core/facets/time/future_rb.html","","",3],["hence.rb","files/lib/core/facets/time/hence_rb.html","files/lib/core/facets/time/hence_rb.html","","",3],["in.rb","files/lib/core/facets/time/in_rb.html","files/lib/core/facets/time/in_rb.html","","",3],["less.rb","files/lib/core/facets/time/less_rb.html","files/lib/core/facets/time/less_rb.html","","",3],["past.rb","files/lib/core/facets/time/past_rb.html","files/lib/core/facets/time/past_rb.html","","",3],["round_to.rb","files/lib/core/facets/time/round_to_rb.html","files/lib/core/facets/time/round_to_rb.html","","",3],["set.rb","files/lib/core/facets/time/set_rb.html","files/lib/core/facets/time/set_rb.html","","",3],["shift.rb","files/lib/core/facets/time/shift_rb.html","files/lib/core/facets/time/shift_rb.html","","",3],["stamp.rb","files/lib/core/facets/time/stamp_rb.html","files/lib/core/facets/time/stamp_rb.html","","",3],["to_time.rb","files/lib/core/facets/time/to_time_rb.html","files/lib/core/facets/time/to_time_rb.html","","",3],["trunc.rb","files/lib/core/facets/time/trunc_rb.html","files/lib/core/facets/time/trunc_rb.html","","",3],["to_hash.rb","files/lib/core/facets/to_hash_rb.html","files/lib/core/facets/to_hash_rb.html","","",3],["unboundmethod.rb","files/lib/core/facets/unboundmethod_rb.html","files/lib/core/facets/unboundmethod_rb.html","","",3],["arguments.rb","files/lib/core/facets/unboundmethod/arguments_rb.html","files/lib/core/facets/unboundmethod/arguments_rb.html","","",3],["name.rb","files/lib/core/facets/unboundmethod/name_rb.html","files/lib/core/facets/unboundmethod/name_rb.html","","",3],["version.rb","files/lib/core/facets/version_rb.html","files/lib/core/facets/version_rb.html","","",3],["argvector.rb","files/lib/standard/facets/argvector_rb.html","files/lib/standard/facets/argvector_rb.html","","= ArgVector == Synopsis ArgVector provides a very simple means of parsing command line arguments. Unlike",3],["basicobject.rb","files/lib/standard/facets/basicobject_rb.html","files/lib/standard/facets/basicobject_rb.html","","Facets' BasicObject is an implementation of Jim Weirich's BlankSlate. BlankSlate Copyright 2004 by Jim",3],["cgi.rb","files/lib/standard/facets/cgi_rb.html","files/lib/standard/facets/cgi_rb.html","","",3],["cloneable.rb","files/lib/standard/facets/cloneable_rb.html","files/lib/standard/facets/cloneable_rb.html","","Clonable provides a standard basis for adding deep cloneablity to a class via the standard #dup and #clone",3],["continuation.rb","files/lib/standard/facets/continuation_rb.html","files/lib/standard/facets/continuation_rb.html","","",3],["date.rb","files/lib/standard/facets/date_rb.html","files/lib/standard/facets/date_rb.html","","",3],["digest.rb","files/lib/standard/facets/digest_rb.html","files/lib/standard/facets/digest_rb.html","","",3],["base64digest.rb","files/lib/standard/facets/digest/base64digest_rb.html","files/lib/standard/facets/digest/base64digest_rb.html","","",3],["salted_digest.rb","files/lib/standard/facets/digest/salted_digest_rb.html","files/lib/standard/facets/digest/salted_digest_rb.html","","",3],["enumargs.rb","files/lib/standard/facets/enumargs_rb.html","files/lib/standard/facets/enumargs_rb.html","","Enumerable::Arguments Copyright (c) 2004 Thomas Sawyer LGPL(3) License This module is free software.",3],["equitable.rb","files/lib/standard/facets/equitable_rb.html","files/lib/standard/facets/equitable_rb.html","","= Equitable This mixin provides methods of equality based on a single #identity method which must return",3],["erb.rb","files/lib/standard/facets/erb_rb.html","files/lib/standard/facets/erb_rb.html","","",3],["fileutils.rb","files/lib/standard/facets/fileutils_rb.html","files/lib/standard/facets/fileutils_rb.html","","TODO: Deprecate #safe_ln, if #ln has been fixed to do this. ",3],["amass.rb","files/lib/standard/facets/fileutils/amass_rb.html","files/lib/standard/facets/fileutils/amass_rb.html","","",3],["cp_rx.rb","files/lib/standard/facets/fileutils/cp_rx_rb.html","files/lib/standard/facets/fileutils/cp_rx_rb.html","","",3],["head.rb","files/lib/standard/facets/fileutils/head_rb.html","files/lib/standard/facets/fileutils/head_rb.html","","",3],["ln_r.rb","files/lib/standard/facets/fileutils/ln_r_rb.html","files/lib/standard/facets/fileutils/ln_r_rb.html","","",3],["outofdate.rb","files/lib/standard/facets/fileutils/outofdate_rb.html","files/lib/standard/facets/fileutils/outofdate_rb.html","","",3],["safe_ln.rb","files/lib/standard/facets/fileutils/safe_ln_rb.html","files/lib/standard/facets/fileutils/safe_ln_rb.html","","",3],["slice.rb","files/lib/standard/facets/fileutils/slice_rb.html","files/lib/standard/facets/fileutils/slice_rb.html","","",3],["stage.rb","files/lib/standard/facets/fileutils/stage_rb.html","files/lib/standard/facets/fileutils/stage_rb.html","","",3],["tail.rb","files/lib/standard/facets/fileutils/tail_rb.html","files/lib/standard/facets/fileutils/tail_rb.html","","",3],["wc.rb","files/lib/standard/facets/fileutils/wc_rb.html","files/lib/standard/facets/fileutils/wc_rb.html","","",3],["whereis.rb","files/lib/standard/facets/fileutils/whereis_rb.html","files/lib/standard/facets/fileutils/whereis_rb.html","","",3],["which.rb","files/lib/standard/facets/fileutils/which_rb.html","files/lib/standard/facets/fileutils/which_rb.html","","",3],["find.rb","files/lib/standard/facets/find_rb.html","files/lib/standard/facets/find_rb.html","","",3],["getoptlong.rb","files/lib/standard/facets/getoptlong_rb.html","files/lib/standard/facets/getoptlong_rb.html","","",3],["instantiable.rb","files/lib/standard/facets/instantiable_rb.html","files/lib/standard/facets/instantiable_rb.html","","= Instantiable Initialize modules, almost as if they were classes. Alows a module to be used much like",3],["interval.rb","files/lib/standard/facets/interval_rb.html","files/lib/standard/facets/interval_rb.html","","",3],["math.rb","files/lib/standard/facets/math_rb.html","files/lib/standard/facets/math_rb.html","","",3],["abs.rb","files/lib/standard/facets/math/abs_rb.html","files/lib/standard/facets/math/abs_rb.html","","",3],["acot.rb","files/lib/standard/facets/math/acot_rb.html","files/lib/standard/facets/math/acot_rb.html","","",3],["acoth.rb","files/lib/standard/facets/math/acoth_rb.html","files/lib/standard/facets/math/acoth_rb.html","","",3],["acsc.rb","files/lib/standard/facets/math/acsc_rb.html","files/lib/standard/facets/math/acsc_rb.html","","",3],["acsch.rb","files/lib/standard/facets/math/acsch_rb.html","files/lib/standard/facets/math/acsch_rb.html","","",3],["amd.rb","files/lib/standard/facets/math/amd_rb.html","files/lib/standard/facets/math/amd_rb.html","","",3],["approx_equal.rb","files/lib/standard/facets/math/approx_equal_rb.html","files/lib/standard/facets/math/approx_equal_rb.html","","",3],["asec.rb","files/lib/standard/facets/math/asec_rb.html","files/lib/standard/facets/math/asec_rb.html","","",3],["asech.rb","files/lib/standard/facets/math/asech_rb.html","files/lib/standard/facets/math/asech_rb.html","","",3],["atkinson_index.rb","files/lib/standard/facets/math/atkinson_index_rb.html","files/lib/standard/facets/math/atkinson_index_rb.html","","",3],["beta.rb","files/lib/standard/facets/math/beta_rb.html","files/lib/standard/facets/math/beta_rb.html","","",3],["cdf.rb","files/lib/standard/facets/math/cdf_rb.html","files/lib/standard/facets/math/cdf_rb.html","","",3],["ceil.rb","files/lib/standard/facets/math/ceil_rb.html","files/lib/standard/facets/math/ceil_rb.html","","",3],["cot.rb","files/lib/standard/facets/math/cot_rb.html","files/lib/standard/facets/math/cot_rb.html","","",3],["coth.rb","files/lib/standard/facets/math/coth_rb.html","files/lib/standard/facets/math/coth_rb.html","","",3],["csc.rb","files/lib/standard/facets/math/csc_rb.html","files/lib/standard/facets/math/csc_rb.html","","",3],["csch.rb","files/lib/standard/facets/math/csch_rb.html","files/lib/standard/facets/math/csch_rb.html","","",3],["delta.rb","files/lib/standard/facets/math/delta_rb.html","files/lib/standard/facets/math/delta_rb.html","","",3],["epsilon.rb","files/lib/standard/facets/math/epsilon_rb.html","files/lib/standard/facets/math/epsilon_rb.html","","",3],["exp10.rb","files/lib/standard/facets/math/exp10_rb.html","files/lib/standard/facets/math/exp10_rb.html","","",3],["exp2.rb","files/lib/standard/facets/math/exp2_rb.html","files/lib/standard/facets/math/exp2_rb.html","","",3],["factorial.rb","files/lib/standard/facets/math/factorial_rb.html","files/lib/standard/facets/math/factorial_rb.html","","",3],["floor.rb","files/lib/standard/facets/math/floor_rb.html","files/lib/standard/facets/math/floor_rb.html","","",3],["gamma.rb","files/lib/standard/facets/math/gamma_rb.html","files/lib/standard/facets/math/gamma_rb.html","","",3],["gcd.rb","files/lib/standard/facets/math/gcd_rb.html","files/lib/standard/facets/math/gcd_rb.html","","",3],["gini_coefficient.rb","files/lib/standard/facets/math/gini_coefficient_rb.html","files/lib/standard/facets/math/gini_coefficient_rb.html","","",3],["kldivergence.rb","files/lib/standard/facets/math/kldivergence_rb.html","files/lib/standard/facets/math/kldivergence_rb.html","","",3],["lcm.rb","files/lib/standard/facets/math/lcm_rb.html","files/lib/standard/facets/math/lcm_rb.html","","",3],["lgamma.rb","files/lib/standard/facets/math/lgamma_rb.html","files/lib/standard/facets/math/lgamma_rb.html","","",3],["linsolve.rb","files/lib/standard/facets/math/linsolve_rb.html","files/lib/standard/facets/math/linsolve_rb.html","","",3],["log2.rb","files/lib/standard/facets/math/log2_rb.html","files/lib/standard/facets/math/log2_rb.html","","",3],["max.rb","files/lib/standard/facets/math/max_rb.html","files/lib/standard/facets/math/max_rb.html","","",3],["mean.rb","files/lib/standard/facets/math/mean_rb.html","files/lib/standard/facets/math/mean_rb.html","","",3],["median.rb","files/lib/standard/facets/math/median_rb.html","files/lib/standard/facets/math/median_rb.html","","",3],["min.rb","files/lib/standard/facets/math/min_rb.html","files/lib/standard/facets/math/min_rb.html","","",3],["percentile.rb","files/lib/standard/facets/math/percentile_rb.html","files/lib/standard/facets/math/percentile_rb.html","","",3],["pow.rb","files/lib/standard/facets/math/pow_rb.html","files/lib/standard/facets/math/pow_rb.html","","",3],["pstd.rb","files/lib/standard/facets/math/pstd_rb.html","files/lib/standard/facets/math/pstd_rb.html","","",3],["pvariance.rb","files/lib/standard/facets/math/pvariance_rb.html","files/lib/standard/facets/math/pvariance_rb.html","","",3],["rmd.rb","files/lib/standard/facets/math/rmd_rb.html","files/lib/standard/facets/math/rmd_rb.html","","",3],["root.rb","files/lib/standard/facets/math/root_rb.html","files/lib/standard/facets/math/root_rb.html","","",3],["round.rb","files/lib/standard/facets/math/round_rb.html","files/lib/standard/facets/math/round_rb.html","","",3],["sec.rb","files/lib/standard/facets/math/sec_rb.html","files/lib/standard/facets/math/sec_rb.html","","",3],["sech.rb","files/lib/standard/facets/math/sech_rb.html","files/lib/standard/facets/math/sech_rb.html","","",3],["sign.rb","files/lib/standard/facets/math/sign_rb.html","files/lib/standard/facets/math/sign_rb.html","","",3],["sinc.rb","files/lib/standard/facets/math/sinc_rb.html","files/lib/standard/facets/math/sinc_rb.html","","",3],["sqr.rb","files/lib/standard/facets/math/sqr_rb.html","files/lib/standard/facets/math/sqr_rb.html","","",3],["sqsolve.rb","files/lib/standard/facets/math/sqsolve_rb.html","files/lib/standard/facets/math/sqsolve_rb.html","","",3],["std.rb","files/lib/standard/facets/math/std_rb.html","files/lib/standard/facets/math/std_rb.html","","",3],["stderr.rb","files/lib/standard/facets/math/stderr_rb.html","files/lib/standard/facets/math/stderr_rb.html","","",3],["sum.rb","files/lib/standard/facets/math/sum_rb.html","files/lib/standard/facets/math/sum_rb.html","","",3],["summed_sqdevs.rb","files/lib/standard/facets/math/summed_sqdevs_rb.html","files/lib/standard/facets/math/summed_sqdevs_rb.html","","",3],["tgamma.rb","files/lib/standard/facets/math/tgamma_rb.html","files/lib/standard/facets/math/tgamma_rb.html","","",3],["theil_index.rb","files/lib/standard/facets/math/theil_index_rb.html","files/lib/standard/facets/math/theil_index_rb.html","","",3],["variance.rb","files/lib/standard/facets/math/variance_rb.html","files/lib/standard/facets/math/variance_rb.html","","",3],["memoizable.rb","files/lib/standard/facets/memoizable_rb.html","files/lib/standard/facets/memoizable_rb.html","","Memoization is an optimization technique used primarily to speed up  programs by having function calls",3],["multipliers.rb","files/lib/standard/facets/multipliers_rb.html","files/lib/standard/facets/multipliers_rb.html","","",3],["multiton.rb","files/lib/standard/facets/multiton_rb.html","files/lib/standard/facets/multiton_rb.html","","= Multiton == Synopsis Multiton design pattern ensures only one object is allocated for a given state.",3],["http.rb","files/lib/standard/facets/net/http_rb.html","files/lib/standard/facets/net/http_rb.html","","",3],["nullclass.rb","files/lib/standard/facets/nullclass_rb.html","files/lib/standard/facets/nullclass_rb.html","","= Nullclass NullClass is essentially NilClass but it differs in one important way. When a method is called",3],["opesc.rb","files/lib/standard/facets/opesc_rb.html","files/lib/standard/facets/opesc_rb.html","","= OpEsc NOTE: As of v3.0 of Facets these have been renamed: op_plus_self   -> op_plus op_minus_self ",3],["ostruct.rb","files/lib/standard/facets/ostruct_rb.html","files/lib/standard/facets/ostruct_rb.html","","",3],["pathname.rb","files/lib/standard/facets/pathname_rb.html","files/lib/standard/facets/pathname_rb.html","","= Pathname Ruby's standard Pathname class with extensions. == Authors: * Daniel Burger * Thomas Sawyer",3],["platform.rb","files/lib/standard/facets/platform_rb.html","files/lib/standard/facets/platform_rb.html","","",3],["random.rb","files/lib/standard/facets/random_rb.html","files/lib/standard/facets/random_rb.html","","",3],["rbconfig.rb","files/lib/standard/facets/rbconfig_rb.html","files/lib/standard/facets/rbconfig_rb.html","","An extended rendition of the Ruby's standard RbConfig module. ",3],["set.rb","files/lib/standard/facets/set_rb.html","files/lib/standard/facets/set_rb.html","","",3],["shellwords.rb","files/lib/standard/facets/shellwords_rb.html","files/lib/standard/facets/shellwords_rb.html","","",3],["strscan.rb","files/lib/standard/facets/strscan_rb.html","files/lib/standard/facets/strscan_rb.html","","",3],["thread.rb","files/lib/standard/facets/thread_rb.html","files/lib/standard/facets/thread_rb.html","","= Thread Related Extensions This a small colleciton of thread-related extensions. ",3],["timer.rb","files/lib/standard/facets/timer_rb.html","files/lib/standard/facets/timer_rb.html","","",3],["tuple.rb","files/lib/standard/facets/tuple_rb.html","files/lib/standard/facets/tuple_rb.html","","",3],["uri.rb","files/lib/standard/facets/uri_rb.html","files/lib/standard/facets/uri_rb.html","","",3],["yaml.rb","files/lib/standard/facets/yaml_rb.html","files/lib/standard/facets/yaml_rb.html","","",3],["zlib.rb","files/lib/standard/facets/zlib_rb.html","files/lib/standard/facets/zlib_rb.html","","A convenient wrapper for the zlib standard library that allows compression/decompression of strings with",3]],"searchIndex":["argvector","array","basicobject","binding","cgi","class","cloneable","comparable","continuation","date","datetime","denumerable","denumerator","digest","class","instance","dir","erb","opentemplate","enumerable","arguments","recursor","enumerator","equitable","exception","facets","falseclass","file","filetest","fileutils","dryrun","nowrite","verbose","find","fixnum","float","functor","getoptlong","dsl","indexable","instance","instantiable","integer","interval","lazy","future","promise","diverges","promisesafe","matchdata","math","memoizable","copy","method","composition","module","instancefunction","multiton","inclusive","metamethods","net","nilclass","nullclass","numeric","multipliers","objectspace","opesc","openstruct","pathname","platform","proc","process","random","arrayextensions","hashextensions","integerextensions","numericextensions","rangeextensions","stringextensions","self","range","rbconfig","regexp","set","shellwords","string","stringscanner","struct","symbol","time","timer","dummy","trueclass","tuple","uri","hash","kernel","unboundmethod","yaml","zlib","*()","*()","*()","*()","**()","+()","+()","+@()","-()","-()","-@()","/()","/()","/()","<<()","<<()","<=>()","==()","==()","===()","===()","=~()","=~()","equitable()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]=()","[]=()","[]=()","[]=()","^()","^()","^()","__dir__()","__file__()","__line__()","__callee__()","__merge__()","__method__()","__update__()","_crypt()","_dump()","_load()","abs()","absolute?()","abstract()","accumulate()","accumulate_all()","acot()","acoth()","acronym()","acsc()","acsch()","advance()","advance()","after()","ago()","ago()","ago()","alias_accessor()","alias_method_chain()","alias_module_function()","alias_reader()","alias_tester()","alias_validator()","alias_writer()","align()","align_center()","align_left()","align_right()","all_instance_methods()","alt_escape()","amass()","amd()","ancestor?()","anonymous?()","append()","append_features()","append_features()","approx?()","approx_equal()","arguments()","arguments()","arity()","arity()","as_s()","ascend()","asec()","asech()","assign()","assoc_options()","at_least()","at_most()","at_rand()","at_rand()","at_rand()","at_rand()","at_rand!()","at_rand!()","at_rand!()","atize()","atkinson_index()","atomic_id()","atomic_open()","atomic_write()","atto()","attr_class_accessor()","attr_class_reader()","attr_class_writer()","attr_setter()","attr_tester()","attr_validator()","attributes()","bang?()","base64digest()","base64digest()","base64digest!()","basename()","before()","begin()","beginning_of_day()","beginning_of_day()","beta()","big_endian?()","bind()","bind_to()","bit()","bit?()","bit_clear()","bitmask()","bitmask?()","blank?()","blank?()","blank?()","blank?()","blank?()","body()","bound()","bracket()","bracket!()","briefcase()","bsd?()","bsd?()","byte_order()","byteorder()","bytes()","cache()","cache()","call()","call_stack()","caller()","callstack()","camelcase()","cap()","capitalized?()","cardinal?()","cast_from_array()","cast_from_string()","cattr()","cattr_accessor()","cattr_reader()","cattr_writer()","cdf()","ceil()","centi()","cgi_escape()","cgi_parse()","cgi_unescape()","change()","change()","change()","characters()","chomp()","chomp_query_string()","chop_basename()","class_accessor()","class_def()","class_extend()","class_extend()","class_extensions()","class_inheritor()","class_load()","class_method_defined?()","class_reader()","class_require()","class_writer()","classes()","cleanlines()","cleave()","clip()","clone()","clone?()","clone?()","clone?()","clone?()","clone?()","close?()","closed()","cluster_by()","cmp()","cmp()","collapse()","collect()","collect_with_index()","collisions()","combination()","combine()","combine()","commonality()","compact_collect()","compact_map()","compose()","compress()","compress_lines()","conjoin()","const_missing()","constraint_to_lambda()","contains?()","copy_entryx()","copy_inheritor()","cot()","coth()","count()","cp_rx()","create()","create()","crypt()","csc()","csch()","current()","curry()","daemon()","datadir()","days_in_month()","days_of_month()","deci()","decode()","decompress()","defer()","defined?()","deflate()","defuse()","degenerate?()","deka()","delete_unless()","delete_values()","delete_values_at()","delta()","descend()","descendants()","detail()","detect()","direction()","distance()","distance()","divide()","divide()","dos_escape()","downcase?()","download()","download_and_save()","dst_adjustment()","dup()","dup!()","dup!()","dup!()","dup!()","dup!()","dup?()","dup?()","dup?()","dup?()","dup?()","duplicates()","each()","each()","each()","each()","each_by()","each_char()","each_child()","each_index()","each_pair()","each_with_object()","each_word()","edit_distance()","edit_distance()","elapse()","elementwise()","empty?()","empty?()","enclosure()","enclosures()","encname()","end()","end_of_day()","end_time()","end_with?()","ends()","ends_with?()","enterprise?()","entropy()","epsilon()","eql?()","eql?()","eql?()","erb_result()","ergo()","error_print()","error_print()","esc()","escape()","escape()","escformat()","eval()","eval()","even?()","every()","every!()","ewise()","exa()","exbi()","exclude?()","exclude?()","exclude_begin?()","exclude_end?()","exclude_first?()","exclude_last?()","exp10()","exp2()","expand()","expand_tab()","expand_tabs()","ext()","extract_options!()","fac()","factorial()","factorial()","femto()","file()","file_send()","filter()","find()","find_all()","find_yield()","first()","first()","first()","first!()","first=()","first_closed()","first_opened()","flag()","flags()","floor()","fold()","foot()","format_options()","frequency()","from()","from()","future?()","future?()","fx()","fx_send()","gamma()","gcd()","generate()","get_query_string()","getutc()","gibi()","giga()","gini_coefficient()","glob()","glob_first()","glob_flags()","glob_relative()","graph()","group_by()","half_closed()","hash()","hash()","hash_to_query()","hash_to_query_string()","hashify()","head()","head()","hecto()","hence()","hide()","home()","home()","homename()","host_os()","host_os()","housing()","ideal_entropy()","identify()","in()","in()","in()","incase?()","include?()","include?()","include_as()","include_function_module()","included()","included()","included()","indent()","indent!()","index()","index()","index()","index_all()","index_of()","inflate()","init()","initialize_copy()","initialize_copy()","initialized?()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","instance()","instance_delegate()","instance_delegate()","instance_function()","instance_method!()","instance_method_defined?()","integrate()","interpolate()","interpreter()","iron_ruby?()","ironruby?()","is()","is?()","java?()","jruby?()","keys()","kibi()","kilo()","kldivergence()","last()","last()","last()","last!()","last=()","last_closed()","last_opened()","lchomp()","lchomp()","lchomp!()","lcm()","length()","length()","length()","less()","let()","letter()","lgamma()","limit()","line_wrap()","lines()","link_entry()","linsolve()","linux?()","linux?()","little_endian?()","ln_r()","local()","local_offset()","local_time()","local_variables()","log2()","lower_camelcase()","lowercase()","ls_r()","mac?()","mac?()","major()","map()","map_by()","map_detect()","map_send()","map_with()","map_with_index()","margin()","marshal_from_cgi()","marshal_to_cgi()","mash()","match()","match()","matchset()","matchtree()","mattr()","mattr_accessor()","mattr_reader()","mattr_writer()","max()","max()","mean()","mebi()","median()","median()","mega()","member?()","memoize()","memoize()","memoize()","merge!()","method_clash()","method_clash?()","method_missing()","method_missing()","method_missing()","method_missing()","method_space()","method_to_filename()","methodize()","methodize()","methodize()","micro()","mid()","middle()","midnight()","midnight()","milli()","min()","min()","minor()","mode()","modname()","modulate()","module_def()","module_load()","module_method_defined?()","module_require()","modulize()","month_name()","mri?()","mscan()","multi_flag()","multiglob()","multiglob_r()","multiline?()","multiple?()","multiton_id()","multiton_id()","multiton_instance()","multiton_mutex()","name()","names()","nano()","natcmp()","nchar()","negative?()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","newlines()","nil?()","none?()","nonuniq()","nonuniq!()","not?()","not_empty?()","null()","null()","null?()","null?()","object_state()","object_state()","object_state()","occur()","occurent()","odd?()","of()","official_ruby?()","old_initialize()","on_timeout()","one?()","only()","opened()","operands()","optional()","options()","opts()","ordinal()","ordinalize()","ostruct_delegate()","ostruct_merge()","ostruct_update()","out_of_date?()","outofdate?()","outofdate?()","overlap?()","owner()","pad()","pad!()","parameters()","parameters()","parameters_without_duplicates()","parent?()","parrot?()","parse()","parse_arity()","parse_constraint()","parse_line()","parse_preoptions()","partial()","past?()","past?()","pathize()","pathize()","pathize()","pebi()","peek()","per()","percentile()","perl?()","permutation()","peta()","pick()","pick()","pick!()","pick_key()","pick_pair()","pico()","plain?()","poke()","pop()","pos()","positive?()","posix?()","posix?()","pot()","pow()","power_set()","power_set()","preallocate()","preextend()","preflags()","preoptions()","probability()","product()","profile()","pstd()","pull()","purge()","push()","pvariance()","quantile()","query?()","query_string_to_hash()","query_to_hash()","quote()","raised?()","rand_byte()","rand_byte!()","rand_index()","rand_index()","rand_key()","rand_key!()","rand_pair()","rand_pair!()","rand_subset()","rand_value()","rand_value!()","random()","random_binary()","random_delta()","random_delta()","range()","range()","range_all()","range_of_line()","rbx?()","read()","read_binary()","read_list()","reader?()","receiver()","recurse()","recurse()","recurse!()","recursively()","recursively()","redef()","redefine_method()","redirect()","redirect_method()","ree?()","reflect()","reinitialize()","reject()","relative?()","rememoize()","rename()","rename_method()","replace()","reqs()","required()","reset()","reset_limit()","reversed()","revisal()","revise()","rewrite()","rewrite()","rewrite!()","rindex()","rmd()","roman()","root()","root()","root?()","rootname()","rootname()","rotate()","rotate!()","round()","round_at()","round_at()","round_to()","round_to()","round_to()","rubinius?()","ruby?()","run()","running?()","safe?()","safe_ln()","salted_base64digest()","salted_base64digest()","salted_digest()","salted_digest()","salted_hexdigest()","salted_hexdigest()","sanitize()","scan_before()","sec()","sech()","seconds_since_midnight()","select()","select()","select!()","self()","sentinels()","set()","set()","setter?()","shatter()","shelljoin()","shellwords()","shift()","shift()","shuffle()","shuffle()","shuffle()","shuffle!()","shuffle!()","shuffle!()","sign()","similarity()","sinc()","since()","since()","singleton?()","singleton_method_added()","singleton_method_added()","singleton_method_defined?()","size()","size()","skip()","slice()","snakecase()","solaris?()","solaris?()","spacename()","spacing()","splice()","splice()","split()","split_all()","split_root()","split_root()","sqr()","sqsolve()","squish()","squish!()","stage()","stage()","stage()","stage()","stamp()","stamp()","stamp()","stamp()","start()","start()","start_time()","start_with?()","starts_with?()","std()","stderr()","step()","stop()","stop()","stopped?()","subclasses()","subcommand()","subcommand_with_arguments()","subcommand_with_parameters()","subcommand_with_preoptions()","succ()","sum()","sum()","summed_sqdevs()","supported()","suppress()","symbian?()","symbian?()","tab()","tabto()","tail()","tail()","take()","take()","tebi()","teeny()","tera()","tgamma()","theil_index()","threaded_map()","threaded_map_send()","thrown?()","thru()","thru()","time()","time_with_datetime_fallback()","times_collect()","times_map()","titlecase()","to_a()","to_a()","to_a()","to_ary()","to_b()","to_b()","to_b()","to_bool()","to_bool()","to_bool()","to_date()","to_date()","to_date()","to_date()","to_datetime()","to_datetime()","to_datetime()","to_datetime()","to_f()","to_f()","to_h()","to_h()","to_h()","to_h()","to_h()","to_h()","to_h()","to_h_assoc()","to_h_assoc()","to_h_assoc()","to_h_auto()","to_h_auto()","to_h_auto()","to_h_flat()","to_h_flat()","to_h_flat()","to_h_multi()","to_h_multi()","to_h_multi()","to_h_splat()","to_h_splat()","to_h_splat()","to_hash()","to_method()","to_obj()","to_ostruct()","to_ostruct()","to_path()","to_path()","to_proc()","to_proc()","to_proc()","to_proc()","to_r()","to_range()","to_re()","to_re()","to_regexp()","to_rx()","to_s()","to_s()","to_t()","to_t()","to_t()","to_time()","to_time()","to_time()","to_time()","to_tuple()","to_uri()","tomorrow()","tomorrow()","total_time()","traverse()","traverse!()","trunc()","try()","umbrella()","unbracket()","unbracket!()","underscore()","unfold()","unindent()","unindent!()","uniq_by()","uniq_by!()","unmemoize()","unquote()","unshift()","unuri()","upcase?()","update()","update_query_string()","update_request_uri()","upper_camelcase()","uppercase()","uptodate?()","uri()","utc()","utc?()","utc_offset()","utc_time()","values()","values()","variables()","variablize()","variablize()","variance()","variance2()","visit()","visit()","wc()","whereis()","which()","windows?()","windows?()","with()","within?()","word_wrap()","word_wrap!()","words()","work()","wrap()","wrap_enumerable_method()","wrap_method()","write()","writelines()","writer?()","xmlschema()","xmlschema()","yaml?()","yesterday()","yesterday()","zip_map()","|()","~()","~()","history.rdoc","notice.rdoc","readme.rdoc","ruby.txt","facets.rb","facets.yml","file_helpers.rb","array.rb","after.rb","before.rb","collapse.rb","collisions.rb","combination.rb","commonality.rb","conjoin.rb","contains.rb","delete.rb","delete_unless.rb","delete_values.rb","divide.rb","duplicates.rb","each_pair.rb","each_value.rb","entropy.rb","extract_options.rb","from.rb","index.rb","indexable.rb","median.rb","merge.rb","mode.rb","nonuniq.rb","not_empty.rb","occurent.rb","only.rb","op_pow.rb","pad.rb","peek.rb","permutation.rb","poke.rb","probability.rb","product.rb","pull.rb","recurse.rb","recursively.rb","rotate.rb","select.rb","splice.rb","split.rb","store.rb","thru.rb","traverse.rb","uniq_by.rb","binding.rb","__callee__.rb","__method__.rb","call_stack.rb","caller.rb","callstack.rb","defined.rb","eval.rb","local_variables.rb","op.rb","op_get.rb","op_set.rb","self.rb","with.rb","boolean.rb","class.rb","descendants.rb","hierarchically.rb","methodize.rb","pathize.rb","preallocate.rb","singleton.rb","subclasses.rb","to_proc.rb","comparable.rb","at_least.rb","at_most.rb","bound.rb","cap.rb","clip.rb","cmp.rb","op_get.rb","denumerable.rb","dir.rb","ascend.rb","descend.rb","each_child.rb","multiglob.rb","parent.rb","recurse.rb","enumerable.rb","accumulate.rb","cluster_by.rb","collect_with_index.rb","compact_map.rb","count.rb","defer.rb","each_by.rb","each_with_object.rb","every.rb","ewise.rb","exclude.rb","expand.rb","filter.rb","find_yield.rb","frequency.rb","graph.rb","group_by.rb","hashify.rb","incase.rb","map_by.rb","map_detect.rb","map_send.rb","map_with.rb","map_with_index.rb","mash.rb","modulate.rb","none.rb","occur.rb","one.rb","per.rb","purge.rb","recursively.rb","sum.rb","take.rb","uniq_by.rb","visit.rb","zip_map.rb","enumerator.rb","fx.rb","exception.rb","detail.rb","error_print.rb","raised.rb","suppress.rb","file.rb","append.rb","atomic_id.rb","atomic_open.rb","atomic_write.rb","create.rb","ext.rb","null.rb","read_binary.rb","read_list.rb","rewrite.rb","rootname.rb","sanitize.rb","split_all.rb","split_root.rb","write.rb","writelines.rb","filetest.rb","absolute.rb","contains.rb","relative.rb","root.rb","safe.rb","separator_pattern.rb","fixnum.rb","float.rb","round.rb","functor.rb","hash.rb","alias.rb","argumentize.rb","at.rb","autonew.rb","collate.rb","count.rb","data.rb","dearray_values.rb","deep_merge.rb","delete.rb","delete_at.rb","delete_unless.rb","delete_values.rb","diff.rb","except.rb","graph.rb","insert.rb","inverse.rb","join.rb","keys.rb","mash.rb","new_with.rb","op.rb","op_add.rb","op_and.rb","op_mul.rb","op_or.rb","op_push.rb","op_sub.rb","recurse.rb","recursively.rb","rekey.rb","replace_each.rb","reverse_merge.rb","select.rb","slice.rb","stringify_keys.rb","subset.rb","swap.rb","symbolize_keys.rb","to_h.rb","to_mod.rb","to_options.rb","to_proc.rb","to_struct.rb","traverse.rb","update.rb","update_each.rb","update_keys.rb","update_values.rb","url_params.rb","weave.rb","zip.rb","indexable.rb","instance.rb","integer.rb","bit.rb","bitmask.rb","even.rb","factorial.rb","multiple.rb","odd.rb","of.rb","ordinal.rb","roman.rb","kernel.rb","__callee__.rb","__class__.rb","__dir__.rb","__get__.rb","__method__.rb","__set__.rb","as.rb","ask.rb","assign.rb","assign_from.rb","attr_singleton.rb","blank.rb","call_stack.rb","callstack.rb","case.rb","complete.rb","constant.rb","d.rb","deep_clone.rb","deep_copy.rb","demo.rb","disable_warnings.rb","eigen.rb","eigenclass.rb","enable_warnings.rb","equate.rb","ergo.rb","extend.rb","extension.rb","false.rb","here.rb","hierarchical_send.rb","identical.rb","in.rb","instance_assign.rb","instance_class.rb","instance_exec.rb","instance_send.rb","load_all.rb","load_relative.rb","maybe.rb","memo.rb","meta_alias.rb","meta_class.rb","meta_def.rb","meta_eval.rb","method.rb","no.rb","not.rb","not_nil.rb","object_class.rb","object_hexid.rb","object_send.rb","p.rb","presence.rb","present.rb","qua_class.rb","require_all.rb","require_relative.rb","respond.rb","returning.rb","silence.rb","silence_warnings.rb","singleton_class.rb","source_location.rb","super_method.rb","tap.rb","temporarily.rb","trap_chain.rb","true.rb","try.rb","val.rb","with.rb","writers.rb","y.rb","yes.rb","lazy.rb","matchdata.rb","match.rb","matchset.rb","metaid.rb","method.rb","composition.rb","memoize.rb","op_mul.rb","op_pow.rb","module.rb","abstract.rb","alias_accessor.rb","alias_method_chain.rb","alias_module_function.rb","all_instance_methods.rb","ancestor.rb","anonymous.rb","attr_class_accessor.rb","attr_setter.rb","attr_tester.rb","attr_validator.rb","basename.rb","can.rb","class.rb","class_accessor.rb","class_def.rb","class_extend.rb","class_inheritor.rb","class_method_defined.rb","copy_inheritor.rb","enclosure.rb","enclosures.rb","extend.rb","home.rb","homename.rb","housing.rb","include_as.rb","include_function_module.rb","instance_function.rb","instance_method.rb","instance_method_defined.rb","integrate.rb","is.rb","let.rb","mattr.rb","memoize.rb","method_clash.rb","method_space.rb","methodize.rb","modname.rb","module_def.rb","module_load.rb","nodef.rb","op.rb","op_add.rb","op_mul.rb","op_sub.rb","pathize.rb","preextend.rb","redefine_method.rb","redirect_method.rb","remove.rb","rename_method.rb","revise.rb","set.rb","singleton_method_defined.rb","spacename.rb","to_obj.rb","wrap_method.rb","na.rb","nilclass.rb","ergo.rb","to_f.rb","numeric.rb","approx.rb","close.rb","distance.rb","length.rb","negative.rb","positive.rb","round.rb","round_at.rb","round_to.rb","spacing.rb","object.rb","clone.rb","dup.rb","object_state.rb","replace.rb","try_dup.rb","objectspace.rb","classes.rb","op_fetch.rb","reflect.rb","proc.rb","bind.rb","bind_to.rb","compose.rb","curry.rb","partial.rb","to_method.rb","update.rb","process.rb","daemon.rb","range.rb","combine.rb","overlap.rb","quantile.rb","to_r.rb","umbrella.rb","within.rb","regexp.rb","arity.rb","multiline.rb","op_add.rb","op_or.rb","to_re.rb","roman.rb","string.rb","acronym.rb","align.rb","bracket.rb","briefcase.rb","bytes.rb","camelcase.rb","capitalized.rb","characters.rb","cleanlines.rb","cleave.rb","cmp.rb","compress_lines.rb","crypt.rb","divide.rb","each_char.rb","each_word.rb","edit_distance.rb","end_with.rb","exclude.rb","expand_tab.rb","file.rb","fold.rb","indent.rb","index_all.rb","interpolate.rb","lchomp.rb","line_wrap.rb","lines.rb","lowercase.rb","margin.rb","methodize.rb","modulize.rb","mscan.rb","natcmp.rb","nchar.rb","newlines.rb","op_div.rb","op_sub.rb","outdent.rb","pathize.rb","quote.rb","random_binary.rb","range.rb","range_all.rb","range_of_line.rb","rewrite.rb","roman.rb","shatter.rb","similarity.rb","snakecase.rb","splice.rb","squish.rb","start_with.rb","store.rb","subtract.rb","tab.rb","tabto.rb","titlecase.rb","to_re.rb","unbracket.rb","underscore.rb","unfold.rb","unindent.rb","unquote.rb","uppercase.rb","variablize.rb","word_wrap.rb","words.rb","xor.rb","struct.rb","attributes.rb","symbol.rb","as_s.rb","bang.rb","chomp.rb","generate.rb","not.rb","op_div.rb","plain.rb","query.rb","reader.rb","setter.rb","succ.rb","thrown.rb","to_proc.rb","variablize.rb","writer.rb","time.rb","ago.rb","change.rb","dst_adjustment.rb","elapse.rb","future.rb","hence.rb","in.rb","less.rb","past.rb","round_to.rb","set.rb","shift.rb","stamp.rb","to_time.rb","trunc.rb","to_hash.rb","unboundmethod.rb","arguments.rb","name.rb","version.rb","argvector.rb","basicobject.rb","cgi.rb","cloneable.rb","continuation.rb","date.rb","digest.rb","base64digest.rb","salted_digest.rb","enumargs.rb","equitable.rb","erb.rb","fileutils.rb","amass.rb","cp_rx.rb","head.rb","ln_r.rb","outofdate.rb","safe_ln.rb","slice.rb","stage.rb","tail.rb","wc.rb","whereis.rb","which.rb","find.rb","getoptlong.rb","instantiable.rb","interval.rb","math.rb","abs.rb","acot.rb","acoth.rb","acsc.rb","acsch.rb","amd.rb","approx_equal.rb","asec.rb","asech.rb","atkinson_index.rb","beta.rb","cdf.rb","ceil.rb","cot.rb","coth.rb","csc.rb","csch.rb","delta.rb","epsilon.rb","exp10.rb","exp2.rb","factorial.rb","floor.rb","gamma.rb","gcd.rb","gini_coefficient.rb","kldivergence.rb","lcm.rb","lgamma.rb","linsolve.rb","log2.rb","max.rb","mean.rb","median.rb","min.rb","percentile.rb","pow.rb","pstd.rb","pvariance.rb","rmd.rb","root.rb","round.rb","sec.rb","sech.rb","sign.rb","sinc.rb","sqr.rb","sqsolve.rb","std.rb","stderr.rb","sum.rb","summed_sqdevs.rb","tgamma.rb","theil_index.rb","variance.rb","memoizable.rb","multipliers.rb","multiton.rb","http.rb","nullclass.rb","opesc.rb","ostruct.rb","pathname.rb","platform.rb","random.rb","rbconfig.rb","set.rb","shellwords.rb","strscan.rb","thread.rb","timer.rb","tuple.rb","uri.rb","yaml.rb","zlib.rb"],"longSearchIndex":["lib/standard/facets/argvector.rb","lib/standard/facets/tuple.rb","lib/standard/facets/basicobject.rb","lib/core/facets/kernel/call_stack.rb","lib/standard/facets/cgi.rb","lib/core/facets/module/revise.rb","lib/standard/facets/cloneable.rb","lib/core/facets/comparable/op_get.rb","lib/standard/facets/continuation.rb","lib/standard/facets/date.rb","lib/standard/facets/date.rb","lib/core/facets/denumerable.rb","lib/core/facets/denumerable.rb","lib/standard/facets/digest/salted_digest.rb","digest","digest","lib/core/facets/dir/recurse.rb","lib/standard/facets/erb.rb","erb","lib/standard/facets/thread.rb","enumerable","enumerable","lib/core/facets/to_hash.rb","lib/standard/facets/equitable.rb","lib/core/facets/exception/suppress.rb","lib/core/facets/version.rb","lib/core/facets/object/dup.rb","lib/standard/facets/yaml.rb","lib/core/facets/filetest/separator_pattern.rb","lib/standard/facets/fileutils/which.rb","fileutils","fileutils","fileutils","lib/standard/facets/find.rb","lib/core/facets/fixnum.rb","lib/core/facets/numeric/round.rb","lib/core/facets/functor.rb","lib/standard/facets/getoptlong.rb","getoptlong","lib/core/facets/indexable.rb","lib/core/facets/instance.rb","lib/standard/facets/instantiable.rb","lib/standard/facets/random.rb","lib/standard/facets/interval.rb","lib/core/facets/lazy.rb","lazy","lazy","lazy::promise","lazy","lib/core/facets/matchdata/matchset.rb","lib/standard/facets/math/variance.rb","lib/standard/facets/memoizable.rb","memoizable","lib/core/facets/method/memoize.rb","method","lib/standard/facets/equitable.rb","module","lib/standard/facets/multiton.rb","multiton","multiton","lib/standard/facets/net/http.rb","lib/standard/facets/pathname.rb","lib/standard/facets/nullclass.rb","lib/standard/facets/random.rb","numeric","lib/core/facets/objectspace/reflect.rb","lib/standard/facets/opesc.rb","lib/standard/facets/ostruct.rb","lib/standard/facets/pathname.rb","lib/standard/facets/platform.rb","lib/core/facets/proc/update.rb","lib/core/facets/process/daemon.rb","lib/standard/facets/random.rb","random","random","random","random","random","random","random::stringextensions","lib/standard/facets/random.rb","lib/standard/facets/rbconfig.rb","lib/core/facets/regexp/to_re.rb","lib/standard/facets/set.rb","lib/standard/facets/shellwords.rb","lib/standard/facets/tuple.rb","lib/standard/facets/strscan.rb","lib/core/facets/to_hash.rb","lib/core/facets/symbol/variablize.rb","lib/standard/facets/date.rb","lib/standard/facets/timer.rb","timer","lib/core/facets/object/dup.rb","lib/standard/facets/tuple.rb","lib/standard/facets/uri.rb","uri","uri","lib/core/facets/unboundmethod/name.rb","lib/standard/facets/yaml.rb","lib/standard/facets/zlib.rb","method","method::composition","module","proc","array","module","regexp","interval","module","string","interval","pathname","string","symbol","instance","tuple","tuple","equitable","platform","interval","platform","platform","tuple","module","binding","comparable","instance","interval","method::composition","nullclass","openstruct","pathname","tuple","tuple","binding","instance","openstruct","tuple","method","method::composition","string","binding","binding","binding","binding","openstruct","binding","openstruct","string","multiton","multiton::metamethods","math","filetest","module","enumerable","enumerable","math","math","string","math","math","date","datetime","array","date","datetime","time","module","module","module","module","module","module","module","string","string","string","string","module","shellwords","fileutils","math","module","module","file","instantiable","memoizable","numeric","math","argvector","unboundmethod","method::composition","regexp","symbol","dir","math","math","instance","argvector","comparable","comparable","random::arrayextensions","random::hashextensions","random::rangeextensions","random::stringextensions","random::arrayextensions","random::hashextensions","random::stringextensions","instance","math","file","file","file","numeric::multipliers","module","module","module","module","module","module","struct","symbol","digest::class","digest::instance","digest::instance","module","array","interval","date","datetime","math","platform","proc","proc","integer","integer","integer","integer","integer","falseclass","nilclass","numeric","string","trueclass","indexable","comparable","string","string","string","platform","rbconfig","platform","platform","string","functor","memoizable","method::composition","binding","binding","binding","string","comparable","string","platform","tuple","tuple","module","module","module","module","math","math","numeric::multipliers","uri","uri","uri","date","datetime","time","string","symbol","uri","filetest","module","module","class","module","module","module","module","module","module","module","module","objectspace","string","string","comparable","multiton","falseclass","nilclass","numeric","symbol","trueclass","numeric","interval","enumerable","comparable","string","array","denumerable","enumerable","array","array","range","range","array","enumerable","enumerable","proc","zlib","string","array","facets","tuple","filetest","fileutils","module","math","math","enumerable","fileutils","continuation","file","string","math","math","date","proc","process","rbconfig","date","date","numeric::multipliers","uri","zlib","enumerable","binding","zlib","timer","interval","numeric::multipliers","array","array","array","math","dir","class","exception","enumerable::arguments","interval","interval","numeric","array","string","shellwords","string","net","net","time","multiton","falseclass","nilclass","numeric","symbol","trueclass","falseclass","nilclass","numeric","symbol","trueclass","array","instance","interval","openstruct","tuple","enumerable","string","dir","tuple","array","enumerable","string","string","string","time","enumerable","pathname","tuple","module","module","module","interval","datetime","timer","string","indexable","string","platform","array","math","equitable","interval","tuple","erb::opentemplate","nilclass","exception","exception","cgi","opesc","shellwords","cgi","binding","instance","integer","enumerable","enumerable","enumerable","numeric::multipliers","numeric::multipliers","enumerable","string","interval","interval","interval","interval","math","math","enumerable","string","string","file","array","integer","integer","math","numeric::multipliers","string","string","enumerable","enumerable::arguments","denumerable","enumerable","indexable","interval","tuple","indexable","indexable","interval","interval","getoptlong::dsl","argvector","math","string","indexable","argvector","enumerable","array","indexable","datetime","time","enumerator","enumerator","math","math","symbol","uri","datetime","numeric::multipliers","numeric::multipliers","math","pathname","pathname","pathname","pathname","enumerable","enumerable","interval","equitable","tuple","uri","uri","enumerable","fileutils","indexable","numeric::multipliers","time","basicobject","module","pathname","module","platform","rbconfig","module","array","equitable","date","datetime","time","enumerable","interval","pathname","module","module","memoizable::copy","multiton::inclusive","random::stringextensions","string","string","array","indexable","tuple","string","indexable","zlib","getoptlong","cloneable","memoizable::copy","multiton::metamethods","lazy::promise::diverges","method::composition","nullclass","platform","rbconfig","tuple","multiton::metamethods","instance","openstruct","module","module","module","module","string","platform","platform","platform","module","module","platform","platform","instance","numeric::multipliers","numeric::multipliers","math","indexable","interval","tuple","indexable","indexable","interval","interval","string","symbol","string","math","interval","numeric","tuple","time","module","random","math","timer","string","string","fileutils","math","platform","rbconfig","platform","fileutils","platform","datetime","time","binding","math","string","string","dir","platform","rbconfig","tuple","denumerable","enumerable","enumerable","enumerable","enumerable","enumerable","string","cgi","cgi","enumerable","matchdata","platform","matchdata","matchdata","module","module","module","module","interval","math","math","numeric::multipliers","array","math","numeric::multipliers","interval","memoizable","method","module","array","module","module","enumerable::recursor","functor","nullclass","rbconfig","module","opesc","class","module","string","numeric::multipliers","indexable","indexable","date","datetime","numeric::multipliers","interval","math","tuple","array","module","enumerable","module","module","module","module","string","date","platform","string","argvector","dir","dir","regexp","integer","multiton::metamethods","tuple","multiton::metamethods","multiton::metamethods","unboundmethod","instance","numeric::multipliers","string","string","numeric","argvector","erb::opentemplate","enumerable::recursor","enumerator","functor","getoptlong","getoptlong::dsl","instance","instantiable","interval","method::composition","multiton::metamethods","nullclass","openstruct","platform","timer","tuple","string","nullclass","enumerable","array","array","symbol","array","file","pathname","interval","nullclass","array","string","struct","enumerable","array","integer","integer","platform","enumerator","timer","enumerable","array","interval","argvector","getoptlong::dsl","argvector","getoptlong::dsl","integer","integer","openstruct","openstruct","openstruct","fileutils","fileutils","pathname","range","method::composition","array","array","argvector","argvector","argvector","dir","platform","argvector","argvector","tuple","argvector","argvector","proc","datetime","time","class","module","string","numeric::multipliers","array","enumerable","math","platform","array","numeric::multipliers","random::arrayextensions","random::hashextensions","random::arrayextensions","random::hashextensions","random::hashextensions","numeric::multipliers","symbol","array","tuple","indexable","numeric","platform","rbconfig","tuple","math","array","set","class","module","argvector","argvector","array","array","facets","math","tuple","enumerable","tuple","math","range","symbol","uri","uri","string","exception","random::stringextensions","random::stringextensions","random::arrayextensions","random::stringextensions","random::hashextensions","random::hashextensions","random::hashextensions","random::hashextensions","random::arrayextensions","random::hashextensions","random::hashextensions","random::stringextensions::self","string","random::integerextensions","random::numericextensions","indexable","string","string","string","platform","yaml","file","file","symbol","method::composition","array","dir","array","array","enumerable","module","module","module","module","platform","objectspace","multiton::metamethods","denumerable","filetest","memoizable","module","module","struct","getoptlong::dsl","getoptlong::dsl","timer","timer","interval","module","module","file","string","file","tuple","math","integer","math","pathname","filetest","file","pathname","array","array","math","float","numeric","float","numeric","time","platform","platform","shellwords","timer","filetest","fileutils","digest::class","digest::instance","digest::class","digest::instance","digest::class","digest::instance","file","stringscanner","math","math","datetime","denumerable","find","array","binding","interval","module","time","symbol","string","array","array","time","tuple","random::arrayextensions","random::hashextensions","random::stringextensions","random::arrayextensions","random::hashextensions","random::stringextensions","math","string","math","date","datetime","class","module::instancefunction","multiton::metamethods","module","interval","tuple","denumerable","fileutils","string","platform","rbconfig","module","numeric","array","string","array","file","file","pathname","math","math","string","string","fileutils","fileutils::dryrun","fileutils::nowrite","fileutils::verbose","date","datetime","time","time","timer","timer::dummy","timer","string","string","math","math","interval","timer","timer::dummy","timer","class","argvector","argvector","argvector","argvector","symbol","enumerable","math","math","platform","exception","platform","rbconfig","string","string","fileutils","indexable","denumerable","enumerable","numeric::multipliers","tuple","numeric::multipliers","math","math","enumerable","enumerable","symbol","array","indexable","timer","time","integer","integer","string","enumerable::arguments","platform","tuple","tuple","array","numeric","string","falseclass","nilclass","trueclass","date","datetime","string","time","date","datetime","string","time","datetime","nilclass","array","enumerable","enumerator","instance","nilclass","openstruct","struct","array","enumerable","enumerator","array","enumerable","enumerator","array","enumerable","enumerator","array","enumerable","enumerator","array","enumerable","enumerator","instance","proc","module","nilclass","openstruct","array","nilclass","class","functor","method::composition","symbol","range","range","regexp","string","regexp","string","platform","tuple","array","string","tuple","date","datetime","string","time","tuple","uri::hash","date","date","timer","array","array","time","nilclass","range","string","string","string","string","string","string","enumerable","array","memoizable","string","tuple","uri::kernel","string","instance","uri","uri","string","string","pathname","uri::kernel","datetime","datetime","datetime","time","instance","tuple","instance","string","symbol","math","math","enumerable","pathname","fileutils","fileutils","fileutils","platform","rbconfig","binding","range","string","string","string","pathname","module","enumerable::arguments","module","file","file","symbol","date","datetime","file","date","date","enumerable","regexp","interval","symbol","files/history_rdoc.html","files/notice_rdoc.html","files/readme_rdoc.html","files/ruby_txt.html","files/lib/core/facets_rb.html","files/lib/core/facets_yml.html","files/lib/core/facets/applique/file_helpers_rb.html","files/lib/core/facets/array_rb.html","files/lib/core/facets/array/after_rb.html","files/lib/core/facets/array/before_rb.html","files/lib/core/facets/array/collapse_rb.html","files/lib/core/facets/array/collisions_rb.html","files/lib/core/facets/array/combination_rb.html","files/lib/core/facets/array/commonality_rb.html","files/lib/core/facets/array/conjoin_rb.html","files/lib/core/facets/array/contains_rb.html","files/lib/core/facets/array/delete_rb.html","files/lib/core/facets/array/delete_unless_rb.html","files/lib/core/facets/array/delete_values_rb.html","files/lib/core/facets/array/divide_rb.html","files/lib/core/facets/array/duplicates_rb.html","files/lib/core/facets/array/each_pair_rb.html","files/lib/core/facets/array/each_value_rb.html","files/lib/core/facets/array/entropy_rb.html","files/lib/core/facets/array/extract_options_rb.html","files/lib/core/facets/array/from_rb.html","files/lib/core/facets/array/index_rb.html","files/lib/core/facets/array/indexable_rb.html","files/lib/core/facets/array/median_rb.html","files/lib/core/facets/array/merge_rb.html","files/lib/core/facets/array/mode_rb.html","files/lib/core/facets/array/nonuniq_rb.html","files/lib/core/facets/array/not_empty_rb.html","files/lib/core/facets/array/occurent_rb.html","files/lib/core/facets/array/only_rb.html","files/lib/core/facets/array/op_pow_rb.html","files/lib/core/facets/array/pad_rb.html","files/lib/core/facets/array/peek_rb.html","files/lib/core/facets/array/permutation_rb.html","files/lib/core/facets/array/poke_rb.html","files/lib/core/facets/array/probability_rb.html","files/lib/core/facets/array/product_rb.html","files/lib/core/facets/array/pull_rb.html","files/lib/core/facets/array/recurse_rb.html","files/lib/core/facets/array/recursively_rb.html","files/lib/core/facets/array/rotate_rb.html","files/lib/core/facets/array/select_rb.html","files/lib/core/facets/array/splice_rb.html","files/lib/core/facets/array/split_rb.html","files/lib/core/facets/array/store_rb.html","files/lib/core/facets/array/thru_rb.html","files/lib/core/facets/array/traverse_rb.html","files/lib/core/facets/array/uniq_by_rb.html","files/lib/core/facets/binding_rb.html","files/lib/core/facets/binding/__callee___rb.html","files/lib/core/facets/binding/__method___rb.html","files/lib/core/facets/binding/call_stack_rb.html","files/lib/core/facets/binding/caller_rb.html","files/lib/core/facets/binding/callstack_rb.html","files/lib/core/facets/binding/defined_rb.html","files/lib/core/facets/binding/eval_rb.html","files/lib/core/facets/binding/local_variables_rb.html","files/lib/core/facets/binding/op_rb.html","files/lib/core/facets/binding/op_get_rb.html","files/lib/core/facets/binding/op_set_rb.html","files/lib/core/facets/binding/self_rb.html","files/lib/core/facets/binding/with_rb.html","files/lib/core/facets/boolean_rb.html","files/lib/core/facets/class_rb.html","files/lib/core/facets/class/descendants_rb.html","files/lib/core/facets/class/hierarchically_rb.html","files/lib/core/facets/class/methodize_rb.html","files/lib/core/facets/class/pathize_rb.html","files/lib/core/facets/class/preallocate_rb.html","files/lib/core/facets/class/singleton_rb.html","files/lib/core/facets/class/subclasses_rb.html","files/lib/core/facets/class/to_proc_rb.html","files/lib/core/facets/comparable_rb.html","files/lib/core/facets/comparable/at_least_rb.html","files/lib/core/facets/comparable/at_most_rb.html","files/lib/core/facets/comparable/bound_rb.html","files/lib/core/facets/comparable/cap_rb.html","files/lib/core/facets/comparable/clip_rb.html","files/lib/core/facets/comparable/cmp_rb.html","files/lib/core/facets/comparable/op_get_rb.html","files/lib/core/facets/denumerable_rb.html","files/lib/core/facets/dir_rb.html","files/lib/core/facets/dir/ascend_rb.html","files/lib/core/facets/dir/descend_rb.html","files/lib/core/facets/dir/each_child_rb.html","files/lib/core/facets/dir/multiglob_rb.html","files/lib/core/facets/dir/parent_rb.html","files/lib/core/facets/dir/recurse_rb.html","files/lib/core/facets/enumerable_rb.html","files/lib/core/facets/enumerable/accumulate_rb.html","files/lib/core/facets/enumerable/cluster_by_rb.html","files/lib/core/facets/enumerable/collect_with_index_rb.html","files/lib/core/facets/enumerable/compact_map_rb.html","files/lib/core/facets/enumerable/count_rb.html","files/lib/core/facets/enumerable/defer_rb.html","files/lib/core/facets/enumerable/each_by_rb.html","files/lib/core/facets/enumerable/each_with_object_rb.html","files/lib/core/facets/enumerable/every_rb.html","files/lib/core/facets/enumerable/ewise_rb.html","files/lib/core/facets/enumerable/exclude_rb.html","files/lib/core/facets/enumerable/expand_rb.html","files/lib/core/facets/enumerable/filter_rb.html","files/lib/core/facets/enumerable/find_yield_rb.html","files/lib/core/facets/enumerable/frequency_rb.html","files/lib/core/facets/enumerable/graph_rb.html","files/lib/core/facets/enumerable/group_by_rb.html","files/lib/core/facets/enumerable/hashify_rb.html","files/lib/core/facets/enumerable/incase_rb.html","files/lib/core/facets/enumerable/map_by_rb.html","files/lib/core/facets/enumerable/map_detect_rb.html","files/lib/core/facets/enumerable/map_send_rb.html","files/lib/core/facets/enumerable/map_with_rb.html","files/lib/core/facets/enumerable/map_with_index_rb.html","files/lib/core/facets/enumerable/mash_rb.html","files/lib/core/facets/enumerable/modulate_rb.html","files/lib/core/facets/enumerable/none_rb.html","files/lib/core/facets/enumerable/occur_rb.html","files/lib/core/facets/enumerable/one_rb.html","files/lib/core/facets/enumerable/per_rb.html","files/lib/core/facets/enumerable/purge_rb.html","files/lib/core/facets/enumerable/recursively_rb.html","files/lib/core/facets/enumerable/sum_rb.html","files/lib/core/facets/enumerable/take_rb.html","files/lib/core/facets/enumerable/uniq_by_rb.html","files/lib/core/facets/enumerable/visit_rb.html","files/lib/core/facets/enumerable/zip_map_rb.html","files/lib/core/facets/enumerator_rb.html","files/lib/core/facets/enumerator/fx_rb.html","files/lib/core/facets/exception_rb.html","files/lib/core/facets/exception/detail_rb.html","files/lib/core/facets/exception/error_print_rb.html","files/lib/core/facets/exception/raised_rb.html","files/lib/core/facets/exception/suppress_rb.html","files/lib/core/facets/file_rb.html","files/lib/core/facets/file/append_rb.html","files/lib/core/facets/file/atomic_id_rb.html","files/lib/core/facets/file/atomic_open_rb.html","files/lib/core/facets/file/atomic_write_rb.html","files/lib/core/facets/file/create_rb.html","files/lib/core/facets/file/ext_rb.html","files/lib/core/facets/file/null_rb.html","files/lib/core/facets/file/read_binary_rb.html","files/lib/core/facets/file/read_list_rb.html","files/lib/core/facets/file/rewrite_rb.html","files/lib/core/facets/file/rootname_rb.html","files/lib/core/facets/file/sanitize_rb.html","files/lib/core/facets/file/split_all_rb.html","files/lib/core/facets/file/split_root_rb.html","files/lib/core/facets/file/write_rb.html","files/lib/core/facets/file/writelines_rb.html","files/lib/core/facets/filetest_rb.html","files/lib/core/facets/filetest/absolute_rb.html","files/lib/core/facets/filetest/contains_rb.html","files/lib/core/facets/filetest/relative_rb.html","files/lib/core/facets/filetest/root_rb.html","files/lib/core/facets/filetest/safe_rb.html","files/lib/core/facets/filetest/separator_pattern_rb.html","files/lib/core/facets/fixnum_rb.html","files/lib/core/facets/float_rb.html","files/lib/core/facets/float/round_rb.html","files/lib/core/facets/functor_rb.html","files/lib/core/facets/hash_rb.html","files/lib/core/facets/hash/alias_rb.html","files/lib/core/facets/hash/argumentize_rb.html","files/lib/core/facets/hash/at_rb.html","files/lib/core/facets/hash/autonew_rb.html","files/lib/core/facets/hash/collate_rb.html","files/lib/core/facets/hash/count_rb.html","files/lib/core/facets/hash/data_rb.html","files/lib/core/facets/hash/dearray_values_rb.html","files/lib/core/facets/hash/deep_merge_rb.html","files/lib/core/facets/hash/delete_rb.html","files/lib/core/facets/hash/delete_at_rb.html","files/lib/core/facets/hash/delete_unless_rb.html","files/lib/core/facets/hash/delete_values_rb.html","files/lib/core/facets/hash/diff_rb.html","files/lib/core/facets/hash/except_rb.html","files/lib/core/facets/hash/graph_rb.html","files/lib/core/facets/hash/insert_rb.html","files/lib/core/facets/hash/inverse_rb.html","files/lib/core/facets/hash/join_rb.html","files/lib/core/facets/hash/keys_rb.html","files/lib/core/facets/hash/mash_rb.html","files/lib/core/facets/hash/new_with_rb.html","files/lib/core/facets/hash/op_rb.html","files/lib/core/facets/hash/op_add_rb.html","files/lib/core/facets/hash/op_and_rb.html","files/lib/core/facets/hash/op_mul_rb.html","files/lib/core/facets/hash/op_or_rb.html","files/lib/core/facets/hash/op_push_rb.html","files/lib/core/facets/hash/op_sub_rb.html","files/lib/core/facets/hash/recurse_rb.html","files/lib/core/facets/hash/recursively_rb.html","files/lib/core/facets/hash/rekey_rb.html","files/lib/core/facets/hash/replace_each_rb.html","files/lib/core/facets/hash/reverse_merge_rb.html","files/lib/core/facets/hash/select_rb.html","files/lib/core/facets/hash/slice_rb.html","files/lib/core/facets/hash/stringify_keys_rb.html","files/lib/core/facets/hash/subset_rb.html","files/lib/core/facets/hash/swap_rb.html","files/lib/core/facets/hash/symbolize_keys_rb.html","files/lib/core/facets/hash/to_h_rb.html","files/lib/core/facets/hash/to_mod_rb.html","files/lib/core/facets/hash/to_options_rb.html","files/lib/core/facets/hash/to_proc_rb.html","files/lib/core/facets/hash/to_struct_rb.html","files/lib/core/facets/hash/traverse_rb.html","files/lib/core/facets/hash/update_rb.html","files/lib/core/facets/hash/update_each_rb.html","files/lib/core/facets/hash/update_keys_rb.html","files/lib/core/facets/hash/update_values_rb.html","files/lib/core/facets/hash/url_params_rb.html","files/lib/core/facets/hash/weave_rb.html","files/lib/core/facets/hash/zip_rb.html","files/lib/core/facets/indexable_rb.html","files/lib/core/facets/instance_rb.html","files/lib/core/facets/integer_rb.html","files/lib/core/facets/integer/bit_rb.html","files/lib/core/facets/integer/bitmask_rb.html","files/lib/core/facets/integer/even_rb.html","files/lib/core/facets/integer/factorial_rb.html","files/lib/core/facets/integer/multiple_rb.html","files/lib/core/facets/integer/odd_rb.html","files/lib/core/facets/integer/of_rb.html","files/lib/core/facets/integer/ordinal_rb.html","files/lib/core/facets/integer/roman_rb.html","files/lib/core/facets/kernel_rb.html","files/lib/core/facets/kernel/__callee___rb.html","files/lib/core/facets/kernel/__class___rb.html","files/lib/core/facets/kernel/__dir___rb.html","files/lib/core/facets/kernel/__get___rb.html","files/lib/core/facets/kernel/__method___rb.html","files/lib/core/facets/kernel/__set___rb.html","files/lib/core/facets/kernel/as_rb.html","files/lib/core/facets/kernel/ask_rb.html","files/lib/core/facets/kernel/assign_rb.html","files/lib/core/facets/kernel/assign_from_rb.html","files/lib/core/facets/kernel/attr_singleton_rb.html","files/lib/core/facets/kernel/blank_rb.html","files/lib/core/facets/kernel/call_stack_rb.html","files/lib/core/facets/kernel/callstack_rb.html","files/lib/core/facets/kernel/case_rb.html","files/lib/core/facets/kernel/complete_rb.html","files/lib/core/facets/kernel/constant_rb.html","files/lib/core/facets/kernel/d_rb.html","files/lib/core/facets/kernel/deep_clone_rb.html","files/lib/core/facets/kernel/deep_copy_rb.html","files/lib/core/facets/kernel/demo_rb.html","files/lib/core/facets/kernel/disable_warnings_rb.html","files/lib/core/facets/kernel/eigen_rb.html","files/lib/core/facets/kernel/eigenclass_rb.html","files/lib/core/facets/kernel/enable_warnings_rb.html","files/lib/core/facets/kernel/equate_rb.html","files/lib/core/facets/kernel/ergo_rb.html","files/lib/core/facets/kernel/extend_rb.html","files/lib/core/facets/kernel/extension_rb.html","files/lib/core/facets/kernel/false_rb.html","files/lib/core/facets/kernel/here_rb.html","files/lib/core/facets/kernel/hierarchical_send_rb.html","files/lib/core/facets/kernel/identical_rb.html","files/lib/core/facets/kernel/in_rb.html","files/lib/core/facets/kernel/instance_assign_rb.html","files/lib/core/facets/kernel/instance_class_rb.html","files/lib/core/facets/kernel/instance_exec_rb.html","files/lib/core/facets/kernel/instance_send_rb.html","files/lib/core/facets/kernel/load_all_rb.html","files/lib/core/facets/kernel/load_relative_rb.html","files/lib/core/facets/kernel/maybe_rb.html","files/lib/core/facets/kernel/memo_rb.html","files/lib/core/facets/kernel/meta_alias_rb.html","files/lib/core/facets/kernel/meta_class_rb.html","files/lib/core/facets/kernel/meta_def_rb.html","files/lib/core/facets/kernel/meta_eval_rb.html","files/lib/core/facets/kernel/method_rb.html","files/lib/core/facets/kernel/no_rb.html","files/lib/core/facets/kernel/not_rb.html","files/lib/core/facets/kernel/not_nil_rb.html","files/lib/core/facets/kernel/object_class_rb.html","files/lib/core/facets/kernel/object_hexid_rb.html","files/lib/core/facets/kernel/object_send_rb.html","files/lib/core/facets/kernel/p_rb.html","files/lib/core/facets/kernel/presence_rb.html","files/lib/core/facets/kernel/present_rb.html","files/lib/core/facets/kernel/qua_class_rb.html","files/lib/core/facets/kernel/require_all_rb.html","files/lib/core/facets/kernel/require_relative_rb.html","files/lib/core/facets/kernel/respond_rb.html","files/lib/core/facets/kernel/returning_rb.html","files/lib/core/facets/kernel/silence_rb.html","files/lib/core/facets/kernel/silence_warnings_rb.html","files/lib/core/facets/kernel/singleton_class_rb.html","files/lib/core/facets/kernel/source_location_rb.html","files/lib/core/facets/kernel/super_method_rb.html","files/lib/core/facets/kernel/tap_rb.html","files/lib/core/facets/kernel/temporarily_rb.html","files/lib/core/facets/kernel/trap_chain_rb.html","files/lib/core/facets/kernel/true_rb.html","files/lib/core/facets/kernel/try_rb.html","files/lib/core/facets/kernel/val_rb.html","files/lib/core/facets/kernel/with_rb.html","files/lib/core/facets/kernel/writers_rb.html","files/lib/core/facets/kernel/y_rb.html","files/lib/core/facets/kernel/yes_rb.html","files/lib/core/facets/lazy_rb.html","files/lib/core/facets/matchdata_rb.html","files/lib/core/facets/matchdata/match_rb.html","files/lib/core/facets/matchdata/matchset_rb.html","files/lib/core/facets/metaid_rb.html","files/lib/core/facets/method_rb.html","files/lib/core/facets/method/composition_rb.html","files/lib/core/facets/method/memoize_rb.html","files/lib/core/facets/method/op_mul_rb.html","files/lib/core/facets/method/op_pow_rb.html","files/lib/core/facets/module_rb.html","files/lib/core/facets/module/abstract_rb.html","files/lib/core/facets/module/alias_accessor_rb.html","files/lib/core/facets/module/alias_method_chain_rb.html","files/lib/core/facets/module/alias_module_function_rb.html","files/lib/core/facets/module/all_instance_methods_rb.html","files/lib/core/facets/module/ancestor_rb.html","files/lib/core/facets/module/anonymous_rb.html","files/lib/core/facets/module/attr_class_accessor_rb.html","files/lib/core/facets/module/attr_setter_rb.html","files/lib/core/facets/module/attr_tester_rb.html","files/lib/core/facets/module/attr_validator_rb.html","files/lib/core/facets/module/basename_rb.html","files/lib/core/facets/module/can_rb.html","files/lib/core/facets/module/class_rb.html","files/lib/core/facets/module/class_accessor_rb.html","files/lib/core/facets/module/class_def_rb.html","files/lib/core/facets/module/class_extend_rb.html","files/lib/core/facets/module/class_inheritor_rb.html","files/lib/core/facets/module/class_method_defined_rb.html","files/lib/core/facets/module/copy_inheritor_rb.html","files/lib/core/facets/module/enclosure_rb.html","files/lib/core/facets/module/enclosures_rb.html","files/lib/core/facets/module/extend_rb.html","files/lib/core/facets/module/home_rb.html","files/lib/core/facets/module/homename_rb.html","files/lib/core/facets/module/housing_rb.html","files/lib/core/facets/module/include_as_rb.html","files/lib/core/facets/module/include_function_module_rb.html","files/lib/core/facets/module/instance_function_rb.html","files/lib/core/facets/module/instance_method_rb.html","files/lib/core/facets/module/instance_method_defined_rb.html","files/lib/core/facets/module/integrate_rb.html","files/lib/core/facets/module/is_rb.html","files/lib/core/facets/module/let_rb.html","files/lib/core/facets/module/mattr_rb.html","files/lib/core/facets/module/memoize_rb.html","files/lib/core/facets/module/method_clash_rb.html","files/lib/core/facets/module/method_space_rb.html","files/lib/core/facets/module/methodize_rb.html","files/lib/core/facets/module/modname_rb.html","files/lib/core/facets/module/module_def_rb.html","files/lib/core/facets/module/module_load_rb.html","files/lib/core/facets/module/nodef_rb.html","files/lib/core/facets/module/op_rb.html","files/lib/core/facets/module/op_add_rb.html","files/lib/core/facets/module/op_mul_rb.html","files/lib/core/facets/module/op_sub_rb.html","files/lib/core/facets/module/pathize_rb.html","files/lib/core/facets/module/preextend_rb.html","files/lib/core/facets/module/redefine_method_rb.html","files/lib/core/facets/module/redirect_method_rb.html","files/lib/core/facets/module/remove_rb.html","files/lib/core/facets/module/rename_method_rb.html","files/lib/core/facets/module/revise_rb.html","files/lib/core/facets/module/set_rb.html","files/lib/core/facets/module/singleton_method_defined_rb.html","files/lib/core/facets/module/spacename_rb.html","files/lib/core/facets/module/to_obj_rb.html","files/lib/core/facets/module/wrap_method_rb.html","files/lib/core/facets/na_rb.html","files/lib/core/facets/nilclass_rb.html","files/lib/core/facets/nilclass/ergo_rb.html","files/lib/core/facets/nilclass/to_f_rb.html","files/lib/core/facets/numeric_rb.html","files/lib/core/facets/numeric/approx_rb.html","files/lib/core/facets/numeric/close_rb.html","files/lib/core/facets/numeric/distance_rb.html","files/lib/core/facets/numeric/length_rb.html","files/lib/core/facets/numeric/negative_rb.html","files/lib/core/facets/numeric/positive_rb.html","files/lib/core/facets/numeric/round_rb.html","files/lib/core/facets/numeric/round_at_rb.html","files/lib/core/facets/numeric/round_to_rb.html","files/lib/core/facets/numeric/spacing_rb.html","files/lib/core/facets/object_rb.html","files/lib/core/facets/object/clone_rb.html","files/lib/core/facets/object/dup_rb.html","files/lib/core/facets/object/object_state_rb.html","files/lib/core/facets/object/replace_rb.html","files/lib/core/facets/object/try_dup_rb.html","files/lib/core/facets/objectspace_rb.html","files/lib/core/facets/objectspace/classes_rb.html","files/lib/core/facets/objectspace/op_fetch_rb.html","files/lib/core/facets/objectspace/reflect_rb.html","files/lib/core/facets/proc_rb.html","files/lib/core/facets/proc/bind_rb.html","files/lib/core/facets/proc/bind_to_rb.html","files/lib/core/facets/proc/compose_rb.html","files/lib/core/facets/proc/curry_rb.html","files/lib/core/facets/proc/partial_rb.html","files/lib/core/facets/proc/to_method_rb.html","files/lib/core/facets/proc/update_rb.html","files/lib/core/facets/process_rb.html","files/lib/core/facets/process/daemon_rb.html","files/lib/core/facets/range_rb.html","files/lib/core/facets/range/combine_rb.html","files/lib/core/facets/range/overlap_rb.html","files/lib/core/facets/range/quantile_rb.html","files/lib/core/facets/range/to_r_rb.html","files/lib/core/facets/range/umbrella_rb.html","files/lib/core/facets/range/within_rb.html","files/lib/core/facets/regexp_rb.html","files/lib/core/facets/regexp/arity_rb.html","files/lib/core/facets/regexp/multiline_rb.html","files/lib/core/facets/regexp/op_add_rb.html","files/lib/core/facets/regexp/op_or_rb.html","files/lib/core/facets/regexp/to_re_rb.html","files/lib/core/facets/roman_rb.html","files/lib/core/facets/string_rb.html","files/lib/core/facets/string/acronym_rb.html","files/lib/core/facets/string/align_rb.html","files/lib/core/facets/string/bracket_rb.html","files/lib/core/facets/string/briefcase_rb.html","files/lib/core/facets/string/bytes_rb.html","files/lib/core/facets/string/camelcase_rb.html","files/lib/core/facets/string/capitalized_rb.html","files/lib/core/facets/string/characters_rb.html","files/lib/core/facets/string/cleanlines_rb.html","files/lib/core/facets/string/cleave_rb.html","files/lib/core/facets/string/cmp_rb.html","files/lib/core/facets/string/compress_lines_rb.html","files/lib/core/facets/string/crypt_rb.html","files/lib/core/facets/string/divide_rb.html","files/lib/core/facets/string/each_char_rb.html","files/lib/core/facets/string/each_word_rb.html","files/lib/core/facets/string/edit_distance_rb.html","files/lib/core/facets/string/end_with_rb.html","files/lib/core/facets/string/exclude_rb.html","files/lib/core/facets/string/expand_tab_rb.html","files/lib/core/facets/string/file_rb.html","files/lib/core/facets/string/fold_rb.html","files/lib/core/facets/string/indent_rb.html","files/lib/core/facets/string/index_all_rb.html","files/lib/core/facets/string/interpolate_rb.html","files/lib/core/facets/string/lchomp_rb.html","files/lib/core/facets/string/line_wrap_rb.html","files/lib/core/facets/string/lines_rb.html","files/lib/core/facets/string/lowercase_rb.html","files/lib/core/facets/string/margin_rb.html","files/lib/core/facets/string/methodize_rb.html","files/lib/core/facets/string/modulize_rb.html","files/lib/core/facets/string/mscan_rb.html","files/lib/core/facets/string/natcmp_rb.html","files/lib/core/facets/string/nchar_rb.html","files/lib/core/facets/string/newlines_rb.html","files/lib/core/facets/string/op_div_rb.html","files/lib/core/facets/string/op_sub_rb.html","files/lib/core/facets/string/outdent_rb.html","files/lib/core/facets/string/pathize_rb.html","files/lib/core/facets/string/quote_rb.html","files/lib/core/facets/string/random_binary_rb.html","files/lib/core/facets/string/range_rb.html","files/lib/core/facets/string/range_all_rb.html","files/lib/core/facets/string/range_of_line_rb.html","files/lib/core/facets/string/rewrite_rb.html","files/lib/core/facets/string/roman_rb.html","files/lib/core/facets/string/shatter_rb.html","files/lib/core/facets/string/similarity_rb.html","files/lib/core/facets/string/snakecase_rb.html","files/lib/core/facets/string/splice_rb.html","files/lib/core/facets/string/squish_rb.html","files/lib/core/facets/string/start_with_rb.html","files/lib/core/facets/string/store_rb.html","files/lib/core/facets/string/subtract_rb.html","files/lib/core/facets/string/tab_rb.html","files/lib/core/facets/string/tabto_rb.html","files/lib/core/facets/string/titlecase_rb.html","files/lib/core/facets/string/to_re_rb.html","files/lib/core/facets/string/unbracket_rb.html","files/lib/core/facets/string/underscore_rb.html","files/lib/core/facets/string/unfold_rb.html","files/lib/core/facets/string/unindent_rb.html","files/lib/core/facets/string/unquote_rb.html","files/lib/core/facets/string/uppercase_rb.html","files/lib/core/facets/string/variablize_rb.html","files/lib/core/facets/string/word_wrap_rb.html","files/lib/core/facets/string/words_rb.html","files/lib/core/facets/string/xor_rb.html","files/lib/core/facets/struct_rb.html","files/lib/core/facets/struct/attributes_rb.html","files/lib/core/facets/symbol_rb.html","files/lib/core/facets/symbol/as_s_rb.html","files/lib/core/facets/symbol/bang_rb.html","files/lib/core/facets/symbol/chomp_rb.html","files/lib/core/facets/symbol/generate_rb.html","files/lib/core/facets/symbol/not_rb.html","files/lib/core/facets/symbol/op_div_rb.html","files/lib/core/facets/symbol/plain_rb.html","files/lib/core/facets/symbol/query_rb.html","files/lib/core/facets/symbol/reader_rb.html","files/lib/core/facets/symbol/setter_rb.html","files/lib/core/facets/symbol/succ_rb.html","files/lib/core/facets/symbol/thrown_rb.html","files/lib/core/facets/symbol/to_proc_rb.html","files/lib/core/facets/symbol/variablize_rb.html","files/lib/core/facets/symbol/writer_rb.html","files/lib/core/facets/time_rb.html","files/lib/core/facets/time/ago_rb.html","files/lib/core/facets/time/change_rb.html","files/lib/core/facets/time/dst_adjustment_rb.html","files/lib/core/facets/time/elapse_rb.html","files/lib/core/facets/time/future_rb.html","files/lib/core/facets/time/hence_rb.html","files/lib/core/facets/time/in_rb.html","files/lib/core/facets/time/less_rb.html","files/lib/core/facets/time/past_rb.html","files/lib/core/facets/time/round_to_rb.html","files/lib/core/facets/time/set_rb.html","files/lib/core/facets/time/shift_rb.html","files/lib/core/facets/time/stamp_rb.html","files/lib/core/facets/time/to_time_rb.html","files/lib/core/facets/time/trunc_rb.html","files/lib/core/facets/to_hash_rb.html","files/lib/core/facets/unboundmethod_rb.html","files/lib/core/facets/unboundmethod/arguments_rb.html","files/lib/core/facets/unboundmethod/name_rb.html","files/lib/core/facets/version_rb.html","files/lib/standard/facets/argvector_rb.html","files/lib/standard/facets/basicobject_rb.html","files/lib/standard/facets/cgi_rb.html","files/lib/standard/facets/cloneable_rb.html","files/lib/standard/facets/continuation_rb.html","files/lib/standard/facets/date_rb.html","files/lib/standard/facets/digest_rb.html","files/lib/standard/facets/digest/base64digest_rb.html","files/lib/standard/facets/digest/salted_digest_rb.html","files/lib/standard/facets/enumargs_rb.html","files/lib/standard/facets/equitable_rb.html","files/lib/standard/facets/erb_rb.html","files/lib/standard/facets/fileutils_rb.html","files/lib/standard/facets/fileutils/amass_rb.html","files/lib/standard/facets/fileutils/cp_rx_rb.html","files/lib/standard/facets/fileutils/head_rb.html","files/lib/standard/facets/fileutils/ln_r_rb.html","files/lib/standard/facets/fileutils/outofdate_rb.html","files/lib/standard/facets/fileutils/safe_ln_rb.html","files/lib/standard/facets/fileutils/slice_rb.html","files/lib/standard/facets/fileutils/stage_rb.html","files/lib/standard/facets/fileutils/tail_rb.html","files/lib/standard/facets/fileutils/wc_rb.html","files/lib/standard/facets/fileutils/whereis_rb.html","files/lib/standard/facets/fileutils/which_rb.html","files/lib/standard/facets/find_rb.html","files/lib/standard/facets/getoptlong_rb.html","files/lib/standard/facets/instantiable_rb.html","files/lib/standard/facets/interval_rb.html","files/lib/standard/facets/math_rb.html","files/lib/standard/facets/math/abs_rb.html","files/lib/standard/facets/math/acot_rb.html","files/lib/standard/facets/math/acoth_rb.html","files/lib/standard/facets/math/acsc_rb.html","files/lib/standard/facets/math/acsch_rb.html","files/lib/standard/facets/math/amd_rb.html","files/lib/standard/facets/math/approx_equal_rb.html","files/lib/standard/facets/math/asec_rb.html","files/lib/standard/facets/math/asech_rb.html","files/lib/standard/facets/math/atkinson_index_rb.html","files/lib/standard/facets/math/beta_rb.html","files/lib/standard/facets/math/cdf_rb.html","files/lib/standard/facets/math/ceil_rb.html","files/lib/standard/facets/math/cot_rb.html","files/lib/standard/facets/math/coth_rb.html","files/lib/standard/facets/math/csc_rb.html","files/lib/standard/facets/math/csch_rb.html","files/lib/standard/facets/math/delta_rb.html","files/lib/standard/facets/math/epsilon_rb.html","files/lib/standard/facets/math/exp10_rb.html","files/lib/standard/facets/math/exp2_rb.html","files/lib/standard/facets/math/factorial_rb.html","files/lib/standard/facets/math/floor_rb.html","files/lib/standard/facets/math/gamma_rb.html","files/lib/standard/facets/math/gcd_rb.html","files/lib/standard/facets/math/gini_coefficient_rb.html","files/lib/standard/facets/math/kldivergence_rb.html","files/lib/standard/facets/math/lcm_rb.html","files/lib/standard/facets/math/lgamma_rb.html","files/lib/standard/facets/math/linsolve_rb.html","files/lib/standard/facets/math/log2_rb.html","files/lib/standard/facets/math/max_rb.html","files/lib/standard/facets/math/mean_rb.html","files/lib/standard/facets/math/median_rb.html","files/lib/standard/facets/math/min_rb.html","files/lib/standard/facets/math/percentile_rb.html","files/lib/standard/facets/math/pow_rb.html","files/lib/standard/facets/math/pstd_rb.html","files/lib/standard/facets/math/pvariance_rb.html","files/lib/standard/facets/math/rmd_rb.html","files/lib/standard/facets/math/root_rb.html","files/lib/standard/facets/math/round_rb.html","files/lib/standard/facets/math/sec_rb.html","files/lib/standard/facets/math/sech_rb.html","files/lib/standard/facets/math/sign_rb.html","files/lib/standard/facets/math/sinc_rb.html","files/lib/standard/facets/math/sqr_rb.html","files/lib/standard/facets/math/sqsolve_rb.html","files/lib/standard/facets/math/std_rb.html","files/lib/standard/facets/math/stderr_rb.html","files/lib/standard/facets/math/sum_rb.html","files/lib/standard/facets/math/summed_sqdevs_rb.html","files/lib/standard/facets/math/tgamma_rb.html","files/lib/standard/facets/math/theil_index_rb.html","files/lib/standard/facets/math/variance_rb.html","files/lib/standard/facets/memoizable_rb.html","files/lib/standard/facets/multipliers_rb.html","files/lib/standard/facets/multiton_rb.html","files/lib/standard/facets/net/http_rb.html","files/lib/standard/facets/nullclass_rb.html","files/lib/standard/facets/opesc_rb.html","files/lib/standard/facets/ostruct_rb.html","files/lib/standard/facets/pathname_rb.html","files/lib/standard/facets/platform_rb.html","files/lib/standard/facets/random_rb.html","files/lib/standard/facets/rbconfig_rb.html","files/lib/standard/facets/set_rb.html","files/lib/standard/facets/shellwords_rb.html","files/lib/standard/facets/strscan_rb.html","files/lib/standard/facets/thread_rb.html","files/lib/standard/facets/timer_rb.html","files/lib/standard/facets/tuple_rb.html","files/lib/standard/facets/uri_rb.html","files/lib/standard/facets/yaml_rb.html","files/lib/standard/facets/zlib_rb.html"]}}