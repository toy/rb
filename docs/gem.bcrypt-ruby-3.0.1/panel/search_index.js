var search_data = {"index":{"info":[["BCrypt","lib/bcrypt.rb","classes/BCrypt.html"," < ","A Ruby library implementing OpenBSD's bcrypt()/crypt_blowfish algorithm for hashing passwords. --- A",1],["Engine","BCrypt","classes/BCrypt/Engine.html"," < Object","A Ruby wrapper for the bcrypt() C extension calls and the Java calls. ",1],["Errors","BCrypt","classes/BCrypt/Errors.html"," < ","",1],["InvalidCost","BCrypt::Errors","classes/BCrypt/Errors/InvalidCost.html"," < StandardError","",1],["InvalidHash","BCrypt::Errors","classes/BCrypt/Errors/InvalidHash.html"," < StandardError","",1],["InvalidSalt","BCrypt::Errors","classes/BCrypt/Errors/InvalidSalt.html"," < StandardError","",1],["InvalidSecret","BCrypt::Errors","classes/BCrypt/Errors/InvalidSecret.html"," < StandardError","",1],["Password","BCrypt","classes/BCrypt/Password.html"," < String","A password management class which allows you to safely store users' passwords and compare them. Example",1],["==","BCrypt::Password","classes/BCrypt/Password.html#M000010","(secret)","Compares a potential secret against the hash. Returns true if the secret is the original secret, false",2],["==","BCrypt::Password","classes/BCrypt/Password.html#M000024","(secret)","Compares a potential secret against the hash. Returns true if the secret is the original secret, false",2],["__bc_crypt","BCrypt::Engine","classes/BCrypt/Engine.html#M000017","(key, salt, cost)","",2],["__bc_crypt","BCrypt::Engine","classes/BCrypt/Engine.html#M000007","(key, salt, cost)","",2],["__bc_salt","BCrypt::Engine","classes/BCrypt/Engine.html#M000015","(cost, seed)","",2],["__bc_salt","BCrypt::Engine","classes/BCrypt/Engine.html#M000006","(cost, seed)","",2],["autodetect_cost","BCrypt::Engine","classes/BCrypt/Engine.html#M000005","(salt)","Autodetects the cost from the salt string. ",2],["autodetect_cost","BCrypt::Engine","classes/BCrypt/Engine.html#M000021","(salt)","Autodetects the cost from the salt string. ",2],["calibrate","BCrypt::Engine","classes/BCrypt/Engine.html#M000004","(upper_time_limit_in_ms)","Returns the cost factor which will result in computation times less than +upper_time_limit_in_ms+. Example:",2],["calibrate","BCrypt::Engine","classes/BCrypt/Engine.html#M000020","(upper_time_limit_in_ms)","Returns the cost factor which will result in computation times less than +upper_time_limit_in_ms+. Example:",2],["create","BCrypt::Password","classes/BCrypt/Password.html#M000008","(secret, options = { :cost => BCrypt::Engine::DEFAULT_COST })","Hashes a secret, returning a BCrypt::Password instance. Takes an optional <tt>:cost</tt> option, which",2],["create","BCrypt::Password","classes/BCrypt/Password.html#M000022","(secret, options = { :cost => BCrypt::Engine::DEFAULT_COST })","Hashes a secret, returning a BCrypt::Password instance. Takes an optional <tt>:cost</tt> option, which",2],["generate_salt","BCrypt::Engine","classes/BCrypt/Engine.html#M000016","(cost = DEFAULT_COST)","Generates a random salt with a given computational cost. ",2],["generate_salt","BCrypt::Engine","classes/BCrypt/Engine.html#M000001","(cost = DEFAULT_COST)","Generates a random salt with a given computational cost. ",2],["hash_secret","BCrypt::Engine","classes/BCrypt/Engine.html#M000000","(secret, salt, cost = nil)","Given a secret and a valid salt (see BCrypt::Engine.generate_salt) calculates a bcrypt() password hash.",2],["hash_secret","BCrypt::Engine","classes/BCrypt/Engine.html#M000014","(secret, salt, cost = nil)","Given a secret and a valid salt (see BCrypt::Engine.generate_salt) calculates a bcrypt() password hash.",2],["is_password?","BCrypt::Password","classes/BCrypt/Password.html#M000025","(secret)","Alias for #==",2],["is_password?","BCrypt::Password","classes/BCrypt/Password.html#M000011","(secret)","Alias for #==",2],["new","BCrypt::Password","classes/BCrypt/Password.html#M000009","(raw_hash)","Initializes a BCrypt::Password instance with the data from a stored hash. ",2],["new","BCrypt::Password","classes/BCrypt/Password.html#M000023","(raw_hash)","Initializes a BCrypt::Password instance with the data from a stored hash. ",2],["split_hash","BCrypt::Password","classes/BCrypt/Password.html#M000027","(h)","Splits +h+ into version, cost, salt, and hash and returns them in that order. ",2],["split_hash","BCrypt::Password","classes/BCrypt/Password.html#M000013","(h)","Splits +h+ into version, cost, salt, and hash and returns them in that order. ",2],["valid_hash?","BCrypt::Password","classes/BCrypt/Password.html#M000026","(h)","Returns true if +h+ is a valid hash. ",2],["valid_hash?","BCrypt::Password","classes/BCrypt/Password.html#M000012","(h)","Returns true if +h+ is a valid hash. ",2],["valid_salt?","BCrypt::Engine","classes/BCrypt/Engine.html#M000002","(salt)","Returns true if +salt+ is a valid bcrypt() salt, false if not. ",2],["valid_salt?","BCrypt::Engine","classes/BCrypt/Engine.html#M000018","(salt)","Returns true if +salt+ is a valid bcrypt() salt, false if not. ",2],["valid_secret?","BCrypt::Engine","classes/BCrypt/Engine.html#M000003","(secret)","Returns true if +secret+ is a valid bcrypt() secret, false if not. ",2],["valid_secret?","BCrypt::Engine","classes/BCrypt/Engine.html#M000019","(secret)","Returns true if +secret+ is a valid bcrypt() secret, false if not. ",2],["CHANGELOG","files/CHANGELOG.html","files/CHANGELOG.html","","1.0.0  Feb 27 2007  - Initial release.   2.0.0  Mar 07 2007  - Removed BCrypt::Password#exactly_equals",3],["COPYING","files/COPYING.html","files/COPYING.html","","(The MIT License)  Copyright 2007-2011:  * Coda Hale <coda.hale@gmail.com>  C implementation of the BCrypt",3],["README.md","files/README_md.html","files/README_md.html","","# bcrypt-ruby  An easy way to keep your users' passwords secure.  * http://bcrypt-ruby.rubyforge.org/",3],["bcrypt.rb","files/lib/bcrypt_rb.html","files/lib/bcrypt_rb.html","","A wrapper for OpenBSD's bcrypt/crypt_blowfish password-hashing algorithm. ",3],["bcrypt.rb","files/lib/bcrypt_rb.html","files/lib/bcrypt_rb.html","","A wrapper for OpenBSD's bcrypt/crypt_blowfish password-hashing algorithm. ",3],["bcrypt_engine.rb","files/lib/bcrypt_engine_rb.html","files/lib/bcrypt_engine_rb.html","","",3],["bcrypt_engine.rb","files/lib/bcrypt_engine_rb.html","files/lib/bcrypt_engine_rb.html","","",3]],"searchIndex":["bcrypt","engine","errors","invalidcost","invalidhash","invalidsalt","invalidsecret","password","==()","==()","__bc_crypt()","__bc_crypt()","__bc_salt()","__bc_salt()","autodetect_cost()","autodetect_cost()","calibrate()","calibrate()","create()","create()","generate_salt()","generate_salt()","hash_secret()","hash_secret()","is_password?()","is_password?()","new()","new()","split_hash()","split_hash()","valid_hash?()","valid_hash?()","valid_salt?()","valid_salt?()","valid_secret?()","valid_secret?()","changelog","copying","readme.md","bcrypt.rb","bcrypt.rb","bcrypt_engine.rb","bcrypt_engine.rb"],"longSearchIndex":["lib/bcrypt_engine.rb","bcrypt","bcrypt","bcrypt::errors","bcrypt::errors","bcrypt::errors","bcrypt::errors","bcrypt","bcrypt::password","bcrypt::password","bcrypt::engine","bcrypt::engine","bcrypt::engine","bcrypt::engine","bcrypt::engine","bcrypt::engine","bcrypt::engine","bcrypt::engine","bcrypt::password","bcrypt::password","bcrypt::engine","bcrypt::engine","bcrypt::engine","bcrypt::engine","bcrypt::password","bcrypt::password","bcrypt::password","bcrypt::password","bcrypt::password","bcrypt::password","bcrypt::password","bcrypt::password","bcrypt::engine","bcrypt::engine","bcrypt::engine","bcrypt::engine","files/changelog.html","files/copying.html","files/readme_md.html","files/lib/bcrypt_rb.html","files/lib/bcrypt_rb.html","files/lib/bcrypt_engine_rb.html","files/lib/bcrypt_engine_rb.html"]}}