var search_data = {"index":{"info":[["SQLite3","ext/sqlite3/sqlite3.c","classes/SQLite3.html"," < ","        SQLite3 is a wrapper around the popular database      sqlite[http://sqlite.org].           For",1],["AbortException","SQLite3","classes/SQLite3/AbortException.html"," < Exception","",1],["AuthorizationException","SQLite3","classes/SQLite3/AuthorizationException.html"," < Exception","",1],["Backup","SQLite3","classes/SQLite3/Backup.html"," < Object","   call-seq: SQLite3::Backup#pagecount       Returns the total number of pages in the source database",1],["Blob","SQLite3","classes/SQLite3/Blob.html"," < String","   A class for differentiating between strings and blobs, when binding them      into statements.   ",1],["BusyException","SQLite3","classes/SQLite3/BusyException.html"," < Exception","",1],["CantOpenException","SQLite3","classes/SQLite3/CantOpenException.html"," < Exception","",1],["Constants","SQLite3","classes/SQLite3/Constants.html"," < ","",1],["ColumnType","SQLite3::Constants","classes/SQLite3/Constants/ColumnType.html"," < ","",1],["ErrorCode","SQLite3::Constants","classes/SQLite3/Constants/ErrorCode.html"," < ","",1],["TextRep","SQLite3::Constants","classes/SQLite3/Constants/TextRep.html"," < ","",1],["ConstraintException","SQLite3","classes/SQLite3/ConstraintException.html"," < Exception","",1],["CorruptException","SQLite3","classes/SQLite3/CorruptException.html"," < Exception","",1],["Database","SQLite3","classes/SQLite3/Database.html"," < Object","The Database class encapsulates a single connection to a SQLite3 database. Its usage is very straightforward:",1],["FunctionProxy","SQLite3::Database","classes/SQLite3/Database/FunctionProxy.html"," < Object","A helper class for dealing with custom functions (see #create_function, #create_aggregate, and #create_aggregate_handler).",1],["EmptyException","SQLite3","classes/SQLite3/EmptyException.html"," < Exception","",1],["Exception","SQLite3","classes/SQLite3/Exception.html"," < ::StandardError","",1],["FormatException","SQLite3","classes/SQLite3/FormatException.html"," < Exception","",1],["FullException","SQLite3","classes/SQLite3/FullException.html"," < Exception","",1],["IOException","SQLite3","classes/SQLite3/IOException.html"," < Exception","",1],["InternalException","SQLite3","classes/SQLite3/InternalException.html"," < Exception","",1],["InterruptException","SQLite3","classes/SQLite3/InterruptException.html"," < Exception","",1],["LockedException","SQLite3","classes/SQLite3/LockedException.html"," < Exception","",1],["MemoryException","SQLite3","classes/SQLite3/MemoryException.html"," < Exception","",1],["MismatchException","SQLite3","classes/SQLite3/MismatchException.html"," < Exception","",1],["MisuseException","SQLite3","classes/SQLite3/MisuseException.html"," < Exception","",1],["NotADatabaseException","SQLite3","classes/SQLite3/NotADatabaseException.html"," < Exception","",1],["NotFoundException","SQLite3","classes/SQLite3/NotFoundException.html"," < Exception","",1],["PermissionException","SQLite3","classes/SQLite3/PermissionException.html"," < Exception","",1],["Pragmas","SQLite3","classes/SQLite3/Pragmas.html"," < ","This module is intended for inclusion solely by the Database class. It defines convenience methods for",1],["ProtocolException","SQLite3","classes/SQLite3/ProtocolException.html"," < Exception","",1],["RangeException","SQLite3","classes/SQLite3/RangeException.html"," < Exception","",1],["ReadOnlyException","SQLite3","classes/SQLite3/ReadOnlyException.html"," < Exception","",1],["ResultSet","SQLite3","classes/SQLite3/ResultSet.html"," < Object","The ResultSet object encapsulates the enumerability of a query's output. It is a simple cursor over the",1],["ArrayWithTypes","SQLite3::ResultSet","classes/SQLite3/ResultSet/ArrayWithTypes.html"," < Array","The class of which we return an object in case we want an Array as result. (ArrayFields is installed.)",1],["ArrayWithTypesAndFields","SQLite3::ResultSet","classes/SQLite3/ResultSet/ArrayWithTypesAndFields.html"," < Array","The class of which we return an object in case we want an Array as result. (ArrayFields is not installed.)",1],["HashWithTypes","SQLite3::ResultSet","classes/SQLite3/ResultSet/HashWithTypes.html"," < Hash","The class of which we return an object in case we want a Hash as result. ",1],["SQLException","SQLite3","classes/SQLite3/SQLException.html"," < Exception","",1],["SchemaChangedException","SQLite3","classes/SQLite3/SchemaChangedException.html"," < Exception","",1],["Statement","SQLite3","classes/SQLite3/Statement.html"," < Object","A statement represents a prepared-but-unexecuted SQL query. It will rarely (if ever) be instantiated",1],["TooBigException","SQLite3","classes/SQLite3/TooBigException.html"," < Exception","",1],["Translator","SQLite3","classes/SQLite3/Translator.html"," < Object","The Translator class encapsulates the logic and callbacks necessary for converting string data to a value",1],["UnsupportedException","SQLite3","classes/SQLite3/UnsupportedException.html"," < Exception","",1],["Value","SQLite3","classes/SQLite3/Value.html"," < Object","",1],["VersionProxy","SQLite3","classes/SQLite3/VersionProxy.html"," < ","",1],["String","lib/sqlite3/statement.rb","classes/String.html"," < Object","",1],["[]","SQLite3::Database::FunctionProxy","classes/SQLite3/Database/FunctionProxy.html#M000110","( key )","Returns the value with the given key from the context. This is only available to aggregate functions.",2],["[]=","SQLite3::Database::FunctionProxy","classes/SQLite3/Database/FunctionProxy.html#M000111","( key, value )","Sets the value with the given key in the context. This is only available to aggregate functions. ",2],["active?","SQLite3::Statement","classes/SQLite3/Statement.html#M000122","()","Returns true if the statement is currently active, meaning it has an open result set. ",2],["add_translator","SQLite3::Translator","classes/SQLite3/Translator.html#M000133","( type )","Add a new translator block, which will be invoked to process type translations to the given type. The",2],["authorizer","SQLite3::Database","classes/SQLite3/Database.html#M000045","( &block )","Installs (or removes) a block that will be invoked for every access to the database. If the block returns",2],["authorizer=","SQLite3::Database","classes/SQLite3/Database.html#M000033","(p1)","       Set the authorizer for this database.  +auth+ must respond to +call+, and    +call+ must take",2],["auto_vacuum","SQLite3::Pragmas","classes/SQLite3/Pragmas.html#M000061","()","",2],["auto_vacuum=","SQLite3::Pragmas","classes/SQLite3/Pragmas.html#M000062","( mode )","",2],["bind_param","SQLite3::Statement","classes/SQLite3/Statement.html#M000009","(p1, p2)","       Binds value to the named (or positional) placeholder. If +param+ is a    Fixnum, it is treated",2],["bind_parameter_count","SQLite3::Statement","classes/SQLite3/Statement.html#M000017","()","       Return the number of bind parameters     ",2],["bind_params","SQLite3::Statement","classes/SQLite3/Statement.html#M000118","( *bind_vars )","Binds the given variables to the corresponding placeholders in the SQL text. See Database#execute for",2],["busy_handler","SQLite3::Database","classes/SQLite3/Database.html#M000034","(...)","       Register a busy handler with this database instance. When a requested    resource is busy, this",2],["busy_timeout","SQLite3::Database","classes/SQLite3/Database.html#M000065","(p1)","Alias for #busy_timeout=",2],["busy_timeout=","SQLite3::Database","classes/SQLite3/Database.html#M000035","(p1)","       Indicates that if a request for a resource terminates because that    resource is busy, SQLite",2],["cache_size","SQLite3::Pragmas","classes/SQLite3/Pragmas.html#M000069","()","",2],["cache_size=","SQLite3::Pragmas","classes/SQLite3/Pragmas.html#M000070","( size )","",2],["changes","SQLite3::Database","classes/SQLite3/Database.html#M000032","()","       Returns the number of changes made to this database instance by the last    operation performed.",2],["clear_bindings!","SQLite3::Statement","classes/SQLite3/Statement.html#M000011","()","       Resets the statement. This is typically done internally, though it might    occassionally be necessary",2],["close","SQLite3::Database","classes/SQLite3/Database.html#M000021","()","       Closes this database.     ",2],["close","SQLite3::ResultSet","classes/SQLite3/ResultSet.html#M000126","()","Closes the statement that spawned this result set. <em>Use with caution!</em> Closing a result set will",2],["close","SQLite3::Statement","classes/SQLite3/Statement.html#M000007","()","       Closes the statement by finalizing the underlying statement    handle. The statement must not",2],["closed?","SQLite3::Database","classes/SQLite3/Database.html#M000022","()","       Returns +true+ if this database instance has been closed (see #close).     ",2],["closed?","SQLite3::ResultSet","classes/SQLite3/ResultSet.html#M000127","()","Queries whether the underlying statement has been closed or not. ",2],["closed?","SQLite3::Statement","classes/SQLite3/Statement.html#M000008","()","       Returns true if the statement has been closed.     ",2],["code","SQLite3::Exception","classes/SQLite3/Exception.html#M000040","()","The numeric error code that this exception represents. ",2],["code","SQLite3::Exception","classes/SQLite3/Exception.html#M000041","()","A convenience for accessing the error code for this exception. ",2],["collation","SQLite3::Database","classes/SQLite3/Database.html#M000020","(p1, p2)","       Add a collation with name +name+, and a +comparator+ object.  The    +comparator+ object should",2],["column_count","SQLite3::Statement","classes/SQLite3/Statement.html#M000014","()","       Returns the number of columns to be returned for this statement     ",2],["column_decltype","SQLite3::Statement","classes/SQLite3/Statement.html#M000016","(p1)","       Get the column type at +index+.  0 based.     ",2],["column_name","SQLite3::Statement","classes/SQLite3/Statement.html#M000015","(p1)","       Get the column name at +index+.  0 based.     ",2],["columns","SQLite3::ResultSet","classes/SQLite3/ResultSet.html#M000129","()","Returns the names of the columns returned by this result set. ",2],["columns","SQLite3::Statement","classes/SQLite3/Statement.html#M000123","()","Return an array of the column names for this statement. Note that this may execute the statement in order",2],["commit","SQLite3::Database","classes/SQLite3/Database.html#M000103","()","Commits the current transaction. If there is no current transaction, this will cause an error to be raised.",2],["complete?","SQLite3::Database","classes/SQLite3/Database.html#M000031","(p1)","       Return +true+ if the string is a valid (ie, parsable) SQL statement, and    +false+ otherwise.",2],["const_missing","SQLite3","classes/SQLite3.html#M000146","(name)","",2],["count","SQLite3::Database::FunctionProxy","classes/SQLite3/Database/FunctionProxy.html#M000109","()","(Only available to aggregate functions.) Returns the number of rows that the aggregate has processed",2],["create_aggregate","SQLite3::Database","classes/SQLite3/Database.html#M000073","( name, arity, step=nil, finalize=nil, text_rep=Constants::TextRep::ANY, &block )","Creates a new aggregate function for use in SQL statements. Aggregate functions are functions that apply",2],["create_aggregate_handler","SQLite3::Database","classes/SQLite3/Database.html#M000090","( handler )","This is another approach to creating an aggregate function (see #create_aggregate). Instead of explicitly",2],["create_function","SQLite3::Database","classes/SQLite3/Database.html#M000066","(name, arity, text_rep=Constants::TextRep::ANY, &block)","Creates a new function for use in SQL statements. It will be added as +name+, with the given +arity+.",2],["database_list","SQLite3::Pragmas","classes/SQLite3/Pragmas.html#M000093","( )","",2],["database_name","SQLite3::Statement","classes/SQLite3/Statement.html#M000018","(p1)","       Return the database name for the column at +column_index+     ",2],["default_cache_size","SQLite3::Pragmas","classes/SQLite3/Pragmas.html#M000071","()","",2],["default_cache_size=","SQLite3::Pragmas","classes/SQLite3/Pragmas.html#M000072","( size )","",2],["default_synchronous","SQLite3::Pragmas","classes/SQLite3/Pragmas.html#M000074","()","",2],["default_synchronous=","SQLite3::Pragmas","classes/SQLite3/Pragmas.html#M000075","( mode )","",2],["default_temp_store","SQLite3::Pragmas","classes/SQLite3/Pragmas.html#M000078","()","",2],["default_temp_store=","SQLite3::Pragmas","classes/SQLite3/Pragmas.html#M000082","( mode )","",2],["define_aggregator","SQLite3::Database","classes/SQLite3/Database.html#M000027","(p1, p2)","       Define an aggregate function named +name+ using the object +aggregator+.    +aggregator+ must",2],["define_function","SQLite3::Database","classes/SQLite3/Database.html#M000026","(p1)","       Define a function named +name+ with +args+.  The arity of the block    will be used as the arity",2],["done?","SQLite3::Statement","classes/SQLite3/Statement.html#M000013","()","       returns true if all rows have been returned.     ",2],["each","SQLite3::ResultSet","classes/SQLite3/ResultSet.html#M000121","( &block )","Required by the Enumerable mixin. Provides an internal iterator over the rows of the result set. ",2],["each","SQLite3::Statement","classes/SQLite3/Statement.html#M000124","()","",2],["enable_load_extension","SQLite3::Database","classes/SQLite3/Database.html#M000038","(p1)","       Enable or disable extension loading.     ",2],["encoding","SQLite3::Database","classes/SQLite3/Database.html#M000039","()","       Fetch the encoding set on this database     ",2],["eof?","SQLite3::ResultSet","classes/SQLite3/ResultSet.html#M000116","()","Query whether the cursor has reached the end of the result set or not. ",2],["errcode","SQLite3::Database","classes/SQLite3/Database.html#M000030","()","       Return an integer representing the last error to have occurred with this    database.     ",2],["errmsg","SQLite3::Database","classes/SQLite3/Database.html#M000029","()","       Return a string describing the last error to have occurred with this    database.     ",2],["execute","SQLite3::Database","classes/SQLite3/Database.html#M000047","(sql, bind_vars = [], *args, &block)","Executes the given SQL statement. If additional parameters are given, they are treated as bind variables,",2],["execute","SQLite3::Statement","classes/SQLite3/Statement.html#M000119","( *bind_vars )","Execute the statement. This creates a new ResultSet object for the statement's virtual machine. If a",2],["execute!","SQLite3::Statement","classes/SQLite3/Statement.html#M000120","( *bind_vars, &block )","Execute the statement. If no block was given, this returns an array of rows returned by executing the",2],["execute2","SQLite3::Database","classes/SQLite3/Database.html#M000048","( sql, *bind_vars )","Executes the given SQL statement, exactly as with #execute. However, the first row returned (either via",2],["execute_batch","SQLite3::Database","classes/SQLite3/Database.html#M000051","( sql, bind_vars = [], *args )","Executes all SQL statements in the given string. By contrast, the other means of executing queries will",2],["finalize","SQLite3::Database","classes/SQLite3/Database.html#M000080","( &block )","",2],["finalize","SQLite3::Database","classes/SQLite3/Database.html#M000099","()","",2],["finalize","SQLite3::Database","classes/SQLite3/Database.html#M000087","()","",2],["finish","SQLite3::Backup","classes/SQLite3/Backup.html#M000003","()","       Destroy the backup object.     ",2],["foreign_key_list","SQLite3::Pragmas","classes/SQLite3/Pragmas.html#M000094","( table )","",2],["full_column_names","SQLite3::Pragmas","classes/SQLite3/Pragmas.html#M000085","()","",2],["full_column_names=","SQLite3::Pragmas","classes/SQLite3/Pragmas.html#M000086","( mode )","",2],["get_boolean_pragma","SQLite3::Pragmas","classes/SQLite3/Pragmas.html#M000049","( name )","Returns +true+ or +false+ depending on the value of the named pragma. ",2],["get_enum_pragma","SQLite3::Pragmas","classes/SQLite3/Pragmas.html#M000053","( name )","Return the value of the given pragma. ",2],["get_first_row","SQLite3::Database","classes/SQLite3/Database.html#M000058","( sql, *bind_vars )","A convenience method for obtaining the first row of a result set, and discarding all others. It is otherwise",2],["get_first_value","SQLite3::Database","classes/SQLite3/Database.html#M000059","( sql, *bind_vars )","A convenience method for obtaining the first value of the first row of a result set, and discarding all",2],["get_int_pragma","SQLite3::Pragmas","classes/SQLite3/Pragmas.html#M000056","( name )","Returns the value of the given pragma as an integer. ",2],["get_metadata","SQLite3::Statement","classes/SQLite3/Statement.html#M000130","()","A convenience method for obtaining the metadata about the query. Note that this will actually execute",2],["get_query_pragma","SQLite3::Pragmas","classes/SQLite3/Pragmas.html#M000052","( name, *parms )","Requests the given pragma (and parameters), and if the block is given, each row of the result set will",2],["index_info","SQLite3::Pragmas","classes/SQLite3/Pragmas.html#M000095","( index )","",2],["index_list","SQLite3::Pragmas","classes/SQLite3/Pragmas.html#M000096","( table )","",2],["integrity_check","SQLite3::Pragmas","classes/SQLite3/Pragmas.html#M000060","()","Does an integrity check on the database. If the check fails, a SQLite3::Exception will be raised. Otherwise",2],["interrupt","SQLite3::Database","classes/SQLite3/Database.html#M000028","()","       Interrupts the currently executing operation, causing it to abort.     ",2],["last_insert_row_id","SQLite3::Database","classes/SQLite3/Database.html#M000025","()","       Obtains the unique row ID of the last row to be inserted by this Database    instance.     ",2],["length","SQLite3::Value","classes/SQLite3/Value.html#M000137","( utf16=false )","",2],["load_extension","SQLite3::Database","classes/SQLite3/Database.html#M000037","(p1)","       Loads an SQLite extension library from the named file. Extension    loading must be enabled using",2],["new","SQLite3::Backup","classes/SQLite3/Backup.html#M000001","(p1, p2, p3, p4)","       Initialize backup the backup.       dstdb:      the destination SQLite3::Database object.    dstname:",2],["new","SQLite3::Database","classes/SQLite3/Database.html#M000097","(handler)","",2],["new","SQLite3::Database","classes/SQLite3/Database.html#M000019","(...)","       Create a new Database object that opens the given file. If utf16    is +true+, the filename is",2],["new","SQLite3::Database::FunctionProxy","classes/SQLite3/Database/FunctionProxy.html#M000107","()","Create a new FunctionProxy that encapsulates the given +func+ object. If context is non-nil, the functions",2],["new","SQLite3::ResultSet","classes/SQLite3/ResultSet.html#M000113","(db, stmt)","Create a new ResultSet attached to the given database, using the given sql text. ",2],["new","SQLite3::Statement","classes/SQLite3/Statement.html#M000006","(p1, p2)","       Create a new statement attached to the given Database instance, and which    encapsulates the",2],["new","SQLite3::Translator","classes/SQLite3/Translator.html#M000132","()","Create a new Translator instance. It will be preinitialized with default translators for most SQL data",2],["new","SQLite3::Value","classes/SQLite3/Value.html#M000134","( db, handle )","",2],["next","SQLite3::ResultSet","classes/SQLite3/ResultSet.html#M000117","()","Obtain the next row from the cursor. If there are no more rows to be had, this will return +nil+. If",2],["null?","SQLite3::Value","classes/SQLite3/Value.html#M000135","()","",2],["ordered_map_for","SQLite3::Database","classes/SQLite3/Database.html#M000112","(columns, row)","",2],["pagecount","SQLite3::Backup","classes/SQLite3/Backup.html#M000005","()","       Returns the total number of pages in the source database file.       Note that the value is only",2],["parser_trace","SQLite3::Pragmas","classes/SQLite3/Pragmas.html#M000088","()","",2],["parser_trace=","SQLite3::Pragmas","classes/SQLite3/Pragmas.html#M000089","( mode )","",2],["prepare","SQLite3::Database","classes/SQLite3/Database.html#M000046","(sql)","Returns a Statement object representing the given SQL. This does not execute the statement; it merely",2],["query","SQLite3::Database","classes/SQLite3/Database.html#M000055","( sql, bind_vars = [], *args )","This is a convenience method for creating a statement, binding paramters to it, and calling execute:",2],["quote","SQLite3::Database","classes/SQLite3/Database.html#M000042","( string )","Quotes the given string, making it safe to use in an SQL statement. It replaces all instances of the",2],["readonly?","SQLite3::Database","classes/SQLite3/Database.html#M000105","()","Returns +true+ if the database has been open in readonly mode A helper to check before performing any",2],["register_default_translators","SQLite3::Translator","classes/SQLite3/Translator.html#M000145","()","Register the default translators for the current Translator instance. This includes translators for most",2],["remaining","SQLite3::Backup","classes/SQLite3/Backup.html#M000004","()","       Returns the number of pages still to be backed up.       Note that the value is only updated after",2],["reset","SQLite3::ResultSet","classes/SQLite3/ResultSet.html#M000115","( *bind_params )","Reset the cursor, so that a result set which has reached end-of-file can be rewound and reiterated. ",2],["reset!","SQLite3::Statement","classes/SQLite3/Statement.html#M000010","()","       Resets the statement. This is typically done internally, though it might    occassionally be necessary",2],["rollback","SQLite3::Database","classes/SQLite3/Database.html#M000104","()","Rolls the current transaction back. If there is no current transaction, this will cause an error to be",2],["schema_cookie","SQLite3::Pragmas","classes/SQLite3/Pragmas.html#M000063","()","",2],["schema_cookie=","SQLite3::Pragmas","classes/SQLite3/Pragmas.html#M000064","( cookie )","",2],["set_boolean_pragma","SQLite3::Pragmas","classes/SQLite3/Pragmas.html#M000050","( name, mode )","Sets the given pragma to the given boolean value. The value itself may be +true+ or +false+, or any other",2],["set_enum_pragma","SQLite3::Pragmas","classes/SQLite3/Pragmas.html#M000054","( name, mode, enums )","Set the value of the given pragma to +mode+. The +mode+ parameter must conform to one of the values in",2],["set_error","SQLite3::Database::FunctionProxy","classes/SQLite3/Database/FunctionProxy.html#M000108","( error )","Set the result of the function to the given error message. The function will then return that error.",2],["set_int_pragma","SQLite3::Pragmas","classes/SQLite3/Pragmas.html#M000057","( name, value )","Set the value of the given pragma to the integer value of the +value+ parameter. ",2],["step","SQLite3::Backup","classes/SQLite3/Backup.html#M000002","(p1)","       Copy database pages up to +nPage+.    If negative, copy all remaining source pages.       If all",2],["step","SQLite3::Database","classes/SQLite3/Database.html#M000081","( *args )","",2],["step","SQLite3::Database","classes/SQLite3/Database.html#M000079","( &block )","",2],["step","SQLite3::Database","classes/SQLite3/Database.html#M000098","( *args )","",2],["synchronous","SQLite3::Pragmas","classes/SQLite3/Pragmas.html#M000076","()","",2],["synchronous=","SQLite3::Pragmas","classes/SQLite3/Pragmas.html#M000077","( mode )","",2],["table_info","SQLite3::Pragmas","classes/SQLite3/Pragmas.html#M000100","(table)","Returns information about +table+.  Yields each row of table information if a block is provided. ",2],["temp_store","SQLite3::Pragmas","classes/SQLite3/Pragmas.html#M000083","()","",2],["temp_store=","SQLite3::Pragmas","classes/SQLite3/Pragmas.html#M000084","( mode )","",2],["to_blob","SQLite3::Value","classes/SQLite3/Value.html#M000136","()","",2],["to_blob","String","classes/String.html#M000114","()","",2],["to_f","SQLite3::Value","classes/SQLite3/Value.html#M000140","()","",2],["to_i","SQLite3::Value","classes/SQLite3/Value.html#M000141","()","",2],["to_int64","SQLite3::Value","classes/SQLite3/Value.html#M000142","()","",2],["to_s","SQLite3::Value","classes/SQLite3/Value.html#M000143","( utf16=false )","",2],["total_changes","SQLite3::Database","classes/SQLite3/Database.html#M000023","()","       Returns the total number of changes made to this database instance    since it was opened.   ",2],["trace","SQLite3::Database","classes/SQLite3/Database.html#M000024","(...)","       Installs (or removes) a block that will be invoked for every SQL    statement executed. The block",2],["transaction","SQLite3::Database","classes/SQLite3/Database.html#M000101","( mode = :deferred )","Begins a new transaction. Note that nested transactions are not allowed by SQLite, so attempting to nest",2],["transaction_active?","SQLite3::Database","classes/SQLite3/Database.html#M000036","()","       Returns +true+ if there is a transaction active, and +false+ otherwise.        ",2],["translate","SQLite3::Translator","classes/SQLite3/Translator.html#M000138","( type, value )","Translate the given string value to a value of the given type. In the absense of an installed translator",2],["translator","SQLite3::Database","classes/SQLite3/Database.html#M000044","()","Return the type translator employed by this database instance. Each database instance has its own type",2],["tweak_default","SQLite3::Pragmas","classes/SQLite3/Pragmas.html#M000106","(hash)","Since SQLite 3.3.8, the table_info pragma has returned the default value of the row as a quoted SQL value.",2],["type","SQLite3::Value","classes/SQLite3/Value.html#M000144","()","",2],["type_name","SQLite3::Translator","classes/SQLite3/Translator.html#M000139","( type )","A convenience method for working with type names. This returns the \"base\" type name, without any parenthetical",2],["types","SQLite3::ResultSet","classes/SQLite3/ResultSet.html#M000128","()","Returns the types of the columns returned by this result set. ",2],["types","SQLite3::Statement","classes/SQLite3/Statement.html#M000125","()","Return an array of the data types for each column in this statement. Note that this may execute the statement",2],["user_cookie","SQLite3::Pragmas","classes/SQLite3/Pragmas.html#M000067","()","",2],["user_cookie=","SQLite3::Pragmas","classes/SQLite3/Pragmas.html#M000068","( cookie )","",2],["vdbe_trace","SQLite3::Pragmas","classes/SQLite3/Pragmas.html#M000091","()","",2],["vdbe_trace=","SQLite3::Pragmas","classes/SQLite3/Pragmas.html#M000092","( mode )","",2],["version_compare","SQLite3::Pragmas","classes/SQLite3/Pragmas.html#M000102","(v1, v2)","Compares two version strings ",2],["API_CHANGES.rdoc","files/API_CHANGES_rdoc.html","files/API_CHANGES_rdoc.html","","= API Changes  * SQLite3::Database#execute only accepts an array for bind parameters.  * SQLite3::ResultSet",3],["CHANGELOG.rdoc","files/CHANGELOG_rdoc.html","files/CHANGELOG_rdoc.html","","=== 1.3.5 / 2011-12-03 - ZOMG Holidays are here Edition!  * Enhancements   * Windows: build against SQLite",3],["ChangeLog.cvs","files/ChangeLog_cvs.html","files/ChangeLog_cvs.html","","2005-01-05 09:40  minam  \t* Rakefile, sqlite3-ruby-win32.gemspec, sqlite3-ruby.gemspec: Added \t  win32",3],["LICENSE","files/LICENSE.html","files/LICENSE.html","","Copyright (c) 2004, Jamis Buck (jamis@jamisbuck.org) All rights reserved.  Redistribution and use in",3],["Manifest.txt","files/Manifest_txt.html","files/Manifest_txt.html","","API_CHANGES.rdoc CHANGELOG.rdoc ChangeLog.cvs LICENSE Manifest.txt README.rdoc Rakefile ext/sqlite3/backup.c",3],["README.rdoc","files/README_rdoc.html","files/README_rdoc.html","","= SQLite3/Ruby Interface  * http://github.com/luislavena/sqlite3-ruby * http://groups.google.com/group/sqlite3-ruby",3],["backup.c","files/ext/sqlite3/backup_c.html","files/ext/sqlite3/backup_c.html","","",3],["database.c","files/ext/sqlite3/database_c.html","files/ext/sqlite3/database_c.html","","",3],["exception.c","files/ext/sqlite3/exception_c.html","files/ext/sqlite3/exception_c.html","","",3],["sqlite3.c","files/ext/sqlite3/sqlite3_c.html","files/ext/sqlite3/sqlite3_c.html","","",3],["statement.c","files/ext/sqlite3/statement_c.html","files/ext/sqlite3/statement_c.html","","",3],["sqlite3.rb","files/lib/sqlite3_rb.html","files/lib/sqlite3_rb.html","","support multiple ruby version (fat binaries under windows) ",3],["constants.rb","files/lib/sqlite3/constants_rb.html","files/lib/sqlite3/constants_rb.html","","",3],["database.rb","files/lib/sqlite3/database_rb.html","files/lib/sqlite3/database_rb.html","","",3],["errors.rb","files/lib/sqlite3/errors_rb.html","files/lib/sqlite3/errors_rb.html","","",3],["pragmas.rb","files/lib/sqlite3/pragmas_rb.html","files/lib/sqlite3/pragmas_rb.html","","",3],["resultset.rb","files/lib/sqlite3/resultset_rb.html","files/lib/sqlite3/resultset_rb.html","","",3],["statement.rb","files/lib/sqlite3/statement_rb.html","files/lib/sqlite3/statement_rb.html","","",3],["translator.rb","files/lib/sqlite3/translator_rb.html","files/lib/sqlite3/translator_rb.html","","",3],["value.rb","files/lib/sqlite3/value_rb.html","files/lib/sqlite3/value_rb.html","","",3],["version.rb","files/lib/sqlite3/version_rb.html","files/lib/sqlite3/version_rb.html","","",3]],"searchIndex":["sqlite3","abortexception","authorizationexception","backup","blob","busyexception","cantopenexception","constants","columntype","errorcode","textrep","constraintexception","corruptexception","database","functionproxy","emptyexception","exception","formatexception","fullexception","ioexception","internalexception","interruptexception","lockedexception","memoryexception","mismatchexception","misuseexception","notadatabaseexception","notfoundexception","permissionexception","pragmas","protocolexception","rangeexception","readonlyexception","resultset","arraywithtypes","arraywithtypesandfields","hashwithtypes","sqlexception","schemachangedexception","statement","toobigexception","translator","unsupportedexception","value","versionproxy","string","[]()","[]=()","active?()","add_translator()","authorizer()","authorizer=()","auto_vacuum()","auto_vacuum=()","bind_param()","bind_parameter_count()","bind_params()","busy_handler()","busy_timeout()","busy_timeout=()","cache_size()","cache_size=()","changes()","clear_bindings!()","close()","close()","close()","closed?()","closed?()","closed?()","code()","code()","collation()","column_count()","column_decltype()","column_name()","columns()","columns()","commit()","complete?()","const_missing()","count()","create_aggregate()","create_aggregate_handler()","create_function()","database_list()","database_name()","default_cache_size()","default_cache_size=()","default_synchronous()","default_synchronous=()","default_temp_store()","default_temp_store=()","define_aggregator()","define_function()","done?()","each()","each()","enable_load_extension()","encoding()","eof?()","errcode()","errmsg()","execute()","execute()","execute!()","execute2()","execute_batch()","finalize()","finalize()","finalize()","finish()","foreign_key_list()","full_column_names()","full_column_names=()","get_boolean_pragma()","get_enum_pragma()","get_first_row()","get_first_value()","get_int_pragma()","get_metadata()","get_query_pragma()","index_info()","index_list()","integrity_check()","interrupt()","last_insert_row_id()","length()","load_extension()","new()","new()","new()","new()","new()","new()","new()","new()","next()","null?()","ordered_map_for()","pagecount()","parser_trace()","parser_trace=()","prepare()","query()","quote()","readonly?()","register_default_translators()","remaining()","reset()","reset!()","rollback()","schema_cookie()","schema_cookie=()","set_boolean_pragma()","set_enum_pragma()","set_error()","set_int_pragma()","step()","step()","step()","step()","synchronous()","synchronous=()","table_info()","temp_store()","temp_store=()","to_blob()","to_blob()","to_f()","to_i()","to_int64()","to_s()","total_changes()","trace()","transaction()","transaction_active?()","translate()","translator()","tweak_default()","type()","type_name()","types()","types()","user_cookie()","user_cookie=()","vdbe_trace()","vdbe_trace=()","version_compare()","api_changes.rdoc","changelog.rdoc","changelog.cvs","license","manifest.txt","readme.rdoc","backup.c","database.c","exception.c","sqlite3.c","statement.c","sqlite3.rb","constants.rb","database.rb","errors.rb","pragmas.rb","resultset.rb","statement.rb","translator.rb","value.rb","version.rb"],"longSearchIndex":["lib/sqlite3/version.rb","sqlite3","sqlite3","sqlite3","sqlite3","sqlite3","sqlite3","sqlite3","sqlite3::constants","sqlite3::constants","sqlite3::constants","sqlite3","sqlite3","sqlite3","sqlite3::database","sqlite3","sqlite3","sqlite3","sqlite3","sqlite3","sqlite3","sqlite3","sqlite3","sqlite3","sqlite3","sqlite3","sqlite3","sqlite3","sqlite3","sqlite3","sqlite3","sqlite3","sqlite3","sqlite3","sqlite3::resultset","sqlite3::resultset","sqlite3::resultset","sqlite3","sqlite3","sqlite3","sqlite3","sqlite3","sqlite3","sqlite3","sqlite3","lib/sqlite3/statement.rb","sqlite3::database::functionproxy","sqlite3::database::functionproxy","sqlite3::statement","sqlite3::translator","sqlite3::database","sqlite3::database","sqlite3::pragmas","sqlite3::pragmas","sqlite3::statement","sqlite3::statement","sqlite3::statement","sqlite3::database","sqlite3::database","sqlite3::database","sqlite3::pragmas","sqlite3::pragmas","sqlite3::database","sqlite3::statement","sqlite3::database","sqlite3::resultset","sqlite3::statement","sqlite3::database","sqlite3::resultset","sqlite3::statement","sqlite3::exception","sqlite3::exception","sqlite3::database","sqlite3::statement","sqlite3::statement","sqlite3::statement","sqlite3::resultset","sqlite3::statement","sqlite3::database","sqlite3::database","sqlite3","sqlite3::database::functionproxy","sqlite3::database","sqlite3::database","sqlite3::database","sqlite3::pragmas","sqlite3::statement","sqlite3::pragmas","sqlite3::pragmas","sqlite3::pragmas","sqlite3::pragmas","sqlite3::pragmas","sqlite3::pragmas","sqlite3::database","sqlite3::database","sqlite3::statement","sqlite3::resultset","sqlite3::statement","sqlite3::database","sqlite3::database","sqlite3::resultset","sqlite3::database","sqlite3::database","sqlite3::database","sqlite3::statement","sqlite3::statement","sqlite3::database","sqlite3::database","sqlite3::database","sqlite3::database","sqlite3::database","sqlite3::backup","sqlite3::pragmas","sqlite3::pragmas","sqlite3::pragmas","sqlite3::pragmas","sqlite3::pragmas","sqlite3::database","sqlite3::database","sqlite3::pragmas","sqlite3::statement","sqlite3::pragmas","sqlite3::pragmas","sqlite3::pragmas","sqlite3::pragmas","sqlite3::database","sqlite3::database","sqlite3::value","sqlite3::database","sqlite3::backup","sqlite3::database","sqlite3::database","sqlite3::database::functionproxy","sqlite3::resultset","sqlite3::statement","sqlite3::translator","sqlite3::value","sqlite3::resultset","sqlite3::value","sqlite3::database","sqlite3::backup","sqlite3::pragmas","sqlite3::pragmas","sqlite3::database","sqlite3::database","sqlite3::database","sqlite3::database","sqlite3::translator","sqlite3::backup","sqlite3::resultset","sqlite3::statement","sqlite3::database","sqlite3::pragmas","sqlite3::pragmas","sqlite3::pragmas","sqlite3::pragmas","sqlite3::database::functionproxy","sqlite3::pragmas","sqlite3::backup","sqlite3::database","sqlite3::database","sqlite3::database","sqlite3::pragmas","sqlite3::pragmas","sqlite3::pragmas","sqlite3::pragmas","sqlite3::pragmas","sqlite3::value","string","sqlite3::value","sqlite3::value","sqlite3::value","sqlite3::value","sqlite3::database","sqlite3::database","sqlite3::database","sqlite3::database","sqlite3::translator","sqlite3::database","sqlite3::pragmas","sqlite3::value","sqlite3::translator","sqlite3::resultset","sqlite3::statement","sqlite3::pragmas","sqlite3::pragmas","sqlite3::pragmas","sqlite3::pragmas","sqlite3::pragmas","files/api_changes_rdoc.html","files/changelog_rdoc.html","files/changelog_cvs.html","files/license.html","files/manifest_txt.html","files/readme_rdoc.html","files/ext/sqlite3/backup_c.html","files/ext/sqlite3/database_c.html","files/ext/sqlite3/exception_c.html","files/ext/sqlite3/sqlite3_c.html","files/ext/sqlite3/statement_c.html","files/lib/sqlite3_rb.html","files/lib/sqlite3/constants_rb.html","files/lib/sqlite3/database_rb.html","files/lib/sqlite3/errors_rb.html","files/lib/sqlite3/pragmas_rb.html","files/lib/sqlite3/resultset_rb.html","files/lib/sqlite3/statement_rb.html","files/lib/sqlite3/translator_rb.html","files/lib/sqlite3/value_rb.html","files/lib/sqlite3/version_rb.html"]}}