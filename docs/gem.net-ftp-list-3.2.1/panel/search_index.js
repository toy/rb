var search_data = {"index":{"longSearchIndex":["lib/net/ftp/list/entry.rb","net","net::ftp","net::ftp::list","net::ftp::list","net::ftp::list","net::ftp::list","net::ftp::list","net::ftp::list","net::ftp::list","net::ftp::list","net::ftp::list::entry","net::ftp::list::entry","net::ftp::list::entry","net::ftp::list::entry","net::ftp::list::entry","net::ftp::list::parser","net::ftp::list::entry","net::ftp::list::entry","net::ftp::list::entry","net::ftp::list::entry","net::ftp::list::entry","net::ftp::list","net::ftp::list::microsoft","net::ftp::list::netware","net::ftp::list::parser","net::ftp::list::rumpus","net::ftp::list::unix","net::ftp::list::unknown","net::ftp::list","net::ftp::list","net::ftp::list::entry","net::ftp::list::entry","net::ftp::list::entry","net::ftp::list::entry","net::ftp::list::entry","net::ftp::list::entry","net::ftp::list::parser","files/readme_txt.html","files/lib/net/ftp/list_rb.html","files/lib/net/ftp/list/entry_rb.html","files/lib/net/ftp/list/microsoft_rb.html","files/lib/net/ftp/list/netware_rb.html","files/lib/net/ftp/list/parser_rb.html","files/lib/net/ftp/list/rumpus_rb.html","files/lib/net/ftp/list/unix_rb.html","files/lib/net/ftp/list/unknown_rb.html"],"info":[["Net","lib/net/ftp/list/entry.rb","classes/Net.html"," < ","",1],["FTP","Net","classes/Net/FTP.html"," < ","",1],["List","Net::FTP","classes/Net/FTP/List.html"," < ","",1],["Entry","Net::FTP::List","classes/Net/FTP/List/Entry.html"," < Object","Represents an entry of the FTP list. Gets returned when you parse a list. ",1],["Microsoft","Net::FTP::List","classes/Net/FTP/List/Microsoft.html"," < Net::FTP::List::Parser","Parse Microsoft(NT) like FTP LIST entries. == MATCHES 06-25-07  01:08PM       <DIR>          etc 11-27-07",1],["Netware","Net::FTP::List","classes/Net/FTP/List/Netware.html"," < Net::FTP::List::Parser","Parse Netware like FTP LIST entries. == MATCHES d [RWCEAFMS] dpearce                          512 Jun",1],["ParseError","Net::FTP::List","classes/Net/FTP/List/ParseError.html"," < RuntimeError","Gets raised with raise_on_failed_server_detection set ",1],["Parser","Net::FTP::List","classes/Net/FTP/List/Parser.html"," < Object","Abstract FTP LIST parser. It really just defines and documents the interface. ",1],["Rumpus","Net::FTP::List","classes/Net/FTP/List/Rumpus.html"," < Net::FTP::List::Parser","Parse Rumpus FTP LIST entries. == MATCHES drwxr-xr-x               folder        0 Nov 30 10:03 houdini",1],["Unix","Net::FTP::List","classes/Net/FTP/List/Unix.html"," < Net::FTP::List::Parser","Parse Unix like FTP LIST entries. == MATCHES drwxr-xr-x   4 steve    group       4096 Dec 10 20:23 etc",1],["Unknown","Net::FTP::List","classes/Net/FTP/List/Unknown.html"," < Net::FTP::List::Parser","If all other attempts to parse the entry fail this is the parser that is going to be used. It might be",1],["<=>","Net::FTP::List::Entry","classes/Net/FTP/List/Entry.html#M000002","(other)","Compares the receiver against another object. @param (see #eql?) @return [Fixnum]  -1, 0, or +1 depending",2],["basename","Net::FTP::List::Entry","classes/Net/FTP/List/Entry.html#M000005","()","The items basename (filename). ",2],["device?","Net::FTP::List::Entry","classes/Net/FTP/List/Entry.html#M000011","()","Looks like a device. ",2],["dir?","Net::FTP::List::Entry","classes/Net/FTP/List/Entry.html#M000007","()","Looks like a directory, try CWD. ",2],["directory?","Net::FTP::List::Entry","classes/Net/FTP/List/Entry.html#M000008","()","Alias for #dir?",2],["emit_entry","Net::FTP::List::Parser","classes/Net/FTP/List/Parser.html#M000022","(raw, extra_attributes)","Automatically adds the name of the parser class to the server_type field ",2],["eql?","Net::FTP::List::Entry","classes/Net/FTP/List/Entry.html#M000001","(other)","Tests for objects equality (value and type). @param entry [Net::FTP::List::Entry] an entry of the FTP",2],["file?","Net::FTP::List::Entry","classes/Net/FTP/List/Entry.html#M000009","()","Looks like a file, try RETR. ",2],["filesize","Net::FTP::List::Entry","classes/Net/FTP/List/Entry.html#M000013","()","Returns the filesize of the entry or 0 for directorties ",2],["mtime","Net::FTP::List::Entry","classes/Net/FTP/List/Entry.html#M000012","()","Returns the modification time of the file/directory or the current time if unknown ",2],["name","Net::FTP::List::Entry","classes/Net/FTP/List/Entry.html#M000006","()","Alias for #basename",2],["parse","Net::FTP::List","classes/Net/FTP/List.html#M000028","(*args)","Parse a line from FTP LIST responsesa and return a Net::FTP::List::Entry ",2],["parse","Net::FTP::List::Microsoft","classes/Net/FTP/List/Microsoft.html#M000017","(raw)","Parse a Microsoft(NT) like FTP LIST entries. ",2],["parse","Net::FTP::List::Netware","classes/Net/FTP/List/Netware.html#M000018","(raw)","Parse a Netware like FTP LIST entries. ",2],["parse","Net::FTP::List::Parser","classes/Net/FTP/List/Parser.html#M000021","(raw)","The main parse method. Return false from it if parsing fails (this is cheaper than raising an exception)",2],["parse","Net::FTP::List::Rumpus","classes/Net/FTP/List/Rumpus.html#M000023","(raw)","Parse a Rumpus FTP LIST entry. ",2],["parse","Net::FTP::List::Unix","classes/Net/FTP/List/Unix.html#M000024","(raw)","Parse a Unix like FTP LIST entries. ",2],["parse","Net::FTP::List::Unknown","classes/Net/FTP/List/Unknown.html#M000025","(raw)","",2],["raise_on_failed_server_detection","Net::FTP::List","classes/Net/FTP/List.html#M000027","()","",2],["raise_on_failed_server_detection=","Net::FTP::List","classes/Net/FTP/List.html#M000026","(new_flag)","",2],["raw","Net::FTP::List::Entry","classes/Net/FTP/List/Entry.html#M000003","()","The raw list entry string. ",2],["server_type","Net::FTP::List::Entry","classes/Net/FTP/List/Entry.html#M000015","()","Returns the detected server type if this entry ",2],["size","Net::FTP::List::Entry","classes/Net/FTP/List/Entry.html#M000014","()","Alias for #filesize",2],["symlink?","Net::FTP::List::Entry","classes/Net/FTP/List/Entry.html#M000010","()","Looks like a symbolic link. ",2],["to_s","Net::FTP::List::Entry","classes/Net/FTP/List/Entry.html#M000004","()","Alias for #raw",2],["unknown?","Net::FTP::List::Entry","classes/Net/FTP/List/Entry.html#M000016","()","",2],["with_each_parser","Net::FTP::List::Parser","classes/Net/FTP/List/Parser.html#M000019","()","Run a passed block with each parser in succession, from the most specific to the least specific. Will",2],["README.txt","files/README_txt.html","files/README_txt.html","","= Net::Ftp::List  == DESCRIPTION  Ruby lib to parse FTP LIST responses.  According to the FTP RFC the",3],["list.rb","files/lib/net/ftp/list_rb.html","files/lib/net/ftp/list_rb.html","","",3],["entry.rb","files/lib/net/ftp/list/entry_rb.html","files/lib/net/ftp/list/entry_rb.html","","Represents an entry of the FTP list. Gets returned when you parse a list. ",3],["microsoft.rb","files/lib/net/ftp/list/microsoft_rb.html","files/lib/net/ftp/list/microsoft_rb.html","","",3],["netware.rb","files/lib/net/ftp/list/netware_rb.html","files/lib/net/ftp/list/netware_rb.html","","",3],["parser.rb","files/lib/net/ftp/list/parser_rb.html","files/lib/net/ftp/list/parser_rb.html","","Abstract FTP LIST parser. It really just defines and documents the interface. ",3],["rumpus.rb","files/lib/net/ftp/list/rumpus_rb.html","files/lib/net/ftp/list/rumpus_rb.html","","",3],["unix.rb","files/lib/net/ftp/list/unix_rb.html","files/lib/net/ftp/list/unix_rb.html","","",3],["unknown.rb","files/lib/net/ftp/list/unknown_rb.html","files/lib/net/ftp/list/unknown_rb.html","","",3]],"searchIndex":["net","ftp","list","entry","microsoft","netware","parseerror","parser","rumpus","unix","unknown","<=>()","basename()","device?()","dir?()","directory?()","emit_entry()","eql?()","file?()","filesize()","mtime()","name()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","raise_on_failed_server_detection()","raise_on_failed_server_detection=()","raw()","server_type()","size()","symlink?()","to_s()","unknown?()","with_each_parser()","readme.txt","list.rb","entry.rb","microsoft.rb","netware.rb","parser.rb","rumpus.rb","unix.rb","unknown.rb"]}}