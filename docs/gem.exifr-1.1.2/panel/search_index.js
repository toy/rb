var search_data = {"index":{"longSearchIndex":["lib/exifr.rb","exifr","exifr","exifr","exifr","exifr","exifr::tiff","exifr::tiff","exifr::tiff","exifr::tiff","exifr::jpeg","exifr::jpeg","exifr::tiff","exifr::tiff","exifr::tiff::orientation","exifr::jpeg","exifr::tiff","exifr::jpeg","exifr::tiff","exifr::tiff::degrees","exifr::tiff","exifr::tiff","exifr::tiff","exifr::jpeg","exifr::tiff::degrees","exifr::jpeg","exifr::tiff","exifr::tiff::orientation","exifr::tiff::orientation","exifr::tiff","files/changelog.html","files/readme_rdoc.html","files/lib/exifr_rb.html","files/lib/exifr/jpeg_rb.html","files/lib/exifr/tiff_rb.html"],"info":[["EXIFR","lib/exifr/jpeg.rb","classes/EXIFR.html"," < ","Copyright (c) 2006, 2007, 2008, 2009, 2010, 2011 - R.W. van 't Veer ",1],["JPEG","EXIFR","classes/EXIFR/JPEG.html"," < Object","= JPEG decoder == Examples EXIFR::JPEG.new('IMG_3422.JPG').width         # -> 2272 EXIFR::JPEG.new('IMG_3422.JPG').exif.model",1],["MalformedImage","EXIFR","classes/EXIFR/MalformedImage.html"," < StandardError","",1],["MalformedJPEG","EXIFR","classes/EXIFR/MalformedJPEG.html"," < MalformedImage","",1],["MalformedTIFF","EXIFR","classes/EXIFR/MalformedTIFF.html"," < MalformedImage","",1],["TIFF","EXIFR","classes/EXIFR/TIFF.html"," < Object","= TIFF decoder == Date properties The properties <tt>:date_time</tt>, <tt>:date_time_original</tt>, <tt>:date_time_digitized</tt>",1],["Degrees","EXIFR::TIFF","classes/EXIFR/TIFF/Degrees.html"," < Array","",1],["Orientation","EXIFR::TIFF","classes/EXIFR/TIFF/Orientation.html"," < Object","The orientation of the image with respect to the rows and columns. ",1],["[]","EXIFR::TIFF","classes/EXIFR/TIFF.html#M000026","(index)","Get +index+ image. ",2],["each","EXIFR::TIFF","classes/EXIFR/TIFF.html#M000025","()","Yield for each image. ",2],["examine","EXIFR::JPEG","classes/EXIFR/JPEG.html#M000008","(io)","",2],["exif?","EXIFR::JPEG","classes/EXIFR/JPEG.html#M000001","()","Returns +true+ when EXIF data is available. ",2],["gps","EXIFR::TIFF","classes/EXIFR/TIFF.html#M000034","()","Get GPS location, altitude and image direction return nil when not available. ",2],["height","EXIFR::TIFF","classes/EXIFR/TIFF.html#M000032","()","Convenience method to access image height. ",2],["inspect","EXIFR::TIFF::Orientation","classes/EXIFR/TIFF/Orientation.html#M000016","()","Debugging output. ",2],["method_missing","EXIFR::JPEG","classes/EXIFR/JPEG.html#M000004","(method, *args)","Dispatch to EXIF.  When no EXIF data is available but the +method+ does exist for EXIF data +nil+ will",2],["method_missing","EXIFR::TIFF","classes/EXIFR/TIFF.html#M000027","(method, *args)","Dispatch to first image. ",2],["new","EXIFR::JPEG","classes/EXIFR/JPEG.html#M000000","(file)","+file+ is a filename or an IO object.  Hint: use StringIO when working with slurped data like blobs.",2],["new","EXIFR::TIFF","classes/EXIFR/TIFF.html#M000023","(file)","+file+ is a filename or an IO object.  Hint: use StringIO when working with slurped data like blobs.",2],["new","EXIFR::TIFF::Degrees","classes/EXIFR/TIFF/Degrees.html#M000019","(arr)","",2],["rational","EXIFR::TIFF","classes/EXIFR/TIFF.html#M000021","(n, d)","",2],["round","EXIFR::TIFF","classes/EXIFR/TIFF.html#M000022","(f, n)","",2],["size","EXIFR::TIFF","classes/EXIFR/TIFF.html#M000024","()","Number of images. ",2],["thumbnail","EXIFR::JPEG","classes/EXIFR/JPEG.html#M000002","()","Return thumbnail data when available. ",2],["to_f","EXIFR::TIFF::Degrees","classes/EXIFR/TIFF/Degrees.html#M000020","()","",2],["to_hash","EXIFR::JPEG","classes/EXIFR/JPEG.html#M000003","()","Get a hash presentation of the image. ",2],["to_hash","EXIFR::TIFF","classes/EXIFR/TIFF.html#M000033","()","Get a hash presentation of the (first) image. ",2],["to_i","EXIFR::TIFF::Orientation","classes/EXIFR/TIFF/Orientation.html#M000015","()","Field value. ",2],["transform_rmagick","EXIFR::TIFF::Orientation","classes/EXIFR/TIFF/Orientation.html#M000017","(img)","Rotate and/or flip for proper viewing. ",2],["width","EXIFR::TIFF","classes/EXIFR/TIFF.html#M000031","()","Convenience method to access image width. ",2],["CHANGELOG","files/CHANGELOG.html","files/CHANGELOG.html","","EXIF Reader 1.1.1 * feature; \"added gps convenience method to make accessing location data easier (degrees",3],["README.rdoc","files/README_rdoc.html","files/README_rdoc.html","","= EXIF Reader EXIF Reader is a module to read metadata from JPEG and TIFF images.  == Examples   EXIFR::JPEG.new('IMG_6841.JPG').width",3],["exifr.rb","files/lib/exifr_rb.html","files/lib/exifr_rb.html","","Copyright (c) 2006, 2007, 2008, 2009, 2010, 2011 - R.W. van 't Veer ",3],["jpeg.rb","files/lib/exifr/jpeg_rb.html","files/lib/exifr/jpeg_rb.html","","Copyright (c) 2006, 2007, 2008, 2009, 2010, 2011 - R.W. van 't Veer ",3],["tiff.rb","files/lib/exifr/tiff_rb.html","files/lib/exifr/tiff_rb.html","","Copyright (c) 2007, 2008, 2009, 2010, 2011 - R.W. van 't Veer ",3]],"searchIndex":["exifr","jpeg","malformedimage","malformedjpeg","malformedtiff","tiff","degrees","orientation","[]()","each()","examine()","exif?()","gps()","height()","inspect()","method_missing()","method_missing()","new()","new()","new()","rational()","round()","size()","thumbnail()","to_f()","to_hash()","to_hash()","to_i()","transform_rmagick()","width()","changelog","readme.rdoc","exifr.rb","jpeg.rb","tiff.rb"]}}