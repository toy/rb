var search_data = {"index":{"longSearchIndex":["vendor/growlnotifier/growl_helpers.rb","growl","lib/kicker/recipes/ignore.rb","lib/kicker/utils.rb","kicker","kicker","kicker::fsevents","kicker","kicker::recipes","kicker::recipes","lib/kicker/recipes/dot_kick.rb","growl::notifier","kicker::logstatushelper","kicker::recipes::rails","kicker::logstatushelper","kicker::logstatushelper","reloaddotkick","kernel","kicker::fsevents::fsevent","growl","kicker::logstatushelper","kicker::recipes::rails","kicker::recipes::ruby","kernel","kernel","reloaddotkick","kernel","kicker::fsevents::fsevent","kicker::logstatushelper","growl::notifier","growl::notifier","growl::notifier","growl::notifier","growl::notifier","kernel","growl::notifier","kernel","kernel","kernel","kernel","growl::notifier","reloaddotkick","kicker::recipes::ruby","reloaddotkick","reloaddotkick","kicker::logstatushelper","kicker::recipes::ruby","kicker::recipes::ruby","kicker::recipes::ruby","kicker::recipes::ruby","kicker::recipes::ruby","kicker::recipes::ruby","reloaddotkick","growl::notifier","growl::notifier","kicker::recipes::ruby","kicker::fsevents","kernel","kicker::logstatushelper","growl","kicker::logstatushelper","kicker::arrayext","kicker::recipes::ruby","kicker::recipes::ruby","kicker::recipes::ruby","kicker::recipes::ruby","kicker::recipes::ruby","kicker::recipes::ruby","kicker::recipes::ruby","kicker::recipes::rails","kicker::recipes::rails","reloaddotkick","files/license.html","files/readme_rdoc.html","files/lib/kicker_rb.html","files/lib/kicker/callback_chain_rb.html","files/lib/kicker/core_ext_rb.html","files/lib/kicker/fsevents_rb.html","files/lib/kicker/growl_rb.html","files/lib/kicker/log_status_helper_rb.html","files/lib/kicker/options_rb.html","files/lib/kicker/recipes_rb.html","files/lib/kicker/recipes/could_not_handle_file_rb.html","files/lib/kicker/recipes/dot_kick_rb.html","files/lib/kicker/recipes/execute_cli_command_rb.html","files/lib/kicker/recipes/ignore_rb.html","files/lib/kicker/recipes/jstest_rb.html","files/lib/kicker/recipes/rails_rb.html","files/lib/kicker/recipes/ruby_rb.html","files/lib/kicker/utils_rb.html","files/lib/kicker/version_rb.html","files/vendor/growlnotifier/growl_rb.html","files/vendor/growlnotifier/growl_helpers_rb.html"],"info":[["Growl","vendor/growlnotifier/growl.rb","classes/Growl.html"," < ","Defines a few convenience methods that you can use in your class if you include the Growl module. Eg:",1],["Notifier","Growl","classes/Growl/Notifier.html"," < OSX::NSObject","",1],["Ignore","lib/kicker/recipes/ignore.rb","classes/Ignore.html"," < ","A recipe which removes files from the files array, thus “ignoring” them. By default ignores logs, tmp,",1],["Kernel","lib/kicker/callback_chain.rb","classes/Kernel.html"," < ","",1],["ArrayExt","Kicker","classes/Kicker/ArrayExt.html"," < ","",1],["FSEvents","Kicker","classes/Kicker/FSEvents.html"," < Object","",1],["FSEvent","Kicker::FSEvents","classes/Kicker/FSEvents/FSEvent.html"," < Object","",1],["LogStatusHelper","Kicker","classes/Kicker/LogStatusHelper.html"," < Object","",1],["Rails","Kicker::Recipes","classes/Kicker/Recipes/Rails.html"," < Kicker::Recipes::Ruby","",1],["Ruby","Kicker::Recipes","classes/Kicker/Recipes/Ruby.html"," < Object","",1],["ReloadDotKick","lib/kicker/recipes/dot_kick.rb","classes/ReloadDotKick.html"," < ","",1],["add_observer","Growl::Notifier","classes/Growl/Notifier.html#M000079","(selector, name, prepend_name_and_pid)","",2],["after?","Kicker::LogStatusHelper","classes/Kicker/LogStatusHelper.html#M000024","()","",2],["all_controller_tests","Kicker::Recipes::Rails","classes/Kicker/Recipes/Rails.html#M000043","()","Returns an array consiting of all controller tests. ",2],["before?","Kicker::LogStatusHelper","classes/Kicker/LogStatusHelper.html#M000023","()","",2],["call","Kicker::LogStatusHelper","classes/Kicker/LogStatusHelper.html#M000020","(logger_type)","",2],["call","ReloadDotKick","classes/ReloadDotKick.html#M000031","(files)","",2],["execute","Kernel","classes/Kernel.html#M000066","(command, &block)","Executes the +command+, logs the output, and optionally growls. ",2],["files","Kicker::FSEvents::FSEvent","classes/Kicker/FSEvents/FSEvent.html#M000016","()","",2],["growl","Growl","classes/Growl.html#M000069","(name, title, description, options = {}, &callback)","Sends a Growl notification. See Growl::Notifier#notify for more info. ",2],["growl?","Kicker::LogStatusHelper","classes/Kicker/LogStatusHelper.html#M000022","()","",2],["handle!","Kicker::Recipes::Rails","classes/Kicker/Recipes/Rails.html#M000045","()","",2],["handle!","Kicker::Recipes::Ruby","classes/Kicker/Recipes/Ruby.html#M000064","()","This method is called to collect tests. Override this if you're subclassing and make sure to call +super+.",2],["ignore","Kernel","classes/Kernel.html#M000041","(regexp_or_string)","Adds +regexp_or_string+ as an ignore rule. require 'ignore' ignore /^data\\// ignore 'Rakefile' <em>Only",2],["last_command","Kernel","classes/Kernel.html#M000067","()","Returns the last executed command. ",2],["load!","ReloadDotKick","classes/ReloadDotKick.html#M000033","()","",2],["log","Kernel","classes/Kernel.html#M000065","(message)","Prints a +message+ with timestamp to stdout. ",2],["new","Kicker::FSEvents::FSEvent","classes/Kicker/FSEvents/FSEvent.html#M000015","(path)","",2],["new","Kicker::LogStatusHelper","classes/Kicker/LogStatusHelper.html#M000018","(proc, command)","",2],["notification_center","Growl::Notifier","classes/Growl/Notifier.html#M000077","()","",2],["notify","Growl::Notifier","classes/Growl/Notifier.html#M000072","(notification_name, title, description, options = {}, &callback)","Sends a Growl notification. * +notification_name+ : the name of one of the notifcations that your apllication",2],["onClicked","Growl::Notifier","classes/Growl/Notifier.html#M000074","(notification)","",2],["onReady","Growl::Notifier","classes/Growl/Notifier.html#M000073","(notification)","",2],["onTimeout","Growl::Notifier","classes/Growl/Notifier.html#M000075","(notification)","",2],["options","Kernel","classes/Kernel.html#M000035","()","Returns the global OptionParser instance that recipes can use to add options. ",2],["pid","Growl::Notifier","classes/Growl/Notifier.html#M000076","()","",2],["post_process","Kernel","classes/Kernel.html#M000014","(callback = nil, &block)","Adds a handler to the post_process chain. This chain is ran after the process chain and is processed",2],["pre_process","Kernel","classes/Kernel.html#M000012","(callback = nil, &block)","Adds a handler to the pre_process chain. This chain is ran before the process chain and is processed",2],["process","Kernel","classes/Kernel.html#M000013","(callback = nil, &block)","Adds a handler to the process chain. This chain is ran in between the pre_process and post_process chains.",2],["recipe","Kernel","classes/Kernel.html#M000057","(name, &block)","If only given a <tt>name</tt>, the specified recipe will be loaded. For instance, the following, in a",2],["register","Growl::Notifier","classes/Growl/Notifier.html#M000071","(application_name, notifications, default_notifications = nil, application_icon = nil)","Registers the applications metadata and the notifications, that your application might send, to Growl.",2],["remove_loaded_features!","ReloadDotKick","classes/ReloadDotKick.html#M000037","()","",2],["reset!","Kicker::Recipes::Ruby","classes/Kicker/Recipes/Ruby.html#M000050","()","",2],["reset!","ReloadDotKick","classes/ReloadDotKick.html#M000034","()","",2],["reset_chains!","ReloadDotKick","classes/ReloadDotKick.html#M000036","()","",2],["result","Kicker::LogStatusHelper","classes/Kicker/LogStatusHelper.html#M000019","(output, success, exit_code)","",2],["run_tests","Kicker::Recipes::Ruby","classes/Kicker/Recipes/Ruby.html#M000052","(tests)","Runs the given tests, if there are any, with the method defined by test_type. If test_type is `test'",2],["run_with_spec_runner","Kicker::Recipes::Ruby","classes/Kicker/Recipes/Ruby.html#M000056","(tests)","Runs the given tests with `spec' as RSpec tests. If you want to adjust the logging, stdout and growl,",2],["run_with_test_runner","Kicker::Recipes::Ruby","classes/Kicker/Recipes/Ruby.html#M000054","(tests)","Runs the given tests with `ruby' as unit-test tests. If you want to adjust the logging, stdout and growl,",2],["runner_bin","Kicker::Recipes::Ruby","classes/Kicker/Recipes/Ruby.html#M000061","()","A shortcut to Ruby.runner_bin. ",2],["runner_bin","Kicker::Recipes::Ruby","classes/Kicker/Recipes/Ruby.html#M000047","()","Returns the ruby command to run the tests with. Eg: `ruby' or `spec'. Defaults to `ruby' if test_type",2],["runner_command","Kicker::Recipes::Ruby","classes/Kicker/Recipes/Ruby.html#M000051","(*parts)","",2],["save_state","ReloadDotKick","classes/ReloadDotKick.html#M000030","()","",2],["send_registration!","Growl::Notifier","classes/Growl/Notifier.html#M000078","()","",2],["sharedInstance","Growl::Notifier","classes/Growl/Notifier.html#M000068","()","Returns the singleton instance of Growl::Notifier with which you register and send your Growl notifications.",2],["spec_runner_command","Kicker::Recipes::Ruby","classes/Kicker/Recipes/Ruby.html#M000055","(tests)","",2],["start_watching","Kicker::FSEvents","classes/Kicker/FSEvents.html#M000017","(paths, options={}, &block)","",2],["startup","Kernel","classes/Kernel.html#M000011","(callback = nil, &block)","Adds a handler to the startup chain. This chain is ran once Kicker is done loading _before_ starting",2],["stdout?","Kicker::LogStatusHelper","classes/Kicker/LogStatusHelper.html#M000021","()","",2],["sticky_growl","Growl","classes/Growl.html#M000070","(name, title, description, options = {}, &callback)","Sends a sticky Growl notification. See Growl::Notifier#notify for more info. ",2],["success?","Kicker::LogStatusHelper","classes/Kicker/LogStatusHelper.html#M000025","()","",2],["take_and_map","Kicker::ArrayExt","classes/Kicker/ArrayExt.html#M000000","(pattern = nil, flatten_and_compact = true)","Deletes elements from self for which the block evaluates to +true+. A new array is returned with those",2],["test_cases_root","Kicker::Recipes::Ruby","classes/Kicker/Recipes/Ruby.html#M000048","()","Returns the root directory of where test cases will be looked up. Defaults to the value of test_type.",2],["test_cases_root","Kicker::Recipes::Ruby","classes/Kicker/Recipes/Ruby.html#M000062","()","A shortcut to Ruby.test_cases_root. ",2],["test_file","Kicker::Recipes::Ruby","classes/Kicker/Recipes/Ruby.html#M000063","(name)","Returns the file for +name+ if it exists. test_file('foo') # => \"test/foo_test.rb\" test_file('foo/bar')",2],["test_options","Kicker::Recipes::Ruby","classes/Kicker/Recipes/Ruby.html#M000049","()","Assigns extra options that are to be passed on to the runner_bin. Ruby.test_options << '-I ./lib/foo'",2],["test_runner_command","Kicker::Recipes::Ruby","classes/Kicker/Recipes/Ruby.html#M000053","(tests)","",2],["test_type","Kicker::Recipes::Ruby","classes/Kicker/Recipes/Ruby.html#M000060","()","A shortcut to Ruby.test_type. ",2],["test_type","Kicker::Recipes::Ruby","classes/Kicker/Recipes/Ruby.html#M000046","()","Returns the type of tests to run. Eg: `test' or `spec'. Defaults to `test' if no `spec' directory exists.",2],["tests_for_model","Kicker::Recipes::Rails","classes/Kicker/Recipes/Rails.html#M000044","(model)","Returns an array of all tests related to the given model. ",2],["type_to_test_dir","Kicker::Recipes::Rails","classes/Kicker/Recipes/Rails.html#M000042","(type)","Maps +type+, for instance `models', to a test directory. ",2],["use?","ReloadDotKick","classes/ReloadDotKick.html#M000032","()","",2],["LICENSE","files/LICENSE.html","files/LICENSE.html","","Kicker:  Copyright (c) 2009 Eloy Duran <eloy.de.enige@gmail.com>  Permission is hereby granted, free",3],["README.rdoc","files/README_rdoc.html","files/README_rdoc.html","","= Kicker  {<img src=\"https://secure.travis-ci.org/alloy/kicker.png\" />}[http://travis-ci.org/alloy/kicker]",3],["kicker.rb","files/lib/kicker_rb.html","files/lib/kicker_rb.html","","",3],["callback_chain.rb","files/lib/kicker/callback_chain_rb.html","files/lib/kicker/callback_chain_rb.html","","",3],["core_ext.rb","files/lib/kicker/core_ext_rb.html","files/lib/kicker/core_ext_rb.html","","",3],["fsevents.rb","files/lib/kicker/fsevents_rb.html","files/lib/kicker/fsevents_rb.html","","encoding: utf-8 ",3],["growl.rb","files/lib/kicker/growl_rb.html","files/lib/kicker/growl_rb.html","","",3],["log_status_helper.rb","files/lib/kicker/log_status_helper_rb.html","files/lib/kicker/log_status_helper_rb.html","","",3],["options.rb","files/lib/kicker/options_rb.html","files/lib/kicker/options_rb.html","","",3],["recipes.rb","files/lib/kicker/recipes_rb.html","files/lib/kicker/recipes_rb.html","","",3],["could_not_handle_file.rb","files/lib/kicker/recipes/could_not_handle_file_rb.html","files/lib/kicker/recipes/could_not_handle_file_rb.html","","",3],["dot_kick.rb","files/lib/kicker/recipes/dot_kick_rb.html","files/lib/kicker/recipes/dot_kick_rb.html","","",3],["execute_cli_command.rb","files/lib/kicker/recipes/execute_cli_command_rb.html","files/lib/kicker/recipes/execute_cli_command_rb.html","","",3],["ignore.rb","files/lib/kicker/recipes/ignore_rb.html","files/lib/kicker/recipes/ignore_rb.html","","A recipe which removes files from the files array, thus “ignoring” them. By default ignores logs, tmp,",3],["jstest.rb","files/lib/kicker/recipes/jstest_rb.html","files/lib/kicker/recipes/jstest_rb.html","","",3],["rails.rb","files/lib/kicker/recipes/rails_rb.html","files/lib/kicker/recipes/rails_rb.html","","",3],["ruby.rb","files/lib/kicker/recipes/ruby_rb.html","files/lib/kicker/recipes/ruby_rb.html","","",3],["utils.rb","files/lib/kicker/utils_rb.html","files/lib/kicker/utils_rb.html","","",3],["version.rb","files/lib/kicker/version_rb.html","files/lib/kicker/version_rb.html","","",3],["growl.rb","files/vendor/growlnotifier/growl_rb.html","files/vendor/growlnotifier/growl_rb.html","","",3],["growl_helpers.rb","files/vendor/growlnotifier/growl_helpers_rb.html","files/vendor/growlnotifier/growl_helpers_rb.html","","",3]],"searchIndex":["growl","notifier","ignore","kernel","arrayext","fsevents","fsevent","logstatushelper","rails","ruby","reloaddotkick","add_observer()","after?()","all_controller_tests()","before?()","call()","call()","execute()","files()","growl()","growl?()","handle!()","handle!()","ignore()","last_command()","load!()","log()","new()","new()","notification_center()","notify()","onclicked()","onready()","ontimeout()","options()","pid()","post_process()","pre_process()","process()","recipe()","register()","remove_loaded_features!()","reset!()","reset!()","reset_chains!()","result()","run_tests()","run_with_spec_runner()","run_with_test_runner()","runner_bin()","runner_bin()","runner_command()","save_state()","send_registration!()","sharedinstance()","spec_runner_command()","start_watching()","startup()","stdout?()","sticky_growl()","success?()","take_and_map()","test_cases_root()","test_cases_root()","test_file()","test_options()","test_runner_command()","test_type()","test_type()","tests_for_model()","type_to_test_dir()","use?()","license","readme.rdoc","kicker.rb","callback_chain.rb","core_ext.rb","fsevents.rb","growl.rb","log_status_helper.rb","options.rb","recipes.rb","could_not_handle_file.rb","dot_kick.rb","execute_cli_command.rb","ignore.rb","jstest.rb","rails.rb","ruby.rb","utils.rb","version.rb","growl.rb","growl_helpers.rb"]}}